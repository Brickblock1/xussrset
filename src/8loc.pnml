#define engines_list1()                                                                         \
   STORE_TEMP(0, 4),                                                                            \
/* паровозы */                                                                                  \
   STORE_TEMP(                                                                                  \
    (LOAD_TEMP(3) == steam_9p) ||                                                               \
    (LOAD_TEMP(3) == d_schneider) ||                                                            \
    (LOAD_TEMP(3) == steam_f) ||                                                                \
    (LOAD_TEMP(3) == steam_el) || (LOAD_TEMP(3) == steam_ea) || (LOAD_TEMP(3) == steam_er) ||   \
    (LOAD_TEMP(3) == steam_e) || (LOAD_TEMP(3) == steam_eu) || (LOAD_TEMP(3) == steam_em) ||    \
    (LOAD_TEMP(3) == fd20) || (LOAD_TEMP(3) == fd21) ||                                         \
    (LOAD_TEMP(3) == is20) || (LOAD_TEMP(3) == is21) ||                                         \
    (LOAD_TEMP(3) == l231) || (LOAD_TEMP(3) == l150) || (LOAD_TEMP(3) == steam_lv) ||           \
    (LOAD_TEMP(3) == so17) ||                                                                   \
    (LOAD_TEMP(3) == steam_s) || (LOAD_TEMP(3) == steam_su) ||                                  \
    (LOAD_TEMP(3) == steam_u) ||                                                                \
    (LOAD_TEMP(3) == p12) || (LOAD_TEMP(3) == p36) || (LOAD_TEMP(3) == p38) ||                  \
    (LOAD_TEMP(3) == steam_te) || (LOAD_TEMP(3) == steam_tk) ||                                 \
    (LOAD_TEMP(3) == steam_r) ||                                                                \
    (LOAD_TEMP(3) == steam_t) ||                                                                \
    (LOAD_TEMP(3) == chn) ||                                                                    \
    (LOAD_TEMP(3) == mzk) ||                                                                    \
    (LOAD_TEMP(3) == steam_nv) || (LOAD_TEMP(3) == steam_nd) ||                                 \
    (LOAD_TEMP(3) == steam_ov) ||                                                               \
    (LOAD_TEMP(3) == steam_h) ||                                                                \
    (LOAD_TEMP(3) == steam_zh) ||                                                               \
    (LOAD_TEMP(3) == steam_y) || (LOAD_TEMP(3) == izhitsa) ||                                   \
    LOAD_TEMP(4), 4),                                                                           \
/* тепловозы */                                                                                 \
   STORE_TEMP(                                                                                  \
    (LOAD_TEMP(3) == _mx) ||                                                                    \
    (LOAD_TEMP(3) == chme3) || (LOAD_TEMP(3) == chme3t) ||                                      \
    (LOAD_TEMP(3) == eel) ||                                                                    \
    (LOAD_TEMP(3) == m32) ||                                                                    \
    (LOAD_TEMP(3) == m62) || (LOAD_TEMP(3) == _2m62) || (LOAD_TEMP(3) == dm62) ||               \
    (LOAD_TEMP(3) == _2m62u) || (LOAD_TEMP(3) == _3m62u) || (LOAD_TEMP(3) == _3m62u_m) ||       \
    (LOAD_TEMP(3) == te10) || (LOAD_TEMP(3) == tep10l) || (LOAD_TEMP(3) == tep10) ||            \
    (LOAD_TEMP(3) == _2te10) ||                                                                 \
     LOAD_TEMP(4), 4),                                                                          \
   STORE_TEMP(                                                                                  \
    (LOAD_TEMP(3) == _2te10l) || (LOAD_TEMP(3) == _2te10v) || (LOAD_TEMP(3) == _2te10ut) ||     \
    (LOAD_TEMP(3) == _2te10mk) || (LOAD_TEMP(3) == _2te40) || (LOAD_TEMP(3) == _2te10utk) ||    \
    (LOAD_TEMP(3) == _2te10m) || (LOAD_TEMP(3) == _3te10m) || (LOAD_TEMP(3) == _3te10m_m) ||    \
    (LOAD_TEMP(3) == _2te10u) || (LOAD_TEMP(3) == _3te10u) || (LOAD_TEMP(3) == _3te10u_m) ||    \
    (LOAD_TEMP(3) == _2te10s) || (LOAD_TEMP(3) == _4te10s) || (LOAD_TEMP(3) == _4te10s_m) ||    \
     (LOAD_TEMP(3) == te50) ||                                                                  \
    LOAD_TEMP(4), 4),                                                                           \
   STORE_TEMP(                                                                                  \
    (LOAD_TEMP(3) == _2te116) || (LOAD_TEMP(3) == _2te116u) ||                                  \
    (LOAD_TEMP(3) == tep60) || (LOAD_TEMP(3) == _2tep60) || (LOAD_TEMP(3) == tep150) ||         \
    (LOAD_TEMP(3) == _2te70) ||                                                                 \
    (LOAD_TEMP(3) == tep70) || (LOAD_TEMP(3) == tep70u) || (LOAD_TEMP(3) == tep70bs) ||         \
    (LOAD_TEMP(3) == _2te25a) || (LOAD_TEMP(3) == _2te25km) ||                                  \
    (LOAD_TEMP(3) == _3te25k2m) || (LOAD_TEMP(3) == _3te25k2m_m) ||                             \
    (LOAD_TEMP(3) == diesel_da) || (LOAD_TEMP(3) == _2te121) ||                                 \
    (LOAD_TEMP(3) == te1) ||                                                                    \
    (LOAD_TEMP(3) == te2) ||                                                                    \
    (LOAD_TEMP(3) == te3) ||                                                                    \
    (LOAD_TEMP(3) == te7) ||                                                                    \
    (LOAD_TEMP(3) == te109) ||                                                                  \
    LOAD_TEMP(4), 4),                                                                           \
   STORE_TEMP(                                                                                  \
    (LOAD_TEMP(3) == tem1) || (LOAD_TEMP(3) == tem18) || (LOAD_TEMP(3) == tem18dm) ||           \
    (LOAD_TEMP(3) == tem2) || (LOAD_TEMP(3) == tem2u) || (LOAD_TEMP(3) == tem2um) ||            \
    (LOAD_TEMP(3) == tem7) || (LOAD_TEMP(3) == tem7a) ||                                        \
    (LOAD_TEMP(3) == tem9) || (LOAD_TEMP(3) == tem14) ||                                        \
    (LOAD_TEMP(3) == tera1) || (LOAD_TEMP(3) == te33a) ||                                       \
    (LOAD_TEMP(3) == tgm23b) || (LOAD_TEMP(3) == tgm23v) || (LOAD_TEMP(3) == tgm23d) ||         \
    (LOAD_TEMP(3) == tgm3) || (LOAD_TEMP(3) == tgm3a) || (LOAD_TEMP(3) == tgm3b) ||             \
    (LOAD_TEMP(3) == tgm4) ||                                                                   \
    (LOAD_TEMP(3) == tgk) || (LOAD_TEMP(3) == tgk2) ||                                          \
    (LOAD_TEMP(3) == tg100) || (LOAD_TEMP(3) == tg102) ||                                       \
    LOAD_TEMP(4), 4),                                                                           \


#define engines_list2()                                                                                  \
/* электровозы */                                                                                        \
   STORE_TEMP(                                                                                           \
    (LOAD_TEMP(3) == chs1) ||                                                                            \
    (LOAD_TEMP(3) == chs2) ||                                                                            \
    (LOAD_TEMP(3) == chs3) ||                                                                            \
    (LOAD_TEMP(3) == chs2t) ||                                                                           \
    (LOAD_TEMP(3) == chs4) || (LOAD_TEMP(3) == chs4t) ||                                                 \
    (LOAD_TEMP(3) == chs7) ||                                                                            \
    (LOAD_TEMP(3) == chs6) ||                                                                            \
    (LOAD_TEMP(3) == chs8) ||                                                                            \
    (LOAD_TEMP(3) == chs200) || (LOAD_TEMP(3) == chs200_57er) ||                                         \
    (LOAD_TEMP(3) == ds3) ||                                                                             \
    (LOAD_TEMP(3) == ep2k) ||                                                                            \
    (LOAD_TEMP(3) == ep1) || (LOAD_TEMP(3) == ep1m) || (LOAD_TEMP(3) == ep1p) ||                         \
    (LOAD_TEMP(3) == ep10) ||                                                                            \
    (LOAD_TEMP(3) == ep20) ||                                                                            \
    (LOAD_TEMP(3) == _2el5) ||                                                                           \
    (LOAD_TEMP(3) == _2es4k) || (LOAD_TEMP(3) == _3es4k) || (LOAD_TEMP(3) == _3es4k_m) ||                \
    (LOAD_TEMP(3) == _2es5) || (LOAD_TEMP(3) == _2es5s) ||                                               \
    (LOAD_TEMP(3) == _2es10) || (LOAD_TEMP(3) == _2es10_m) ||                                            \
    (LOAD_TEMP(3) == e5k) || (LOAD_TEMP(3) == _4es5k) ||                                                 \
    (LOAD_TEMP(3) == _2es5k) || (LOAD_TEMP(3) == _3es5k) || (LOAD_TEMP(3) == _3es5k_m) ||                \
    (LOAD_TEMP(3) == _2es6) || (LOAD_TEMP(3) == _2es6_m) ||                                              \
    (LOAD_TEMP(3) == _2ev120) ||                                                                         \
    (LOAD_TEMP(3) == _13e) || (LOAD_TEMP(3) == _21e) || (LOAD_TEMP(3) == pe150) ||                       \
    (LOAD_TEMP(3) == el1) || (LOAD_TEMP(3) == el21) ||                                                   \
    LOAD_TEMP(4), 4),                                                                                    \
   STORE_TEMP(                                                                                           \
    (LOAD_TEMP(3) == electric_f) || (LOAD_TEMP(3) == electric_fp) ||                                     \
    (LOAD_TEMP(3) == vl8) ||                                                                             \
    (LOAD_TEMP(3) == vl10) || (LOAD_TEMP(3) == vl10u) ||                                                 \
    (LOAD_TEMP(3) == vl11) || (LOAD_TEMP(3) == vl11m) ||                                                 \
    (LOAD_TEMP(3) == vl15) ||                                                                            \
    (LOAD_TEMP(3) == vl19) ||                                                                            \
    (LOAD_TEMP(3) == vl22) || (LOAD_TEMP(3) == vl22m) ||                                                 \
    (LOAD_TEMP(3) == vl23) ||                                                                            \
    (LOAD_TEMP(3) == vl60) || (LOAD_TEMP(3) == vl60k) || (LOAD_TEMP(3) == vl60p) ||                      \
    (LOAD_TEMP(3) == vl61) ||                                                                            \
    (LOAD_TEMP(3) == vl65) ||                                                                            \
    (LOAD_TEMP(3) == vl80) || (LOAD_TEMP(3) == vl80k) || (LOAD_TEMP(3) == vl80t) ||                      \
    (LOAD_TEMP(3) == vl82) || (LOAD_TEMP(3) == vl82m) || (LOAD_TEMP(3) == vl80s) ||                      \
    (LOAD_TEMP(3) == vl85) ||                                                                            \
    (LOAD_TEMP(3) == electric_ss) || (LOAD_TEMP(3) == electric_sk) || (LOAD_TEMP(3) == electric_si) ||   \
    LOAD_TEMP(4), 4)                                                                                     \

#define check_loco_limit_can_attach_wagon(num,num2)                 \
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_a_##num,   \
[ engines_list2() ])                                                \
{ 1: loco_limit_can_attach_wagon_##num2;                            \
     return CB_RESULT_ATTACH_ALLOW; }                               \
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_##num,     \
[ set_offset_to(num_vehs_in_consist - 2 * num),                     \
  STORE_TEMP(prev_vehicle_type_id(), 3),                            \
  engines_list1() ])                                                \
{ loco_limit_can_attach_wagon_a_##num; }                            \

// Специальная проверка длины состава

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_end, 0)
{
  return string(STR_CAN_ATTACH_8LOC);
}

check_loco_limit_can_attach_wagon(8,end)
check_loco_limit_can_attach_wagon(7,8)
check_loco_limit_can_attach_wagon(6,7)
check_loco_limit_can_attach_wagon(5,6)
check_loco_limit_can_attach_wagon(4,5)
check_loco_limit_can_attach_wagon(3,4)
check_loco_limit_can_attach_wagon(2,3)
check_loco_limit_can_attach_wagon(1,2)

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon2,
[ engines_list2() ])
{
  1: loco_limit_can_attach_wagon_1;
     return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon1,
[ STORE_TEMP(LOAD_TEMP(5), 3),
  engines_list1() ])
{
  loco_limit_can_attach_wagon2;
}

// вагоны, присоединение которых допустимо только к определённому вагону

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon8,
[ set_offset_to(num_vehs_in_consist-18),
  prev_vehicle_type_id() ])
{
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon7,
[ set_offset_to(num_vehs_in_consist-16),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon8;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon6,
[ set_offset_to(num_vehs_in_consist-14),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon7;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon5,
[ set_offset_to(num_vehs_in_consist-12),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon6;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon4,
[ set_offset_to(num_vehs_in_consist-10),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon5;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon3,
[ set_offset_to(num_vehs_in_consist-8),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon4;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon2,
[ set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon3;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon1,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon2;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, PARENT, mail_61_4504_can_attach_wagon0,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  mail_61_4504: mail_61_4504_can_attach_wagon1;
  mail_61_4505: loco_limit_can_attach_wagon1;
                return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_MODEL_NUMBER2, 61, 4505));
}

switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon0,
   vehicle_type_id)
{
  mail_61_4504: mail_61_4504_can_attach_wagon0;
                loco_limit_can_attach_wagon1;
}

// ограничение для присоединения вагонов, не имеющих совместиой с СА-3 сцепки - ДПКр2, РА2, ЭР200, ЭШ2, ЭС2Г, ЭП2Д, ЭП3Д и им подобные

switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_all_c,
  vehicle_type_id)
{
  dpkr2_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_DPKR2));
    ra2_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_RA2));
  es2g_mn: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ES2G));
   es2g_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ES2G));
  es2g_cp: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ES2G));
  er200_m: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ER200));
  er200_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ER200));
  esh2_m1: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ESH2));
  esh2_m2: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ESH2));
   esh2_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ESH2));
   ep2d_m: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP2D));
   ep2d_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP2D));
   ep2d_h: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP2D));
   ep3d_m: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP3D));
   ep3d_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP3D));
           loco_limit_can_attach_wagon0;
}

 /// проверка dpkr2
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_dpkr2_h_h_check,
  (count_veh_id(dpkr2_h1) + count_veh_id(dpkr2_h2)) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_dpkr2_h_h_check0,
  (count_veh_id(dpkr2_h1) + count_veh_id(dpkr2_h2)) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_DPKR2));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка dpkr2_h-dpkr2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_dpkr2_h_h,
  vehicle_type_id)
{
   dpkr2_c: return loco_limit_can_attach_wagon_dpkr2_h_h_check;
  dpkr2_h1: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h2: return CB_RESULT_ATTACH_ALLOW;
         loco_limit_can_attach_wagon_dpkr2_h_h_check0;
}

// проверка dpkr2_c-dpkr2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_dpkr2_c_h,
  vehicle_type_id)
{
   dpkr2_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
  dpkr2_h1: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h2: return CB_RESULT_ATTACH_ALLOW;
            loco_limit_can_attach_wagon_all_c;
}

// проверка (not es2)-dpkr2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_dpkr2_0_h,
  vehicle_type_id)
{
   dpkr2_c: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h1: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h2: return CB_RESULT_ATTACH_ALLOW;
            return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_DPKR2));
}

// проверка dpkr2_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_dpkr2_c,
  vehicle_type_id)
{
   dpkr2_c: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h1: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h2: return CB_RESULT_ATTACH_ALLOW;
            return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_DPKR2));
}

// проверка (*)-dpkr2_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_dpkr2_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
   dpkr2_c: loco_limit_can_attach_wagon_dpkr2_c_h;
  dpkr2_h1: loco_limit_can_attach_wagon_dpkr2_h_h;
  dpkr2_h2: loco_limit_can_attach_wagon_dpkr2_h_h;
           loco_limit_can_attach_wagon_dpkr2_0_h;
}

 /// проверка ra2
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ra2_h_h_check,
  count_veh_id(ra2_h) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ra2_h_h_check0,
  count_veh_id(ra2_h) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_RA2));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка ra2_h-ra2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ra2_h_h,
  vehicle_type_id)
{
  ra2_c: return loco_limit_can_attach_wagon_ra2_h_h_check;
  ra2_h: return CB_RESULT_ATTACH_ALLOW;
         loco_limit_can_attach_wagon_ra2_h_h_check0;
}

// проверка ra2_c-ra2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ra2_c_h,
  vehicle_type_id)
{
  ra2_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
  ra2_h: return CB_RESULT_ATTACH_ALLOW;
         loco_limit_can_attach_wagon_all_c;
}

// проверка (not es2)-ra2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ra2_0_h,
  vehicle_type_id)
{
  ra2_c: return CB_RESULT_ATTACH_ALLOW;
  ra2_h: return CB_RESULT_ATTACH_ALLOW;
         return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_RA2));
}

// проверка ra2_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ra2_c,
  vehicle_type_id)
{
  ra2_c: return CB_RESULT_ATTACH_ALLOW;
  ra2_h: return CB_RESULT_ATTACH_ALLOW;
         return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_RA2));
}

// проверка (*)-ra2_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ra2_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  ra2_c: loco_limit_can_attach_wagon_ra2_c_h;
  ra2_h: loco_limit_can_attach_wagon_ra2_h_h;
         loco_limit_can_attach_wagon_ra2_0_h;
}

 /// проверка es2g
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_es2g_h_h_check,
  count_veh_id(es2g_hm) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_es2g_h_h_check0,
  count_veh_id(es2g_hm) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ES2G));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка es2g_h-es2g_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_es2g_h_h,
  vehicle_type_id)
{
  es2g_mn: return loco_limit_can_attach_wagon_es2g_h_h_check;
   es2g_c: return loco_limit_can_attach_wagon_es2g_h_h_check;
  es2g_cp: return loco_limit_can_attach_wagon_es2g_h_h_check;
  es2g_hm: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_es2g_h_h_check0;
}

// проверка es2g_c-es2g_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_es2g_c_h,
  vehicle_type_id)
{
  es2g_mn: return string(STR_CAN_ATTACH_HEAD_ONLY);
   es2g_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
  es2g_cp: return string(STR_CAN_ATTACH_HEAD_ONLY);
  es2g_hm: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_all_c;
}

// проверка (not es2)-es2g_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_es2g_0_h,
  vehicle_type_id)
{
  es2g_mn: return CB_RESULT_ATTACH_ALLOW;
   es2g_c: return CB_RESULT_ATTACH_ALLOW;
  es2g_cp: return CB_RESULT_ATTACH_ALLOW;
  es2g_hm: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ES2G));
}

// проверка es2g_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_es2g_c,
  vehicle_type_id)
{
  es2g_mn: return CB_RESULT_ATTACH_ALLOW;
   es2g_c: return CB_RESULT_ATTACH_ALLOW;
  es2g_cp: return CB_RESULT_ATTACH_ALLOW;
  es2g_hm: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ES2G));
}

// проверка (*)-es2g_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_es2g_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  es2g_mn: loco_limit_can_attach_wagon_es2g_c_h;
   es2g_c: loco_limit_can_attach_wagon_es2g_c_h;
  es2g_cp: loco_limit_can_attach_wagon_es2g_c_h;
  es2g_hm: loco_limit_can_attach_wagon_es2g_h_h;
           loco_limit_can_attach_wagon_es2g_0_h;
}

 /// проверка er200
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_er200_h_h_check,
  count_veh_id(er200_h) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_er200_h_h_check0,
  count_veh_id(er200_h) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ER200));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка er200_h-er200_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_er200_h_h,
  vehicle_type_id)
{
   er200_m: return loco_limit_can_attach_wagon_er200_h_h_check;
   er200_c: return loco_limit_can_attach_wagon_er200_h_h_check;
   er200_h: return CB_RESULT_ATTACH_ALLOW;
            loco_limit_can_attach_wagon_er200_h_h_check0;
}

// проверка er200_c-er200_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_er200_c_h,
  vehicle_type_id)
{
  er200_m: return string(STR_CAN_ATTACH_HEAD_ONLY);
  er200_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
  er200_h: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_all_c;
}

// проверка (not er200)-er200_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_er200_0_h,
  vehicle_type_id)
{
  er200_m: return CB_RESULT_ATTACH_ALLOW;
  er200_c: return CB_RESULT_ATTACH_ALLOW;
  er200_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ER200));
}

// проверка (*)-er200_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_er200_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  er200_m: loco_limit_can_attach_wagon_er200_c_h;
  er200_c: loco_limit_can_attach_wagon_er200_c_h;
  er200_h: loco_limit_can_attach_wagon_er200_h_h;
           loco_limit_can_attach_wagon_er200_0_h;
}

// проверка er200_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_er200_c,
  vehicle_type_id)
{
  er200_m: return CB_RESULT_ATTACH_ALLOW;
  er200_c: return CB_RESULT_ATTACH_ALLOW;
  er200_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ER200));
}

 /// проверка esh2
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_esh2_h_h_check,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_esh2_h_h_check0,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ESH2));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка esh2_h-esh2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_esh2_h_h,
  vehicle_type_id)
{
  esh2_m1: return loco_limit_can_attach_wagon_esh2_h_h_check;
  esh2_m2: return loco_limit_can_attach_wagon_esh2_h_h_check;
   esh2_c: return loco_limit_can_attach_wagon_esh2_h_h_check;
  esh2_h1: return CB_RESULT_ATTACH_ALLOW;
  esh2_h2: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_esh2_h_h_check0;
}

// проверка esh2_c-esh2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_esh2_c_h,
  vehicle_type_id)
{
  esh2_m1: return string(STR_CAN_ATTACH_HEAD_ONLY);
  esh2_m2: return string(STR_CAN_ATTACH_HEAD_ONLY);
   esh2_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
  esh2_h1: return CB_RESULT_ATTACH_ALLOW;
  esh2_h2: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_all_c;
}

// проверка (not esh2)-esh2_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_esh2_0_h,
  vehicle_type_id)
{
  esh2_m1: return CB_RESULT_ATTACH_ALLOW;
  esh2_m2: return CB_RESULT_ATTACH_ALLOW;
   esh2_c: return CB_RESULT_ATTACH_ALLOW;
  esh2_h1: return CB_RESULT_ATTACH_ALLOW;
  esh2_h2: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ESH2));
}

// проверка (*)-esh2_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_esh2_h,
[ set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id() ])
{
       esh2_m1: loco_limit_can_attach_wagon_esh2_c_h;
       esh2_m2: loco_limit_can_attach_wagon_esh2_c_h;
        esh2_c: loco_limit_can_attach_wagon_esh2_c_h;
  esh2_h_part2: loco_limit_can_attach_wagon_esh2_h_h;
           loco_limit_can_attach_wagon_esh2_0_h;
}

// проверка esh2_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_esh2_c,
  vehicle_type_id)
{
  esh2_m1: return CB_RESULT_ATTACH_ALLOW;
  esh2_m2: return CB_RESULT_ATTACH_ALLOW;
   esh2_c: return CB_RESULT_ATTACH_ALLOW;
  esh2_h1: return CB_RESULT_ATTACH_ALLOW;
  esh2_h2: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ESH2));
}

 /// проверка ep2d
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ep2d_h_h_check,
  (count_veh_id(ep2d_h) + count_veh_id(ep2d_hm)) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ep2d_h_h_check0,
  (count_veh_id(ep2d_h) + count_veh_id(ep2d_hm)) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_EP2D));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка ep2d_h-ep2d_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep2d_h_h,
  vehicle_type_id)
{
   ep2d_m: return loco_limit_can_attach_wagon_ep2d_h_h_check;
   ep2d_c: return loco_limit_can_attach_wagon_ep2d_h_h_check;
   ep2d_h: return CB_RESULT_ATTACH_ALLOW;
  ep2d_hm: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_ep2d_h_h_check0;
}

// проверка ep2d_c-ep2d_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep2d_c_h,
  vehicle_type_id)
{
   ep2d_m: return string(STR_CAN_ATTACH_HEAD_ONLY);
   ep2d_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
   ep2d_h: return CB_RESULT_ATTACH_ALLOW;
  ep2d_hm: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_all_c;
}

// проверка (not ep2d)-ep2d_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep2d_0_h,
  vehicle_type_id)
{
   ep2d_m: return CB_RESULT_ATTACH_ALLOW;
   ep2d_c: return CB_RESULT_ATTACH_ALLOW;
   ep2d_h: return CB_RESULT_ATTACH_ALLOW;
  ep2d_hm: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_EP2D));
}

// проверка (*)-ep2d_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ep2d_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
   ep2d_m: loco_limit_can_attach_wagon_ep2d_c_h;
   ep2d_c: loco_limit_can_attach_wagon_ep2d_c_h;
   ep2d_h: loco_limit_can_attach_wagon_ep2d_h_h;
  ep2d_hm: loco_limit_can_attach_wagon_ep2d_h_h;
           loco_limit_can_attach_wagon_ep2d_0_h;
}

// проверка ep2d_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep2d_c,
  vehicle_type_id)
{
   ep2d_m: return CB_RESULT_ATTACH_ALLOW;
   ep2d_c: return CB_RESULT_ATTACH_ALLOW;
   ep2d_h: return CB_RESULT_ATTACH_ALLOW;
  ep2d_hm: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_EP2D));
}

 /// проверка ep3d
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ep3d_h_h_check,
  count_veh_id(ep3d_h) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ep3d_h_h_check0,
  count_veh_id(ep3d_h) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_EP3D));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка ep3d_h-ep3d_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep3d_h_h,
  vehicle_type_id)
{
   ep3d_m: return loco_limit_can_attach_wagon_ep3d_h_h_check;
   ep3d_c: return loco_limit_can_attach_wagon_ep3d_h_h_check;
   ep3d_h: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_ep3d_h_h_check0;
}

// проверка ep3d_c-ep3d_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep3d_c_h,
  vehicle_type_id)
{
   ep3d_m: return string(STR_CAN_ATTACH_HEAD_ONLY);
   ep3d_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
   ep3d_h: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_all_c;
}

// проверка (not ep3d)-ep3d_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep3d_0_h,
  vehicle_type_id)
{
   ep3d_m: return CB_RESULT_ATTACH_ALLOW;
   ep3d_c: return CB_RESULT_ATTACH_ALLOW;
   ep3d_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_EP3D));
}

// проверка (*)-ep3d_h
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ep3d_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
   ep3d_m: loco_limit_can_attach_wagon_ep3d_c_h;
   ep3d_c: loco_limit_can_attach_wagon_ep3d_c_h;
   ep3d_h: loco_limit_can_attach_wagon_ep3d_h_h;
           loco_limit_can_attach_wagon_ep3d_0_h;
}

// проверка ep3d_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ep3d_c,
  vehicle_type_id)
{
   ep3d_m: return CB_RESULT_ATTACH_ALLOW;
   ep3d_c: return CB_RESULT_ATTACH_ALLOW;
   ep3d_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_EP3D));
}

 /// проверка ed4m
// проверка нечётности количества голов в составе
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ed4m_h_h_check,
  count_veh_id(ed4m_h) % 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ed4m_h_h_check0,
  count_veh_id(ed4m_h) % 2)
{
  1: return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ED4M));
     return CB_RESULT_ATTACH_ALLOW;
}

// проверка ed4m_h-ed4m_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_h_h,
  vehicle_type_id)
{
   ed4m_m: return loco_limit_can_attach_wagon_ed4m_h_h_check;
   ed4m_c: return loco_limit_can_attach_wagon_ed4m_h_h_check;
   ed4m_h: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_ed4m_h_h_check0;
}

// проверка ed4m_c-ed4m_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_c_h,
  vehicle_type_id)
{
   ed4m_m: return string(STR_CAN_ATTACH_HEAD_ONLY);
   ed4m_c: return string(STR_CAN_ATTACH_HEAD_ONLY);
   ed4m_h: return CB_RESULT_ATTACH_ALLOW;
           loco_limit_can_attach_wagon_all_c;
}

// проверка (not ed4m)-ed4m_h+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_0_h,
  vehicle_type_id)
{
   ed4m_m: return CB_RESULT_ATTACH_ALLOW;
   ed4m_c: return CB_RESULT_ATTACH_ALLOW;
   ed4m_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ED4M));
}

// проверка (*)-ed4m_h
// для головных вагонов ЭД4М не осуществляется проверка года постройки, так как код проверки
// возможности выпуска ПС из депо проверяет только сумму голов по ID, так как не знает, на каких позициях стоит ПС
// поэтому для голов ЭД4М годов постройки до 2010 используются те же правила (только парная сборка) что и для после 2010
switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon_ed4m_h,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
   ed4m_m: loco_limit_can_attach_wagon_ed4m_c_h;
   ed4m_c: loco_limit_can_attach_wagon_ed4m_c_h;
   ed4m_h: loco_limit_can_attach_wagon_ed4m_h_h;
           loco_limit_can_attach_wagon_ed4m_0_h;
}

// проверка ed4m_c+(*)
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_c2,
  vehicle_type_id)
{
   ed4m_m: return CB_RESULT_ATTACH_ALLOW;
   ed4m_c: return CB_RESULT_ATTACH_ALLOW;
   ed4m_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_SPECIFIED_CAR, string(STR_NAME_ED4M));
}

switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_c,
  build_year >= 2010)
{
  1: loco_limit_can_attach_wagon_ed4m_c2;
     loco_limit_can_attach_wagon0;
}

 /// проверка са-3
// проверка (са-3 veh)+(*)
// ЭД4М нельзя присоединять только для моделей, построенных с 2010 года
switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_after_other_c,
  build_year >= 2010)
{
  1: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ED4M));
     loco_limit_can_attach_wagon0;
}

switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_ed4m_after_other_h,
  build_year >= 2010)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     loco_limit_can_attach_wagon0;
}

switch (FEAT_TRAINS, SELF, loco_limit_can_attach_wagon_after_other,
  vehicle_type_id)
{
   dpkr2_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_DPKR2));
  dpkr2_h1: return CB_RESULT_ATTACH_ALLOW;
  dpkr2_h2: return CB_RESULT_ATTACH_ALLOW;
     ra2_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_RA2));
     ra2_h: return CB_RESULT_ATTACH_ALLOW;
   es2g_mn: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ES2G));
    es2g_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ES2G));
   es2g_cp: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ES2G));
   es2g_hm: return CB_RESULT_ATTACH_ALLOW;
   er200_m: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ER200));
   er200_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ER200));
   er200_h: return CB_RESULT_ATTACH_ALLOW;
   esh2_m1: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ESH2));
   esh2_m2: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ESH2));
    esh2_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_ESH2));
   esh2_h1: return CB_RESULT_ATTACH_ALLOW;
   esh2_h2: return CB_RESULT_ATTACH_ALLOW;
    ep2d_m: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP2D));
    ep2d_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP2D));
    ep2d_h: return CB_RESULT_ATTACH_ALLOW;
   ep2d_hm: return CB_RESULT_ATTACH_ALLOW;
    ep3d_m: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP3D));
    ep3d_c: return string(STR_CAN_ATTACH_AFTER_SPECIFIED_CAR, string(STR_NAME_EP3D));
    ep3d_h: return CB_RESULT_ATTACH_ALLOW;
    ed4m_m: loco_limit_can_attach_wagon_ed4m_after_other_c;
    ed4m_c: loco_limit_can_attach_wagon_ed4m_after_other_c;
    ed4m_h: loco_limit_can_attach_wagon_ed4m_after_other_h;
            loco_limit_can_attach_wagon0;
}

switch (FEAT_TRAINS, PARENT, loco_limit_can_attach_wagon,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
       dpkr2_c: loco_limit_can_attach_wagon_dpkr2_c;
      dpkr2_h1: loco_limit_can_attach_wagon_dpkr2_h;
      dpkr2_h2: loco_limit_can_attach_wagon_dpkr2_h;
         ra2_c: loco_limit_can_attach_wagon_ra2_c;
         ra2_h: loco_limit_can_attach_wagon_ra2_h;
       es2g_mn: loco_limit_can_attach_wagon_es2g_c;
        es2g_c: loco_limit_can_attach_wagon_es2g_c;
       es2g_cp: loco_limit_can_attach_wagon_es2g_c;
       es2g_hm: loco_limit_can_attach_wagon_es2g_h;
       er200_c: loco_limit_can_attach_wagon_er200_c;
       er200_m: loco_limit_can_attach_wagon_er200_c;
       er200_h: loco_limit_can_attach_wagon_er200_h;
       esh2_m1: loco_limit_can_attach_wagon_esh2_c;
       esh2_m2: loco_limit_can_attach_wagon_esh2_c;
        esh2_c: loco_limit_can_attach_wagon_esh2_c;
  esh2_h_part2: loco_limit_can_attach_wagon_esh2_h;
        ep2d_c: loco_limit_can_attach_wagon_ep2d_c;
        ep2d_m: loco_limit_can_attach_wagon_ep2d_c;
       ep2d_hm: loco_limit_can_attach_wagon_ep2d_h;
        ep2d_h: loco_limit_can_attach_wagon_ep2d_h;
        ep3d_c: loco_limit_can_attach_wagon_ep3d_c;
        ep3d_m: loco_limit_can_attach_wagon_ep3d_c;
        ep3d_h: loco_limit_can_attach_wagon_ep3d_h;
        ed4m_c: loco_limit_can_attach_wagon_ed4m_c;
        ed4m_m: loco_limit_can_attach_wagon_ed4m_c;
        ed4m_h: loco_limit_can_attach_wagon_ed4m_h;
                loco_limit_can_attach_wagon_after_other;
}

// end
