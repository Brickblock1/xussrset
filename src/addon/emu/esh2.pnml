 // esh2

#define IMAGEFILE  "src/addon/emu/esh2_h1.png"
purchase_sprites(esh2_h1, 0, 0)
MU_head_middle_sp_sprites(17, esh2_h1_mu, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/addon/emu/esh2_h2.png"
purchase_sprites(esh2_h2, 0, 0)
MU_head_middle_sp_sprites(17, esh2_h2_mu, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/addon/emu/esh2_c.png"
purchase_sprites(esh2_c, 0, 0)
MU_car_sprites(15, esh2_c, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/addon/emu/esh2_m1.png"
purchase_sprites(esh2_m1, 0, 0)
MU_car_sprites(13, esh2_m1, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/addon/emu/esh2_m2.png"
purchase_sprites(esh2_m2, 0, 0)
MU_car_sprites(13, esh2_m2, 32, 40)
#undef IMAGEFILE

MU_head_middle_sp_direction_template2(esh2_h1, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h1_sprites_start,                  
[  set_offset_to(-2),                                              
  ((prev_vehicle_type_id() == esh2_c) ||                            
   (prev_vehicle_type_id() == esh2_m1) ||                           
   (prev_vehicle_type_id() == esh2_m2)) ])                          
{ 1: esh2_h1_sprites_right;                                        
     esh2_h1_sprites_left; }                                         
long_vehicle(esh2_h1)

MU_head_middle_sp_direction_template2(esh2_h2, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h2_sprites_start,                  
[  set_offset_to(-2),                                              
  ((prev_vehicle_type_id() == esh2_c) ||                            
   (prev_vehicle_type_id() == esh2_m1) ||                           
   (prev_vehicle_type_id() == esh2_m2)) ])                          
{ 1: esh2_h2_sprites_right;                                        
     esh2_h2_sprites_left; }                                         
long_vehicle(esh2_h2)

switch (FEAT_TRAINS, SELF, esh2_c_sprites_start,
[ set_offset_to(-2),                           
  prev_vehicle_type_id() ])       
{ 
  esh2_c: esh2_c_sprites_right;                      
          esh2_c_sprites_left; 
}                       

long_vehicle(esh2_c)

switch (FEAT_TRAINS, SELF, esh2_m1_sprites_start,
[ set_offset_to(-2),                           
  prev_vehicle_type_id() ])       
{ 
  esh2_h_part2: esh2_m1_sprites_left;                      
                esh2_m1_sprites_right;
}                       

long_vehicle(esh2_m1)

switch (FEAT_TRAINS, SELF, esh2_m2_sprites_start,
[ set_offset_to(-2),                           
  prev_vehicle_type_id() ])       
{ 
  esh2_h_part2: esh2_m2_sprites_left;                      
                esh2_m2_sprites_right;
}                       

long_vehicle(esh2_m2)

switch (FEAT_TRAINS, PARENT, esh2_can_attach_wagon_length,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) > 5)
{
  0: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}                            

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return string(STR_CAN_ATTACH_MNCAR_ONLY);
  esh2_m1: esh2_can_attach_wagon_length;
  esh2_m2: esh2_can_attach_wagon_length;
  esh2_c: esh2_can_attach_wagon_length;
          return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  esh2_c: return string(STR_CAN_ATTACH_MNCAR_ONLY);
  esh2_h_part2: esh2_can_attach_wagon_length;
  esh2_m1: esh2_h1_can_attach_wagon1;
  esh2_m2: esh2_h1_can_attach_wagon1;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_c2_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return CB_RESULT_ATTACH_ALLOW;
                return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_c_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_c: return string(STR_CAN_ATTACH_MNCAR_ONLY);
          return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, esh2_c_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  esh2_c: esh2_c_can_attach_wagon1;
  esh2_h_part2: return string(STR_CAN_ATTACH_MNCAR_ONLY);
  esh2_m1: esh2_c2_can_attach_wagon1;
  esh2_m2: return string(STR_CAN_ATTACH_MNCAR_ONLY);
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m1_can_attach_wagon_h,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  0: return string(STR_CAN_ATTACH_HEAD_ONLY);
     return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, esh2_m2_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return CB_RESULT_ATTACH_ALLOW;
                return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m2_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  esh2_c: return string(STR_CAN_ATTACH_MNCAR_ONLY);
  esh2_h_part2: esh2_m1_can_attach_wagon_h;
  esh2_m1: esh2_m2_can_attach_wagon1;
  esh2_m2: return string(STR_CAN_ATTACH_SAME_MU_ONLY);
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m1_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  esh2_c: return CB_RESULT_ATTACH_ALLOW;
  esh2_h_part2: esh2_m1_can_attach_wagon_h;
  esh2_m1: esh2_m2_can_attach_wagon1;
  esh2_m2: esh2_m2_can_attach_wagon1;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, esh2_can_attach_wagon,
  vehicle_type_id)
{
  esh2_h1: esh2_h1_can_attach_wagon;
  esh2_h2: esh2_h1_can_attach_wagon;
  esh2_m1: esh2_m1_can_attach_wagon;
  esh2_m2: esh2_m2_can_attach_wagon;
  esh2_c: esh2_c_can_attach_wagon;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_start_stop,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  0: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

switch (FEAT_TRAINS, SELF, esh2_h_articulated_part, extra_callback_info1)
{ 
  1: return dummy7; 
  2: return esh2_h_part2; 
  3: return dummy1; 
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS; 
}           

engine_electric1r_1_effect(esh2_h1_create_effect_sprites, 12, -3)
switch (FEAT_TRAINS, SELF, esh2_h1_create_effect_sprites_ml,                     
[  set_offset_to(4),                                               
  ((prev_vehicle_type_id() == esh2_c) ||                            
   (prev_vehicle_type_id() == esh2_m1) ||                           
   (prev_vehicle_type_id() == esh2_m2)) ])                          
{ 1: esh2_h1_create_effect_sprites_left;                                         
     return disable_create_effect(); }                                          
switch (FEAT_TRAINS, SELF, esh2_h1_create_effect_sprites_start,                  
[  set_offset_to(-2),                                              
  ((prev_vehicle_type_id() == esh2_c) ||                            
   (prev_vehicle_type_id() == esh2_m1) ||                           
   (prev_vehicle_type_id() == esh2_m2)) ])                          
{ 1: esh2_h1_create_effect_sprites_right;                                        
     esh2_h1_create_effect_sprites_ml; }
engine_effects_MU2(esh2_h1, _create_effect_sprites_start, esh2_h1, esh2_h2)

RC_head_check2_new(esh2_h1, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h1_running_cost_factor,
[  STORE_TEMP(975, 0),  // Моторы
   STORE_TEMP(137, 1),   // Бригада
   STORE_TEMP(342, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(240, 4),   // ТО
   STORE_TEMP(17, 5),    // Сертификация

   STORE_TEMP(160, 6),  // Скорость
   STORE_TEMP(60, 7),   // Тара
   STORE_TEMP(76, 8)])  // Максимальная масса
{ esh2_h1_check_running_cost_factor; } // 

RC_head_check2_new(esh2_h2, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h2_running_cost_factor,
[  STORE_TEMP(975, 0),  // Моторы
   STORE_TEMP(137, 1),   // Бригада
   STORE_TEMP(342, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(240, 4),   // ТО
   STORE_TEMP(17, 5),    // Сертификация

   STORE_TEMP(160, 6),  // Скорость
   STORE_TEMP(60, 7),   // Тара
   STORE_TEMP(68, 8)])  // Максимальная масса
{ esh2_h2_check_running_cost_factor; } //

RC_head_check2_new(esh2_m1, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_m1_running_cost_factor,
[  STORE_TEMP(1040, 0),  // Моторы
   STORE_TEMP(146, 1),   // Бригада
   STORE_TEMP(365, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(255, 4),   // ТО
   STORE_TEMP(18, 5),    // Сертификация

   STORE_TEMP(160, 6),  // Скорость
   STORE_TEMP(59, 7),   // Тара
   STORE_TEMP(65, 8)])  // Максимальная масса
{ esh2_m1_check_running_cost_factor; } // 

RC_head_check2_new(esh2_m2, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_m2_running_cost_factor,
[  STORE_TEMP(518, 0),  // Моторы
   STORE_TEMP(73, 1),   // Бригада
   STORE_TEMP(182, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(127, 4),   // ТО
   STORE_TEMP(9, 5),    // Сертификация

   STORE_TEMP(160, 6),  // Скорость
   STORE_TEMP(58, 7),   // Тара
   STORE_TEMP(64, 8)])  // Максимальная масса
{ esh2_m2_check_running_cost_factor; } //

RC_head_check2_new(esh2_c, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_c_running_cost_factor,
[  STORE_TEMP(604, 0),  // Моторы
   STORE_TEMP(85, 1),   // Бригада
   STORE_TEMP(212, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(148, 4),   // ТО
   STORE_TEMP(11, 5),    // Сертификация

   STORE_TEMP(160, 6),  // Скорость
   STORE_TEMP(55, 7),   // Тара
   STORE_TEMP(65, 8)])  // Максимальная масса
{ esh2_c_check_running_cost_factor; } // 

engine_power_MU2(esh2_m1, 2176, esh2_h1, esh2_h2)
engine_power_MU2(esh2_m2, 1088, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_h1,  84, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_h2, 120, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_m1,  94, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_m2,  94, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_c,  152, esh2_h1, esh2_h2)

hint_MU_with_subtype_noto(esh2_h1,
     STR_PURCHASE_HINT_LOADING_SPEED_2TIC,
     STR_PURCHASE_HINT_AGING_PERIOD_2_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014, 
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
hint_MU_with_subtype_noto(esh2_h2,
     STR_PURCHASE_HINT_LOADING_SPEED_3TIC,
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014, 
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
hint_MU_with_subtype_noto(esh2_m1,
     STR_PURCHASE_HINT_LOADING_SPEED_2TIC,
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_M_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014, 
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
hint_MU_with_subtype_noto(esh2_m2,
     STR_PURCHASE_HINT_LOADING_SPEED_2TIC,
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_M_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014, 
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
hint_MU_with_subtype_noto(esh2_c,
     STR_PURCHASE_HINT_LOADING_SPEED_3TIC,
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_C_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014, 
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))

item (FEAT_TRAINS, esh2_h1, 647) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, 220)
    vehicle_dcemu_c(60, 84, 27*2)
    vehicle_allow_tourists()
    default_cargo_type: TOUR;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
  }
  graphics {
    default: esh2_h1_sprites;
    purchase: esh2_h1_purchase_sprites;
    cargo_age_period: return 120;
    running_cost_factor: esh2_h1_running_cost_factor;
    articulated_part: esh2_h_articulated_part;
    can_attach_wagon: esh2_can_attach_wagon;
    start_stop: esh2_h1_start_stop;
    create_effect: esh2_h1_create_effect;
    speed: return 160;
    cargo_capacity: esh2_h1_cargo_capacity;
    colour_mapping: any_cc_colour;
    additional_text: esh2_h1_additional_text;
  }
}

item (FEAT_TRAINS, esh2_h2, 648) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, 220)
    vehicle_dcemu_c(60, 120, 27*2)
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
  }
  graphics {
    default: esh2_h2_sprites;
    purchase: esh2_h2_purchase_sprites;
    cargo_age_period: return 60;
    running_cost_factor: esh2_h2_running_cost_factor;
    articulated_part: esh2_h_articulated_part;
    can_attach_wagon: esh2_can_attach_wagon;
    start_stop: esh2_h1_start_stop;
    create_effect: esh2_h1_create_effect;
    speed: return 160;
    cargo_capacity: esh2_h2_cargo_capacity;
    colour_mapping: any_cc_colour;
    additional_text: esh2_h2_additional_text;
  }
}

item (FEAT_TRAINS, esh2_m1, 649) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, 235)
    vehicle_dcemu(2176, 59, 200.0, 94, 27*2)
  }
  graphics {
    default: esh2_m1_sprites;
    purchase: esh2_m1_purchase_sprites;
    cargo_age_period: return 60;
    running_cost_factor: esh2_m1_running_cost_factor;
    articulated_part: articulated_part_dummy5;
    can_attach_wagon: esh2_can_attach_wagon;
    start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    speed: return 160;
    power: esh2_m1_power;
    cargo_capacity: esh2_m1_cargo_capacity;
    colour_mapping: any_cc_colour;
    additional_text: esh2_m1_additional_text;
    create_effect: return disable_create_effect();
  }
}

item (FEAT_TRAINS, esh2_m2, 650) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, 117)
    vehicle_dcemu(1088, 58, 100, 94, 27*2)
  }
  graphics {
    default: esh2_m2_sprites;
    purchase: esh2_m2_purchase_sprites;
    cargo_age_period: return 60;
    running_cost_factor: esh2_m2_running_cost_factor;
    articulated_part: articulated_part_dummy5;
    can_attach_wagon: esh2_can_attach_wagon;
    start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    speed: return 160;
    power: esh2_m2_power;
    cargo_capacity: esh2_m2_cargo_capacity;
    colour_mapping: any_cc_colour;
    additional_text: esh2_m2_additional_text;
    create_effect: return disable_create_effect();
  }
}

item (FEAT_TRAINS, esh2_c, 651) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, 136)
    vehicle_dcemu_c(55.5, 152, 27*2)
  }
  graphics {
    default: esh2_c_sprites;
    purchase: esh2_c_purchase_sprites;
    cargo_age_period: return 60;
    running_cost_factor: esh2_c_running_cost_factor;
    articulated_part: articulated_part_dummy7;
    speed: return 160;
    can_attach_wagon: esh2_can_attach_wagon;
    start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    cargo_capacity: esh2_c_cargo_capacity;
    colour_mapping: any_cc_colour;
    additional_text: esh2_c_additional_text;
    create_effect: return disable_create_effect();
  }
}

engine_capacity_MU2(esh2_h_part2, 4, esh2_h1, esh2_h2)

item (FEAT_TRAINS, esh2_h_part2, 653) {
  property {
    vehicle_no_dates(2014, 2050, 30, 10, 1, 0)
    vehicle_dcemu_c(0, 4, 4)
  }
  graphics {
    default: dummy_sprites;
    create_effect: return disable_create_effect();
    cargo_age_period: return 370;
    cargo_capacity: esh2_h_part2_cargo_capacity;
  }
}

long_name_template(esh2_h1, STR_LONGNAME_ESH2_H1)
long_name_template(esh2_h2, STR_LONGNAME_ESH2_H2)
long_name_template(esh2_m1, STR_LONGNAME_ESH2_M1)
long_name_template(esh2_m2, STR_LONGNAME_ESH2_M2)
long_name_template(esh2_c,  STR_LONGNAME_ESH2_C)
allow_dcemu(esh2_h1)
allow_dcemu(esh2_h2)
allow_dcemu(esh2_m1)
allow_dcemu(esh2_m2)
allow_dcemu(esh2_c)
