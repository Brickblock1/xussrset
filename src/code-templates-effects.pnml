  /// code definition

// эффекты. Искрение (симметричная секция).

#define engine_electric1_1_effect(name, left)                                        \
switch (FEAT_TRAINS, SELF, name##_left, electric_create_effect(left)) { return 1; }  \

// эффекты. Искрение (правая и левая ориентации секции).

#define engine_electric1r_1_effect(name, left, right)                                  \
switch (FEAT_TRAINS, SELF, name##_left, electric_create_effect(left)) { return 1; }    \
switch (FEAT_TRAINS, SELF, name##_right, electric_create_effect(right)) { return 1; }  \

// эффекты. Искрение (правая и левая ориентации секции).
//          Искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой

#define engine_electric1r_2_effect(name, left, left2, right, right2)                 \
switch (FEAT_TRAINS, SELF, name##_l3, electric_create_effect(left)) { return 1; }    \
switch (FEAT_TRAINS, SELF, name##_l2, electric_create_effect(left2)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_r3, electric_create_effect(right)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_r2, electric_create_effect(right2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_l1, (animation_counter / 32) % 2)                  \
{ 0: name##_l3; name##_l2; }                                                         \
switch (FEAT_TRAINS, PARENT, name##_left, current_speed > threshold_of_speed())      \
{ 0: name##_l1; name##_l2; }                                                         \
switch (FEAT_TRAINS, SELF, name##_r1, (animation_counter / 32) % 2)                  \
{ 0: name##_r3; name##_r2; }                                                         \
switch (FEAT_TRAINS, PARENT, name##_right, current_speed > threshold_of_speed())     \
{ 0: name##_r1; name##_r2; }                                                         \

#define engine_electric1_2_effect(name, left, left2)                                \
switch (FEAT_TRAINS, SELF, name##_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_l1, (animation_counter / 32) % 2)                 \
{ 0: name##_l3; name##_l2; }                                                        \
switch (FEAT_TRAINS, PARENT, name, current_speed > threshold_of_speed())            \
{ 0: name##_l1; name##_l2; }                                                        \

#define engine_electric1_2all_effect(name, left, left2)                             \
switch (FEAT_TRAINS, SELF, name##_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_start, (animation_counter / 32) % 2)              \
{ 0: name##_l3; name##_l2; }                                                        \

// эффекты. Искрение (правая и левая секции). Левая секция искрит только на малой скорости

#define engine_electric2_1_effect(name, left, right)                                   \
switch (FEAT_TRAINS, SELF, name##_l2, electric_create_effect(left)) { return 1; }      \
switch (FEAT_TRAINS, PARENT, name##_left, current_speed > threshold_of_speed())        \
{ 0: name##_l2; return 0; }                                                            \
switch (FEAT_TRAINS, SELF, name##_right, electric_create_effect(right)) { return 1; }  \

// эффекты. Искрение (правая и левая секции). На первой секции искрит только 2-ой пантограф,
//          на второй искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой

#define engine_electric2_2_effect(name, left, right, right2)                         \
switch (FEAT_TRAINS, SELF, name##_left, electric_create_effect(left)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_r3, electric_create_effect(right)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_r2, electric_create_effect(right2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_r1, (animation_counter / 32) % 2)                  \
{ 0: name##_r3; name##_r2; }                                                         \
switch (FEAT_TRAINS, PARENT, name##_right, current_speed > threshold_of_speed())     \
{ 0: name##_r1; name##_r2; }                                                         \

// эффекты. Дым (симметрично).

#define engine_diesel_1_effect(name, left, height)                                 \
switch (FEAT_TRAINS, SELF, name, diesel_create_effect(left,height)) { return 1; }  \

// эффекты. Дым (правая и левая ориентации).

#define engine_diesel_1r_effect(name, left, right, height)                                  \
switch (FEAT_TRAINS, SELF, name##_left, diesel_create_effect(left,height)) { return 1; }    \
switch (FEAT_TRAINS, SELF, name##_right, diesel_create_effect(right,height)) { return 1; }  \

// эффекты. Двойной дым (симметричный локомотив).

#define engine_diesel_2_effect(name, left1, left2, height)                                  \
switch (FEAT_TRAINS, SELF, name##_start,                                                    \
[diesel_create_effect(left1, height), diesel_create_effect2(left2, height)]) { return 2; }  \

// эффекты. Двойной дым симметрия по ДП (правая и левая ориентации).

#define engine_diesel_2s_effect(name, left, right, height)                                               \
switch (FEAT_TRAINS, SELF, name##_left,                                                                  \
[diesel_create_effect_dy(left, 1, height), diesel_create_effect_dy2(left, -1, height)]) { return 2; }    \
switch (FEAT_TRAINS, SELF, name##_right,                                                                 \
[diesel_create_effect_dy(right, 1, height), diesel_create_effect_dy2(right, -1, height)]) { return 2; }  \

// эффекты. Двойной дым (правая и левая ориентации).

#define engine_diesel_2r_effect(name, left1, left2, right1, right2, height)                   \
switch (FEAT_TRAINS, SELF, name##_left,                                                       \
[diesel_create_effect(left1, height), diesel_create_effect2(left2, height)]) { return 2; }    \
switch (FEAT_TRAINS, SELF, name##_right,                                                      \
[diesel_create_effect(right1, height), diesel_create_effect2(right2, height)]) { return 2; }  \

// эффекты. Белый дым (симметрично). Предполагается, что дым выпускает только первая часть

#define engine_steam_1_effect(name, left, height)                                    \
switch (FEAT_TRAINS, SELF, name##2, steam_create_effect(left,height)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name, position_in_articulated_veh)                        \
{ 0: name##2; return 0; }                                                            \

// Выбор ориентации эффекта для кабины, ориентированной случайным образом

#define engine_RNDany_effect_direction_template(name, p1, p2)  \
switch (FEAT_TRAINS, SELF, name##_create_effect,               \
[  set_offset_to(1),                                           \
   (prev_vehicle_randombits() % (p1 + p2)) < p1])              \
{ 1: name##_create_effect_sprites_left;                        \
     name##_create_effect_sprites_right; }                     \

#define engine_RND_effect_direction_template(name, p1, p2)  \
switch (FEAT_TRAINS, SELF, name##_create_effect_1RND,       \
[  set_offset_to(1),                                        \
   (prev_vehicle_randombits() % (p1 + p2)) < p1])           \
{ 1: name##_create_effect_sprites_left;                     \
     name##_create_effect_sprites_right; }                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect,          \
  count_veh_id(name))                                       \
{ 1: name##_create_effect_1RND;                             \
     name##_create_effect_sprites_start; }                  \

// Определение эффектов МВПС
#define engine_effects_MU(name, effects, vehid)                               \
switch (FEAT_TRAINS, PARENT, name##_create_effect, vehicle_type_id == vehid)  \
{ 1: name##effects;                                                           \
     return disable_create_effect(); }                                        \

#define engine_effects_MU2(name, effects, vehid1, vehid2)  \
switch (FEAT_TRAINS, PARENT, name##_create_effect,         \
  (vehicle_type_id == vehid1) ||                           \
  (vehicle_type_id == vehid2))                             \
{ 1: name##effects;                                        \
     return disable_create_effect(); }                     \

#define engine_effects_MU3(name, effects, vehid1, vehid2, vehid3)  \
switch (FEAT_TRAINS, PARENT, name##_create_effect,                 \
  (vehicle_type_id == vehid1) ||                                   \
  (vehicle_type_id == vehid2) ||                                   \
  (vehicle_type_id == vehid3))                                     \
{ 1: name##effects;                                                \
     return disable_create_effect(); }                             \

#define engine_effects_MU4(name, effects, vehid1, vehid2, vehid3, vehid4)  \
switch (FEAT_TRAINS, PARENT, name##_create_effect,                         \
  (vehicle_type_id == vehid1) ||                                           \
  (vehicle_type_id == vehid2) ||                                           \
  (vehicle_type_id == vehid3) ||                                           \
  (vehicle_type_id == vehid4))                                             \
{ 1: name##effects;                                                        \
     return disable_create_effect(); }                                     \

// end
