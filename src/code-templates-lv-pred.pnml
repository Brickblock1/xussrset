// Предустановленные наборы ливрей
// Паровозы с грузовым шаблоном (02, 53, 61, 93)
switch (FEAT_TRAINS, SELF, steam_freight_engine_colour_mapping,
  cargo_subtype)
{
           0: return ttdall_cc + 0x02;
           1: return ttdall_cc + 0x93;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x61;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, steam_freight_tender_colour_mapping,
[ set_offset_to(-2),
  prev_vehicle_cargo_subtype()])
{
           0: return ttdall_cc + 0x02;
           1: return ttdall_cc + 0x93;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x61;
     return CB_FAILED;
}

steamer_direction_template(steam_freight, _colour_mapping)
livery_template_base_list2(steam_freight_alt, LV_RAL6020, LV_RAL6002)
livery_template_alt(steam_freight, STR_REFIT_TTD_93)

// Паровозы с пассажирским шаблоном (53, 61)

switch (FEAT_TRAINS, SELF, steam_pass_engine_colour_mapping_random,
[  set_offset_to(1),
   prev_vehicle_randombits() & 0x01])
{
  0: return ttdall_cc + 0x53;
     return ttdall_cc + 0x61;
}

switch (FEAT_TRAINS, SELF, steam_pass_engine_colour_mapping,
  cargo_subtype)
{
           0: steam_pass_engine_colour_mapping_random;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x61;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, steam_pass_tender_colour_mapping_random,
[  set_offset_to(-1),
   prev_vehicle_randombits() & 0x01])
{
  0: return ttdall_cc + 0x53;
     return ttdall_cc + 0x61;
}

switch (FEAT_TRAINS, SELF, steam_pass_tender_colour_mapping,
[ set_offset_to(-2),
  prev_vehicle_cargo_subtype()])
{
           0: steam_pass_tender_colour_mapping_random;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x61;
     return CB_FAILED;
}

steamer_direction_template(steam_pass, _colour_mapping)
livery_template_base_list2(steam_pass, LV_RAL6020, LV_RAL6002)

// Паровозы с пасс. + красным и синим (53, 61, В3, 93)
switch (FEAT_TRAINS, SELF, steam_pass_extra_engine_colour_mapping,
  cargo_subtype)
{
           0: steam_pass_engine_colour_mapping_random;
           1: return ttdall_cc + 0xB3;
           2: return ttdall_cc + 0x93;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x61;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, steam_pass_extra_tender_colour_mapping,
[ set_offset_to(-2),
  prev_vehicle_cargo_subtype()])
{
           0: steam_pass_tender_colour_mapping_random;
           1: return ttdall_cc + 0xB3;
           2: return ttdall_cc + 0x93;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x61;
     return CB_FAILED;
}

steamer_direction_template(steam_pass_extra, _colour_mapping)
livery_template_base_list2(steam_pass_extra_alt, LV_RAL6020, LV_RAL6002)
livery_template_alt2(steam_pass_extra, STR_REFIT_TTD_B3, STR_REFIT_TTD_93)

// Паровозы с пасс. + красная стрела (53, 61, "красная стрела")
switch (FEAT_TRAINS, SELF, steam_pass_red_arrow_engine_colour_mapping,
  cargo_subtype)
{
                 0: steam_pass_engine_colour_mapping_random;
        LV_RAL6002: return ttdall_cc + 0x53;
        LV_RAL6020: return ttdall_cc + 0x61;
  LV_RED_ARROW_OLD: return ttdall_cc + 0x9A;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, steam_pass_red_arrow_tender_colour_mapping,
[ set_offset_to(-2),
  prev_vehicle_cargo_subtype()])
{
                 0: steam_pass_tender_colour_mapping_random;
        LV_RAL6002: return ttdall_cc + 0x53;
        LV_RAL6020: return ttdall_cc + 0x61;
  LV_RED_ARROW_OLD: return ttdall_cc + 0x9A;
     return CB_FAILED;
}

steamer_direction_template(steam_pass_red_arrow, _colour_mapping)
livery_template_base_list3(steam_pass_red_arrow, LV_RAL6020, LV_RED_ARROW_OLD, LV_RAL6002)

// Электровозы семейства ВЛ
switch (FEAT_TRAINS, SELF, vl_type_colour_mapping,
  cargo_subtype)
{
           0: return vl11_cc + 0;
           1: return vl11_cc + 5;
           2: return vl11_cc + 3;
           3: return vl11_cc + 7;
  LV_RAL6002: return vl11_cc + 1;
  LV_RAL6020: return vl11_cc + 2;
     return CB_FAILED;
}

livery_template_base_list2(vl_type_alt, LV_RAL6002, LV_RAL6020)
livery_template_alt3(vl_type, STR_REFIT_TTD_62, STR_REFIT_TTD_9D, STR_REFIT_TTD_93)

// Промышленные электровозы
switch (FEAT_TRAINS, SELF, pe_type_colour_mapping,
  cargo_subtype)
{
           0: return ttdall_cc + 0x5B;
           1: return ttdall_cc + 0x9C;
  LV_RAL6002: return ttdall_cc + 0x53;
  LV_RAL6020: return ttdall_cc + 0x62;
     return CB_FAILED;
}

livery_template_base_list2(pe_type_alt, LV_RAL6002, LV_RAL6020)
livery_template_alt(pe_type, STR_REFIT_TTD_9C)

// вагоны - самосвалы
switch (FEAT_TRAINS, SELF, dumpcar_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits() & 0x0F])
{
     0..1: return ttdall_cc + 0x7B;
     2..3: return ttdall_cc + 0x71;
        4: return ttdall_cc + 0x72;
        5: return ttdall_cc + 0x4B;
     6..8: return ttdall_cc + 0x02;
    9..11: return ttdall_cc + 0x03;
   12..13: return ttdall_cc + 0x6A;
           return ttdall_cc + 0x21;
}

switch (FEAT_TRAINS, SELF, dumpcar_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
  0: dumpcar_random;
  1: return ttdall_cc + 0x7B;
  2: return ttdall_cc + 0x71;
  3: return ttdall_cc + 0x72;
  4: return ttdall_cc + 0x4B;
  5: return ttdall_cc + 0x02;
  6: return ttdall_cc + 0x03;
  7: return ttdall_cc + 0x6A;
  8: return ttdall_cc + 0x21;
     return CB_FAILED;
}

livery_template_alt8f(dumpcar, STR_REFIT_TTD_7B, STR_REFIT_TTD_71, STR_REFIT_TTD_72, STR_REFIT_TTD_4B, STR_REFIT_TTD_02, STR_REFIT_TTD_04, STR_REFIT_TTD_6A, STR_REFIT_TTD_6B)

// вагоны - хоперы-зерновозы
switch (FEAT_TRAINS, SELF, grain_hopper_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits()])
{
    0..27: return ttdall_cc + 0x70;
   28..56: return ttdall_cc + 0x71;
   57..84: return ttdall_cc + 0x72;
  85..113: return ttdall_cc + 0x7A;
 114..141: return ttdall_cc + 0x7B;
 142..170: return ttdall_cc + 0x7C;
 171..198: return ttdall_cc + 0x49;
 199..227: return ttdall_cc + 0x4A;
           return ttdall_cc + 0x4B;
// 0x9D, 0x06 и 0x62 случайным образом не выбираются
}

switch (FEAT_TRAINS, SELF, grain_hopper_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: grain_hopper_random;
   1: return ttdall_cc + 0x70;
   2: return ttdall_cc + 0x71;
   3: return ttdall_cc + 0x72;
   4: return ttdall_cc + 0x7A;
   5: return ttdall_cc + 0x7B;
   6: return ttdall_cc + 0x7C;
   7: return ttdall_cc + 0x49;
   8: return ttdall_cc + 0x4A;
   9: return ttdall_cc + 0x4B;
  10: return ttdall_cc + 0x9D;
  11: return ttdall_cc + 0x06;
  12: return ttdall_cc + 0x62;
     return CB_FAILED;
}

livery_template_alt12f(grain_hopper, STR_REFIT_TTD_70, STR_REFIT_TTD_71, STR_REFIT_TTD_72,
                                     STR_REFIT_TTD_7A, STR_REFIT_TTD_7B, STR_REFIT_TTD_7C,
                                     STR_REFIT_TTD_49, STR_REFIT_TTD_4A, STR_REFIT_TTD_4B,
                                     STR_REFIT_TTD_9D, STR_REFIT_TTD_06, STR_REFIT_TTD_62)

// вагоны - хоперы для минеральных удобрений
switch (FEAT_TRAINS, SELF, fert_hopper_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits()])
{
    0..37: return ttdall_cc + 0x61;
   38..84: return ttdall_cc + 0x62;
  85..122: return ttdall_cc + 0x63;
 123..141: return ttdall_cc + 0x51;
 142..170: return ttdall_cc + 0x53;
 171..189: return ttdall_cc + 0x52;
 190..208: return ttdall_cc + 0x58;
 209..236: return ttdall_cc + 0x59;
           return ttdall_cc + 0x5A;
// 0x04, 0x95 и 0x96 случайным образом не выбираются
}

switch (FEAT_TRAINS, SELF, fert_hopper_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: fert_hopper_random;
   1: return ttdall_cc + 0x61;
   2: return ttdall_cc + 0x62;
   3: return ttdall_cc + 0x63;
   4: return ttdall_cc + 0x51;
   5: return ttdall_cc + 0x53;
   6: return ttdall_cc + 0x52;
   7: return ttdall_cc + 0x58;
   8: return ttdall_cc + 0x59;
   9: return ttdall_cc + 0x5A;
  10: return ttdall_cc + 0x95;
  11: return ttdall_cc + 0x96;
  12: return ttdall_cc + 0x04;
      return CB_FAILED;
}

livery_template_alt12f(fert_hopper, STR_REFIT_TTD_61, STR_REFIT_TTD_62, STR_REFIT_TTD_63,
                                    STR_REFIT_TTD_51, STR_REFIT_TTD_52, STR_REFIT_TTD_53,
                                    STR_REFIT_TTD_58, STR_REFIT_TTD_59, STR_REFIT_TTD_5A,
                                    STR_REFIT_TTD_95, STR_REFIT_TTD_96, STR_REFIT_TTD_04)

// вагоны - хоперы для цемента
switch (FEAT_TRAINS, SELF, cement_hopper_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits()])
{
   0..44: return ttdall_cc + 0x07;
 45..104: return ttdall_cc + 0x08;
105..150: return ttdall_cc + 0x09;
151..180: return ttdall_cc + 0x29;
181..225: return ttdall_cc + 0x2A;
          return ttdall_cc + 0x2B;
// 0x7* и 0x4B случайным образом не выбираются
}

switch (FEAT_TRAINS, SELF, cement_hopper_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: cement_hopper_random;
   1: return ttdall_cc + 0x07;
   2: return ttdall_cc + 0x08;
   3: return ttdall_cc + 0x09;
   4: return ttdall_cc + 0x29;
   5: return ttdall_cc + 0x2A;
   6: return ttdall_cc + 0x2B;
   7: return ttdall_cc + 0x7B;
   8: return ttdall_cc + 0x7C;
   9: return ttdall_cc + 0x72;
  10: return ttdall_cc + 0x4B;
     return CB_FAILED;
}

livery_template_alt10f(cement_hopper, STR_REFIT_TTD_07, STR_REFIT_TTD_08, STR_REFIT_TTD_09,
                                      STR_REFIT_TTD_29, STR_REFIT_TTD_2A, STR_REFIT_TTD_2B,
                                      STR_REFIT_TTD_72, STR_REFIT_TTD_7B, STR_REFIT_TTD_7C, STR_REFIT_TTD_4B)

// Старший бит занят на цвет рамы
// вагоны - Цистерны для нефти
switch (FEAT_TRAINS, SELF, oil_tanker_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits() & 0x7F])
{
  0..36: return ttdall_cc + 0x48;
 37..90: return ttdall_cc + 0x49;
         return ttdall_cc + 0x4A;
// 0x7C случайным образом не выбираются
}

switch (FEAT_TRAINS, SELF, oil_tanker_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: oil_tanker_random;
   1: return ttdall_cc + 0x48;
   2: return ttdall_cc + 0x49;
   3: return ttdall_cc + 0x4A;
   4: return ttdall_cc + 0x7C;
     return CB_FAILED;
}

livery_template_alt4f(oil_tanker, STR_REFIT_TTD_48, STR_REFIT_TTD_49, STR_REFIT_TTD_4A,
                                     STR_REFIT_TTD_7C)

// вагоны - Цистерны для нефтепродуктов
switch (FEAT_TRAINS, SELF, rfpr_tanker_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits() & 0x7F])
{
  0..36: return ttdall_cc + 0x38;
 37..90: return ttdall_cc + 0x39;
         return ttdall_cc + 0x3A;
// 0x26 случайным образом не выбираются
}

switch (FEAT_TRAINS, SELF, rfpr_tanker_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: rfpr_tanker_random;
   1: return ttdall_cc + 0x38;
   2: return ttdall_cc + 0x39;
   3: return ttdall_cc + 0x3A;
   4: return ttdall_cc + 0x26;
      return CB_FAILED;
}

livery_template_alt4f(rfpr_tanker, STR_REFIT_TTD_38, STR_REFIT_TTD_39, STR_REFIT_TTD_3A,
                                   STR_REFIT_TTD_26)

// вагоны - Цистерны для бензина
switch (FEAT_TRAINS, SELF, petr_tanker_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits() & 0x7F])
{
  0..36: return ttdall_cc + 0x25;
 37..90: return ttdall_cc + 0x26;
         return ttdall_cc + 0x27;
// 0x39 случайным образом не выбираются
}

switch (FEAT_TRAINS, SELF, petr_tanker_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: petr_tanker_random;
   1: return ttdall_cc + 0x25;
   2: return ttdall_cc + 0x26;
   3: return ttdall_cc + 0x27;
   4: return ttdall_cc + 0x39;
     return CB_FAILED;
}

livery_template_alt4f(petr_tanker, STR_REFIT_TTD_25, STR_REFIT_TTD_26, STR_REFIT_TTD_27,
                                   STR_REFIT_TTD_39)

// вагоны - Цистерны для воды
switch (FEAT_TRAINS, SELF, watr_tanker_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits() & 0x7F])
{
  0..36: return ttdall_cc + 0x09;
 37..90: return ttdall_cc + 0x0A;
         return ttdall_cc + 0x0B;
}

switch (FEAT_TRAINS, SELF, watr_tanker_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: watr_tanker_random;
   1: return ttdall_cc + 0x09;
   2: return ttdall_cc + 0x0A;
   3: return ttdall_cc + 0x0B;
     return CB_FAILED;
}

livery_template_alt3f(watr_tanker, STR_REFIT_TTD_09, STR_REFIT_TTD_0A, STR_REFIT_TTD_0B)

// вагоны - Цистерны для красок
switch (FEAT_TRAINS, SELF, dyes_tanker_random,
[  set_offset_to(1-position_in_articulated_veh),
   prev_vehicle_randombits() & 0x7F])
{
    0..17: return ttdall_cc + 0x03;
   18..45: return ttdall_cc + 0x04;
   46..63: return ttdall_cc + 0x05;
   64..81: return ttdall_cc + 0x07;
  82..109: return ttdall_cc + 0x08;
           return ttdall_cc + 0x09;
}

switch (FEAT_TRAINS, SELF, dyes_tanker_colour_mapping,
[  set_offset_to(-position_in_articulated_veh),
   prev_vehicle_cargo_subtype()])
{
   0: dyes_tanker_random;
   1: return ttdall_cc + 0x03;
   2: return ttdall_cc + 0x04;
   3: return ttdall_cc + 0x05;
   4: return ttdall_cc + 0x07;
   5: return ttdall_cc + 0x08;
   6: return ttdall_cc + 0x09;
      return CB_FAILED;
}

livery_template_alt6f(dyes_tanker, STR_REFIT_TTD_03, STR_REFIT_TTD_04, STR_REFIT_TTD_05,
                                   STR_REFIT_TTD_07, STR_REFIT_TTD_08, STR_REFIT_TTD_09)

// вагоны - Цистерны для всех продуктов
// todo использовать функции вместо прямого перечисления меток
switch (FEAT_TRAINS, SELF, tanker_colour_mapping,
  cargo_type_in_veh)
{
  RFPR: rfpr_tanker_colour_mapping;
  oil_tanker_check(oil_tanker_colour_mapping)
  petr_tanker_check(petr_tanker_colour_mapping)
  food_gen_tanker_check(watr_tanker_colour_mapping)
  chem_gen_tanker_check(dyes_tanker_colour_mapping)
  bulk_cargo_tanker_check(cement_hopper_colour_mapping)
        return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, tanker_cargo_subtype_text,
  cargo_type_in_veh)
{
  RFPR: rfpr_tanker_cargo_subtype_text;
  oil_tanker_check(oil_tanker_cargo_subtype_text)
  petr_tanker_check(petr_tanker_cargo_subtype_text)
  food_gen_tanker_check(watr_tanker_cargo_subtype_text)
  chem_gen_tanker_check(dyes_tanker_cargo_subtype_text)
  bulk_cargo_tanker_check(cement_hopper_cargo_subtype_text)
        return CB_FAILED;
}

// end
