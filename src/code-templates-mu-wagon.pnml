 /// code definition - mu - wagon
// todo разобраться и пофиксить, почему ТЕ увеличивается даже при добавлении головы, у которой нет ТЕ (=0)

#define emu_ptw_vals1_3(name, veh_h1, name_h1, veh_c1, name_c1, veh_c2, name_c2)               \
switch (FEAT_TRAINS, PARENT, name##_tractive_effort_coefficient3,                              \
  (count_veh_id(veh_h1) * get_tec_int(PROP_##name_h1##_TE, PROP_##name_h1##_WT)) +             \
  (count_veh_id(veh_c1) * get_tec_int(PROP_##name_c1##_TE, PROP_##name_c1##_WT)) +             \
  (count_veh_id(veh_c2) * get_tec_int(PROP_##name_c2##_TE, PROP_##name_c2##_WT)) )             \
{ return; }                                                                                    \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient2, position_in_consist)           \
{ 0: name##_tractive_effort_coefficient3;                                                      \
     return 0; }                                                                               \
switch (FEAT_TRAINS, PARENT, name##_tractive_effort_coefficient, (vehicle_type_id == veh_h1))  \
{ 1: name##_tractive_effort_coefficient2;                                                      \
     return 0; }                                                                               \
switch (FEAT_TRAINS, PARENT, name##_weight3,                                                   \
  (count_veh_id(veh_h1) * int(PROP_##name_h1##_WT)) +                                          \
  (count_veh_id(veh_c1) * int(PROP_##name_c1##_WT)) +                                          \
  (count_veh_id(veh_c2) * int(PROP_##name_c2##_WT)))                                           \
{ return; }                                                                                    \
switch (FEAT_TRAINS, SELF, name##_weight2, position_in_consist)                                \
{ 0: name##_weight3;                                                                           \
     return 0; }                                                                               \
switch (FEAT_TRAINS, PARENT, name##_weight,                                                    \
  (vehicle_type_id == veh_h1))                                                                 \
{ 1: name##_weight2;                                                                           \
     return CB_FAILED; }                                                                       \
switch (FEAT_TRAINS, PARENT, name##_power3,                                                    \
  (count_veh_id(veh_h1) * int(PROP_##name_h1##_PR * POWER_MULT)) +                             \
  (count_veh_id(veh_c1) * int(PROP_##name_c1##_PR * POWER_MULT)) +                             \
  (count_veh_id(veh_c2) * int(PROP_##name_c2##_PR * POWER_MULT)) )                             \
{ return; }                                                                                    \
switch (FEAT_TRAINS, SELF, name##_power2, position_in_consist)                                 \
{ 0: name##_power3;                                                                            \
     return 0; }                                                                               \
switch (FEAT_TRAINS, PARENT, name##_power, (vehicle_type_id == veh_h1))                        \
{ 1: name##_power2;                                                                            \
     return 0; }                                                                               \

#define emu_ptw_vals2_5(name, veh_h1, name_h1, veh_h2, name_h2, veh_c1, name_c1, veh_c2, name_c2, veh_c3, name_c3)  \
switch (FEAT_TRAINS, PARENT, name##_tractive_effort_coefficient3,                                                   \
  count_veh_id(veh_h1) * get_tec(int(256 * PROP_##name_h1##_TE), int(PROP_##name_h1##_WT)) +                        \
  count_veh_id(veh_h2) * get_tec(int(256 * PROP_##name_h2##_TE), int(PROP_##name_h2##_WT)) +                        \
  count_veh_id(veh_c1) * get_tec(int(256 * PROP_##name_c1##_TE), int(PROP_##name_c1##_WT)) +                        \
  count_veh_id(veh_c2) * get_tec(int(256 * PROP_##name_c2##_TE), int(PROP_##name_c2##_WT)) +                        \
  count_veh_id(veh_c3) * get_tec(int(256 * PROP_##name_c3##_TE), int(PROP_##name_c3##_WT)))                         \
{ return; }                                                                                                         \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient2, position_in_consist)                                \
{ 0: name##_tractive_effort_coefficient3;                                                                           \
     return 0; }                                                                                                    \
switch (FEAT_TRAINS, PARENT, name##_tractive_effort_coefficient,                                                    \
  (vehicle_type_id == veh_h1) || (vehicle_type_id == veh_h2))                                                       \
{ 1: name##_tractive_effort_coefficient2;                                                                           \
     return 0; }                                                                                                    \
switch (FEAT_TRAINS, PARENT, name##_weight3,                                                                        \
  count_veh_id(veh_h1) * int(PROP_##name_h1##_WT) +                                                                 \
  count_veh_id(veh_h2) * int(PROP_##name_h2##_WT) +                                                                 \
  count_veh_id(veh_c1) * int(PROP_##name_c1##_WT) +                                                                 \
  count_veh_id(veh_c2) * int(PROP_##name_c2##_WT) +                                                                 \
  count_veh_id(veh_c3) * int(PROP_##name_c3##_WT))                                                                  \
{ return; }                                                                                                         \
switch (FEAT_TRAINS, SELF, name##_weight2, position_in_consist)                                                     \
{ 0: name##_weight3;                                                                                                \
     return 0; }                                                                                                    \
switch (FEAT_TRAINS, PARENT, name##_weight,                                                                         \
  (vehicle_type_id == veh_h1) || (vehicle_type_id == veh_h2))                                                       \
{ 1: name##_weight2;                                                                                                \
     return CB_FAILED; }                                                                                            \
switch (FEAT_TRAINS, PARENT, name##_power2,                                                                         \
 ((count_veh_id(veh_h1) * int(PROP_##name_h1##_PR)) +                                                               \
  (count_veh_id(veh_h2) * int(PROP_##name_h2##_PR)) +                                                               \
  (count_veh_id(veh_c1) * int(PROP_##name_c1##_PR)) +                                                               \
  (count_veh_id(veh_c2) * int(PROP_##name_c2##_PR)) +                                                               \
  (count_veh_id(veh_c3) * int(PROP_##name_c3##_PR))) *                                                              \
  ((vehicle_type_id == veh_h1) || (vehicle_type_id == veh_h2)) * POWER_MULT)                                        \
{ return; }                                                                                                         \
switch (FEAT_TRAINS, SELF, name##_power, position_in_consist)                                                       \
{ 0: name##_power2;                                                                                                 \
     return 0; }                                                                                                    \

// end
