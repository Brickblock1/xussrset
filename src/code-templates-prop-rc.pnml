 /// code definition - RC

// определение расхода топлива
// расход определяется граничным на разгоне, торможении, подъёме, спуске.
// в оставшемся случае расходуется часть, пропорциональная доли массы от общей доли в массе
// (общая масса на долю мощности в общей мощности)
//      return (rc_max * (((LOAD_TEMP(6) /* total weight */ ) * power / LOAD_TEMP(5)) /* total power */ / weight));

// передеать так, что если в гору скорость свыше 90%, то значит мощи хватает и считать обычным образом.

// ввиду отсутсвия переменной для общего веса убрана составляющая веса из формулы. Вернуть при появлении веса.

/*
  каждый критерий должен последовательно быть добавлен в сумму с учётом ситуации и коэф, а затем возвращено итоговое
  значение (сейчас последовательно рбатоает самый высокий коэф)

  Концепция определения стоимости обслуживания ПС.
  Локомотив:
  - при ТО - работы по ТО
  - детали на ТО - зависят от износа, поэтому считаются в основном в движении на высоких и низких скоростях
  - при движении - расход топлива в движении
  - при стоянке - расход в стоянке
  - при движении - расходы на персонал бригады
  - при стоянке - расходы на персонал осмотровой бригады
  - расход годовой за тех осмотр

  Вагон:
  - при ТО - работы по ТО
  - детали на ТО - зависят от износа, поэтому считаются в основном в движении на высоких и низких скоростях
  - при движении с грузом - стоимость обогрева / охлаждения
  - при работе бригады (почтовый вагон, пассажирский вагон дальнего следования) - расходы на персонал
  - расход годовой за тех осмотр / сертификацию


  При построении моделми необходимо учитывать, что RC не пересчитывается постоянно, а кэшируется.
  поэтому точность расчёта будет невелироваться запоздалостью реакции. Поэтому делать сильно разброснные результаты
  расчёта не имеет смысла.
*/

// TODO не учтена текущая скорость, учтён лишь расход разгона. Текущая скорость учтена только в износе
// TODO не учтено, что только головной локомотив имеет сопроотивление воздуха

#define RC_RACE 70             //
#define RC_RACE_LIMIT 9/10     // граница разгона
#define RC_STOP 18             // холостые обороты

switch (FEAT_TRAINS, SELF, all_running_cost_power, // расход топлива считается от разгона
  STORE_TEMP(LOAD_TEMP(10) +
             vehicle_is_powered * LOAD_TEMP(0) *
                ((LOAD_TEMP(11) < (LOAD_TEMP(12) * RC_RACE_LIMIT)) * RC_RACE + 100) / 100 /
                (RC_STOP * (LOAD_TEMP(11) < 2) + 1), 10))
{
  return min(32767, LOAD_TEMP(10));
}

switch (FEAT_TRAINS, SELF, all_running_cost_usage, // износ по скорости считается линейным в процентах от максимальной скорости ПС
  STORE_TEMP(LOAD_TEMP(10) +
             LOAD_TEMP(2) * (LOAD_TEMP(11) + 1) / (LOAD_TEMP(6) * 5 / 18 + 1) *
             (LOAD_TEMP(7) + cargo_count * cargo_unit_weight / 16) / LOAD_TEMP(8), 10))
{
  all_running_cost_power;
}

#define RC_UNUSED 1/20
#define RC_BROKEN 5
#define RC_CRASHED 5

switch (FEAT_TRAINS, PARENT, all_running_cost_factor_unused,
[  STORE_TEMP(current_speed, 11),
   STORE_TEMP(current_max_speed, 12),
   vehicle_is_in_depot + (2 * vehicle_is_broken) + (4 * vehicle_is_crashed) ])
{
     1: return min(32767, RC_UNUSED * LOAD_TEMP(2) + LOAD_TEMP(10));                                   // ПС в депо не используется
  2..3: return min(32767, vehicle_is_potentially_powered * RC_BROKEN * LOAD_TEMP(4) + LOAD_TEMP(10));  // ПС сломано в пути - дорогое ТО
  4..7: return min(32767, RC_CRASHED * LOAD_TEMP(2) + 2000 + LOAD_TEMP(10));                           // ПС разрушено
        all_running_cost_usage;
}

switch (FEAT_TRAINS, SELF, all_running_cost_factor_lic, // В регистре 10 собираем стоимость на данный тик
  STORE_TEMP(                                           // оплата бригады идёт всегда  
                                                        // TODO Учесть СМЕ нормально - если штраф, то бригада в каждой секции??
                                                        // TODO что делать с ПС не под током - куда исчезает команда?
  (LOAD_TEMP(1) * (1 - ((is_penalise_speed() == 0) && (position_in_consist > 0)) * (vehicle_is_powered))) +
  (LOAD_TEMP(3) * (cargo_count > 0)) +         // оплата сопровождения зависит от наличия груза
  (LOAD_TEMP(5) * (current_day_of_year < 1)) + // оплата лицензий и налогов - раз в год, 1 января.
  (LOAD_TEMP(4) * ((current_date > date_of_last_service) &&
                   (current_date < date_of_last_service + 2))), 10)) // Оплата ТО - на выходе из депо
{
     all_running_cost_factor_unused;
}

switch (FEAT_TRAINS, PARENT, all_running_cost_factor_new,
  age_in_days) // в момент постройки RC - совокупный. Смысл - показать при покупке потолок расхода
{
  0: return LOAD_TEMP(0) + LOAD_TEMP(1) + LOAD_TEMP(2) + LOAD_TEMP(3) + LOAD_TEMP(4) + LOAD_TEMP(5);
     all_running_cost_factor_lic;
}

switch (FEAT_TRAINS, SELF, all_running_cost_factor,
  position_in_articulated_veh) // Расчёт ведётся только для головного элемента ARV
{
  0: all_running_cost_factor_new;
     return 0;
}

#define RC_build_year_template(name, year)               \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,   \
  build_year >= year)                                    \
{ 0: name##_b##year##_running_cost_factor;               \
     name##_a##year##_running_cost_factor; }             \

#define RC_build_year2_template(name, year, year2)       \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,   \
  (build_year >= year) +                                 \
  (build_year >= year2))                                 \
{ 0: name##_b##year##_running_cost_factor;               \
  1: name##_a##year##_running_cost_factor;               \
     name##_a##year2##_running_cost_factor; }            \

#define RC_build_year3_template(name, year, year2, year3)   \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,      \
  (build_year >= year) +                                    \
  (build_year >= year2) +                                   \
  (build_year >= year3))                                    \
{ 0: name##_b##year##_running_cost_factor;                  \
  1: name##_a##year##_running_cost_factor;                  \
  2: name##_a##year2##_running_cost_factor;                 \
     name##_a##year3##_running_cost_factor; }               \

#define RC_build_year4_template(name, year, year2, year3, year4)   \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,             \
  (build_year >= year) +                                           \
  (build_year >= year2) +                                          \
  (build_year >= year3) +                                          \
  (build_year >= year4))                                           \
{ 0: name##_b##year##_running_cost_factor;                         \
  1: name##_a##year##_running_cost_factor;                         \
  2: name##_a##year2##_running_cost_factor;                        \
  3: name##_a##year3##_running_cost_factor;                        \
     name##_a##year4##_running_cost_factor; }                      \

// Определение стоимости обслуживания в зависимости от типа пути
#define engine_RC_change_AC_DC(name)                                      \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, current_railtype)  \
{ ERD1: name##_DC_running_cost_factor;                                    \
  ERD2: name##_DC_running_cost_factor;                                    \
  ERD3: name##_DC_running_cost_factor;                                    \
        name##_AC_running_cost_factor; }                                  \

// Определение стоимости обслуживания МВПС
#define RC_head_check_new(name, vehid)                            \
switch (FEAT_TRAINS, PARENT, name##_check2_running_cost_factor,   \
[  STORE_TEMP(0, 0),                                              \
   STORE_TEMP(0, 1),                                              \
   STORE_TEMP(0, 3),                                              \
   STORE_TEMP(LOAD_TEMP(7), 8)])                                  \
{ all_running_cost_factor; }                                      \
switch (FEAT_TRAINS, PARENT, name##_check_running_cost_factor,    \
  vehicle_type_id == vehid)                                       \
{ 1: all_running_cost_factor;                                     \
     name##_check2_running_cost_factor; }                         \

#define RC_head_check2_new(name, vehid, vehid2)                   \
switch (FEAT_TRAINS, PARENT, name##_check2_running_cost_factor,   \
[  STORE_TEMP(0, 0),                                              \
   STORE_TEMP(0, 1),                                              \
   STORE_TEMP(0, 3),                                              \
   STORE_TEMP(LOAD_TEMP(7), 8)])                                  \
{ all_running_cost_factor; }                                      \
switch (FEAT_TRAINS, PARENT, name##_check_running_cost_factor,    \
  (vehicle_type_id == vehid) || (vehicle_type_id == vehid2))      \
{ 1: all_running_cost_factor;                                     \
     name##_check2_running_cost_factor; }                         \

// end
