 /// code definition - properties

// Общее изменение по году постройки
#define engine_change_build_after(name, old_prop, new_prop, year)  \
switch (FEAT_TRAINS, SELF, name, build_year >= year)               \
{ 1: new_prop;                                                     \
     old_prop; }                                                   \

#define engine_change_build_after2(name, old_prop, new_prop, year, new_prop2, year2)  \
switch (FEAT_TRAINS, SELF, name, (build_year >= year) + (build_year >= year2))        \
{ 1: new_prop;                                                                        \
  2: new_prop2;                                                                       \
     old_prop; }                                                                      \

#define engine_change_build_after3(name, old_prop, new_prop, year, new_prop2, year2, new_prop3, year3)  \
switch (FEAT_TRAINS, SELF, name, (build_year >= year) + (build_year >= year2) + (build_year >= year3))  \
{ 1: new_prop;                                                                                          \
  2: new_prop2;                                                                                         \
  3: new_prop3;                                                                                         \
     old_prop; }                                                                                        \

// Общее изменение по Текущему году
#define engine_change_year(name, old_prop_name, new_prop_name, year)  \
switch (FEAT_TRAINS, SELF, name, (current_year >= year))              \
{ 1: new_prop_name; old_prop_name; }                                  \

// Общее изменение по рефиту
#define engine_change_refit(name, old_prop_name, new_prop_name)  \
switch (FEAT_TRAINS, SELF, name, (cargo_subtype >= 0xE0))        \
{ 1: new_prop_name; old_prop_name; }                             \

#define engine_change_refit_shift(name, old_prop_name, new_prop_name, shift)  \
switch (FEAT_TRAINS, SELF, name, (cargo_subtype >= 0xE0 + shift))             \
{ 1: new_prop_name;  old_prop_name; }                                         \

// Общее изменение по рефиту предыдущего ПС
#define engine_change_refit_prev(name, old_prop_name, new_prop_name, offset)  \
switch (FEAT_TRAINS, SELF, name,                                              \
[ set_offset_to(-2), (prev_vehicle_cargo_subtype()>= 0xE0) ])                 \
{ 1: new_prop_name; old_prop_name; }                                          \

#define engine_change_refit_shift_prev(name, old_prop_name, new_prop_name, shift, offset)  \
switch (FEAT_TRAINS, SELF, name,                                                           \
[ set_offset_to(-2), (prev_vehicle_cargo_subtype()>= 0xE0 + shift) ])                      \
{ 1: new_prop_name; old_prop_name; }                                                       \

// Определение пенальти на скорость (схема без СМЕ)
#define engine_penalise_speed0(name)                         \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,      \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||  \
   (position_in_articulated_veh > 0))                        \
{ 1: return 0;                                               \
     return bitmask(FLAG_PENALISE_SPEED); }                  \

// Определение пенальти на скорость (схема без альтернатив в СМЕ)
#define engine_penalise_speed(name, num)                         \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,         \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name), 0),              \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&  \
    LOAD_TEMP(0) < num)])                                        \
{ 1: return 0;                                                   \
     return bitmask(FLAG_PENALISE_SPEED); }                      \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,       \
[ STORE_TEMP(count_veh_id(name), 0),                             \
  STORE_TEMP(vehicle_type_id == name, 1) ])                      \
{ name##_bitmask_vehicle_info3; }                                \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,          \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||      \
   (position_in_articulated_veh > 0))                            \
{ 1: return 0;                                                   \
     name##_bitmask_vehicle_info2; }                             \

// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)
#define engine_penalise_speed2(name, vehid1, vehid2, num)        \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,         \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -               \
                            count_veh_id(vehid2), 0),            \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&  \
    LOAD_TEMP(0) < num)])                                        \
{ 1: return 0;                                                   \
     return bitmask(FLAG_PENALISE_SPEED); }                      \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,       \
[ STORE_TEMP(count_veh_id(vehid1) +                              \
             count_veh_id(vehid2), 0),                           \
  STORE_TEMP((vehicle_type_id == vehid1) ||                      \
             (vehicle_type_id == vehid2), 1) ])                  \
{ name##_bitmask_vehicle_info3; }                                \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,          \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||      \
   (position_in_articulated_veh > 0))                            \
{ 1: return 0;                                                   \
     name##_bitmask_vehicle_info2; }                             \

// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)
#define engine_penalise_speed3(name, vehid1, vehid2, vehid3, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,           \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                 \
                            count_veh_id(vehid2) -                 \
                            count_veh_id(vehid3), 0),              \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&    \
    LOAD_TEMP(0) < num)])                                          \
{ 1: return 0;                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                        \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,         \
[ STORE_TEMP(count_veh_id(vehid1) +                                \
             count_veh_id(vehid2) +                                \
             count_veh_id(vehid3), 0),                             \
  STORE_TEMP((vehicle_type_id == vehid1) ||                        \
             (vehicle_type_id == vehid2) ||                        \
             (vehicle_type_id == vehid3), 1) ])                    \
{ name##_bitmask_vehicle_info3; }                                  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,            \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||        \
   (position_in_articulated_veh > 0))                              \
{ 1: return 0;                                                     \
     name##_bitmask_vehicle_info2; }                               \

// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)
#define engine_penalise_speed4(name, vehid1, vehid2, vehid3, vehid4, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                   \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                         \
                            count_veh_id(vehid2) -                         \
                            count_veh_id(vehid3) -                         \
                            count_veh_id(vehid4), 0),                      \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&            \
    LOAD_TEMP(0) < num)])                                                  \
{ 1: return 0;                                                             \
     return bitmask(FLAG_PENALISE_SPEED); }                                \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                 \
[ STORE_TEMP(count_veh_id(vehid1) +                                        \
             count_veh_id(vehid2) +                                        \
             count_veh_id(vehid3) +                                        \
             count_veh_id(vehid4), 0),                                     \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                \
             (vehicle_type_id == vehid2) ||                                \
             (vehicle_type_id == vehid3) ||                                \
             (vehicle_type_id == vehid4), 1) ])                            \
{ name##_bitmask_vehicle_info3; }                                          \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                    \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                \
   (position_in_articulated_veh > 0))                                      \
{ 1: return 0;                                                             \
     name##_bitmask_vehicle_info2; }                                       \

// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)
#define engine_penalise_speed5(name, vehid1, vehid2, vehid3, vehid4, vehid5, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                           \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                 \
                            count_veh_id(vehid2) -                                 \
                            count_veh_id(vehid3) -                                 \
                            count_veh_id(vehid4) -                                 \
                            count_veh_id(vehid5), 0),                              \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                    \
    LOAD_TEMP(0) < num)])                                                          \
{ 1: return 0;                                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                                        \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                         \
[ STORE_TEMP(count_veh_id(vehid1) +                                                \
             count_veh_id(vehid2) +                                                \
             count_veh_id(vehid3) +                                                \
             count_veh_id(vehid4) +                                                \
             count_veh_id(vehid5), 0),                                             \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                        \
             (vehicle_type_id == vehid2) ||                                        \
             (vehicle_type_id == vehid3) ||                                        \
             (vehicle_type_id == vehid4) ||                                        \
             (vehicle_type_id == vehid5), 1) ])                                    \
{ name##_bitmask_vehicle_info3; }                                                  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                            \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                        \
   (position_in_articulated_veh > 0))                                              \
{ 1: return 0;                                                                     \
     name##_bitmask_vehicle_info2; }                                               \

// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)
#define engine_penalise_speed6(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                   \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                         \
                            count_veh_id(vehid2) -                                         \
                            count_veh_id(vehid3) -                                         \
                            count_veh_id(vehid4) -                                         \
                            count_veh_id(vehid5) -                                         \
                            count_veh_id(vehid6), 0),                                      \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                            \
    LOAD_TEMP(0) < num)])                                                                  \
{ 1: return 0;                                                                             \
     return bitmask(FLAG_PENALISE_SPEED); }                                                \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                 \
[ STORE_TEMP(count_veh_id(vehid1) +                                                        \
             count_veh_id(vehid2) +                                                        \
             count_veh_id(vehid3) +                                                        \
             count_veh_id(vehid4) +                                                        \
             count_veh_id(vehid5) +                                                        \
             count_veh_id(vehid6), 0),                                                     \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                \
             (vehicle_type_id == vehid2) ||                                                \
             (vehicle_type_id == vehid3) ||                                                \
             (vehicle_type_id == vehid4) ||                                                \
             (vehicle_type_id == vehid5) ||                                                \
             (vehicle_type_id == vehid6), 1) ])                                            \
{ name##_bitmask_vehicle_info3; }                                                          \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                    \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                \
   (position_in_articulated_veh > 0))                                                      \
{ 1: return 0;                                                                             \
     name##_bitmask_vehicle_info2; }                                                       \

// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)
#define engine_penalise_speed7(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                           \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                                 \
                            count_veh_id(vehid2) -                                                 \
                            count_veh_id(vehid3) -                                                 \
                            count_veh_id(vehid4) -                                                 \
                            count_veh_id(vehid5) -                                                 \
                            count_veh_id(vehid6) -                                                 \
                            count_veh_id(vehid7), 0),                                              \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                                    \
    LOAD_TEMP(0) < num)])                                                                          \
{ 1: return 0;                                                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                                                        \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                         \
[ STORE_TEMP(count_veh_id(vehid1) +                                                                \
             count_veh_id(vehid2) +                                                                \
             count_veh_id(vehid3) +                                                                \
             count_veh_id(vehid4) +                                                                \
             count_veh_id(vehid5) +                                                                \
             count_veh_id(vehid6) +                                                                \
             count_veh_id(vehid7), 0),                                                             \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                        \
             (vehicle_type_id == vehid2) ||                                                        \
             (vehicle_type_id == vehid3) ||                                                        \
             (vehicle_type_id == vehid4) ||                                                        \
             (vehicle_type_id == vehid5) ||                                                        \
             (vehicle_type_id == vehid6) ||                                                        \
             (vehicle_type_id == vehid7), 1) ])                                                    \
{ name##_bitmask_vehicle_info3; }                                                                  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                            \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                        \
   (position_in_articulated_veh > 0))                                                              \
{ 1: return 0;                                                                                     \
     name##_bitmask_vehicle_info2; }                                                               \

// Определение пенальти на скорость (схема c 7 альтернативами в СМЕ)
#define engine_penalise_speed8(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, vehid8, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                                   \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                                         \
                            count_veh_id(vehid2) -                                                         \
                            count_veh_id(vehid3) -                                                         \
                            count_veh_id(vehid4) -                                                         \
                            count_veh_id(vehid5) -                                                         \
                            count_veh_id(vehid6) -                                                         \
                            count_veh_id(vehid7) -                                                         \
                            count_veh_id(vehid8), 0),                                                      \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                                            \
    LOAD_TEMP(0) < num)])                                                                                  \
{ 1: return 0;                                                                                             \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                                 \
[ STORE_TEMP(count_veh_id(vehid1) +                                                                        \
             count_veh_id(vehid2) +                                                                        \
             count_veh_id(vehid3) +                                                                        \
             count_veh_id(vehid4) +                                                                        \
             count_veh_id(vehid5) +                                                                        \
             count_veh_id(vehid6) +                                                                        \
             count_veh_id(vehid7) +                                                                        \
             count_veh_id(vehid8), 0),                                                                     \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                                \
             (vehicle_type_id == vehid2) ||                                                                \
             (vehicle_type_id == vehid3) ||                                                                \
             (vehicle_type_id == vehid4) ||                                                                \
             (vehicle_type_id == vehid5) ||                                                                \
             (vehicle_type_id == vehid6) ||                                                                \
             (vehicle_type_id == vehid7) ||                                                                \
             (vehicle_type_id == vehid8), 1) ])                                                            \
{ name##_bitmask_vehicle_info3; }                                                                          \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                    \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                                \
   (position_in_articulated_veh > 0))                                                                      \
{ 1: return 0;                                                                                             \
     name##_bitmask_vehicle_info2; }                                                                       \

// Определение пенальти на скорость (схема c 8 альтернативами в СМЕ)
#define engine_penalise_speed9(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, vehid8, vehid9, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                                           \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                                                 \
                            count_veh_id(vehid2) -                                                                 \
                            count_veh_id(vehid3) -                                                                 \
                            count_veh_id(vehid4) -                                                                 \
                            count_veh_id(vehid5) -                                                                 \
                            count_veh_id(vehid6) -                                                                 \
                            count_veh_id(vehid7) -                                                                 \
                            count_veh_id(vehid8) -                                                                 \
                            count_veh_id(vehid9), 0),                                                              \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                                                    \
    LOAD_TEMP(0) < num)])                                                                                          \
{ 1: return 0;                                                                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                        \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                                         \
[ STORE_TEMP(count_veh_id(vehid1) +                                                                                \
             count_veh_id(vehid2) +                                                                                \
             count_veh_id(vehid3) +                                                                                \
             count_veh_id(vehid4) +                                                                                \
             count_veh_id(vehid5) +                                                                                \
             count_veh_id(vehid6) +                                                                                \
             count_veh_id(vehid7) +                                                                                \
             count_veh_id(vehid8) +                                                                                \
             count_veh_id(vehid9), 0),                                                                             \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                                        \
             (vehicle_type_id == vehid2) ||                                                                        \
             (vehicle_type_id == vehid3) ||                                                                        \
             (vehicle_type_id == vehid4) ||                                                                        \
             (vehicle_type_id == vehid5) ||                                                                        \
             (vehicle_type_id == vehid6) ||                                                                        \
             (vehicle_type_id == vehid7) ||                                                                        \
             (vehicle_type_id == vehid8) ||                                                                        \
             (vehicle_type_id == vehid9), 1) ])                                                                    \
{ name##_bitmask_vehicle_info3; }                                                                                  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                            \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                                        \
   (position_in_articulated_veh > 0))                                                                              \
{ 1: return 0;                                                                                                     \
     name##_bitmask_vehicle_info2; }                                                                               \

// Определение пенальти на скорость (схема c 9 альтернативами в СМЕ)
#define engine_penalise_speed10(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, vehid8, vehid9, vehid10, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                                                     \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                                                           \
                            count_veh_id(vehid2) -                                                                           \
                            count_veh_id(vehid3) -                                                                           \
                            count_veh_id(vehid4) -                                                                           \
                            count_veh_id(vehid5) -                                                                           \
                            count_veh_id(vehid6) -                                                                           \
                            count_veh_id(vehid7) -                                                                           \
                            count_veh_id(vehid8) -                                                                           \
                            count_veh_id(vehid9) -                                                                           \
                            count_veh_id(vehid10), 0),                                                                       \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                                                              \
    LOAD_TEMP(0) < num)])                                                                                                    \
{ 1: return 0;                                                                                                               \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                                  \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                                                   \
[ STORE_TEMP(count_veh_id(vehid1) +                                                                                          \
             count_veh_id(vehid2) +                                                                                          \
             count_veh_id(vehid3) +                                                                                          \
             count_veh_id(vehid4) +                                                                                          \
             count_veh_id(vehid5) +                                                                                          \
             count_veh_id(vehid6) +                                                                                          \
             count_veh_id(vehid7) +                                                                                          \
             count_veh_id(vehid8) +                                                                                          \
             count_veh_id(vehid9) +                                                                                          \
             count_veh_id(vehid10), 0),                                                                                      \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                                                  \
             (vehicle_type_id == vehid2) ||                                                                                  \
             (vehicle_type_id == vehid3) ||                                                                                  \
             (vehicle_type_id == vehid4) ||                                                                                  \
             (vehicle_type_id == vehid5) ||                                                                                  \
             (vehicle_type_id == vehid6) ||                                                                                  \
             (vehicle_type_id == vehid7) ||                                                                                  \
             (vehicle_type_id == vehid8) ||                                                                                  \
             (vehicle_type_id == vehid9) ||                                                                                  \
             (vehicle_type_id == vehid10), 1) ])                                                                             \
{ name##_bitmask_vehicle_info3; }                                                                                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                                      \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                                                  \
   (position_in_articulated_veh > 0))                                                                                        \
{ 1: return 0;                                                                                                               \
     name##_bitmask_vehicle_info2; }                                                                                         \

// Определение пенальти на скорость (схема c 10 альтернативами в СМЕ)
#define engine_penalise_speed11(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, vehid8, vehid9, vehid10, vehid11, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                                                              \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                                                                    \
                            count_veh_id(vehid2) -                                                                                    \
                            count_veh_id(vehid3) -                                                                                    \
                            count_veh_id(vehid4) -                                                                                    \
                            count_veh_id(vehid5) -                                                                                    \
                            count_veh_id(vehid6) -                                                                                    \
                            count_veh_id(vehid7) -                                                                                    \
                            count_veh_id(vehid8) -                                                                                    \
                            count_veh_id(vehid9) -                                                                                    \
                            count_veh_id(vehid10) -                                                                                   \
                            count_veh_id(vehid11), 0),                                                                                \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                                                                       \
    LOAD_TEMP(0) < num)])                                                                                                             \
{ 1: return 0;                                                                                                                        \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                                           \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                                                            \
[ STORE_TEMP(count_veh_id(vehid1) +                                                                                                   \
             count_veh_id(vehid2) +                                                                                                   \
             count_veh_id(vehid3) +                                                                                                   \
             count_veh_id(vehid4) +                                                                                                   \
             count_veh_id(vehid5) +                                                                                                   \
             count_veh_id(vehid6) +                                                                                                   \
             count_veh_id(vehid7) +                                                                                                   \
             count_veh_id(vehid8) +                                                                                                   \
             count_veh_id(vehid9) +                                                                                                   \
             count_veh_id(vehid10) +                                                                                                  \
             count_veh_id(vehid11), 0),                                                                                               \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                                                           \
             (vehicle_type_id == vehid2) ||                                                                                           \
             (vehicle_type_id == vehid3) ||                                                                                           \
             (vehicle_type_id == vehid4) ||                                                                                           \
             (vehicle_type_id == vehid5) ||                                                                                           \
             (vehicle_type_id == vehid6) ||                                                                                           \
             (vehicle_type_id == vehid7) ||                                                                                           \
             (vehicle_type_id == vehid8) ||                                                                                           \
             (vehicle_type_id == vehid9) ||                                                                                           \
             (vehicle_type_id == vehid10) ||                                                                                          \
             (vehicle_type_id == vehid11), 1) ])                                                                                      \
{ name##_bitmask_vehicle_info3; }                                                                                                     \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                                               \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                                                           \
   (position_in_articulated_veh > 0))                                                                                                 \
{ 1: return 0;                                                                                                                        \
     name##_bitmask_vehicle_info2; }                                                                                                  \

// Определение пенальти на скорость (схема c 13 альтернативами в СМЕ)
#define engine_penalise_speed14(name, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, vehid8, vehid9, vehid10, vehid11, vehid12, vehid13, vehid14, num)  \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                                                                                                         \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vehid1) -                                                                                                               \
                            count_veh_id(vehid2) -                                                                                                               \
                            count_veh_id(vehid3) -                                                                                                               \
                            count_veh_id(vehid4) -                                                                                                               \
                            count_veh_id(vehid5) -                                                                                                               \
                            count_veh_id(vehid6) -                                                                                                               \
                            count_veh_id(vehid7) -                                                                                                               \
                            count_veh_id(vehid8) -                                                                                                               \
                            count_veh_id(vehid9) -                                                                                                               \
                            count_veh_id(vehid10) -                                                                                                              \
                            count_veh_id(vehid11) -                                                                                                              \
                            count_veh_id(vehid12) -                                                                                                              \
                            count_veh_id(vehid13) -                                                                                                              \
                            count_veh_id(vehid14), 0),                                                                                                           \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&                                                                                                  \
    LOAD_TEMP(0) < num)])                                                                                                                                        \
{ 1: return 0;                                                                                                                                                   \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                                                                      \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                                                                                                       \
[ STORE_TEMP(count_veh_id(vehid1) +                                                                                                                              \
             count_veh_id(vehid2) +                                                                                                                              \
             count_veh_id(vehid3) +                                                                                                                              \
             count_veh_id(vehid4) +                                                                                                                              \
             count_veh_id(vehid5) +                                                                                                                              \
             count_veh_id(vehid6) +                                                                                                                              \
             count_veh_id(vehid7) +                                                                                                                              \
             count_veh_id(vehid8) +                                                                                                                              \
             count_veh_id(vehid9) +                                                                                                                              \
             count_veh_id(vehid10) +                                                                                                                             \
             count_veh_id(vehid11) +                                                                                                                             \
             count_veh_id(vehid12) +                                                                                                                             \
             count_veh_id(vehid13) +                                                                                                                             \
             count_veh_id(vehid14), 0),                                                                                                                          \
  STORE_TEMP((vehicle_type_id == vehid1) ||                                                                                                                      \
             (vehicle_type_id == vehid2) ||                                                                                                                      \
             (vehicle_type_id == vehid3) ||                                                                                                                      \
             (vehicle_type_id == vehid4) ||                                                                                                                      \
             (vehicle_type_id == vehid5) ||                                                                                                                      \
             (vehicle_type_id == vehid6) ||                                                                                                                      \
             (vehicle_type_id == vehid7) ||                                                                                                                      \
             (vehicle_type_id == vehid8) ||                                                                                                                      \
             (vehicle_type_id == vehid9) ||                                                                                                                      \
             (vehicle_type_id == vehid10) ||                                                                                                                     \
             (vehicle_type_id == vehid11) ||                                                                                                                     \
             (vehicle_type_id == vehid12) ||                                                                                                                     \
             (vehicle_type_id == vehid13) ||                                                                                                                     \
             (vehicle_type_id == vehid14), 1) ])                                                                                                                 \
{ name##_bitmask_vehicle_info3; }                                                                                                                                \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                                                                          \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                                                                                                      \
   (position_in_articulated_veh > 0))                                                                                                                            \
{ 1: return 0;                                                                                                                                                   \
     name##_bitmask_vehicle_info2; }                                                                                                                             \

// запрет на последнюю секцию
// TODO CB 36 is not allowed to use var 61 (other vehicle), so the code of engine_has_before and engine_has_after is not added. Add when it would be possible

// 1 секция + секции по краям
#define engine_notlast_bothsides(namefull, vehid, basename)              \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)  \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                 \
     basename; }                                                         \

// 1 или 2 секции + секции по краям
#define engine1_2_notlast_bothsides(namefull, vehid, basename)           \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)  \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                 \
     basename; }                                                         \

// 1 секция + секции по краям с 1 альтернативой
#define engine_notlast_bothsides2(namefull, vehid1, vehid2, basename)    \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)  \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                 \
     basename; }                                                         \

// 1 или 2 секции + секции по краям с 1 альтернативой
#define engine1_2_notlast_bothsides2(namefull, vehid1, vehid2, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)   \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                  \
     basename; }                                                          \

// 1 секция + секции по краям с 2 альтернативами
#define engine_notlast_bothsides3(namefull, vehid1, vehid2, vehid3, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)        \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                       \
     basename; }                                                               \

// 1 секция + секции по краям с 3 альтернативами
#define engine_notlast_bothsides4(namefull, vehid1, vehid2, vehid3, vehid4, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)                \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                               \
     basename; }                                                                       \

// 1 или 2 секции + секции по краям с 3 альтернативами
#define engine1_2_notlast_bothsides4(namefull, vehid1, vehid2, vehid3, vehid4, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)                   \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                                  \
     basename; }                                                                          \

// 1 секция + секции по краям с 4 альтернативами
#define engine_notlast_bothsides5(namefull, vehid1, vehid2, vehid3, vehid4, vehid5, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)                        \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                                       \
     basename; }                                                                               \

// 1 секция + секции по краям с 5 альтернативами
#define engine_notlast_bothsides6(namefull, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)                                \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                                               \
     basename; }                                                                                       \

// 1 секция + секции по краям с 9 альтернативами
#define engine_notlast_bothsides10(namefull, vehid1, vehid2, vehid3, vehid4, vehid5, vehid6, vehid7, vehid8, vehid9, vehid10, basename)  \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)                                                                  \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                                                                                 \
     basename; }                                                                                                                         \

// запрет на последнюю секцию

#define engine_notlast(namefull, basename)                               \
switch (FEAT_TRAINS, SELF, namefull, position_in_consist_from_end == 1)  \
{ 1: return bitmask(FLAG_WRONG_CONSIST);                                 \
     basename; }                                                         \

#define engine_has_before(namefull, vehid, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                  \
[ set_offset_to(-2),                                  \
  prev_vehicle_type_id() == vehid])                   \
{ 0: return bitmask(FLAG_WRONG_CONSIST);              \
     basename; }                                      \

#define engine_has_after(namefull, vehid, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                 \
[ set_offset_to(2),                                  \
  prev_vehicle_type_id() == vehid])                  \
{ 0: return bitmask(FLAG_WRONG_CONSIST);             \
     basename; }                                     \

#define engine_has_before2(namefull, vehid1, vehid2, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                            \
[ set_offset_to(-2),                                            \
  (prev_vehicle_type_id() == vehid1) ||                         \
  (prev_vehicle_type_id() == vehid2) ])                         \
{ 0: return bitmask(FLAG_WRONG_CONSIST);                        \
     basename; }                                                \

#define engine_has_after2(namefull, vehid1, vehid2, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                           \
[ set_offset_to(2),                                            \
  (prev_vehicle_type_id() == vehid1) ||                        \
  (prev_vehicle_type_id() == vehid2) ])                        \
{ 0: return bitmask(FLAG_WRONG_CONSIST);                       \
     basename; }                                               \

#define engine_has_before3(namefull, vehid1, vehid2, vehid3, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                                    \
[ set_offset_to(-2),                                                    \
  (prev_vehicle_type_id() == vehid1) ||                                 \
  (prev_vehicle_type_id() == vehid2) ||                                 \
  (prev_vehicle_type_id() == vehid3) ])                                 \
{ 0: return bitmask(FLAG_WRONG_CONSIST);                                \
     basename; }                                                        \

#define engine_has_after3(namefull, vehid1, vehid2, vehid3, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                                   \
[ set_offset_to(2),                                                    \
  (prev_vehicle_type_id() == vehid1) ||                                \
  (prev_vehicle_type_id() == vehid2) ||                                \
  (prev_vehicle_type_id() == vehid3) ])                                \
{ 0: return bitmask(FLAG_WRONG_CONSIST);                               \
     basename; }                                                       \

#define engine_has_before4(namefull, vehid1, vehid2, vehid3, vehid4, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                                            \
[ set_offset_to(-2),                                                            \
  (prev_vehicle_type_id() == vehid1) ||                                         \
  (prev_vehicle_type_id() == vehid2) ||                                         \
  (prev_vehicle_type_id() == vehid3) ||                                         \
  (prev_vehicle_type_id() == vehid4) ])                                         \
{ 0: return bitmask(FLAG_WRONG_CONSIST);                                        \
     basename; }                                                                \

#define engine_has_after4(namefull, vehid1, vehid2, vehid3, vehid4, basename)  \
switch (FEAT_TRAINS, SELF, namefull,                                           \
[ set_offset_to(2),                                                            \
  (prev_vehicle_type_id() == vehid1) ||                                        \
  (prev_vehicle_type_id() == vehid2) ||                                        \
  (prev_vehicle_type_id() == vehid3) ||                                        \
  (prev_vehicle_type_id() == vehid4) ])                                        \
{ 0: return bitmask(FLAG_WRONG_CONSIST);                                       \
     basename; }                                                               \

// Определение скорости без вариантов
#define engine_speed(name, speed)                             \
switch (FEAT_TRAINS, SELF, name##_speed,                      \
  is_penalise_speed() ? get_penalised_speed(speed)  : speed)  \
{ return; }                                                   \

// Определение скорости с изменением по году постройки
#define engine_speed_change_build_after(name, speed, new_speed, year)         \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)         \
{ 1: return new_speed;                                                        \
     return speed; }                                                          \
switch (FEAT_TRAINS, SELF, name##_speed,                                      \
[ STORE_TEMP(build_year >= year ? new_speed                : speed, 0),       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0))  : LOAD_TEMP(0) ])  \
{ return; }                                                                   \

#define wagon_speed_change_build_after(name, speed, new_speed, year)  \
switch (FEAT_TRAINS, SELF, name##_speed, build_year >= year)          \
{ 1: return new_speed;                                                \
     return speed; }                                                  \

// Определение скорости с изменением в заданный год
#define engine_speed_change_after(name, speed, new_speed, year)  \
switch (FEAT_TRAINS, SELF, name##_speed,                         \
[ STORE_TEMP(check_year(year) ? new_speed:                       \
                                speed, 0),                       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0))  :     \
                        LOAD_TEMP(0) ])                          \
{ return; }                                                      \

#define wagon_speed_change_after(name, speed, new_speed, year)  \
switch (FEAT_TRAINS, SELF, name##_speed, check_year(year))      \
{ 1: return new_speed;                                          \
     return speed; }                                            \

// Определение скорости с изменением в 2 заданных года
#define engine_speed_change_after2(name, speed, new_speed, year, new_speed2, year2)  \
switch (FEAT_TRAINS, SELF, name##_speed,                                             \
[ STORE_TEMP(check_year(year) ?                                                      \
              (check_year(year2) ? new_speed2:                                       \
                                   new_speed):                                       \
                                speed, 0),                                           \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0))  :                         \
                        LOAD_TEMP(0) ])                                              \
{ return; }                                                                          \

// Определение скорости с изменением в 3 заданных года
#define engine_speed_change_after3(name, speed, new_speed, year, new_speed2, year2, new_speed3, year3)  \
switch (FEAT_TRAINS, SELF, name##_speed,                                                                \
[ STORE_TEMP(check_year(year) ?                                                                         \
              (check_year(year2) ?                                                                      \
                (check_year(year3) ? new_speed3:                                                        \
                                     new_speed2):                                                       \
                                   new_speed):                                                          \
                                 speed, 0),                                                             \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0))  :                                            \
                        LOAD_TEMP(0) ])                                                                 \
{ return; }                                                                                             \

// Определение скорости со снижением для старых
#define engine_speed_with_reduce(name, speed, speed_red, life)                \
switch (FEAT_TRAINS, SELF, name##_speed,                                      \
[ STORE_TEMP(get_max_speed(life, speed_red, speed), 0),                       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0))  : LOAD_TEMP(0) ])  \
{ return; }                                                                   \

// Определение скорости со снижением для старых и изменением скорости по году постройки
#define engine_speed_with_reduce_change_build_after(name, speed, speed_red, life, new_speed, year)  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)                               \
{ 1: return new_speed;                                                                              \
     return speed; }                                                                                \
switch (FEAT_TRAINS, SELF, name##_speed,                                                            \
[ STORE_TEMP(get_max_speed(life, speed_red, ((build_year >= year) ? new_speed  : speed)), 0),       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0))                      : LOAD_TEMP(0) ])    \
{ return; }                                                                                         \

// Определение скорости с загрузкой
#define wagon_speed_change_on_load(name, speed, loaded_speed, loaded_amount)  \
switch (FEAT_TRAINS, SELF, name##_speed,                                      \
  cargo_count > loaded_amount)                                                \
{ 1: return loaded_speed;                                                     \
     return speed; }                                                          \

// Определение скорости в зависимости от типа пути
#define engine_speed_change_AC_DC(name)                       \
is_ER25AC_ds(name##_speed, name##_AC_speed, name##_DC_speed)  \

#define engine_speed_change_AAC_DC(name)                          \
is_ER15AC_ds(name##_2_speed, name##_15AC_speed, name##_DC_speed)  \
is_ER25AC_ds(name##_speed, name##_AC_speed, name##_2_speed)       \

#define engine_speed_change_AAC_DDC(name)                        \
is_ER3DC_ds(name##_3_speed, name##_DC_speed, name##_15DC_speed)  \
is_ER15AC_ds(name##_2_speed, name##_15AC_speed, name##_3_speed)  \
is_ER25AC_ds(name##_speed, name##_AC_speed, name##_2_speed)      \

// Определение старения груза с изменением по году постройки
#define engine_CAP_change_build_after(name, CAP, new_CAP, year)          \
switch (FEAT_TRAINS, SELF, name##_cargo_age_period, build_year >= year)  \
{ 1: return new_CAP;                                                     \
     return CAP; }                                                       \

// Определение массы с изменением по году постройки
#define engine_weight_change_build_after(name, weight, new_weight, year)  \
switch (FEAT_TRAINS, SELF, name##_weight, build_year >= year)             \
{ 1: return round(new_weight);                                            \
     return round(weight); }                                              \

// Определение массы с изменением по 2-м годам постройки
#define engine_weight_change_build_after2(name, weight, new_weight, year, new_weight2, year2)  \
switch (FEAT_TRAINS, SELF, name##_weight, (build_year >= year) + (build_year >= year2))        \
{ 1: return round(new_weight);                                                                 \
  2: return round(new_weight2);                                                                \
     return round(weight); }                                                                   \

// Определение массы с изменением по 3-м годам постройки
#define engine_weight_change_build_after3(name, weight, new_weight, year, new_weight2, year2, new_weight3, year3)  \
switch (FEAT_TRAINS, SELF, name##_weight, (build_year >= year) + (build_year >= year2) + (build_year >= year3))    \
{ 1: return round(new_weight);                                                                                     \
  2: return round(new_weight2);                                                                                    \
  3: return round(new_weight3);                                                                                    \
     return round(weight); }                                                                                       \

// Определение массы с изменением по 4-м годам постройки
#define engine_weight_change_build_after4(name, weight, new_weight, year, new_weight2, year2, new_weight3, year3, new_weight4, year4)    \
switch (FEAT_TRAINS, SELF, name##_weight, (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))  \
{ 1: return round(new_weight);                                                                                                           \
  2: return round(new_weight2);                                                                                                          \
  3: return round(new_weight3);                                                                                                          \
  4: return round(new_weight4);                                                                                                          \
     return round(weight); }                                                                                                             \

// Определение цены с изменением по году постройки
#define engine_cost_change_build_after(name, cost, new_cost, year)  \
switch (FEAT_TRAINS, SELF, name##_cost_factor, build_year >= year)  \
{ 1: return new_cost;                                               \
     return cost; }                                                 \

// Определение цены с изменением по 2-м годам постройки
#define engine_cost_change_build_after2(name, cost, new_cost, year, new_cost2, year2)         \
switch (FEAT_TRAINS, SELF, name##_cost_factor, (build_year >= year) + (build_year >= year2))  \
{ 1: return new_cost;                                                                         \
  2: return new_cost2;                                                                        \
     return cost; }                                                                           \

// Определение цены с изменением по 3-м годам постройки
#define engine_cost_change_build_after3(name, cost, new_cost, year, new_cost2, year2, new_cost3, year3)               \
switch (FEAT_TRAINS, SELF, name##_cost_factor, (build_year >= year) + (build_year >= year2) + (build_year >= year3))  \
{ 1: return new_cost;                                                                                                 \
  2: return new_cost2;                                                                                                \
  3: return new_cost3;                                                                                                \
     return cost; }                                                                                                   \

// Определение цены с изменением по 4-м годам постройки
#define engine_cost_change_build_after4(name, cost, new_cost, year, new_cost2, year2, new_cost3, year3, new_cost4, year4)                     \
switch (FEAT_TRAINS, SELF, name##_cost_factor, (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))  \
{ 1: return new_cost;                                                                                                                         \
  2: return new_cost2;                                                                                                                        \
  3: return new_cost3;                                                                                                                        \
  4: return new_cost4;                                                                                                                        \
     return cost; }                                                                                                                           \

// Определение мощности с изменением по году постройки
#define engine_power_change_build_after(name, power, new_power, year)  \
switch (FEAT_TRAINS, SELF, name##_power, build_year >= year)           \
{ 1: return get_power_in_cb(new_power);                                \
     return get_power_in_cb(power); }                                  \

// Определение мощности с изменением по 2-м годам постройки
#define engine_power_change_build_after2(name, power, new_power, year, new_power2, year2)  \
switch (FEAT_TRAINS, SELF, name##_power, (build_year >= year) + (build_year >= year2))     \
{ 1: return get_power_in_cb(new_power);                                                    \
  2: return get_power_in_cb(new_power2);                                                   \
     return get_power_in_cb(power); }                                                      \

// Определение мощности с изменением по 3-м годам постройки
#define engine_power_change_build_after3(name, power, new_power, year, new_power2, year2, new_power3, year3)    \
switch (FEAT_TRAINS, SELF, name##_power, (build_year >= year) + (build_year >= year2) + (build_year >= year3))  \
{ 1: return get_power_in_cb(new_power);                                                                         \
  2: return get_power_in_cb(new_power2);                                                                        \
  3: return get_power_in_cb(new_power3);                                                                        \
     return get_power_in_cb(power); }                                                                           \

// Определение мощности с изменением по 4-м годам постройки
#define engine_power_change_build_after4(name, power, new_power, year, new_power2, year2, new_power3, year3, new_power4, year4)         \
switch (FEAT_TRAINS, SELF, name##_power, (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))  \
{ 1: return get_power_in_cb(new_power);                                                                                                 \
  2: return get_power_in_cb(new_power2);                                                                                                \
  3: return get_power_in_cb(new_power3);                                                                                                \
  4: return get_power_in_cb(new_power4);                                                                                                \
     return get_power_in_cb(power); }                                                                                                   \

// Определение мощности с изменением по году
#define engine_power_change_after(name, power, new_power, year)  \
switch (FEAT_TRAINS, SELF, name##_power, check_year(year))       \
{ 1: return get_power_in_cb(new_power);                          \
     return get_power_in_cb(power); }                            \

// Определение мощности МВПС
#define engine_power_MU(name, power, vehid)                            \
switch (FEAT_TRAINS, PARENT, name##_power2, vehicle_type_id == vehid)  \
{ 1: return get_power_in_cb(power);                                    \
     return 0; }                                                       \
switch (FEAT_TRAINS, SELF, name##_power, position_in_consist == 0)     \
{ 1: return get_power_in_cb(power);                                    \
     name##_power2; }                                                  \

#define engine_power_MU2(name, power, vehid1, vehid2)               \
switch (FEAT_TRAINS, PARENT, name##_power2,                         \
  (vehicle_type_id == vehid1) || (vehicle_type_id == vehid2))       \
{ 1: return get_power_in_cb(power);                                 \
     return 0; }                                                    \
switch (FEAT_TRAINS, SELF, name##_power, position_in_consist == 0)  \
{ 1: return get_power_in_cb(power);                                 \
     name##_power2; }                                               \

#define engine_power_MU3(name, power, vehid1, vehid2, vehid3)       \
switch (FEAT_TRAINS, PARENT, name##_power2,                         \
  (vehicle_type_id == vehid1) ||                                    \
  (vehicle_type_id == vehid2) ||                                    \
  (vehicle_type_id == vehid3))                                      \
{ 1: return get_power_in_cb(power);                                 \
     return 0; }                                                    \
switch (FEAT_TRAINS, SELF, name##_power, position_in_consist == 0)  \
{ 1: return get_power_in_cb(power);                                 \
     name##_power2; }                                               \

#define engine_power_MU4(name, power, vehid1, vehid2, vehid3, vehid4)  \
switch (FEAT_TRAINS, PARENT, name##_power2,                            \
  (vehicle_type_id == vehid1) ||                                       \
  (vehicle_type_id == vehid2) ||                                       \
  (vehicle_type_id == vehid3) ||                                       \
  (vehicle_type_id == vehid4))                                         \
{ 1: return get_power_in_cb(power);                                    \
     return 0; }                                                       \
switch (FEAT_TRAINS, SELF, name##_power, position_in_consist == 0)     \
{ 1: return get_power_in_cb(power);                                    \
     name##_power2; }                                                  \

#define engine_power_MU_change_build_after(name, power, new_power, year, vehid)  \
switch (FEAT_TRAINS, SELF, name##_power3, build_year >= year)                    \
{ 1: return get_power_in_cb(new_power);                                          \
     return get_power_in_cb(power); }                                            \
switch (FEAT_TRAINS, PARENT, name##_power2, vehicle_type_id == vehid)            \
{ 1: name##_power3;                                                              \
     return 0; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_power, position_in_consist == 0)               \
{ 1: name##_power3;                                                              \
     name##_power2; }                                                            \

// Определение мощности в зависимости от типа пути

#define engine_0_power(name)                                   \
switch (FEAT_TRAINS, SELF, name##_power, vehicle_is_in_depot)  \
{ 1: return 0; return NO_POWER; }                              \

#define engine_0_power_alt(name, basename)                     \
switch (FEAT_TRAINS, SELF, name##_power, vehicle_is_in_depot)  \
{ 1: return 0; basename; }                                     \

#define engine_power(name, power)            \
switch (FEAT_TRAINS, SELF, name##_power, 0)  \
{ return get_power_in_cb(power); }           \

#define engine_power_change_DDC(name)                       \
is_ER15DC_ds(name##_2_power, name##_15DC_power, return 0)   \
is_ER3DC_ds(name##_power, name##_DC_power, name##_2_power)  \

#define engine_power_change_AC_DC(name)                      \
is_ER3DC_ds(name##_2_power, name##_DC_power, return 0)       \
is_ER25AC_ds(name##_power, name##_AC_power, name##_2_power)  \

#define engine_power_change_AC_DDC(name)                      \
is_ER15DC_ds(name##_3_power, name##_15DC_power, return 0)     \
is_ER3DC_ds(name##_2_power, name##_DC_power, name##_3_power)  \
is_ER25AC_ds(name##_power, name##_AC_power, name##_2_power)   \

#define engine_power_change_AC_15DC(name)                    \
is_ER15DC_ds(name##_2_power, name##_15DC_power, return 0)    \
is_ER25AC_ds(name##_power, name##_AC_power, name##_2_power)  \

#define engine_power_change_AAC_DC(name)                         \
is_ER3DC_ds(name##_3_power, name##_DC_power, return 0)           \
is_ER15AC_ds(name##_2_power, name##_15AC_power, name##_3_power)  \
is_ER25AC_ds(name##_power, name##_AC_power, name##_2_power)      \

#define engine_power_change_AAC_15DC(name)                       \
is_ER3DC_ds(name##_3_power, name##_15DC_power, return 0)         \
is_ER15AC_ds(name##_2_power, name##_15AC_power, name##_3_power)  \
is_ER25AC_ds(name##_power, name##_AC_power, name##_2_power)      \

#define engine_power_change_AAC_DDC(name)                        \
is_ER15DC_ds(name##_4_power, name##_15DC_power, return 0)        \
is_ER3DC_ds(name##_3_power, name##_DC_power, name##_4_power)     \
is_ER15AC_ds(name##_2_power, name##_15AC_power, name##_3_power)  \
is_ER25AC_ds(name##_power, name##_AC_power, name##_2_power)      \

// Определение ТЕ с изменением по году постройки
#define engine_TE_change_build_after(name, TE, new_TE, year)                        \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient, build_year >= year)  \
{ 1: return new_TE;                                                                 \
     return TE; }                                                                   \

// Определение ТЕ с изменением по 2-м годам постройки
#define engine_TE_change_build_after2(name, TE, new_TE, year, new_TE2, year2)                                 \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient, (build_year >= year) + (build_year >= year2))  \
{ 1: return new_TE;                                                                                           \
  2: return new_TE2;                                                                                          \
     return TE; }                                                                                             \

// Определение ТЕ с изменением по 3-м годам постройки
#define engine_TE_change_build_after3(name, TE, new_TE, year, new_TE2, year2, new_TE3, year3)  \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient,                                 \
        (build_year >= year) + (build_year >= year2) + (build_year >= year3))                  \
{ 1: return new_TE;                                                                            \
  2: return new_TE2;                                                                           \
  3: return new_TE3;                                                                           \
     return TE; }                                                                              \

// Определение ТЕ с изменением по 4-м годам постройки
#define engine_TE_change_build_after4(name, TE, new_TE, year, new_TE2, year2, new_TE3, year3, new_TE4, year4)  \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient,                                                 \
        (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))          \
{ 1: return new_TE;                                                                                            \
  2: return new_TE2;                                                                                           \
  3: return new_TE3;                                                                                           \
  4: return new_TE4;                                                                                           \
     return TE; }                                                                                              \

// Define refit cost depending on livery
// TODO provide shifted variants with offsett different from 0xE0
#define engine_refit_cost_for_livery_change(name, cost)                              \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                        \
  ((extra_callback_info1 & 0xFF00) >= (0xE0 << 8)) + ((cargo_subtype >= 0xE0) * 2))  \
{ 1: return cost;                                                                    \
     return 0 | CB_RESULT_AUTOREFIT; }                                               \

#define engine_refit_cost_for_a2_livery_change(name, num, cost, cost2)             \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                      \
  ((extra_callback_info1 & 0xFF00) >= (num << 8)) + ((cargo_subtype >= num) * 2))  \
{ 1: return cost;                                                                  \
  2: return cost2;                                                                 \
     return 0 | CB_RESULT_AUTOREFIT; }                                             \

#define engine_refit_cost_for_livery_change1_shifted(name, num, cost)              \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                      \
  ((extra_callback_info1 & 0xFF00) == (num << 8)) + ((cargo_subtype == num) * 2))  \
{ 1: return cost;                                                                  \
     return 0 | CB_RESULT_AUTOREFIT; }                                             \

#define engine_refit_cost_for_livery_change2_shifted(name, num, cost, cost2)       \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                      \
  ((extra_callback_info1 & 0xFF00) == (num << 8)) + ((cargo_subtype == num) * 2))  \
{ 1: return cost;                                                                  \
  2: return cost2;                                                                 \
     return 0 | CB_RESULT_AUTOREFIT; }                                             \

#define engine_refit_cost_for_range_livery_change(name, num, num2, cost, base_name)  \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                        \
  (((extra_callback_info1 & 0xFF00) >= (num << 8)) &&                                \
   ((extra_callback_info1 & 0xFF00) <= (num2 << 8))) * 2 +                           \
  ((cargo_subtype >= num) && (cargo_subtype <= num2)))                               \
{ 0..1: base_name;                                                                   \
     2: return cost;                                                                 \
     return 0 | CB_RESULT_AUTOREFIT; }                                               \

// Определение длины с изменением по году постройки
#define engine_length_change_build_after(name, length, new_length, year)  \
switch (FEAT_TRAINS, SELF, name##_length, build_year >= year)             \
{ 1: return new_length;                                                   \
     return length; }                                                     \

// Определение длины с изменением по 2-м годам постройки
#define engine_length_change_build_after2(name, length, new_length, year, new_length2, year2)  \
switch (FEAT_TRAINS, SELF, name##_length, (build_year >= year) + (build_year >= year2))        \
{ 1: return new_length;                                                                        \
  2: return new_length2;                                                                       \
     return length; }                                                                          \

// Двухсекционный ПС
#define engine_ARVs(name, length)                                          \
switch (FEAT_TRAINS, SELF, name##_articulated_part, extra_callback_info1)  \
{ 1: return dummy##length;                                                 \
  2: return name;                                                          \
  3: return dummy##length;                                                 \
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS; }                         \

// Трёхсекционный ПС
#define engine_ARVs3(name, length)                                         \
switch (FEAT_TRAINS, SELF, name##_articulated_part, extra_callback_info1)  \
{ 1: return dummy##length;                                                 \
  2: return name;                                                          \
  3: return dummy##length;                                                 \
  4: return name;                                                          \
  5: return dummy##length;                                                 \
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS; }                         \

// Определение вместимости только для головной части ARV
#define engine_capacity_arv0(name, name2)          \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity,  \
position_in_articulated_veh == 0)                  \
{ 1: name2##_cargo_capacity;                       \
     return 0; }                                   \

// Определение вместимости с изменением по году постройки
#define engine_capacity_change_build_after(name, capacity, new_capacity, year)  \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, build_year >= year)           \
{ 1: return new_capacity;                                                       \
     return capacity; }                                                         \

#define engine_capacity_change_build_after2(name, capacity, new_capacity, year, new_capacity2, year2)  \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity,                                                      \
(build_year >= year) +                                                                                 \
(build_year >= year2))                                                                                 \
{ 0: return capacity;                                                                                  \
  1: return new_capacity;                                                                              \
     return new_capacity2; }                                                                           \

// Определение вместимости с изменением по году постройки
#define wagon_capacity_change_build_after(name, year)                  \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, build_year >= year)  \
{ 1: return name##_b##year##_cargo_capacity;                           \
     return name##_a##year##_cargo_capacity; }                         \

// Определение вместимости МВПС
#define engine_capacity_MU(name, capacity, vehid)                               \
switch (FEAT_TRAINS, PARENT, name##_cargo_capacity2, vehicle_type_id == vehid)  \
{ 1: return capacity;                                                           \
     return 0; }                                                                \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, position_in_consist == 0)     \
{ 1: return capacity;                                                           \
     name##_cargo_capacity2; }                                                  \

#define engine_capacity_MU2(name, capacity, vehid1, vehid2)                  \
switch (FEAT_TRAINS, PARENT, name##_cargo_capacity2,                         \
  (vehicle_type_id == vehid1) ||                                             \
  (vehicle_type_id == vehid2))                                               \
{ 1: return capacity;                                                        \
     return 0; }                                                             \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, position_in_consist == 0)  \
{ 1: return capacity;                                                        \
     name##_cargo_capacity2; }                                               \

#define engine_capacity_MU3(name, capacity, vehid1, vehid2, vehid3)          \
switch (FEAT_TRAINS, PARENT, name##_cargo_capacity2,                         \
  (vehicle_type_id == vehid1) ||                                             \
  (vehicle_type_id == vehid2) ||                                             \
  (vehicle_type_id == vehid3))                                               \
{ 1: return capacity;                                                        \
     return 0; }                                                             \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, position_in_consist == 0)  \
{ 1: return capacity;                                                        \
     name##_cargo_capacity2; }                                               \

#define engine_capacity_MU4(name, capacity, vehid1, vehid2, vehid3, vehid4)  \
switch (FEAT_TRAINS, PARENT, name##_cargo_capacity2,                         \
  (vehicle_type_id == vehid1) ||                                             \
  (vehicle_type_id == vehid2) ||                                             \
  (vehicle_type_id == vehid3) ||                                             \
  (vehicle_type_id == vehid4))                                               \
{ 1: return capacity;                                                        \
     return 0; }                                                             \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, position_in_consist == 0)  \
{ 1: return capacity;                                                        \
     name##_cargo_capacity2; }                                               \

// end
