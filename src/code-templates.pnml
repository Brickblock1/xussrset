 /// code definition  

// Выбор ориентации кабины случайным образом

#define engine_RNDany_direction_template(name, p1, p2)     \
random_switch (FEAT_TRAINS, SELF, name##_sprites_start_sp, \
  bitmask(TRIGGER_VEHICLE_SERVICE))                        \
{ p1: name##_sprites_left;                                 \
  p2: name##_sprites_right; }                              \

#define engine_RND_direction_template(name, p1, p2)        \
random_switch (FEAT_TRAINS, SELF, name##_sprites_1RND,     \
  bitmask(TRIGGER_VEHICLE_SERVICE))                        \
{ p1: name##_sprites_left;                                 \
  p2: name##_sprites_right; }                              \
switch (FEAT_TRAINS, PARENT, name##_sprites_start_sp,      \
  count_veh_id(name))                                      \
{ 1: name##_sprites_1RND;                                  \
     name##_sprites_start; }                               \

// Выбор ориентации эффекта для кабины, ориентированной случайным образом

#define engine_RNDany_effect_direction_template(name, p1, p2)  \
switch (FEAT_TRAINS, SELF, name##_create_effect,               \
  (random_bits % (p1 + p2)) < p1)                              \
{ 0: name##_create_effect_sprites_left;                        \
     name##_create_effect_sprites_right; }                     \

#define engine_RND_effect_direction_template(name, p1, p2)     \
switch (FEAT_TRAINS, SELF, name##_create_effect_1RND,          \
  (random_bits % (p1 + p2)) < p1)                              \
{ 0: name##_create_effect_sprites_left;                        \
     name##_create_effect_sprites_right; }                     \
switch (FEAT_TRAINS, PARENT, name##_create_effect,             \
  count_veh_id(name))                                          \
{ 1: name##_create_effect_1RND;                                \
     name##_create_effect_sprites_start; }                     \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив в СМЕ)

#define engine_direction_template(name, suffix)            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,      \
[ set_offset_to(2),                                        \
  (prev_vehicle_type_id() == name) ||                      \
  (position_in_consist == 0) ])                            \
{ 1: name##suffix##_sprites_left;                          \
     name##suffix##_sprites_right;}                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,     \
  ((LOAD_TEMP(0) - count_veh_id(name) + 1) % 2) )          \
{ 1: name##suffix##_sprites_2l;                            \
     name##suffix##_sprites_right;}                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,      \
[  set_offset_to(-16),                                     \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_old;                           \
     name##suffix##_sprites_right;}                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,      \
[  set_offset_to(-14),                                     \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_16;                            \
     name##suffix##_sprites_2l;}                           \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,      \
[  set_offset_to(-12),                                     \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_14;                            \
     name##suffix##_sprites_right;}                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,      \
[  set_offset_to(-10),                                     \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_12;                            \
     name##suffix##_sprites_2l;}                           \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,       \
[  set_offset_to(-8),                                      \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_10;                            \
     name##suffix##_sprites_right;}                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,       \
[  set_offset_to(-6),                                      \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_8;                             \
     name##suffix##_sprites_2l;}                           \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,       \
[  set_offset_to(-4),                                      \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_6;                             \
     name##suffix##_sprites_right;}                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start,   \
[  set_offset_to(-2),                                      \
  (prev_vehicle_type_id() == name) ])                      \
{ 1: name##suffix##_sprites_4;                             \
     name##suffix##_sprites_2l; }                          \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой)

#define engine_direction_template2(name, name2, suffix)        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,          \
[ set_offset_to(2),                                            \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ||                         \
  (position_in_consist == 0) ])                                \
{ 1: name##suffix##_sprites_left;                              \
     name##suffix##_sprites_right;}                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) -                        \
    count_veh_id(name2) + 1) % 2) )                            \
{ 1: name##suffix##_sprites_2l;                                \
     name##suffix##_sprites_right;}                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,          \
[  set_offset_to(-16),                                         \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_old;                               \
     name##suffix##_sprites_right;}                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,          \
[  set_offset_to(-14),                                         \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_16;                                \
     name##suffix##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,          \
[  set_offset_to(-12),                                         \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_14;                                \
     name##suffix##_sprites_right;}                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,          \
[  set_offset_to(-10),                                         \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_12;                                \
     name##suffix##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,           \
[  set_offset_to(-8),                                          \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_10;                                \
     name##suffix##_sprites_right;}                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,           \
[  set_offset_to(-6),                                          \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_8;                                 \
     name##suffix##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,           \
[  set_offset_to(-4),                                          \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_6;                                 \
     name##suffix##_sprites_right;}                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start,       \
[  set_offset_to(-2),                                          \
  (prev_vehicle_type_id() == name) ||                          \
  (prev_vehicle_type_id() == name2) ])                         \
{ 1: name##suffix##_sprites_4;                                 \
     name##suffix##_sprites_2l; }                              \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и средней секцией)

#define engine_direction_template2m(name, namem, suffix)     \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,        \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (position_in_consist == 0) ])                              \
{ 1: name##suffix##_sprites_left;                            \
     name##suffix##_sprites_right;}                          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,       \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(namem) + 1) % 2) )                          \
{ 1: name##suffix##_sprites_2l;                              \
     name##suffix##_sprites_right;}                          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,        \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_old;                             \
  2: name##suffix##_sprites_2l;                              \
     name##suffix##_sprites_right;}                          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,        \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_16;                              \
  2: name##suffix##_sprites_right;                           \
     name##suffix##_sprites_2l;}                             \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,        \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_14;                              \
  2: name##suffix##_sprites_2l;                              \
     name##suffix##_sprites_right;}                          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,        \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_12;                              \
  2: name##suffix##_sprites_right;                           \
     name##suffix##_sprites_2l;}                             \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,         \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_10;                              \
  2: name##suffix##_sprites_2l;                              \
     name##suffix##_sprites_right;}                          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,         \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_8;                               \
  2: name##suffix##_sprites_right;                           \
     name##suffix##_sprites_2l;}                             \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,         \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_6;                               \
  2: name##suffix##_sprites_2l;                              \
     name##suffix##_sprites_right;}                          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,         \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##suffix##_sprites_4;                               \
  2: name##suffix##_sprites_right;                           \
     name##suffix##_sprites_2l; }                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,        \
[  set_offset_to(2),                                         \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##suffix##_sprites_left;                            \
     name##suffix##_sprites_2; }                             \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start ,    \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##suffix##_sprites_right;                           \
     name##suffix##_sprites_ml; }                            \
                                                             
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и средней секцией)

#define engine_direction_template3m(name, name2, namem, suffix)  \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,            \
[ set_offset_to(2),                                              \
  (prev_vehicle_type_id() == name) ||                            \
  (prev_vehicle_type_id() == name2) ||                           \
  (position_in_consist == 0) ])                                  \
{ 1: name##suffix##_sprites_left;                                \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,           \
  ((LOAD_TEMP(0) - count_veh_id(name) -                          \
    count_veh_id(name2) - count_veh_id(namem) + 1) % 2) )        \
{ 1: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,            \
[  set_offset_to(-16),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_old;                                 \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,            \
[  set_offset_to(-14),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_16;                                  \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,            \
[  set_offset_to(-12),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_14;                                  \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,            \
[  set_offset_to(-10),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_12;                                  \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,             \
[  set_offset_to(-8),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_10;                                  \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,             \
[  set_offset_to(-6),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_8;                                   \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,             \
[  set_offset_to(-4),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_6;                                   \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,             \
[  set_offset_to(-2),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_4;                                   \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l; }                                \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,            \
[  set_offset_to(2),                                             \
  (prev_vehicle_type_id() == namem) ])                           \
{ 1: name##suffix##_sprites_left;                                \
     name##suffix##_sprites_2; }                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start ,        \
[  set_offset_to(-2),                                            \
  (prev_vehicle_type_id() == namem) ])                           \
{ 1: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_ml; }                                \
                                                             
// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и 2-я средними секциями)

#define engine_direction_template3m2(name, namem, namem2, suffix)   \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,               \
[ set_offset_to(2),                                                 \
  (prev_vehicle_type_id() == name) ||                               \
  (position_in_consist == 0) ])                                     \
{ 1: name##suffix##_sprites_left;                                   \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,              \
  ((LOAD_TEMP(0) - count_veh_id(name) -                             \
    count_veh_id(namem) -                                           \
    count_veh_id(namem2) + 1) % 2) )                                \
{ 1: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,               \
[  set_offset_to(-16),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
    (prev_vehicle_type_id() == namem2)) * 2) ])                     \
{ 1: name##suffix##_sprites_old;                                    \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,               \
[  set_offset_to(-14),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_16;                                     \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l;}                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,               \
[  set_offset_to(-12),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_14;                                     \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,               \
[  set_offset_to(-10),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_12;                                     \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l;}                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,                \
[  set_offset_to(-8),                                               \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_10;                                     \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,                \
[  set_offset_to(-6),                                               \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_8;                                      \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l;}                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,                \
[  set_offset_to(-4),                                               \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_6;                                      \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,                \
[  set_offset_to(-2),                                               \
  ((prev_vehicle_type_id() == name) ) +                             \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_4;                                      \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l; }                                   \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,               \
[  set_offset_to(2),                                                \
  ((prev_vehicle_type_id() == namem) ||                             \
   (prev_vehicle_type_id() == namem2)) ])                           \
{ 1: name##suffix##_sprites_left;                                   \
     name##suffix##_sprites_2; }                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start ,           \
[  set_offset_to(-2),                                               \
  ((prev_vehicle_type_id() == namem) ||                             \
   (prev_vehicle_type_id() == namem2)) ])                           \
{ 1: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_ml; }                                   \
                                                             
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и 2-я средними секциями)

#define engine_direction_template4m2(name, name2, namem, namem2, suffix)    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,                       \
[ set_offset_to(2),                                                         \
  (prev_vehicle_type_id() == name) ||                                       \
  (prev_vehicle_type_id() == name2) ||                                      \
  (position_in_consist == 0) ])                                             \
{ 1: name##suffix##_sprites_left;                                           \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,                      \
  ((LOAD_TEMP(0) - count_veh_id(name) -                                     \
    count_veh_id(name2) - count_veh_id(namem) -                             \
    count_veh_id(namem2) + 1) % 2) )                                        \
{ 1: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,                       \
[  set_offset_to(-16),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
    (prev_vehicle_type_id() == namem2)) * 2) ])                             \
{ 1: name##suffix##_sprites_old;                                            \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,                       \
[  set_offset_to(-14),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_16;                                             \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l;}                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,                       \
[  set_offset_to(-12),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_14;                                             \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,                       \
[  set_offset_to(-10),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_12;                                             \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l;}                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,                        \
[  set_offset_to(-8),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_10;                                             \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,                        \
[  set_offset_to(-6),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_8;                                              \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l;}                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,                        \
[  set_offset_to(-4),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_6;                                              \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,                        \
[  set_offset_to(-2),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_4;                                              \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l; }                                           \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,                       \
[  set_offset_to(2),                                                        \
  ((prev_vehicle_type_id() == namem) ||                                     \
   (prev_vehicle_type_id() == namem2)) ])                                   \
{ 1: name##suffix##_sprites_left;                                           \
     name##suffix##_sprites_2; }                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start ,                   \
[  set_offset_to(-2),                                                       \
  ((prev_vehicle_type_id() == namem) ||                                     \
   (prev_vehicle_type_id() == namem2)) ])                                   \
{ 1: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_ml; }                                           \
                                                             
// Определение пенальти на скорость (схема без СМЕ)

#define engine_penalise_speed0(name)                                        \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || vehicle_is_not_powered)                     \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \

// Определение пенальти на скорость (схема без альтернатив в СМЕ)

#define engine_penalise_speed(name, num)                                    \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name), 0),                         \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name), 0),                                        \
  STORE_TEMP(vehicle_type_id == name, 1) ])                                 \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)

#define engine_penalise_speed2(name, name1, num)                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)

#define engine_penalise_speed3(name, name1, name2, num)                     \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)

#define engine_penalise_speed4(name, name1, name2, name3, num)              \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)

#define engine_penalise_speed5(name, name1, name2, name3, name4, num)       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)

#define engine_penalise_speed6(name, name1, name2, name3, name4, name5, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)

#define engine_penalise_speed7(name, name1, name2, name3, name4, name5, name6, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5) -                           \
                            count_veh_id(name6), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5) +                                          \
             count_veh_id(name6), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5) ||                                  \
             (vehicle_type_id == name6), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение скорости без вариантов

#define engine_speed(name, speed)                                           \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                    \
{ return; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
  is_penalise_speed() ? get_penalised_speed(speed) : speed)                 \
{ return; }                                                                 \

// Определение скорости с изменением в заданный год

#define engine_speed_change_after(name, speed, new_speed, year)               \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, current_year >= year)       \
{ 1: return new_speed;                                                        \
     return speed; }                                                          \
switch (FEAT_TRAINS, SELF, name##_speed,                                      \
[ STORE_TEMP(date_of_last_service >= date(year,1,1) ? new_speed : speed , 0), \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])   \
{ return; }                                                                   \

// Определение скорости с изменением по году постройки

#define engine_speed_change_build_after(name, speed, new_speed, year)       \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)       \
{ 1: return new_speed;                                                      \
     return speed; }                                                        \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(build_year >= year ? new_speed : speed , 0),                   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости с изменением по году постройки и в заданном году

#define engine_speed_change_build_after_and_year(name, speed, new_speed, year, new_speed2, year2)    \
switch (FEAT_TRAINS, SELF, name##_purchase_speed,                                                    \
        (build_year >= year) + ((current_year >= year2) * 2))                                        \
{ 0: return speed;                                                                                   \
  1: return new_speed;                                                                               \
     return new_speed2; }                                                                            \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(date_of_last_service >= date(year2,1,1) ? new_speed2 :                                  \
  build_year >= year ? new_speed : speed , 0),                                                       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости с изменением в 2 заданных года

#define engine_speed_change_after2(name, speed, new_speed, year, new_speed2, year2)                  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (current_year >= year) +                           \
                                                 (current_year >= year2))                            \
{ 1: return new_speed;                                                                               \
  2: return new_speed2;                                                                              \
     return speed; }                                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(date_of_last_service >= date(year,1,1) ? (date_of_last_service >= date(year2,1,1) ?     \
new_speed2 : new_speed) : speed , 0),                                                                \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости со снижением для старых

#define engine_speed_with_reduce(name, speed, speed_red, life)                                       \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                             \
{ return; }                                                                                          \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(get_max_speed(life, speed_red, speed), 0),                                              \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости со снижением для старых и изменением скорости по году постройки

#define engine_speed_with_reduce_change_build_after(name, speed, speed_red, life, new_speed, year)    \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)                                 \
{ 1: return new_speed;                                                                                \
     return speed; }                                                                                  \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP(get_max_speed(life, speed_red, ((build_year >= year) ? new_speed : speed)), 0),          \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// Определение скорости со снижением для старых и с предсерийной моделью

#define engine_speed_with_reduce_and_pre_model(name, speed, speed_red, life, life_pre, pre_year)      \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                              \
{ return; }                                                                                           \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP( ((age_in_days >= (life_pre*365)) && (build_year < pre_year)) ||                         \
  ((age_in_days >= (life*365)) && (build_year >= pre_year)) ? speed_red : speed, 0),                  \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// Определение скорости со снижением для старых и с предсерийной моделью без снижения

#define engine_speed_with_reduce_and_pre_model_no_reduce(name, speed, speed_red, life, new_speed, pre_year)  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= pre_year)                                    \
{ 1: return new_speed;                                                                                       \
     return speed; }                                                                                         \
switch (FEAT_TRAINS, SELF, name##_speed,                                                                     \
[ STORE_TEMP( (build_year < pre_year) ? speed : (age_in_days >= (life*365)) ? speed_red : new_speed, 0),     \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                                  \
{ return; }                                                                                                  \
                                                                                         
// определение расхода топлива
// расход определяется граничным на разгоне, торможении, подъёме, спуске. 
// в оставшемся случае расходуется часть, пропорциональная доли массы от общей доли в массе 
// (общая масса на долю мощности в общей мощности)
//      return (rc_max * (((LOAD_TEMP(6) /* total weight */ ) * power / LOAD_TEMP(5)) /* total power */ / weight)); }                            


// передеать так, что если в гору скорость свыше 90%, то значит мощи хватает и считать обычным образом. 

// ввиду отсутсвия переменной для общего веса убрана составляющая веса из формулы. Вернуть при появлении веса.

#define general_running_cost(name, rc_base)                                                           \
switch (FEAT_TRAINS, SELF, name##_running_cost_speed,                                                 \
  LOAD_TEMP(1) < (LOAD_TEMP(2) * 9 / 10))                                                             \
{ 1: return rc_base;                                                                                  \
     return rc_base / 4; }                                                                            \
switch (FEAT_TRAINS, SELF, name##_running_cost_slope,                                                 \
  (other_veh_z_offset(1) > 0) + (2 * (other_veh_z_offset(1) < 0)))                                    \
{ 1: return rc_base;                                                                                  \
  2: return rc_base / 4;                                                                              \
     name##_running_cost_speed; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_stop,                                                  \
  LOAD_TEMP(1) < 2)                                                                                   \
{ 1: return rc_base / 4;                                                                              \
     name##_running_cost_slope; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_service,                                               \
  (current_date > date_of_last_service) && (current_date < date_of_last_service + 2))                 \
{ 1: return 5 * rc_base;                                                                              \
     name##_running_cost_stop; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor2,                                             \
[  STORE_TEMP(current_speed, 1),                                                                      \
   STORE_TEMP(current_max_speed, 2),                                                                  \
   STORE_TEMP(breakdowns_since_last_service, 3),                                                      \
   STORE_TEMP(reliability, 4),                                                                        \
   STORE_TEMP(total_power(), 5)] )                                                                    \
{ name##_running_cost_service; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor,                                              \
  vehicle_is_in_depot + (2 * vehicle_is_broken) + (4 * vehicle_is_crashed))                           \
{    1: return 1;                                                                                     \
  2..3: return 5 * rc_base;                                                                           \
  4..7: return rc_base+ 2000;                                                                         \
        name##_running_cost_factor2; }                                                                \
switch (FEAT_TRAINS, SELF, name##_purchase_running_cost_factor, 0) { return rc_base; }                \

// не выпускать новые тройники без средней секции

#define  new_3x_train_start_stop(name)                                                                \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() == name##_m ])                                                               \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_2AND1_OR_MORE_ENGINE); }                                       \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// не выпускать новые двойки с средней секцией

#define  new_2x_train_start_stop(name, namem)                                                         \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() != namem ])                                                                  \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_NO_MIDDLE_SECTION); }                                          \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// эффекты. Искрение (правая и левая ориентации секции). 
//          Искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой 

#define engine_electric1r_2_effect(name, left, left2, right, right2)                                      \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r3, electric_create_effect(right)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r2, electric_create_effect(right2)) { return 1; } \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l1, animation_counter % 2)                        \
{ 0: name##_create_effect_sprites_l3; name##_create_effect_sprites_l2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_left, current_speed > threshold_of_speed())     \
{ 0: name##_create_effect_sprites_l1; name##_create_effect_sprites_l2; }                                  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r1, animation_counter % 2)                        \
{ 0: name##_create_effect_sprites_r3; name##_create_effect_sprites_r2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_right, current_speed > threshold_of_speed())    \
{ 0: name##_create_effect_sprites_r1; name##_create_effect_sprites_r2; }                                  \

#define engine_electric1_2_effect(name, left, left2)                                                      \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l1, animation_counter % 2)                        \
{ 0: name##_create_effect_sprites_l3; name##_create_effect_sprites_l2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_start, current_speed > threshold_of_speed())    \
{ 0: name##_create_effect_sprites_l1; name##_create_effect_sprites_l2; }                                  \

// эффекты. Искрение (правая и левая секции). Левая секция искрит тлько на малой скорости

#define engine_electric2_1_effect(name, left, right)                                                          \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left)) { return 1; }       \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_left, current_speed > threshold_of_speed())         \
{ 0: name##_create_effect_sprites_l2; return 0; }                                                             \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right, electric_create_effect(right)) { return 1; }   \
                                                                                                         
// эффекты. Искрение (правая и левая секции). На первой секции искрит только 2-ой пантограф, 
//          на второй искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой

#define engine_electric2_2_effect(name, left, right, right2)                                              \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left, electric_create_effect(left)) { return 1; } \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r3, electric_create_effect(right)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r2, electric_create_effect(right2)) { return 1; } \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r1, animation_counter % 2)                        \
{ 0: name##_create_effect_sprites_r3; name##_create_effect_sprites_r2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_right, current_speed > threshold_of_speed())    \
{ 0: name##_create_effect_sprites_r1; name##_create_effect_sprites_r2; }                                  \
                                                                                                         
// эффекты. Дым (правая и левая ориентации). 

#define engine_diesel_1_effect(name, left, right, height)                                                          \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left, diesel_create_effect(left,height)) { return 1; }     \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right, diesel_create_effect(right,height)) { return 1; }   \

// эффекты. Двойной дым симметрия по ДП (правая и левая ориентации). 

#define engine_diesel_2s_effect(name, left, right, height)                                                          \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left,                                                       \
[diesel_create_effect_dy(left, 1, height), diesel_create_effect_dy2(left, -1, height)]) { return 2; }               \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right,                                                      \
[diesel_create_effect_dy(right, 1, height), diesel_create_effect_dy2(right, -1, height)]) { return 2; }             \

// эффекты. Двойной дым (правая и левая ориентации). 

#define engine_diesel_2_effect(name, left1, left2, right1, right2, height)                                \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left,                                             \
[diesel_create_effect(left1, height), diesel_create_effect2(left2, height)]) { return 2; }                \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right,                                            \
[diesel_create_effect(right1, height), diesel_create_effect2(right2, height)]) { return 2; }              \

// Если рисуем на карте и следующий в цепочке вагон скрыт, то отдаём пустышку

// пляски с 0x9C и 0x9A для паровозов, чтобы клёса крутились в зависимости от положения, а не от времени.

// Регистр 5 и 6 занимаем под ЭМВПС

// long vehicle template

#define long_vehicle(name)                                  \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

// Шаблон для рефсекций
#define long_vehicle_RND(name, name_rnd)                    \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites_viewport,         \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites,           \
  bitmask(TRIGGER_VEHICLE_SERVICE))                         \
{ dependent: name_rnd;                                      \
  1: name##_sprites_viewport; }                             \

// short vehicle template

#define short_vehicle(name)                                 \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

/*
#define short_vehicle_RND(name, name_rnd)                   \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites_viewport,         \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites,           \
  bitmask(TRIGGER_VEHICLE_SERVICE))                         \
{ dependent: name_rnd;                                      \
  1: name##_sprites_viewport; }                             \
*/

// special vehicle template

#define long_vehicle_sp(name)                               \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start_sp;  }                              \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define long_vehicle_dir(name)                              \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_direction_template;  }                            \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define long_vehicle_nocount(name)                          \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(((var[0x9F, 0, 0x07] & 3) == 3) ?              \
  var[0x9C, 0, 0x0F] & 3 : var[0x9A, 0, 0x0F] & 3, 3) ])    \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

//