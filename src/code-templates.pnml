 /// code definition

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив в СМЕ)

#define engine_direction_template(name)                \
switch (FEAT_TRAINS, SELF, name##_sprites_2l,          \
[ set_offset_to(2),                                    \
  (prev_vehicle_type_id() == name) ||                  \
  (position_in_consist == 0) ])                        \
{ 1: name##_sprites_l;                                 \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) + 1) % 2) )      \
{ 1: name##_sprites_2l;                                \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_16,          \
[  set_offset_to(-16),                                 \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_old;                               \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_14,          \
[  set_offset_to(-14),                                 \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_16;                                \
     name##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_sprites_12,          \
[  set_offset_to(-12),                                 \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_14;                                \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_10,          \
[  set_offset_to(-10),                                 \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_12;                                \
     name##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_sprites_8,           \
[  set_offset_to(-8),                                  \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_10;                                \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_6,           \
[  set_offset_to(-6),                                  \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_8;                                 \
     name##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_sprites_4,           \
[  set_offset_to(-4),                                  \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_6;                                 \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_start,       \
[  set_offset_to(-2),                                  \
  (prev_vehicle_type_id() == name) ])                  \
{ 1: name##_sprites_4;                                 \
     name##_sprites_2l; }                              \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой)

#define engine_direction_template2(name, name2)        \
switch (FEAT_TRAINS, SELF, name##_sprites_2l,          \
[ set_offset_to(2),                                    \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ||                 \
  (position_in_consist == 0) ])                        \
{ 1: name##_sprites_l;                                 \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) -                \
    count_veh_id(name2) + 1) % 2) )                    \
{ 1: name##_sprites_2l;                                \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_16,          \
[  set_offset_to(-16),                                 \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_old;                               \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_14,          \
[  set_offset_to(-14),                                 \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_16;                                \
     name##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_sprites_12,          \
[  set_offset_to(-12),                                 \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_14;                                \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_10,          \
[  set_offset_to(-10),                                 \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_12;                                \
     name##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_sprites_8,           \
[  set_offset_to(-8),                                  \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_10;                                \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_6,           \
[  set_offset_to(-6),                                  \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_8;                                 \
     name##_sprites_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_sprites_4,           \
[  set_offset_to(-4),                                  \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_6;                                 \
     name##_sprites_r;}                                \
switch (FEAT_TRAINS, SELF, name##_sprites_start,       \
[  set_offset_to(-2),                                  \
  (prev_vehicle_type_id() == name) ||                  \
  (prev_vehicle_type_id() == name2) ])                 \
{ 1: name##_sprites_4;                                 \
     name##_sprites_2l; }                              \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и средней секцией)

#define engine_direction_template2m(name, namem)             \
switch (FEAT_TRAINS, SELF, name##_sprites_2l,                \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (position_in_consist == 0) ])                              \
{ 1: name##_sprites_l;                                       \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_old,               \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(namem) + 1) % 2) )                          \
{ 1: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_16,                \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_old;                                     \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_14,                \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_16;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_12,                \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_14;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_10,                \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_12;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_8,                 \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_10;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_6,                 \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_8;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_4,                 \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_6;                                       \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_2,                 \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == name) +                         \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_4;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l; }                                    \
switch (FEAT_TRAINS, SELF, name##_sprites_ml,                \
[  set_offset_to(2),                                         \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_sprites_l;                                       \
     name##_sprites_2; }                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_start ,            \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_sprites_r;                                       \
     name##_sprites_ml; }                                    \
                                                             
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и средней секцией)

#define engine_direction_template3m(name, name2, namem)      \
switch (FEAT_TRAINS, SELF, name##_sprites_2l,                \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ||                       \
  (position_in_consist == 0) ])                              \
{ 1: name##_sprites_l;                                       \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_old,               \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(name2) - count_veh_id(namem) + 1) % 2) )    \
{ 1: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_16,                \
[  set_offset_to(-16),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_old;                                     \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_14,                \
[  set_offset_to(-14),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_16;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_12,                \
[  set_offset_to(-12),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_14;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_10,                \
[  set_offset_to(-10),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_12;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_8,                 \
[  set_offset_to(-8),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_10;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_6,                 \
[  set_offset_to(-6),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_8;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_4,                 \
[  set_offset_to(-4),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_6;                                       \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_2,                 \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_sprites_4;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l; }                                    \
switch (FEAT_TRAINS, SELF, name##_sprites_ml,                \
[  set_offset_to(2),                                         \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_sprites_l;                                       \
     name##_sprites_2; }                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_start ,            \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_sprites_r;                                       \
     name##_sprites_ml; }                                    \
                                                             
// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и 2-я средними секциями)

#define engine_direction_template3m2(name, namem, namem2)    \
switch (FEAT_TRAINS, SELF, name##_sprites_2l,                \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (position_in_consist == 0) ])                              \
{ 1: name##_sprites_l;                                       \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_old,               \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(namem) -                                    \
    count_veh_id(namem2) + 1) % 2) )                         \
{ 1: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_16,                \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
    (prev_vehicle_type_id() == namem2)) * 2) ])              \
{ 1: name##_sprites_old;                                     \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_14,                \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_16;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_12,                \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_14;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_10,                \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_12;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_8,                 \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_10;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_6,                 \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_8;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_4,                 \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) +                         \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_6;                                       \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_2,                 \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == name) ) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_4;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l; }                                    \
switch (FEAT_TRAINS, SELF, name##_sprites_ml,                \
[  set_offset_to(2),                                         \
  ((prev_vehicle_type_id() == namem) ||                      \
   (prev_vehicle_type_id() == namem2)) ])                    \
{ 1: name##_sprites_l;                                       \
     name##_sprites_2; }                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_start ,            \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == namem) ||                      \
   (prev_vehicle_type_id() == namem2)) ])                    \
{ 1: name##_sprites_r;                                       \
     name##_sprites_ml; }                                    \
                                                             
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и 2-я средними секциями)

#define engine_direction_template4m2(name, name2, namem, namem2) \
switch (FEAT_TRAINS, SELF, name##_sprites_2l,                \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ||                       \
  (position_in_consist == 0) ])                              \
{ 1: name##_sprites_l;                                       \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_old,               \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(name2) - count_veh_id(namem) -              \
    count_veh_id(namem2) + 1) % 2) )                         \
{ 1: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_16,                \
[  set_offset_to(-16),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
    (prev_vehicle_type_id() == namem2)) * 2) ])              \
{ 1: name##_sprites_old;                                     \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_14,                \
[  set_offset_to(-14),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_16;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_12,                \
[  set_offset_to(-12),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_14;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_10,                \
[  set_offset_to(-10),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_12;                                      \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_8,                 \
[  set_offset_to(-8),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_10;                                      \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_6,                 \
[  set_offset_to(-6),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_8;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l;}                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_4,                 \
[  set_offset_to(-4),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_6;                                       \
  2: name##_sprites_2l;                                      \
     name##_sprites_r;}                                      \
switch (FEAT_TRAINS, SELF, name##_sprites_2,                 \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  (((prev_vehicle_type_id() == namem) ||                     \
   (prev_vehicle_type_id() == namem2)) * 2) ])               \
{ 1: name##_sprites_4;                                       \
  2: name##_sprites_r;                                       \
     name##_sprites_2l; }                                    \
switch (FEAT_TRAINS, SELF, name##_sprites_ml,                \
[  set_offset_to(2),                                         \
  ((prev_vehicle_type_id() == namem) ||                      \
   (prev_vehicle_type_id() == namem2)) ])                    \
{ 1: name##_sprites_l;                                       \
     name##_sprites_2; }                                     \
switch (FEAT_TRAINS, SELF, name##_sprites_start ,            \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == namem) ||                      \
   (prev_vehicle_type_id() == namem2)) ])                    \
{ 1: name##_sprites_r;                                       \
     name##_sprites_ml; }                                    \
                                                             
// Определение пенальти на скорость (схема без СМЕ)

#define engine_penalise_speed0(name)                                        \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || vehicle_is_not_powered)                     \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \

// Определение пенальти на скорость (схема без альтернатив в СМЕ)

#define engine_penalise_speed(name, num)                                    \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name), 0),                         \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name), 0),                                        \
  STORE_TEMP(vehicle_type_id == name, 1) ])                                 \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)

#define engine_penalise_speed2(name, name1, num)                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)

#define engine_penalise_speed3(name, name1, name2, num)                     \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)

#define engine_penalise_speed4(name, name1, name2, name3, num)              \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)

#define engine_penalise_speed5(name, name1, name2, name3, name4, num)       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)

#define engine_penalise_speed6(name, name1, name2, name3, name4, name5, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)

#define engine_penalise_speed7(name, name1, name2, name3, name4, name5, name6, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5) -                           \
                            count_veh_id(name6), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) || vehicle_is_not_powered])                         \
{ 1: return 0;                                                              \
     return FLAG_PENALISE_SPEED; }                                          \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5) +                                          \
             count_veh_id(name6), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5) ||                                  \
             (vehicle_type_id == name6), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение скорости без вариантов

#define engine_speed(name, speed)                                           \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                    \
{ return; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
  is_penalise_speed() ? get_penalised_speed(speed) : speed)                 \
{ return; }                                                                 \

// Определение скорости с изменением в заданный год

#define engine_speed_change_after(name, speed, new_speed, year)             \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, current_year >= year)     \
{ 1: return new_speed;                                                      \
     return speed; }                                                        \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(current_year >= year ? new_speed : speed , 0),                 \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости с изменением по году постройки

#define engine_speed_change_build_after(name, speed, new_speed, year)       \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)       \
{ 1: return new_speed;                                                      \
     return speed; }                                                        \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(build_year >= year ? new_speed : speed , 0),                   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости с изменением по году постройки и в заданном году

#define engine_speed_change_build_after_and_year(name, speed, new_speed, year, new_speed2, year2)    \
switch (FEAT_TRAINS, SELF, name##_purchase_speed,                                                    \
        (build_year >= year) + ((current_year >= year2) * 2))                                        \
{ 0: return speed;                                                                                   \
  1: return new_speed;                                                                               \
     return new_speed2; }                                                                            \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(current_year >= year2 ? new_speed2 : build_year >= year ? new_speed : speed , 0),       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости с изменением в 2 заданных года

#define engine_speed_change_after2(name, speed, new_speed, year, new_speed2, year2)                  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (current_year >= year) +                           \
                                                 (current_year >= year2))                            \
{ 1: return new_speed;                                                                               \
  2: return new_speed2;                                                                              \
     return speed; }                                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(current_year >= year ? (current_year >= year2 ? new_speed2 : new_speed) : speed , 0),   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости со снижением для старых

#define engine_speed_with_reduce(name, speed, speed_r, life)                                         \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                             \
{ return; }                                                                                          \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(get_max_speed(life, speed_r, speed), 0),                                                \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости со снижением для старых и изменением скорости по году постройки

#define engine_speed_with_reduce_change_build_after(name, speed, speed_r, life, new_speed, year)      \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)                                 \
{ 1: return new_speed;                                                                                \
     return speed; }                                                                                  \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP(get_max_speed(life, speed_r, ((build_year >= year) ? new_speed : speed)), 0),            \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// Определение скорости со снижением для старых и с предсерийной моделью

#define engine_speed_with_reduce_and_pre_model(name, speed, speed_r, life, life_pre, pre_year)        \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                              \
{ return; }                                                                                           \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP( ((age_in_days >= (life_pre*365)) && (build_year < pre_year)) ||                         \
  ((age_in_days >= (life*365)) && (build_year >= pre_year)) ? speed_r : speed, 0),                    \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// определение расхода топлива
// расход определяется граничным на разгоне, торможении, подъёме, спуске. 
// в оставшемся случае расходуется часть, пропорциональная доли массы от общей доли в массе 
// (общая масса на долю мощности в общей мощности)
//      return (rc_max * (((LOAD_TEMP(6) + 500) * power / LOAD_TEMP(5)) / weight)); }                            \


// передеать так, что если в гору скорость свыше 90%, то значит мощи хватает и считать обычным образом.



#define diesel_running_cost(name, weight, rc_max, rc_min, power)                                      \
switch (FEAT_TRAINS, SELF, name##_running_cost_depot,                                                 \
  vehicle_is_in_depot + (2 * vehicle_is_crashed))                                                     \
{ 1: return 1;                                                                                        \
  2: return 255;                                                                                      \
     return rc_min; }                                                                                 \
switch (FEAT_TRAINS, SELF, name##_running_cost_weight,                                                \
(LOAD_TEMP(6) * power / LOAD_TEMP(5)) < weight )                                                      \
{ 0: return rc_max;                                                                                   \
     return (rc_max * power * LOAD_TEMP(6) / LOAD_TEMP(5) / weight); }                                \
switch (FEAT_TRAINS, SELF, name##_running_cost_speed,                                                 \
  LOAD_TEMP(1) < (LOAD_TEMP(2) * 9 / 10))                                                             \
{    1: return rc_max;                                                                                \
        name##_running_cost_weight; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_running_cost_slope,                                                 \
  (other_veh_z_offset(1) > 0) + (2 * (other_veh_z_offset(1) < 0)))                                    \
{ 1: return rc_max;                                                                                   \
  2: return rc_min;                                                                                   \
     name##_running_cost_speed; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_stop,                                                  \
  LOAD_TEMP(1) < 2)                                                                                   \
{ 1: name##_running_cost_depot;                                                                       \
     name##_running_cost_slope; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_service,                                               \
  (current_date > date_of_last_service) && (current_date < date_of_last_service + 2))                 \
{ 1: return 255;                                                                                      \
     name##_running_cost_stop; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor,                                              \
[  STORE_TEMP(current_speed, 1),                                                                      \
   STORE_TEMP(current_max_speed, 2),                                                                  \
   STORE_TEMP(breakdowns_since_last_service, 3),                                                      \
   STORE_TEMP(reliability, 4),                                                                        \
   STORE_TEMP(total_power(), 5),                                                                      \
   STORE_TEMP((22 * num_vehs_in_consist) + 26, 6),                                                    \
   LOAD_TEMP(6) <=0 ] )                                                                               \
{  1: return 3 * rc_max;                                                                              \
      name##_running_cost_service; }                                                                  \

// не выпускать новые тройники без средней секции

#define  new_3x_train_start_stop(name)                                                                \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() == name##_m ])                                                               \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_2AND1_OR_MORE_ENGINE); }                                       \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// не выпускать новые двойки с средней секцией

#define  new_2x_train_start_stop(name, namem)                                                         \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() != namem ])                                                                  \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_NO_MIDDLE_SECTION); }                                          \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// Если рисуем на карте и следующий в цепочке вагон скрыт, то отдаём пустышку

// пляски с 0x9C и 0x9A для паровозов, чтобы клёса крутились в зависимости от положения, а не от времени.

// Регистр 5 и 6 занимаем под ЭМВПС

// long vehicle template

#define long_vehicle(name)                                  \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define long_vehicle_RND(name, name_rnd)                    \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites_viewport,         \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites,           \
  bitmask(TRIGGER_VEHICLE_SERVICE))                         \
{ dependent: name_rnd;                                      \
  1: name##_sprites_viewport; }                             \

// short vehicle template

#define short_vehicle(name)                                 \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define short_vehicle_RND(name, name_rnd)                   \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites_viewport,         \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites,           \
  bitmask(TRIGGER_VEHICLE_SERVICE))                         \
{ dependent: name_rnd;                                      \
  1: name##_sprites_viewport; }                             \

// special vehicle template

#define long_vehicle_sp(name)                               \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start_sp;  }                              \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define long_vehicle_nocount(name)                          \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(((var[0x9F, 0, 0x07] & 3) == 3) ?              \
  var[0x9C, 0, 0x0F] & 3 : var[0x9A, 0, 0x0F] & 3, 3) ])    \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(date_of_last_service, 2),                      \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)) )             \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

// Шаблон расчёта конфигурации ЭМВПС
#define EMU_attach_calculation_template(name)                                                    \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template12,                                 \
[  set_offset_to(num_vehs_in_consist-24),                                                        \
   STORE_TEMP(2048 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                    \
   STORE_TEMP(12 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) ])             \
{  name##_can_attach_wagon_max; }                                                                \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template11,                                 \
[  set_offset_to(num_vehs_in_consist-22),                                                        \
   STORE_TEMP(1024 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                    \
   STORE_TEMP(11 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])     \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template12; }                                                       \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template10,                                 \
[  set_offset_to(num_vehs_in_consist-20),                                                        \
   STORE_TEMP(512 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                     \
   STORE_TEMP(10 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])     \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template11; }                                                       \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template9,                                  \
[  set_offset_to(num_vehs_in_consist-18),                                                        \
   STORE_TEMP(256 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                     \
   STORE_TEMP(9 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template10; }                                                       \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template8,                                  \
[  set_offset_to(num_vehs_in_consist-16),                                                        \
   STORE_TEMP(128 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                     \
   STORE_TEMP(8 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template9; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template7,                                  \
[  set_offset_to(num_vehs_in_consist-14),                                                        \
   STORE_TEMP(64 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                      \
   STORE_TEMP(7 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template8; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template6,                                  \
[  set_offset_to(num_vehs_in_consist-12),                                                        \
   STORE_TEMP(32 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                      \
   STORE_TEMP(6 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template7; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template5,                                  \
[  set_offset_to(num_vehs_in_consist-10),                                                        \
   STORE_TEMP(16 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                      \
   STORE_TEMP(5 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template6; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template4,                                  \
[  set_offset_to(num_vehs_in_consist-8),                                                         \
   STORE_TEMP(8 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                       \
   STORE_TEMP(4 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template5; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template3,                                  \
[  set_offset_to(num_vehs_in_consist-6),                                                         \
   STORE_TEMP(4 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                       \
   STORE_TEMP(3 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template4; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template2,                                  \
[  set_offset_to(num_vehs_in_consist-4),                                                         \
   STORE_TEMP(2 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                       \
   STORE_TEMP(2 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template3; }                                                        \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_template,                                   \
[  set_offset_to(num_vehs_in_consist-2),                                                         \
   STORE_TEMP(1 * (prev_vehicle_type_id() == name##_m), 5),                                      \
   STORE_TEMP(1 * 4096 * (prev_vehicle_type_id() == name##_h) + LOAD_TEMP(5), 5) >= 4096 ])      \
{ 1: name##_can_attach_wagon_max;                                                                \
     name##_can_attach_wagon_template2; }                                                        \

// Шаблон расчёта ориентации ЭМВПС
#define EMU_direction_calculation_template(name, name2)                                          \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template1,                                    \
   STORE_TEMP(LOAD_TEMP(5) + LOAD_TEMP(6), 5))                                                   \
{  name##name2##_direction_max; }                                                                \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back12,                              \
[  set_offset_to(24),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{  name##name2##_direction_template1; }                                                          \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back11,                              \
[  set_offset_to(22),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back12; }                                                  \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back10,                              \
[  set_offset_to(20),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back11; }                                                  \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back9,                               \
[  set_offset_to(18),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back10; }                                                  \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back8,                               \
[  set_offset_to(16),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back9; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back7,                               \
[  set_offset_to(14),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back8; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back6,                               \
[  set_offset_to(12),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back7; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back5,                               \
[  set_offset_to(10),                                                                            \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back6; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back4,                               \
[  set_offset_to(8),                                                                             \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back5; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back3,                               \
[  set_offset_to(6),                                                                             \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back4; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back2,                               \
[  set_offset_to(4),                                                                             \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back3; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back1,                               \
[  set_offset_to(2),                                                                             \
   STORE_TEMP((LOAD_TEMP(7) == name##_m) + (2 * LOAD_TEMP(5)), 5),                               \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back2; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template_back0,                               \
[  set_offset_to(0),                                                                             \
   STORE_TEMP(prev_vehicle_type_id(), 7) == name##_h ])                                          \
{ 1: name##name2##_direction_template1;                                                          \
     name##name2##_direction_template_back1; }                                                   \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template12,                                   \
[  set_offset_to(-24),                                                                           \
   STORE_TEMP(2048 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                    \
   STORE_TEMP(12 * 4096 * (prev_vehicle_type_id() == name##_h), 6) ])                            \
{  name##name2##_direction_template_back0; }                                                     \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template11,                                   \
[  set_offset_to(-22),                                                                           \
   STORE_TEMP(1024 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                    \
   STORE_TEMP(11 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                    \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template12; }                                                       \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template10,                                   \
[  set_offset_to(-20),                                                                           \
   STORE_TEMP(512 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                     \
   STORE_TEMP(10 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                    \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template11; }                                                       \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template9,                                    \
[  set_offset_to(-18),                                                                           \
   STORE_TEMP(256 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                     \
   STORE_TEMP(9 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template10; }                                                       \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template8,                                    \
[  set_offset_to(-16),                                                                           \
   STORE_TEMP(128 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                     \
   STORE_TEMP(8 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template9; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template7,                                    \
[  set_offset_to(-14),                                                                           \
   STORE_TEMP(64 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                      \
   STORE_TEMP(7 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template8; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template6,                                    \
[  set_offset_to(-12),                                                                           \
   STORE_TEMP(32 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                      \
   STORE_TEMP(6 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template7; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template5,                                    \
[  set_offset_to(-10),                                                                           \
   STORE_TEMP(16 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                      \
   STORE_TEMP(5 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template6; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template4,                                    \
[  set_offset_to(-8),                                                                            \
   STORE_TEMP(8 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                       \
   STORE_TEMP(4 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template5; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template3,                                    \
[  set_offset_to(-6),                                                                            \
   STORE_TEMP(4 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                       \
   STORE_TEMP(3 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template4; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template2,                                    \
[  set_offset_to(-4),                                                                            \
   STORE_TEMP(2 * (prev_vehicle_type_id() == name##_m) + LOAD_TEMP(5), 5),                       \
   STORE_TEMP(2 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template3; }                                                        \
switch (FEAT_TRAINS, SELF, name##name2##_direction_template,                                     \
[  set_offset_to(-2),                                                                            \
   STORE_TEMP(1 * (prev_vehicle_type_id() == name##_m), 5),                                      \
   STORE_TEMP(1 * 4096 * (prev_vehicle_type_id() == name##_h), 6) >= 4096 ])                     \
{ 1: name##name2##_direction_template_back0;                                                     \
     name##name2##_direction_template2; }                                                        \

// шаблон ориентации 
#define EMU_46789101112_c_template(name)                                                         \
switch (FEAT_TRAINS, SELF, name##_c_direction_max, LOAD_TEMP(5))                                 \
{ 0x200B: name##_c_direction_left;    /* Г-М-(П)-М-М-Г             */                            \
  0x300D: name##_c_direction_right;   /* Г-М-М-(П)-М-Г             */                            \
  0x2013: name##_c_direction_left;    /* Г-М-(П)-П-М-М-Г           */                            \
  0x3013: name##_c_direction_left;    /* Г-М-П-(П)-М-М-Г           */                            \
  0x2019: name##_c_direction_right;   /* Г-М-М-(П)-П-М-Г           */                            \
  0x3019: name##_c_direction_right;   /* Г-М-М-П-(П)-М-Г           */                            \
  0x202D: name##_c_direction_left;    /* Г-М-(П)-М-М-П-М-Г         */                            \
  0x502D: name##_c_direction_right;   /* Г-М-П-М-М-(П)-М-Г         */                            \
  0x204D: name##_c_direction_left;    /* Г-М-(П)-П-М-М-П-М-Г       */                            \
  0x304D: name##_c_direction_left;    /* Г-М-П-(П)-М-М-П-М-Г       */                            \
  0x604D: name##_c_direction_right;   /* Г-М-П-П-М-М-(П)-М-Г       */                            \
  0x2059: name##_c_direction_left;    /* Г-М-(П)-М-М-П-П-М-Г       */                            \
  0x5059: name##_c_direction_right;   /* Г-М-П-М-М-(П)-П-М-Г       */                            \
  0x6059: name##_c_direction_right;   /* Г-М-П-М-М-П-(П)-М-Г       */                            \
  0x20AD: name##_c_direction_left;    /* Г-М-(П)-М-П-М-М-П-М-Г     */                            \
  0x40AD: name##_c_direction_left;    /* Г-М-П-М-(П)-М-М-П-М-Г     */                            \
  0x70AD: name##_c_direction_right;   /* Г-М-П-М-П-М-М-(П)-М-Г     */                            \
  0x20B5: name##_c_direction_left;    /* Г-М-(П)-М-М-П-М-П-М-Г     */                            \
  0x50B5: name##_c_direction_right;   /* Г-М-П-М-М-(П)-М-П-М-Г     */                            \
  0x70B5: name##_c_direction_right;   /* Г-М-П-М-М-П-М-(П)-М-Г     */                            \
  0x2135: name##_c_direction_left;    /* Г-М-(П)-П-М-М-П-М-П-М-Г   */                            \
  0x3135: name##_c_direction_left;    /* Г-М-П-(П)-М-М-П-М-П-М-Г   */                            \
  0x6135: name##_c_direction_right;   /* Г-М-П-П-М-М-(П)-М-П-М-Г   */                            \
  0x8135: name##_c_direction_right;   /* Г-М-П-П-М-М-П-М-(П)-М-Г   */                            \
  0x2159: name##_c_direction_left;    /* Г-М-(П)-М-П-М-М-П-П-М-Г   */                            \
  0x4159: name##_c_direction_left;    /* Г-М-П-М-(П)-М-М-П-П-М-Г   */                            \
  0x7159: name##_c_direction_right;   /* Г-М-П-М-П-М-М-(П)-П-М-Г   */                            \
  0x8159: name##_c_direction_right;   /* Г-М-П-М-П-М-М-П-(П)-М-Г   */                            \
  0x22B5: name##_c_direction_left;    /* Г-М-(П)-М-П-М-М-П-М-П-М-Г */                            \
  0x42B5: name##_c_direction_left;    /* Г-М-П-М-(П)-М-М-П-М-П-М-Г */                            \
  0x72B5: name##_c_direction_right;   /* Г-М-П-М-П-М-М-(П)-М-П-М-Г */                            \
  0x92B5: name##_c_direction_right;   /* Г-М-П-М-П-М-М-П-М-(П)-М-Г */                            \
          name##_c_direction_left; }                                                             \

#define EMU_46789101112_m_template(name)                                                         \
switch (FEAT_TRAINS, SELF, name##_m_direction_max, LOAD_TEMP(5))                                 \
{ 0x1003: name##_m_direction_left;    /* Г-(М)-М-Г                 */                            \
  0x2003: name##_m_direction_right;   /* Г-М-(М)-Г                 */                            \
  0x100B: name##_m_direction_left;    /* Г-(М)-П-М-М-Г             */                            \
  0x300B: name##_m_direction_left;    /* Г-М-П-(М)-М-Г             */                            \
  0x400B: name##_m_direction_right;   /* Г-М-П-М-(М)-Г             */                            \
  0x100D: name##_m_direction_left;    /* Г-(М)-М-П-М-Г             */                            \
  0x200D: name##_m_direction_right;   /* Г-М-(М)-П-М-Г             */                            \
  0x400D: name##_m_direction_right;   /* Г-М-М-П-(М)-Г             */                            \
  0x1013: name##_m_direction_left;    /* Г-(М)-П-П-М-М-Г           */                            \
  0x4013: name##_m_direction_left;    /* Г-М-П-П-(М)-М-Г           */                            \
  0x5013: name##_m_direction_right;   /* Г-М-П-П-М-(М)-Г           */                            \
  0x1019: name##_m_direction_left;    /* Г-(М)-М-П-П-М-Г           */                            \
  0x2019: name##_m_direction_right;   /* Г-М-(М)-П-П-М-Г           */                            \
  0x5019: name##_m_direction_right;   /* Г-М-М-П-П-(М)-Г           */                            \
  0x102D: name##_m_direction_left;    /* Г-(М)-П-М-М-П-М-Г         */                            \
  0x302D: name##_m_direction_left;    /* Г-М-П-(М)-М-П-М-Г         */                            \
  0x402D: name##_m_direction_right;   /* Г-М-П-М-(М)-П-М-Г         */                            \
  0x602D: name##_m_direction_right;   /* Г-М-П-М-М-П-(М)-Г         */                            \
  0x104D: name##_m_direction_left;    /* Г-(М)-П-П-М-М-П-М-Г       */                            \
  0x404D: name##_m_direction_left;    /* Г-М-П-П-(М)-М-П-М-Г       */                            \
  0x504D: name##_m_direction_right;   /* Г-М-П-П-М-(М)-П-М-Г       */                            \
  0x704D: name##_m_direction_right;   /* Г-М-П-П-М-М-П-(М)-Г       */                            \
  0x1059: name##_m_direction_left;    /* Г-(М)-П-М-М-П-П-М-Г       */                            \
  0x3059: name##_m_direction_left;    /* Г-М-П-(М)-М-П-П-М-Г       */                            \
  0x4059: name##_m_direction_right;   /* Г-М-П-М-(М)-П-П-М-Г       */                            \
  0x7059: name##_m_direction_right;   /* Г-М-П-М-М-П-П-(М)-Г       */                            \
  0x10AD: name##_m_direction_left;    /* Г-(М)-П-М-П-М-М-П-М-Г     */                            \
  0x30AD: name##_m_direction_left;    /* Г-М-П-(М)-П-М-М-П-М-Г     */                            \
  0x50AD: name##_m_direction_left;    /* Г-М-П-М-П-(М)-М-П-М-Г     */                            \
  0x60AD: name##_m_direction_right;   /* Г-М-П-М-П-М-(М)-П-М-Г     */                            \
  0x80AD: name##_m_direction_right;   /* Г-М-П-М-П-М-М-П-(М)-Г     */                            \
  0x10B5: name##_m_direction_left;    /* Г-(М)-П-М-М-П-М-П-М-Г     */                            \
  0x30B5: name##_m_direction_left;    /* Г-М-П-(М)-М-П-М-П-М-Г     */                            \
  0x40B5: name##_m_direction_right;   /* Г-М-П-М-(М)-П-М-П-М-Г     */                            \
  0x60B5: name##_m_direction_right;   /* Г-М-П-М-М-П-(М)-П-М-Г     */                            \
  0x80B5: name##_m_direction_right;   /* Г-М-П-М-М-П-М-П-(М)-Г     */                            \
  0x1135: name##_m_direction_left;    /* Г-(М)-П-П-М-М-П-М-П-М-Г   */                            \
  0x4135: name##_m_direction_left;    /* Г-М-П-П-(М)-М-П-М-П-М-Г   */                            \
  0x5135: name##_m_direction_right;   /* Г-М-П-П-М-(М)-П-М-П-М-Г   */                            \
  0x7135: name##_m_direction_right;   /* Г-М-П-П-М-М-П-(М)-П-М-Г   */                            \
  0x9135: name##_m_direction_right;   /* Г-М-П-П-М-М-П-М-П-(М)-Г   */                            \
  0x1159: name##_m_direction_left;    /* Г-(М)-П-М-П-М-М-П-П-М-Г   */                            \
  0x3159: name##_m_direction_left;    /* Г-М-П-(М)-П-М-М-П-П-М-Г   */                            \
  0x5159: name##_m_direction_left;    /* Г-М-П-М-П-(М)-М-П-П-М-Г   */                            \
  0x6159: name##_m_direction_right;   /* Г-М-П-М-П-М-(М)-П-П-М-Г   */                            \
  0x9159: name##_m_direction_right;   /* Г-М-П-М-П-М-М-П-П-(М)-Г   */                            \
  0x12B5: name##_m_direction_left;    /* Г-(М)-П-М-П-М-М-П-М-П-М-Г */                            \
  0x32B5: name##_m_direction_left;    /* Г-М-П-(М)-П-М-М-П-М-П-М-Г */                            \
  0x52B5: name##_m_direction_left;    /* Г-М-П-М-П-(М)-М-П-М-П-М-Г */                            \
  0x62B5: name##_m_direction_right;   /* Г-М-П-М-П-М-(М)-П-М-П-М-Г */                            \
  0x82B5: name##_m_direction_right;   /* Г-М-П-М-П-М-М-П-(М)-П-М-Г */                            \
  0xA2B5: name##_m_direction_right;   /* Г-М-П-М-П-М-М-П-М-П-(М)-Г */                            \
          name##_m_direction_left; }                                                             \

#define EMU_46789101112_can_attach_wagon_template(name)                                          \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_max, LOAD_TEMP(5))                          \
{ 0x1000: name##_can_attach_wagon_motor;         /* Г-(М)                     */                 \
  0x2001: name##_can_attach_wagon_not_head;      /* Г-М-(П/М)                 */                 \
  0x3002: name##_can_attach_wagon_not_head;      /* Г-М-П-(П/М)               */                 \
  0x3003: name##_can_attach_wagon_not_motor;     /* Г-М-М-(П/Г)               */                 \
  0x4004: name##_can_attach_wagon_motor;         /* Г-М-П-П-(М)               */                 \
  0x4005: name##_can_attach_wagon_not_head;      /* Г-М-П-М-(П/М)             */                 \
  0x4006: name##_can_attach_wagon_not_head;      /* Г-М-М-П-(П/М)             */                 \
  0x5009: name##_can_attach_wagon_motor;         /* Г-М-П-П-М-(М)             */                 \
  0x500A: name##_can_attach_wagon_motor;         /* Г-М-П-М-П-(М)             */                 \
  0x500B: name##_can_attach_wagon_not_motor;     /* Г-М-П-М-М-(П/Г)           */                 \
  0x500C: name##_can_attach_wagon_motor;         /* Г-М-М-П-П-(М)             */                 \
  0x500D: name##_can_attach_wagon_head;          /* Г-М-М-П-М-(Г)             */                 \
  0x6013: name##_can_attach_wagon_not_motor;     /* Г-М-П-П-М-М-(П/Г)         */                 \
  0x6015: name##_can_attach_wagon_motor;         /* Г-М-П-М-П-М-(М)           */                 \
  0x6016: name##_can_attach_wagon_not_head;      /* Г-М-П-М-М-П-(П/М)         */                 \
  0x6019: name##_can_attach_wagon_head;          /* Г-М-М-П-П-М-(Г)           */                 \
  0x7026: name##_can_attach_wagon_motor;         /* Г-М-П-П-М-М-П-(М)         */                 \
  0x702B: name##_can_attach_wagon_car;           /* Г-М-П-М-П-М-М-(П)         */                 \
  0x702C: name##_can_attach_wagon_motor;         /* Г-М-П-М-М-П-П-(М)         */                 \
  0x702D: name##_can_attach_wagon_not_motor;     /* Г-М-П-М-М-П-М-(П/Г)       */                 \
  0x804D: name##_can_attach_wagon_not_motor;     /* Г-М-П-П-М-М-П-М-(П/Г)     */                 \
  0x8056: name##_can_attach_wagon_not_head;      /* Г-М-П-М-П-М-М-П-(П/М)     */                 \
  0x8059: name##_can_attach_wagon_head;          /* Г-М-П-М-М-П-П-М-(Г)       */                 \
  0x805A: name##_can_attach_wagon_motor;         /* Г-М-П-М-М-П-М-П-(М)       */                 \
  0x909A: name##_can_attach_wagon_motor;         /* Г-М-П-П-М-М-П-М-П-(М)     */                 \
  0x90AC: name##_can_attach_wagon_motor;         /* Г-М-П-М-П-М-М-П-П-(М)     */                 \
  0x90AD: name##_can_attach_wagon_not_motor;     /* Г-М-П-М-П-М-М-П-М-(П/Г)   */                 \
  0x90B5: name##_can_attach_wagon_head;          /* Г-М-П-М-М-П-М-П-М-(Г)     */                 \
  0xA135: name##_can_attach_wagon_head;          /* Г-М-П-П-М-М-П-М-П-М-(Г)   */                 \
  0xA159: name##_can_attach_wagon_head;          /* Г-М-П-М-П-М-М-П-П-М-(Г)   */                 \
  0xA15A: name##_can_attach_wagon_motor;         /* Г-М-П-М-П-М-М-П-М-П-(М)   */                 \
  0xB2B5: name##_can_attach_wagon_head;          /* Г-М-П-М-П-М-М-П-М-П-М-(Г) */                 \
          return string(STR_CAN_ATTACH_OTHERCAR_ONLY); }                                         \

#define EMU_46789101112_m_visual_effect_template(name)                                           \
switch (FEAT_TRAINS, SELF, name##_m_visual_effect_and_powered_direction_max, LOAD_TEMP(5))       \
{ 0x1003: return electric_visual_effect_and_powered(-3);    /* Г-(М)-М-Г                 */      \
  0x2003: return electric_visual_effect_and_powered(7);     /* Г-М-(М)-Г                 */      \
  0x100B: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-М-Г             */      \
  0x300B: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-М-Г             */      \
  0x400B: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-(М)-Г             */      \
  0x100D: return electric_visual_effect_and_powered(-3);    /* Г-(М)-М-П-М-Г             */      \
  0x200D: return electric_visual_effect_and_powered(7);     /* Г-М-(М)-П-М-Г             */      \
  0x400D: return electric_visual_effect_and_powered(7);     /* Г-М-М-П-(М)-Г             */      \
  0x1013: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-П-М-М-Г           */      \
  0x4013: return electric_visual_effect_and_powered(-3);    /* Г-М-П-П-(М)-М-Г           */      \
  0x5013: return electric_visual_effect_and_powered(7);     /* Г-М-П-П-М-(М)-Г           */      \
  0x1019: return electric_visual_effect_and_powered(-3);    /* Г-(М)-М-П-П-М-Г           */      \
  0x2019: return electric_visual_effect_and_powered(7);     /* Г-М-(М)-П-П-М-Г           */      \
  0x5019: return electric_visual_effect_and_powered(7);     /* Г-М-М-П-П-(М)-Г           */      \
  0x102D: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-М-П-М-Г         */      \
  0x302D: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-М-П-М-Г         */      \
  0x402D: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-(М)-П-М-Г         */      \
  0x602D: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-М-П-(М)-Г         */      \
  0x104D: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-П-М-М-П-М-Г       */      \
  0x404D: return electric_visual_effect_and_powered(-3);    /* Г-М-П-П-(М)-М-П-М-Г       */      \
  0x504D: return electric_visual_effect_and_powered(7);     /* Г-М-П-П-М-(М)-П-М-Г       */      \
  0x704D: return electric_visual_effect_and_powered(7);     /* Г-М-П-П-М-М-П-(М)-Г       */      \
  0x1059: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-М-П-П-М-Г       */      \
  0x3059: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-М-П-П-М-Г       */      \
  0x4059: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-(М)-П-П-М-Г       */      \
  0x7059: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-М-П-П-(М)-Г       */      \
  0x10AD: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-П-М-М-П-М-Г     */      \
  0x30AD: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-П-М-М-П-М-Г     */      \
  0x50AD: return electric_visual_effect_and_powered(-3);    /* Г-М-П-М-П-(М)-М-П-М-Г     */      \
  0x60AD: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-(М)-П-М-Г     */      \
  0x80AD: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-М-П-(М)-Г     */      \
  0x10B5: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-М-П-М-П-М-Г     */      \
  0x30B5: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-М-П-М-П-М-Г     */      \
  0x40B5: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-(М)-П-М-П-М-Г     */      \
  0x60B5: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-М-П-(М)-П-М-Г     */      \
  0x80B5: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-М-П-М-П-(М)-Г     */      \
  0x1135: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-П-М-М-П-М-П-М-Г   */      \
  0x4135: return electric_visual_effect_and_powered(-3);    /* Г-М-П-П-(М)-М-П-М-П-М-Г   */      \
  0x5135: return electric_visual_effect_and_powered(7);     /* Г-М-П-П-М-(М)-П-М-П-М-Г   */      \
  0x7135: return electric_visual_effect_and_powered(7);     /* Г-М-П-П-М-М-П-(М)-П-М-Г   */      \
  0x9135: return electric_visual_effect_and_powered(7);     /* Г-М-П-П-М-М-П-М-П-(М)-Г   */      \
  0x1159: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-П-М-М-П-П-М-Г   */      \
  0x3159: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-П-М-М-П-П-М-Г   */      \
  0x5159: return electric_visual_effect_and_powered(-3);    /* Г-М-П-М-П-(М)-М-П-П-М-Г   */      \
  0x6159: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-(М)-П-П-М-Г   */      \
  0x9159: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-М-П-П-(М)-Г   */      \
  0x12B5: return electric_visual_effect_and_powered(-3);    /* Г-(М)-П-М-П-М-М-П-М-П-М-Г */      \
  0x32B5: return electric_visual_effect_and_powered(-3);    /* Г-М-П-(М)-П-М-М-П-М-П-М-Г */      \
  0x52B5: return electric_visual_effect_and_powered(-3);    /* Г-М-П-М-П-(М)-М-П-М-П-М-Г */      \
  0x62B5: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-(М)-П-М-П-М-Г */      \
  0x82B5: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-М-П-(М)-П-М-Г */      \
  0xA2B5: return electric_visual_effect_and_powered(7);     /* Г-М-П-М-П-М-М-П-М-П-(М)-Г */      \
          return electric_visual_effect_and_powered(-3); }                                       \
                                                                                                 
//                                                                   