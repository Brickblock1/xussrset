 /// code definition

// выбор графики паровоза с тендером

#define steamer_direction_template(name, suffix)                         \
switch (FEAT_TRAINS, SELF, name##suffix, position_in_articulated_veh)    \
{ 0: name##_engine##suffix;                                              \
  2: name##_tender##suffix;                                              \
     dummy_sprites; }                                                    \

// Отображение кабины предсерийного локомотива

#define engine_pre_template(name, year, direction)     \
switch (FEAT_TRAINS, SELF, name##_sprites_##direction, \
  (built_during_preview == 1) || (build_year < year))  \
{ 1: name##_v1_sprites_##direction;                    \
     name##_a##year##_sprites_##direction; }           \

// Выбор кабины локомотива по году

#define engine_build_year_template(name, year, direction, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_##direction,    \
  build_year >= year)                                             \
{ 0: name##_b##year##suffix##_sprites_##direction;                \
     name##_a##year##suffix##_sprites_##direction; }              \

#define engine_build_year2_template(name, year, year2, direction, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_##direction,            \
  (build_year >= year) +                                                  \
  (build_year >= year2))                                                  \
{ 0: name##_b##year##suffix##_sprites_##direction;                        \
  1: name##_a##year##suffix##_sprites_##direction;                        \
     name##_a##year2##suffix##_sprites_##direction; }                     \

#define engine_build_year3_template(name, year, year2, year3, direction, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_##direction,                   \
  (build_year >= year) +                                                         \
  (build_year >= year2) +                                                        \
  (build_year >= year3))                                                         \
{ 0: name##_b##year##suffix##_sprites_##direction;                               \
  1: name##_a##year##suffix##_sprites_##direction;                               \
  2: name##_a##year2##suffix##_sprites_##direction;                              \
     name##_a##year3##suffix##_sprites_##direction; }                            \

#define engine_build_year4_template(name, year, year2, year3, year4, direction, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_##direction,                          \
  (build_year >= year) +                                                                \
  (build_year >= year2) +                                                               \
  (build_year >= year3) +                                                               \
  (build_year >= year4))                                                                \
{ 0: name##_b##year##suffix##_sprites_##direction;                                      \
  1: name##_a##year##suffix##_sprites_##direction;                                      \
  2: name##_a##year2##suffix##_sprites_##direction;                                     \
  3: name##_a##year3##suffix##_sprites_##direction;                                     \
     name##_a##year4##suffix##_sprites_##direction; }                                   \

#define engine_build_year5_template(name, year, year2, year3, year4, year5, direction, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_##direction,                                 \
  (build_year >= year) +                                                                       \
  (build_year >= year2) +                                                                      \
  (build_year >= year3) +                                                                      \
  (build_year >= year4) +                                                                      \
  (build_year >= year5))                                                                       \
{ 0: name##_b##year##suffix##_sprites_##direction;                                             \
  1: name##_a##year##suffix##_sprites_##direction;                                             \
  2: name##_a##year2##suffix##_sprites_##direction;                                            \
  3: name##_a##year3##suffix##_sprites_##direction;                                            \
  4: name##_a##year4##suffix##_sprites_##direction;                                            \
     name##_a##year5##suffix##_sprites_##direction; }                                          \
                                                                                      
#define engine_build_year6_template(name, year, year2, year3, year4, year5, year6, direction, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_##direction,                                        \
  (build_year >= year) +                                                                              \
  (build_year >= year2) +                                                                             \
  (build_year >= year3) +                                                                             \
  (build_year >= year4) +                                                                             \
  (build_year >= year5) +                                                                             \
  (build_year >= year6))                                                                              \
{ 0: name##_b##year##suffix##_sprites_##direction;                                                    \
  1: name##_a##year##suffix##_sprites_##direction;                                                    \
  2: name##_a##year2##suffix##_sprites_##direction;                                                   \
  3: name##_a##year3##suffix##_sprites_##direction;                                                   \
  4: name##_a##year4##suffix##_sprites_##direction;                                                   \
  5: name##_a##year5##suffix##_sprites_##direction;                                                   \
     name##_a##year6##suffix##_sprites_##direction; }                                                 \

// Выбор ориентации кабины случайным образом

#define engine_RNDany_direction_template(name, p1, p2)     \
random_switch (FEAT_TRAINS, SELF, name##_sprites_start_sp, \
  bitmask(TRIGGER_VEHICLE_SERVICE))                        \
{ p1: name##_sprites_left;                                 \
  p2: name##_sprites_right; }                              \

#define engine_RND_direction_template(name, p1, p2)    \
random_switch (FEAT_TRAINS, SELF, name##_sprites_1RND, \
  bitmask(TRIGGER_VEHICLE_SERVICE))                    \
{ p1: name##_sprites_left;                             \
  p2: name##_sprites_right; }                          \
switch (FEAT_TRAINS, PARENT, name##_sprites_start_sp,  \
  count_veh_id(name))                                  \
{ 1: name##_sprites_1RND;                              \
     name##_sprites_start; }                           \

// Выбор ориентации эффекта для кабины, ориентированной случайным образом

#define engine_RNDany_effect_direction_template(name, p1, p2) \
switch (FEAT_TRAINS, SELF, name##_create_effect,              \
  (random_bits % (p1 + p2)) < p1)                             \
{ 1: name##_create_effect_sprites_left;                       \
     name##_create_effect_sprites_right; }                    \

#define engine_RND_effect_direction_template(name, p1, p2) \
switch (FEAT_TRAINS, SELF, name##_create_effect_1RND,      \
  (random_bits % (p1 + p2)) < p1)                          \
{ 1: name##_create_effect_sprites_left;                    \
     name##_create_effect_sprites_right; }                 \
switch (FEAT_TRAINS, PARENT, name##_create_effect,         \
  count_veh_id(name))                                      \
{ 1: name##_create_effect_1RND;                            \
     name##_create_effect_sprites_start; }                 \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив в СМЕ)

#define engine_direction_template(name, suffix)          \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,    \
[ set_offset_to(2),                                      \
  (prev_vehicle_type_id() == name) ||                    \
  (position_in_consist == 0) ])                          \
{ 1: name##suffix##_sprites_left;                        \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,   \
  ((LOAD_TEMP(0) - count_veh_id(name) + 1) % 2))         \
{ 1: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,    \
[  set_offset_to(-16),                                   \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_old;                         \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,    \
[  set_offset_to(-14),                                   \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_16;                          \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,    \
[  set_offset_to(-12),                                   \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_14;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,    \
[  set_offset_to(-10),                                   \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_12;                          \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,     \
[  set_offset_to(-8),                                    \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_10;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,     \
[  set_offset_to(-6),                                    \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_8;                           \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,     \
[  set_offset_to(-4),                                    \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_6;                           \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start, \
[  set_offset_to(-2),                                    \
  (prev_vehicle_type_id() == name) ])                    \
{ 1: name##suffix##_sprites_4;                           \
     name##suffix##_sprites_2l; }                        \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой)

#define engine_direction_template2(name, name2, suffix)  \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,    \
[ set_offset_to(2),                                      \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ||                   \
  (position_in_consist == 0) ])                          \
{ 1: name##suffix##_sprites_left;                        \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,   \
  ((LOAD_TEMP(0) - count_veh_id(name) -                  \
    count_veh_id(name2) + 1) % 2))                       \
{ 1: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,    \
[  set_offset_to(-16),                                   \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_old;                         \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,    \
[  set_offset_to(-14),                                   \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_16;                          \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,    \
[  set_offset_to(-12),                                   \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_14;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,    \
[  set_offset_to(-10),                                   \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_12;                          \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,     \
[  set_offset_to(-8),                                    \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_10;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,     \
[  set_offset_to(-6),                                    \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_8;                           \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,     \
[  set_offset_to(-4),                                    \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_6;                           \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start, \
[  set_offset_to(-2),                                    \
  (prev_vehicle_type_id() == name) ||                    \
  (prev_vehicle_type_id() == name2) ])                   \
{ 1: name##suffix##_sprites_4;                           \
     name##suffix##_sprites_2l; }                        \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и средней секцией)

#define engine_direction_template2m(name, namem, suffix) \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,    \
[ set_offset_to(2),                                      \
  (prev_vehicle_type_id() == name) ||                    \
  (position_in_consist == 0) ])                          \
{ 1: name##suffix##_sprites_left;                        \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,   \
  ((LOAD_TEMP(0) - count_veh_id(name) -                  \
    count_veh_id(namem) + 1) % 2))                       \
{ 1: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,    \
[  set_offset_to(-16),                                   \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_old;                         \
  2: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,    \
[  set_offset_to(-14),                                   \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_16;                          \
  2: name##suffix##_sprites_right;                       \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,    \
[  set_offset_to(-12),                                   \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_14;                          \
  2: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,    \
[  set_offset_to(-10),                                   \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_12;                          \
  2: name##suffix##_sprites_right;                       \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,     \
[  set_offset_to(-8),                                    \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_10;                          \
  2: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,     \
[  set_offset_to(-6),                                    \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_8;                           \
  2: name##suffix##_sprites_right;                       \
     name##suffix##_sprites_2l;}                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,     \
[  set_offset_to(-4),                                    \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_6;                           \
  2: name##suffix##_sprites_2l;                          \
     name##suffix##_sprites_right;}                      \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,     \
[  set_offset_to(-2),                                    \
  (prev_vehicle_type_id() == name) +                     \
  ((prev_vehicle_type_id() == namem) * 2) ])             \
{ 1: name##suffix##_sprites_4;                           \
  2: name##suffix##_sprites_right;                       \
     name##suffix##_sprites_2l; }                        \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,    \
[  set_offset_to(2),                                     \
  (prev_vehicle_type_id() == namem) ])                   \
{ 1: name##suffix##_sprites_left;                        \
     name##suffix##_sprites_2; }                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start, \
[  set_offset_to(-2),                                    \
  (prev_vehicle_type_id() == namem) ])                   \
{ 1: name##suffix##_sprites_right;                       \
     name##suffix##_sprites_ml; }                        \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и средней секцией)

#define engine_direction_template3m(name, name2, namem, suffix)  \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,            \
[ set_offset_to(2),                                              \
  (prev_vehicle_type_id() == name) ||                            \
  (prev_vehicle_type_id() == name2) ||                           \
  (position_in_consist == 0) ])                                  \
{ 1: name##suffix##_sprites_left;                                \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,           \
  ((LOAD_TEMP(0) - count_veh_id(name) -                          \
    count_veh_id(name2) - count_veh_id(namem) + 1) % 2))         \
{ 1: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,            \
[  set_offset_to(-16),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_old;                                 \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,            \
[  set_offset_to(-14),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_16;                                  \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,            \
[  set_offset_to(-12),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_14;                                  \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,            \
[  set_offset_to(-10),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_12;                                  \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,             \
[  set_offset_to(-8),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_10;                                  \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,             \
[  set_offset_to(-6),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_8;                                   \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,             \
[  set_offset_to(-4),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_6;                                   \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,             \
[  set_offset_to(-2),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_4;                                   \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l; }                                \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,            \
[  set_offset_to(2),                                             \
  (prev_vehicle_type_id() == namem) ])                           \
{ 1: name##suffix##_sprites_left;                                \
     name##suffix##_sprites_2; }                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start,         \
[  set_offset_to(-2),                                            \
  (prev_vehicle_type_id() == namem) ])                           \
{ 1: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_ml; }                                \

// Выбор ориентации кабины секции для СМЕ (схема с 2 альтернативами и средней секцией)

#define engine_direction_template4m(name, name2, name3, namem, suffix)  \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,            \
[ set_offset_to(2),                                              \
  (prev_vehicle_type_id() == name) ||                            \
  (prev_vehicle_type_id() == name2) ||                           \
  (prev_vehicle_type_id() == name3) ||                           \
  (position_in_consist == 0) ])                                  \
{ 1: name##suffix##_sprites_left;                                \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,           \
  ((LOAD_TEMP(0) - count_veh_id(name) - count_veh_id(name2) -    \
    count_veh_id(name3) - count_veh_id(namem) + 1) % 2))         \
{ 1: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,            \
[  set_offset_to(-16),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_old;                                 \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,            \
[  set_offset_to(-14),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_16;                                  \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,            \
[  set_offset_to(-12),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_14;                                  \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,            \
[  set_offset_to(-10),                                           \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_12;                                  \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,             \
[  set_offset_to(-8),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_10;                                  \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,             \
[  set_offset_to(-6),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_8;                                   \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,             \
[  set_offset_to(-4),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_6;                                   \
  2: name##suffix##_sprites_2l;                                  \
     name##suffix##_sprites_right;}                              \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,             \
[  set_offset_to(-2),                                            \
  ((prev_vehicle_type_id() == name) ||                           \
   (prev_vehicle_type_id() == name2) ||                          \
   (prev_vehicle_type_id() == name3)) +                          \
  ((prev_vehicle_type_id() == namem) * 2) ])                     \
{ 1: name##suffix##_sprites_4;                                   \
  2: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_2l; }                                \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,            \
[  set_offset_to(2),                                             \
  (prev_vehicle_type_id() == namem) ])                           \
{ 1: name##suffix##_sprites_left;                                \
     name##suffix##_sprites_2; }                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start,         \
[  set_offset_to(-2),                                            \
  (prev_vehicle_type_id() == namem) ])                           \
{ 1: name##suffix##_sprites_right;                               \
     name##suffix##_sprites_ml; }                                \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и 2-я средними секциями)

#define engine_direction_template3m2(name, namem, namem2, suffix)   \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,               \
[ set_offset_to(2),                                                 \
  (prev_vehicle_type_id() == name) ||                               \
  (position_in_consist == 0) ])                                     \
{ 1: name##suffix##_sprites_left;                                   \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,              \
  ((LOAD_TEMP(0) - count_veh_id(name) -                             \
    count_veh_id(namem) -                                           \
    count_veh_id(namem2) + 1) % 2))                                 \
{ 1: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,               \
[  set_offset_to(-16),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
    (prev_vehicle_type_id() == namem2)) * 2) ])                     \
{ 1: name##suffix##_sprites_old;                                    \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,               \
[  set_offset_to(-14),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_16;                                     \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l;}                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,               \
[  set_offset_to(-12),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_14;                                     \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,               \
[  set_offset_to(-10),                                              \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_12;                                     \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l;}                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,                \
[  set_offset_to(-8),                                               \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_10;                                     \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,                \
[  set_offset_to(-6),                                               \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_8;                                      \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l;}                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,                \
[  set_offset_to(-4),                                               \
  (prev_vehicle_type_id() == name) +                                \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_6;                                      \
  2: name##suffix##_sprites_2l;                                     \
     name##suffix##_sprites_right;}                                 \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,                \
[  set_offset_to(-2),                                               \
  ((prev_vehicle_type_id() == name))  +                             \
  (((prev_vehicle_type_id() == namem) ||                            \
   (prev_vehicle_type_id() == namem2)) * 2) ])                      \
{ 1: name##suffix##_sprites_4;                                      \
  2: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_2l; }                                   \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,               \
[  set_offset_to(2),                                                \
  ((prev_vehicle_type_id() == namem) ||                             \
   (prev_vehicle_type_id() == namem2)) ])                           \
{ 1: name##suffix##_sprites_left;                                   \
     name##suffix##_sprites_2; }                                    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start,            \
[  set_offset_to(-2),                                               \
  ((prev_vehicle_type_id() == namem) ||                             \
   (prev_vehicle_type_id() == namem2)) ])                           \
{ 1: name##suffix##_sprites_right;                                  \
     name##suffix##_sprites_ml; }                                   \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и 2-я средними секциями)

#define engine_direction_template4m2(name, name2, namem, namem2, suffix)    \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2l,                       \
[ set_offset_to(2),                                                         \
  (prev_vehicle_type_id() == name) ||                                       \
  (prev_vehicle_type_id() == name2) ||                                      \
  (position_in_consist == 0) ])                                             \
{ 1: name##suffix##_sprites_left;                                           \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_old,                      \
  ((LOAD_TEMP(0) - count_veh_id(name) -                                     \
    count_veh_id(name2) - count_veh_id(namem) -                             \
    count_veh_id(namem2) + 1) % 2))                                         \
{ 1: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_16,                       \
[  set_offset_to(-16),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
    (prev_vehicle_type_id() == namem2)) * 2) ])                             \
{ 1: name##suffix##_sprites_old;                                            \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_14,                       \
[  set_offset_to(-14),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_16;                                             \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l;}                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_12,                       \
[  set_offset_to(-12),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_14;                                             \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_10,                       \
[  set_offset_to(-10),                                                      \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_12;                                             \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l;}                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_8,                        \
[  set_offset_to(-8),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_10;                                             \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_6,                        \
[  set_offset_to(-6),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_8;                                              \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l;}                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_4,                        \
[  set_offset_to(-4),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_6;                                              \
  2: name##suffix##_sprites_2l;                                             \
     name##suffix##_sprites_right;}                                         \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_2,                        \
[  set_offset_to(-2),                                                       \
  ((prev_vehicle_type_id() == name) ||                                      \
   (prev_vehicle_type_id() == name2)) +                                     \
  (((prev_vehicle_type_id() == namem) ||                                    \
   (prev_vehicle_type_id() == namem2)) * 2) ])                              \
{ 1: name##suffix##_sprites_4;                                              \
  2: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_2l; }                                           \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_ml,                       \
[  set_offset_to(2),                                                        \
  ((prev_vehicle_type_id() == namem) ||                                     \
   (prev_vehicle_type_id() == namem2)) ])                                   \
{ 1: name##suffix##_sprites_left;                                           \
     name##suffix##_sprites_2; }                                            \
switch (FEAT_TRAINS, SELF, name##suffix##_sprites_start,                    \
[  set_offset_to(-2),                                                       \
  ((prev_vehicle_type_id() == namem) ||                                     \
   (prev_vehicle_type_id() == namem2)) ])                                   \
{ 1: name##suffix##_sprites_right;                                          \
     name##suffix##_sprites_ml; }                                           \

// Выбор ориентации двойного бустера без альтернатив

#define engine_direction_template_buster2(name)         \
switch (FEAT_TRAINS, SELF, name##_sprites2,             \
[  set_offset_to(-2), prev_vehicle_randombits() % 2 ])  \
{ 1: name##_sprites_left;                               \
     name##_sprites_right; }                            \
switch (FEAT_TRAINS, SELF, name##_sprites1,             \
[  set_offset_to(-4), prev_vehicle_randombits() % 2 ])  \
{ 1: name##_sprites_left;                               \
     name##_sprites_right; }                            \
switch (FEAT_TRAINS, SELF, name##_sprites_start,        \
[  set_offset_to(-2), prev_vehicle_type_id() == name])  \
{ 1: name##_sprites1;                                   \
     name##_sprites2; }                                 \

// определение расхода топлива
// расход определяется граничным на разгоне, торможении, подъёме, спуске.
// в оставшемся случае расходуется часть, пропорциональная доли массы от общей доли в массе
// (общая масса на долю мощности в общей мощности)
//      return (rc_max * (((LOAD_TEMP(6) /* total weight */ ) * power / LOAD_TEMP(5)) /* total power */ / weight));

// передеать так, что если в гору скорость свыше 90%, то значит мощи хватает и считать обычным образом.

// ввиду отсутсвия переменной для общего веса убрана составляющая веса из формулы. Вернуть при появлении веса.

#define RC_MAX 17/10
#define RC_MIN 1/10
#define RC_SME 8/10 // снижение СО для локомотива в СМЕ
#define RC_MU_AS_CAR 2

#define general_running_cost(name, rc_base)                                                           \
switch (FEAT_TRAINS, SELF, name##_running_cost_speed,                                                 \
  (LOAD_TEMP(1) < (LOAD_TEMP(2) * 9 / 10)) *                                                          \
    (1 + ((is_penalise_speed() == 0) && (position_in_consist > 0))))                                  \
{ 1: return rc_base * RC_MAX;                                                                         \
  2: return rc_base * RC_MAX * RC_SME;                                                                \
     return rc_base; }                                                                                \
switch (FEAT_TRAINS, SELF, name##_running_cost_slope,                                                 \
  (other_veh_z_offset(1) > 0) + (2 * (other_veh_z_offset(1) < 0)) *                                   \
    (1 + ((is_penalise_speed() == 0) && (position_in_consist > 0))))                                  \
{ 1: return rc_base * RC_MAX;                                                                         \
  2: return rc_base;                                                                                  \
  3: return rc_base * RC_MAX * RC_SME;                                                                \
  4: return rc_base * RC_SME;                                                                         \
     name##_running_cost_speed; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_stop,                                                  \
  (LOAD_TEMP(1) < 2) *                                                                                \
    (1 + ((is_penalise_speed() == 0) && (position_in_consist > 0))))                                  \
{ 1: return rc_base * RC_MIN;                                                                         \
  2: return rc_base * RC_MIN * RC_SME;                                                                \
     name##_running_cost_slope; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_service,                                               \
  (current_date > date_of_last_service) && (current_date < date_of_last_service + 2))                 \
{ 1: return min(32767, 5 * rc_base);                                                                  \
     name##_running_cost_stop; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor2,                                             \
[  STORE_TEMP(current_speed, 1),                                                                      \
   STORE_TEMP(current_max_speed, 2),                                                                  \
   STORE_TEMP(breakdowns_since_last_service, 3),                                                      \
   STORE_TEMP(reliability, 4)] )                                                                      \
{ name##_running_cost_service; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor1,                                             \
  vehicle_is_in_depot + (2 * vehicle_is_broken) + (4 * vehicle_is_crashed))                           \
{    1: return 1;                                                                                     \
  2..3: return min(32767, 5 * rc_base);                                                               \
  4..7: return min(32767, rc_base + 2000);                                                            \
        name##_running_cost_factor2; }                                                                \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor0, (age_in_days + 1) -                           \
          ((is_penalise_speed() == 0) && (position_in_consist > 0)))                                  \
{ 0: return rc_base * RC_SME;                                                                         \
  1: return rc_base;                                                                                  \
     name##_running_cost_factor1; }                                                                   \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, position_in_articulated_veh)                   \
{ 0: name##_running_cost_factor0;                                                                     \
     return 0; }                                                                                      \

#define wagon_running_cost(name, rc_base)                                                             \
switch (FEAT_TRAINS, SELF, name##_running_cost_stop,                                                  \
  LOAD_TEMP(1) < 2)                                                                                   \
{ 0: return rc_base * RC_MIN;                                                                         \
     return rc_base; }                                                                                \
switch (FEAT_TRAINS, SELF, name##_running_cost_service,                                               \
  (current_date > date_of_last_service) && (current_date < date_of_last_service + 2))                 \
{ 1: return min(32767, 5 * rc_base);                                                                  \
     name##_running_cost_stop; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor2,                                             \
[  STORE_TEMP(current_speed, 1),                                                                      \
   STORE_TEMP(current_max_speed, 2),                                                                  \
   STORE_TEMP(breakdowns_since_last_service, 3),                                                      \
   STORE_TEMP(reliability, 4)] )                                                                      \
{ name##_running_cost_service; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor1,                                             \
  vehicle_is_in_depot + (2 * vehicle_is_broken) + (4 * vehicle_is_crashed))                           \
{    1: return 1;                                                                                     \
  2..3: return min(32767, 5 * rc_base);                                                               \
  4..7: return min(32767, rc_base+ 2000);                                                             \
        name##_running_cost_factor2; }                                                                \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor0, age_in_days)                                \
{ 0: return rc_base;                                                                                  \
     name##_running_cost_factor1; }                                                                   \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, position_in_articulated_veh)                   \
{ 0: name##_running_cost_factor0;                                                                     \
     return 0; }                                                                                      \

#define emu_running_cost(name, rc_base, rc_base_notmotor)                                             \
switch (FEAT_TRAINS, SELF, name##_running_cost_speed,                                                 \
  LOAD_TEMP(1) < (LOAD_TEMP(2) * 9 / 10))                                                             \
{ 1: return rc_base * RC_MAX + rc_base_notmotor;                                                      \
     return rc_base + rc_base_notmotor; }                                                             \
switch (FEAT_TRAINS, SELF, name##_running_cost_slope,                                                 \
  (other_veh_z_offset(1) > 0) + (2 * (other_veh_z_offset(1) < 0)))                                    \
{ 1: return rc_base * RC_MAX + rc_base_notmotor;                                                      \
  2: return rc_base + rc_base_notmotor;                                                               \
     name##_running_cost_speed; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_stop,                                                  \
  LOAD_TEMP(1) < 2)                                                                                   \
{ 1: return (rc_base + rc_base_notmotor) * RC_MIN;                                                    \
     name##_running_cost_slope; }                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_service,                                               \
  (current_date > date_of_last_service) && (current_date < date_of_last_service + 2))                 \
{ 1: return min(32767, 5 * rc_base + rc_base_notmotor);                                               \
     name##_running_cost_stop; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor2,                                             \
[  STORE_TEMP(current_speed, 1),                                                                      \
   STORE_TEMP(current_max_speed, 2),                                                                  \
   STORE_TEMP(breakdowns_since_last_service, 3),                                                      \
   STORE_TEMP(reliability, 4)] )                                                                      \
{ name##_running_cost_service; }                                                                      \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor1,                                             \
  vehicle_is_in_depot + (2 * vehicle_is_broken) + (4 * vehicle_is_crashed))                           \
{    1: return 1;                                                                                     \
  2..3: return min(32767, 5 * rc_base + rc_base_notmotor);                                            \
  4..7: return min(32767, rc_base + rc_base_notmotor + 2000);                                         \
        name##_running_cost_factor2; }                                                                \
switch (FEAT_TRAINS, PARENT, name##_running_cost_factor0, age_in_days)                                \
{ 0: return (rc_base + rc_base_notmotor);                                                             \
     name##_running_cost_factor1; }                                                                   \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, position_in_articulated_veh)                   \
{ 0: name##_running_cost_factor0;                                                                     \
     return 0; }                                                                                      \

// Определение стоимости обслуживания с изменением по году постройки

#define engine_RC_change_build_after(name, Rcost, new_Rcost, year)                     \
general_running_cost(name##_v1, Rcost)                                                 \
general_running_cost(name##_v2, new_Rcost)                                             \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, build_year >= year)             \
{ 0: name##_v1_running_cost_factor;                                                    \
     name##_v2_running_cost_factor; }                                                  \

// Определение стоимости обслуживания с изменением по 2-м годам постройки

#define engine_RC_change_build_after2(name, Rcost, new_Rcost, year, new_Rcost2, year2) \
general_running_cost(name##_v1, Rcost)                                                 \
general_running_cost(name##_v2, new_Rcost)                                             \
general_running_cost(name##_v3, new_Rcost2)                                            \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,                                 \
                           (build_year >= year) + (build_year >= year2))               \
{ 0: name##_v1_running_cost_factor;                                                    \
  1: name##_v2_running_cost_factor;                                                    \
     name##_v3_running_cost_factor; }                                                  \

// Определение стоимости обслуживания с изменением по 3-м годам постройки

#define engine_RC_change_build_after3(name, Rcost, new_Rcost, year, new_Rcost2, year2, new_Rcost3, year3) \
general_running_cost(name##_v1, Rcost)                                                                    \
general_running_cost(name##_v2, new_Rcost)                                                                \
general_running_cost(name##_v3, new_Rcost2)                                                               \
general_running_cost(name##_v4, new_Rcost3)                                                               \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,                                                    \
                           (build_year >= year) + (build_year >= year2) + (build_year >= year3))          \
{ 0: name##_v1_running_cost_factor;                                                                       \
  1: name##_v2_running_cost_factor;                                                                       \
  2: name##_v3_running_cost_factor;                                                                       \
     name##_v4_running_cost_factor; }                                                                     \

// Определение стоимости обслуживания с изменением по 4-м годам постройки

#define engine_RC_change_build_after4(name, Rcost, new_Rcost, year, new_Rcost2, year2, new_Rcost3, year3, new_Rcost4, year4)  \
general_running_cost(name##_v1, Rcost)                                                                                        \
general_running_cost(name##_v2, new_Rcost)                                                                                    \
general_running_cost(name##_v3, new_Rcost2)                                                                                   \
general_running_cost(name##_v4, new_Rcost3)                                                                                   \
general_running_cost(name##_v5, new_Rcost4)                                                                                   \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor,                                                                        \
                           (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))      \
{ 0: name##_v1_running_cost_factor;                                                                                           \
  1: name##_v2_running_cost_factor;                                                                                           \
  2: name##_v3_running_cost_factor;                                                                                           \
  3: name##_v4_running_cost_factor;                                                                                           \
     name##_v5_running_cost_factor; }                                                                                         \

// Определение стоимости обслуживания вагона с изменением по году постройки

#define wagon_RC_change_build_after(name, Rcost, new_Rcost, year)                       \
wagon_running_cost(name##_v1, Rcost)                                                    \
wagon_running_cost(name##_v2, new_Rcost)                                                \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, build_year >= year)              \
{ 0: name##_v1_running_cost_factor;                                                     \
     name##_v2_running_cost_factor; }                                                   \

// Определение стоимости обслуживания вагона с изменением по 2-м годам постройки

#define wagon_RC_change_build_after2(name, Rcost, new_Rcost, year, new_Rcost2, year2)                 \
wagon_running_cost(name##_v1, Rcost)                                                                  \
wagon_running_cost(name##_v2, new_Rcost)                                                              \
wagon_running_cost(name##_v3, new_Rcost2)                                                             \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, (build_year >= year) + (build_year >= year2))  \
{ 0: name##_v1_running_cost_factor;                                                                   \
  1: name##_v2_running_cost_factor;                                                                   \
     name##_v3_running_cost_factor; }                                                                 \

// Определение стоимости обслуживания вагона с изменением по 3-м годам постройки

#define wagon_RC_change_build_after3(name, Rcost, new_Rcost, year, new_Rcost2, year2, new_Rcost3, year3)                      \
wagon_running_cost(name##_v1, Rcost)                                                                                          \
wagon_running_cost(name##_v2, new_Rcost)                                                                                      \
wagon_running_cost(name##_v3, new_Rcost2)                                                                                     \
wagon_running_cost(name##_v4, new_Rcost3)                                                                                     \
switch (FEAT_TRAINS, SELF, name##_running_cost_factor, (build_year >= year) + (build_year >= year2) + (build_year >= year3))  \
{ 0: name##_v1_running_cost_factor;                                                                                           \
  1: name##_v2_running_cost_factor;                                                                                           \
  2: name##_v3_running_cost_factor;                                                                                           \
     name##_v4_running_cost_factor; }                                                                                         \

// Определение пенальти на скорость (схема без СМЕ)

#define engine_penalise_speed0(name)                                        \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \

// Определение пенальти на скорость (схема без альтернатив в СМЕ)

#define engine_penalise_speed(name, num)                                    \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name), 0),                         \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name), 0),                                        \
  STORE_TEMP(vehicle_type_id == name, 1) ])                                 \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема без альтернатив в СМЕ с модернизацией СМЕ)

#define engine_penalise_speed_2up3(name, shift)                                                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_pos4,                                               \
  (cargo_subtype >= (0xE0 + shift)) && (LOAD_TEMP(2) >= (0xE0 + shift)) &&                                 \
  ((LOAD_TEMP(0) - count_veh_id(name)) == 2))                                                              \
{ 1: return 0;                                                                                             \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_pos2,                                               \
  (LOAD_TEMP(0) <= 2) || (cargo_subtype >= (0xE0 + shift)))                                                \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                  \
     return 0; }                                                                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info2,                                                   \
  position_in_consist)                                                                                     \
{ 2: name##_bitmask_vehicle_info_pos2;                                                                     \
  4: name##_bitmask_vehicle_info_pos4;                                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info1,                                                 \
[ STORE_TEMP(count_veh_id(name), 0),                                                                       \
  STORE_TEMP(cargo_subtype, 2),                                                                            \
  vehicle_type_id == name ])                                                                               \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                  \
     name##_bitmask_vehicle_info2; }                                                                       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                    \
  (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))             \
{ 1: return 0;                                                                                             \
     name##_bitmask_vehicle_info1; }                                                                       \

#define engine_penalise_speed_2up4(name, shift)                                                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_pos6,                                               \
  (cargo_subtype >= (0xE0 + shift)) && (LOAD_TEMP(2) >= (0xE0 + shift)) &&                                 \
  ((LOAD_TEMP(0) - count_veh_id(name)) == 3))                                                              \
{ 1: return 0;                                                                                             \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_pos4,                                               \
  (cargo_subtype >= (0xE0 + shift)) && (LOAD_TEMP(2) >= (0xE0 + shift)) &&                                 \
  ((LOAD_TEMP(0) - count_veh_id(name)) == 2))                                                              \
{ 1: return 0;                                                                                             \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_pos2,                                               \
  (LOAD_TEMP(0) <= 2) || (cargo_subtype >= (0xE0 + shift)))                                                \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                  \
     return 0; }                                                                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info2,                                                   \
  position_in_consist)                                                                                     \
{ 2: name##_bitmask_vehicle_info_pos2;                                                                     \
  4: name##_bitmask_vehicle_info_pos4;                                                                     \
  6: name##_bitmask_vehicle_info_pos6;                                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info1,                                                 \
[ STORE_TEMP(count_veh_id(name), 0),                                                                       \
  STORE_TEMP(cargo_subtype, 2),                                                                            \
  vehicle_type_id == name ])                                                                               \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                  \
     name##_bitmask_vehicle_info2; }                                                                       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                                                    \
  (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))             \
{ 1: return 0;                                                                                             \
     name##_bitmask_vehicle_info1; }                                                                       \

// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)

#define engine_penalise_speed2(name, name1, num)                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)

#define engine_penalise_speed3(name, name1, name2, num)                     \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)

#define engine_penalise_speed4(name, name1, name2, name3, num)              \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)

#define engine_penalise_speed5(name, name1, name2, name3, name4, num)       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)

#define engine_penalise_speed6(name, name1, name2, name3, name4, name5, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)

#define engine_penalise_speed7(name, name1, name2, name3, name4, name5, name6, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5) -                           \
                            count_veh_id(name6), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num)])                                                   \
{ 1: return 0;                                                              \
     return bitmask(FLAG_PENALISE_SPEED); }                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5) +                                          \
             count_veh_id(name6), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5) ||                                  \
             (vehicle_type_id == name6), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  (position_in_consist == 0) || (vehicle_is_not_powered) ||                 \
   (position_in_articulated_veh > 0))                                       \
{ 1: return 0;                                                              \
     name##_bitmask_vehicle_info2; }                                        \

// Определение пенальти на скорость (схема несовместимости СМЕ с заданного года)

#define engine_penalise_speed_build_after(name, year)                                 \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change2, build_year >= year) \
{ 0: name##_bitmask_vehicle_info;                                                     \
     return bitmask(FLAG_PENALISE_SPEED); }                                           \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change1, build_year >= year) \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                             \
     name##_bitmask_vehicle_info; }                                                   \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_change, build_year >= year)    \
{ 0: name##_bitmask_vehicle_info_change2;                                             \
     name##_bitmask_vehicle_info_change1; }                                           \

#define engine_penalise_speed_build_after2(name, year, year2)                                                   \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change3, (build_year >= year) + (build_year >= year2)) \
{ 0: name##_bitmask_vehicle_info;                                                                               \
  1: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                     \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change2, (build_year >= year) + (build_year >= year2)) \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
  1: name##_bitmask_vehicle_info;                                                                               \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                     \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change1, (build_year >= year) + (build_year >= year2)) \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
  1: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
     name##_bitmask_vehicle_info; }                                                                             \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_change, (build_year >= year) + (build_year >= year2))    \
{ 0: name##_bitmask_vehicle_info_change3;                                                                       \
  1: name##_bitmask_vehicle_info_change2;                                                                       \
     name##_bitmask_vehicle_info_change1; }                                                                     \

#define engine_penalise_speed_build_after2_pre(name, year, year2)                                               \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change3, (build_year >= year) + (build_year >= year2)) \
{ 0: name##_bitmask_vehicle_info_pre;                                                                           \
  1: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                     \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change2, (build_year >= year) + (build_year >= year2)) \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
  1: name##_bitmask_vehicle_info_pre;                                                                           \
     return bitmask(FLAG_PENALISE_SPEED); }                                                                     \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info_change1, (build_year >= year) + (build_year >= year2)) \
{ 0: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
  1: return bitmask(FLAG_PENALISE_SPEED);                                                                       \
     name##_bitmask_vehicle_info_pre; }                                                                         \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info_change, (build_year >= year) + (build_year >= year2))    \
{ 0: name##_bitmask_vehicle_info_change3;                                                                       \
  1: name##_bitmask_vehicle_info_change2;                                                                       \
     name##_bitmask_vehicle_info_change1; }                                                                     \

// Определение скорости без вариантов

#define engine_speed(name, speed)                           \
switch (FEAT_TRAINS, SELF, name##_speed,                    \
  is_penalise_speed() ? get_penalised_speed(speed) : speed) \
{ return; }                                                 \

// Определение скорости с изменением в заданный год

#define engine_speed_change_after(name, speed, new_speed, year)              \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, current_year >= year)      \
{ 1: return new_speed;                                                       \
     return speed; }                                                         \
switch (FEAT_TRAINS, SELF, name##_speed,                                     \
[ STORE_TEMP(date_of_last_service >= date(year,1,1) ? new_speed : speed, 0), \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])  \
{ return; }                                                                  \

// Определение скорости с изменением в 2 заданных года

#define engine_speed_change_after2(name, speed, new_speed, year, new_speed2, year2)                 \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (current_year >= year) + (current_year >= year2)) \
{ 1: return new_speed;                                                                              \
  2: return new_speed2;                                                                             \
     return speed; }                                                                                \
switch (FEAT_TRAINS, SELF, name##_speed,                                                            \
[ STORE_TEMP(date_of_last_service >= date(year,1,1) ?                                               \
  (date_of_last_service >= date(year2,1,1) ? new_speed2 : new_speed) : speed, 0),                   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                         \
{ return; }                                                                                         \

// Определение скорости с изменением по году постройки

#define engine_speed_change_build_after(name, speed, new_speed, year)       \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)       \
{ 1: return new_speed;                                                      \
     return speed; }                                                        \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(build_year >= year ? new_speed : speed, 0),                    \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости с 2-я изменениями по году постройки

#define engine_speed_change_build_after2(name, speed, new_speed, year, new_speed2, year2)       \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (build_year >= year) + (build_year >= year2)) \
{ 1: return new_speed;                                                                          \
  2: return new_speed2;                                                                         \
     return speed; }                                                                            \
switch (FEAT_TRAINS, SELF, name##_speed,                                                        \
[ STORE_TEMP(build_year >= year ? (build_year >= year2 ? new_speed2 : new_speed) : speed, 0),   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                     \
{ return; }                                                                                     \

// Определение скорости с изменением по году постройки и в заданном году

#define engine_speed_change_build_after_and_year(name, speed, new_speed, year, new_speed2, year2) \
switch (FEAT_TRAINS, SELF, name##_purchase_speed,                                                 \
        (build_year >= year) + ((current_year >= year2) * 2))                                     \
{ 0: return speed;                                                                                \
  1: return new_speed;                                                                            \
     return new_speed2; }                                                                         \
switch (FEAT_TRAINS, SELF, name##_speed,                                                          \
[ STORE_TEMP(date_of_last_service >= date(year2,1,1) ? new_speed2 :                               \
  build_year >= year ? new_speed : speed, 0),                                                     \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                       \
{ return; }                                                                                       \

// Определение скорости с изменением в 2 заданных года

#define engine_speed_change_after2(name, speed, new_speed, year, new_speed2, year2)              \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (current_year >= year) +                       \
                                                 (current_year >= year2))                        \
{ 1: return new_speed;                                                                           \
  2: return new_speed2;                                                                          \
     return speed; }                                                                             \
switch (FEAT_TRAINS, SELF, name##_speed,                                                         \
[ STORE_TEMP(date_of_last_service >= date(year,1,1) ? (date_of_last_service >= date(year2,1,1) ? \
new_speed2 : new_speed) : speed, 0),                                                             \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                      \
{ return; }                                                                                      \

// Определение скорости с изменением в 3 заданных года

#define engine_speed_change_after3(name, speed, new_speed, year, new_speed2, year2, new_speed3, year3) \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (current_year >= year) +                             \
                                                  (current_year >= year2) +                            \
                                                  (current_year >= year3))                             \
{ 1: return new_speed;                                                                                 \
  2: return new_speed2;                                                                                \
  3: return new_speed3;                                                                                \
     return speed; }                                                                                   \
switch (FEAT_TRAINS, SELF, name##_speed,                                                               \
[ STORE_TEMP(date_of_last_service >= date(year,1,1) ?                                                  \
            (date_of_last_service >= date(year2,1,1) ?                                                 \
            (date_of_last_service >= date(year3,1,1) ?                                                 \
new_speed3 : new_speed2) : new_speed) : speed, 0),                                                     \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                            \
{ return; }                                                                                            \

// Определение скорости со снижением для старых

#define engine_speed_with_reduce(name, speed, speed_red, life)              \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                    \
{ return; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(get_max_speed(life, speed_red, speed), 0),                     \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости со снижением для старых и изменением скорости по году постройки

#define engine_speed_with_reduce_change_build_after(name, speed, speed_red, life, new_speed, year) \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)                              \
{ 1: return new_speed;                                                                             \
     return speed; }                                                                               \
switch (FEAT_TRAINS, SELF, name##_speed,                                                           \
[ STORE_TEMP(get_max_speed(life, speed_red, ((build_year >= year) ? new_speed : speed)), 0),       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                        \
{ return; }                                                                                        \

// Определение скорости со снижением для старых и с предсерийной моделью

#define engine_speed_with_reduce_and_pre_model(name, speed, speed_red, life, life_pre, pre_year)      \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                              \
{ return; }                                                                                           \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP( ((age_in_days >= (life_pre*365)) && (build_year < pre_year)) ||                         \
  ((age_in_days >= (life*365)) && (build_year >= pre_year)) ? speed_red : speed, 0),                  \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// Определение скорости со снижением для старых и с предсерийной моделью без снижения

#define engine_speed_with_reduce_and_pre_model_no_reduce(name, speed, speed_red, life, new_speed, pre_year)  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= pre_year)                                    \
{ 1: return new_speed;                                                                                       \
     return speed; }                                                                                         \
switch (FEAT_TRAINS, SELF, name##_speed,                                                                     \
[ STORE_TEMP( (build_year < pre_year) ? speed : (age_in_days >= (life*365)) ? speed_red : new_speed, 0),     \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                                  \
{ return; }                                                                                                  \

// Определение скорости с загрузкой

#define wagon_speed_change_on_load(name, speed, loaded_speed, loaded_amount)  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, 0)                          \
{ return speed; }                                                             \
switch (FEAT_TRAINS, SELF, name##_speed,                                      \
  cargo_count > loaded_amount)                                                \
{ 1: return loaded_speed;                                                     \
     return speed; }                                                          \

// Определение старения груза с изменением по году постройки

#define engine_CAP_change_build_after(name, CAP, new_CAP, year)             \
switch (FEAT_TRAINS, SELF, name##_cargo_age_period, build_year >= year)     \
{ 1: return new_CAP;                                                        \
     return CAP; }                                                          \

// Определение массы с изменением по году постройки

#define engine_weight_change_build_after(name, weight, new_weight, year)    \
switch (FEAT_TRAINS, SELF, name##_weight, build_year >= year)               \
{ 1: return new_weight;                                                     \
     return weight; }                                                       \

// Определение массы с изменением по 2-м годам постройки

#define engine_weight_change_build_after2(name, weight, new_weight, year, new_weight2, year2)   \
switch (FEAT_TRAINS, SELF, name##_weight, (build_year >= year) + (build_year >= year2))         \
{ 1: return new_weight;                                                                         \
  2: return new_weight2;                                                                        \
     return weight; }                                                                           \

// Определение массы с изменением по 3-м годам постройки

#define engine_weight_change_build_after3(name, weight, new_weight, year, new_weight2, year2, new_weight3, year3)   \
switch (FEAT_TRAINS, SELF, name##_weight, (build_year >= year) + (build_year >= year2) + (build_year >= year3))     \
{ 1: return new_weight;                                                                                             \
  2: return new_weight2;                                                                                            \
  3: return new_weight3;                                                                                            \
     return weight; }                                                                                               \

// Определение цены с изменением по году постройки

#define engine_cost_change_build_after(name, cost, new_cost, year)        \
switch (FEAT_TRAINS, SELF, name##_cost_factor, build_year >= year)        \
{ 1: return new_cost;                                                     \
     return cost; }                                                       \

// Определение цены с изменением по 2-м годам постройки

#define engine_cost_change_build_after2(name, cost, new_cost, year, new_cost2, year2)            \
switch (FEAT_TRAINS, SELF, name##_cost_factor, (build_year >= year) + (build_year >= year2))     \
{ 1: return new_cost;                                                                            \
  2: return new_cost2;                                                                           \
     return cost; }                                                                              \

// Определение цены с изменением по 3-м годам постройки

#define engine_cost_change_build_after3(name, cost, new_cost, year, new_cost2, year2, new_cost3, year3)                  \
switch (FEAT_TRAINS, SELF, name##_cost_factor, (build_year >= year) + (build_year >= year2) + (build_year >= year3))     \
{ 1: return new_cost;                                                                                                    \
  2: return new_cost2;                                                                                                   \
  3: return new_cost3;                                                                                                   \
     return cost; }                                                                                                      \

// Определение цены с изменением по 4-м годам постройки

#define engine_cost_change_build_after4(name, cost, new_cost, year, new_cost2, year2, new_cost3, year3, new_cost4, year4)                        \
switch (FEAT_TRAINS, SELF, name##_cost_factor, (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))     \
{ 1: return new_cost;                                                                                                                            \
  2: return new_cost2;                                                                                                                           \
  3: return new_cost3;                                                                                                                           \
  4: return new_cost4;                                                                                                                           \
     return cost; }                                                                                                                              \

// Определение мощности с изменением по году постройки

#define engine_power_change_build_after(name, power, new_power, year)     \
switch (FEAT_TRAINS, SELF, name##_power, build_year >= year)              \
{ 1: return (new_power);                                                  \
     return (power); }                                                    \

// Определение мощности с изменением по 2-м годам постройки

#define engine_power_change_build_after2(name, power, new_power, year, new_power2, year2)     \
switch (FEAT_TRAINS, SELF, name##_power, (build_year >= year) + (build_year >= year2))        \
{ 1: return (new_power);                                                                      \
  2: return (new_power2);                                                                     \
     return (power); }                                                                        \

// Определение мощности с изменением по 3-м годам постройки

#define engine_power_change_build_after3(name, power, new_power, year, new_power2, year2, new_power3, year3)       \
switch (FEAT_TRAINS, SELF, name##_power, (build_year >= year) + (build_year >= year2) + (build_year >= year3))     \
{ 1: return (new_power);                                                                                           \
  2: return (new_power2);                                                                                          \
  3: return (new_power3);                                                                                          \
     return (power); }                                                                                             \

// Определение мощности с изменением по 4-м годам постройки

#define engine_power_change_build_after4(name, power, new_power, year, new_power2, year2, new_power3, year3, new_power4, year4)            \
switch (FEAT_TRAINS, SELF, name##_power, (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))     \
{ 1: return (new_power);                                                                                                                   \
  2: return (new_power2);                                                                                                                  \
  3: return (new_power3);                                                                                                                  \
  4: return (new_power4);                                                                                                                  \
     return (power); }                                                                                                                     \

// Определение мощности с изменением по году

#define engine_power_change_after(name, power, new_power, year)                    \
switch (FEAT_TRAINS, SELF, name##_power, date_of_last_service >= date(year,1,1))   \
{ 1: return (new_power);                                                           \
     return (power); }                                                             \

// Определение мощности с изменением по грузу

#define engine_power_change_on_cargo_type(name, power, new_power, cargo)      \
switch (FEAT_TRAINS, SELF, name##_power, cargo_type_in_veh == cargo)          \
{ 1: return (new_power);                                                      \
     return (power); }                                                        \

// Определение ТЕ с изменением по году постройки

#define engine_TE_change_build_after(name, TE, new_TE, year)                           \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient, build_year >= year)     \
{ 1: return new_TE;                                                                    \
     return TE; }                                                                      \

// Определение ТЕ с изменением по 2-м годам постройки

#define engine_TE_change_build_after2(name, TE, new_TE, year, new_TE2, year2)                                    \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient, (build_year >= year) + (build_year >= year2))     \
{ 1: return new_TE;                                                                                              \
  2: return new_TE2;                                                                                             \
     return TE; }                                                                                                \

// Определение ТЕ с изменением по 3-м годам постройки

#define engine_TE_change_build_after3(name, TE, new_TE, year, new_TE2, year2, new_TE3, year3)    \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient,                                   \
        (build_year >= year) + (build_year >= year2) + (build_year >= year3))                    \
{ 1: return new_TE;                                                                              \
  2: return new_TE2;                                                                             \
  3: return new_TE3;                                                                             \
     return TE; }                                                                                \

// Определение ТЕ с изменением по 4-м годам постройки

#define engine_TE_change_build_after4(name, TE, new_TE, year, new_TE2, year2, new_TE3, year3, new_TE4, year4)    \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient,                                                   \
        (build_year >= year) + (build_year >= year2) + (build_year >= year3) + (build_year >= year4))            \
{ 1: return new_TE;                                                                                              \
  2: return new_TE2;                                                                                             \
  3: return new_TE3;                                                                                             \
  4: return new_TE4;                                                                                             \
     return TE; }                                                                                                \

// Определение ТЕ с изменением по грузу

#define engine_TE_change_on_cargo_type(name, TE, new_TE, cargo)                                \
switch (FEAT_TRAINS, SELF, name##_tractive_effort_coefficient, cargo_type_in_veh == cargo)     \
{ 1: return new_TE;                                                                            \
     return TE; }                                                                              \

// Определение цены рефита при изменении груза

#define engine_refit_cost_for_cargo_change(name, cost)                                                \
switch (FEAT_TRAINS, SELF, name##_refit_cost, (extra_callback_info1 & 0x00FF) == cargo_type_in_veh)   \
{ 1: return 0;                                                                                        \
     return cost; }                                                                                   \

// Определение цены рефита при ливреи

#define engine_refit_cost_for_a_livery_change(name, num, cost)                      \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                       \
  ((extra_callback_info1 & 0xFF00) >= (num * 256)) + ((cargo_subtype >= num) * 2))  \
{ 1: return cost;                                                                   \
     return 0; }                                                                    \

#define engine_refit_cost_for_e_livery_change(name, num, cost)                      \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                       \
  ((extra_callback_info1 & 0xFF00) == (num * 256)) + ((cargo_subtype == num) * 2))  \
{ 1: return cost;                                                                   \
     return 0; }                                                                    \

#define engine_refit_cost_for_e2_livery_change(name, num, cost, cost2)              \
switch (FEAT_TRAINS, SELF, name##_refit_cost,                                       \
  ((extra_callback_info1 & 0xFF00) == (num * 256)) + ((cargo_subtype == num) * 2))  \
{ 1: return cost;                                                                   \
  2: return cost2;                                                                  \
     return 0; }                                                                    \

// Определение длины с изменением по году постройки

#define engine_length_change_build_after(name, length, new_length, year)     \
switch (FEAT_TRAINS, SELF, name##_length, build_year >= year)                \
{ 1: return new_length;                                                      \
     return length; }                                                        \

// Определение длины с изменением по 2-м годам постройки

#define engine_length_change_build_after2(name, length, new_length, year, new_length2, year2)     \
switch (FEAT_TRAINS, SELF, name##_length, (build_year >= year) + (build_year >= year2))           \
{ 1: return new_length;                                                                           \
  2: return new_length2;                                                                          \
     return length; }                                                                             \

// Определение длины с изменением по году постройки

#define engine_ARV_change_build_after(name, length, new_length, year)     \
switch (FEAT_TRAINS, SELF, name##_articulated_part, build_year >= year)   \
{ 1: articulated_part_dummy##new_length;                                  \
     articulated_part_dummy##length; }                                    \

// Определение вместимости с изменением по году постройки

#define engine_capacity_change_build_after(name, capacity, new_capacity, year)  \
switch (FEAT_TRAINS, SELF, name##_cargo_capacity, build_year >= year)           \
{ 1: return new_capacity;                                                       \
     return capacity; }                                                         \

// не выпускать новые четвёрки без средней секции

#define  new_4x_train_start_stop(name)                                                                \
switch (FEAT_TRAINS, PARENT, name##_start_stop3,                                                      \
[ set_offset_to(4),                                                                                   \
  prev_vehicle_type_id() == name##_m ])                                                               \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_2AND2_OR_MORE_ENGINE); }                                       \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() == name##_m ])                                                               \
{ 1: name##_start_stop3;                                                                              \
     return string(STR_START_STOP_NEED_2AND2_OR_MORE_ENGINE); }                                       \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// не выпускать новые тройники без средней секции

#define  new_3x_train_start_stop(name)                                                                \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() == name##_m ])                                                               \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_2AND1_OR_MORE_ENGINE); }                                       \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// не выпускать новые двойки с средней секцией

#define  new_2x_train_start_stop(name, namem)                                                         \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  prev_vehicle_type_id() != namem ])                                                                  \
{ 1: any_start_stop;                                                                                  \
     return string(STR_START_STOP_NEED_NO_MIDDLE_SECTION); }                                          \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \

// эффекты. Искрение (симметричная секция).

#define engine_electric1_1_effect(name, left)                                                                 \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left, electric_create_effect(left)) { return 1; }     \

// эффекты. Искрение (правая и левая ориентации секции).

#define engine_electric1r_1_effect(name, left, right)                                                         \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left, electric_create_effect(left)) { return 1; }     \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right, electric_create_effect(right)) { return 1; }   \

// эффекты. Искрение (правая и левая ориентации секции).
//          Искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой

#define engine_electric1r_2_effect(name, left, left2, right, right2)                                      \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r3, electric_create_effect(right)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r2, electric_create_effect(right2)) { return 1; } \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l1, (animation_counter / 32) % 2)                 \
{ 0: name##_create_effect_sprites_l3; name##_create_effect_sprites_l2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_left, current_speed > threshold_of_speed())     \
{ 0: name##_create_effect_sprites_l1; name##_create_effect_sprites_l2; }                                  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r1, (animation_counter / 32) % 2)                 \
{ 0: name##_create_effect_sprites_r3; name##_create_effect_sprites_r2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_right, current_speed > threshold_of_speed())    \
{ 0: name##_create_effect_sprites_r1; name##_create_effect_sprites_r2; }                                  \

#define engine_electric1_2_effect(name, left, left2)                                                      \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l1, (animation_counter / 32) % 2)                 \
{ 0: name##_create_effect_sprites_l3; name##_create_effect_sprites_l2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect, current_speed > threshold_of_speed())                  \
{ 0: name##_create_effect_sprites_l1; name##_create_effect_sprites_l2; }                                  \

#define engine_electric1_2all_effect(name, left, left2)                                                   \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l3, electric_create_effect(left)) { return 1; }   \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left2)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_start, (animation_counter / 32) % 2)              \
{ 0: name##_create_effect_sprites_l3; name##_create_effect_sprites_l2; }                                  \

// эффекты. Искрение (правая и левая секции). Левая секция искрит тлько на малой скорости

#define engine_electric2_1_effect(name, left, right)                                                          \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_l2, electric_create_effect(left)) { return 1; }       \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_left, current_speed > threshold_of_speed())         \
{ 0: name##_create_effect_sprites_l2; return 0; }                                                             \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right, electric_create_effect(right)) { return 1; }   \

// эффекты. Искрение (правая и левая секции). На первой секции искрит только 2-ой пантограф,
//          на второй искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой

#define engine_electric2_2_effect(name, left, right, right2)                                              \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left, electric_create_effect(left)) { return 1; } \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r3, electric_create_effect(right)) { return 1; }  \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r2, electric_create_effect(right2)) { return 1; } \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_r1, (animation_counter / 32) % 2)                 \
{ 0: name##_create_effect_sprites_r3; name##_create_effect_sprites_r2; }                                  \
switch (FEAT_TRAINS, PARENT, name##_create_effect_sprites_right, current_speed > threshold_of_speed())    \
{ 0: name##_create_effect_sprites_r1; name##_create_effect_sprites_r2; }                                  \

// эффекты. Дым (правая и левая ориентации).

#define engine_diesel_1r_effect(name, left, right, height)                                                         \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left, diesel_create_effect(left,height)) { return 1; }     \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right, diesel_create_effect(right,height)) { return 1; }   \

// эффекты. Дым (симметрично).

#define engine_diesel_1_effect(name, left, height)                                                                 \
switch (FEAT_TRAINS, SELF, name##_create_effect, diesel_create_effect(left,height)) { return 1; }                  \

// эффекты. Двойной дым симметрия по ДП (правая и левая ориентации).

#define engine_diesel_2s_effect(name, left, right, height)                                                          \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left,                                                       \
[diesel_create_effect_dy(left, 1, height), diesel_create_effect_dy2(left, -1, height)]) { return 2; }               \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right,                                                      \
[diesel_create_effect_dy(right, 1, height), diesel_create_effect_dy2(right, -1, height)]) { return 2; }             \

// эффекты. Двойной дым (правая и левая ориентации).

#define engine_diesel_2_effect(name, left1, left2, right1, right2, height)                                \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_left,                                             \
[diesel_create_effect(left1, height), diesel_create_effect2(left2, height)]) { return 2; }                \
switch (FEAT_TRAINS, SELF, name##_create_effect_sprites_right,                                            \
[diesel_create_effect(right1, height), diesel_create_effect2(right2, height)]) { return 2; }              \

// эффекты. Белый дым (симметрично). Предполагается, что дым выпускает только первая часть
#define engine_steam_1_effect(name, left, height)                                                                 \
switch (FEAT_TRAINS, SELF, name##_create_effect2, steam_create_effect(left,height)) { return 1; }                 \
switch (FEAT_TRAINS, SELF, name##_create_effect, position_in_articulated_veh)                                     \
{ 0: name##_create_effect2; return 0; }                                                                           \

// тендер
#define engine_tender(name)                                                              \
switch (FEAT_TRAINS, SELF, name##_articulated_part, extra_callback_info1)                \
{ 1: return name;                                                                        \
  2: return name;                                                                        \
  3: return name;                                                                        \
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS; }                                       \

#define engine_tender_length(name, num1, num2, num3, num4)                               \
switch (FEAT_TRAINS, SELF, name##_length, position_in_articulated_veh)                   \
{ 0: return num1;                                                                        \
  1: return num2;                                                                        \
  2: return num3;                                                                        \
  3: return num4;                                                                        \
     return 8; }                                                                         \

#define engine_tender_length_change_build_after(name, num11, num12, num13, num14, num21, num22, num23, num24, year)   \
engine_tender_length(name##_v1, num11, num12, num13, num14)                                                           \
engine_tender_length(name##_v2, num21, num22, num23, num24)                                                           \
switch (FEAT_TRAINS, SELF, name##_length, build_year >= year)                                                         \
{ 0: name##_v1_length;                                                                                                \
     name##_v2_length; }                                                                                              \

#define engine_tender_length_change_build_after2(name, num11, num12, num13, num14, num21, num22, num23, num24, year, num31, num32, num33, num34, year2) \
engine_tender_length(name##_v1, num11, num12, num13, num14)                                                           \
engine_tender_length(name##_v2, num21, num22, num23, num24)                                                           \
engine_tender_length(name##_v3, num31, num32, num33, num34)                                                           \
switch (FEAT_TRAINS, SELF, name##_length, (build_year >= year) + (build_year >= year2))                               \
{ 0: name##_v1_length;                                                                                                \
  1: name##_v2_length;                                                                                                \
     name##_v3_length; }                                                                                              \

#define engine_tender_length_change_build_after3(name, num11, num12, num13, num14, num21, num22, num23, num24, year, num31, num32, num33, num34, year2, num41, num42, num43, num44, year3) \
engine_tender_length(name##_v1, num11, num12, num13, num14)                                                           \
engine_tender_length(name##_v2, num21, num22, num23, num24)                                                           \
engine_tender_length(name##_v3, num31, num32, num33, num34)                                                           \
engine_tender_length(name##_v4, num41, num42, num43, num44)                                                           \
switch (FEAT_TRAINS, SELF, name##_length, (build_year >= year) + (build_year >= year2) + (build_year >= year3))       \
{ 0: name##_v1_length;                                                                                                \
  1: name##_v2_length;                                                                                                \
  2: name##_v3_length;                                                                                                \
     name##_v4_length; }                                                                                              \

// Если рисуем на карте и следующий в цепочке вагон скрыт, то отдаём пустышку

// пляски с 0x9C и 0x9A для паровозов, чтобы клёса крутились в зависимости от положения, а не от времени.

// Регистр 5 и 6 занимаем под ЭМВПС

// long vehicle template

#define long_vehicle(name)                                  \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

// Шаблон для рефсекций
#define long_vehicle_RND(name, name_rnd)                    \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites_viewport,         \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites,           \
  bitmask(TRIGGER_VEHICLE_SERVICE))                         \
{ dependent: name_rnd;                                      \
  1: name##_sprites_viewport; }                             \

// short vehicle template

#define short_vehicle(name)                                 \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define short_vehicle_RND(name, name_rnd)                   \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites_viewport,         \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites,           \
  bitmask(TRIGGER_VEHICLE_SERVICE))                         \
{ dependent: name_rnd;                                      \
  1: name##_sprites_viewport; }                             \

// special vehicle template

#define long_vehicle_sp(name)                               \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start_sp;  }                              \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define short_vehicle_sp(name)                              \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_sprites_start_sp; }                               \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos;    }                             \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet()||                                      \
  (is_drawn_in_viewport() && is_hidden_at(0)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define long_vehicle_dir(name)                              \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(                                               \
             (var[0x9F, 0, 0x07] == 3) ?                    \
               var[0x9C, 0, 0x0F] & 3 :                     \
             (var[0x9F, 0, 0x07] == 7) ?                    \
               (3 - var[0x9C, 0, 0x0F] & 3) :               \
             (var[0x9F, 0, 0x07] > 3) ?                     \
               var[0x9A, 0, 0x0F] & 3 :                     \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])          \
{  name##_direction_template;  }                            \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(count_veh_id(name), 0),                        \
  STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4) ])                         \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

#define long_vehicle_nocount(name)                          \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,          \
[ STORE_TEMP(((var[0x9F, 0, 0x07] & 3) == 3) ?              \
  var[0x9C, 0, 0x0F] & 3 : var[0x9A, 0, 0x0F] & 3, 3) ])    \
{  name##_sprites_start; }                                  \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,         \
[ STORE_TEMP(current_speed, 1),                             \
  STORE_TEMP(vehicle_type_id, 4)                            \
])                                                          \
{  name##_sprites_selfpos; }                                \
switch (FEAT_TRAINS, SELF, name##_sprites,                  \
  is_not_build_yet() ||                                     \
  (is_drawn_in_viewport() && is_hidden_at(1)))              \
{ 1: dummy_sprites;                                         \
     name##_sprites_parent; }                               \

// train default cargo type template

#define models_default_cargo_template(name) \
if (models_default_cargo == 1) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [GOOD]; default_cargo_type: GOOD; } } } \
if (models_default_cargo == 2) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [PASS]; default_cargo_type: PASS; } } } \
if (models_default_cargo == 3) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [MAIL]; default_cargo_type: MAIL; } } } \

#define models_default_cargo_template_pass(name) \
if (models_default_cargo == 1) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [GOOD, PASS]; default_cargo_type: GOOD; } } } \
if (models_default_cargo == 2) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [PASS, GOOD]; default_cargo_type: PASS; } } } \
if (models_default_cargo == 3) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [MAIL, PASS]; default_cargo_type: MAIL; } } } \

// train default cargo type template
#define long_name_template(nname, strname)                                                    \
if (enable_long_names) { item (FEAT_TRAINS, nname) { property { name: string(strname); } } }  \

// train availability template
#define allow_steamer(name)                                                                          \
if (disable_steamer) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_diesel(name)                                                                          \
if (disable_diesel) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_acelectric(name)                                                                          \
if (disable_acelectric) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_dcelectric(name)                                                                          \
if (disable_dcelectric) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_acdcelectric(name)                                                                          \
if (disable_acdcelectric) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_dmu(name)                                                                          \
if (disable_dmu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_acemu(name)                                                                          \
if (disable_acemu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_dcemu(name)                                                                          \
if (disable_dcemu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

#define allow_acdcemu(name)                                                                          \
if (disable_acdcemu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }   \

