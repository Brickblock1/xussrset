  /// code definition

// change sprites block name for templates

#define map_sprites(to_sprites, from_sprites)                \
switch (FEAT_TRAINS, SELF, to_sprites, 0) { from_sprites; }  \

// Can attach wagon templates

// Head - 0..1car - Head. (4 types) 2 head types and 2 cars types
#define MU_can_attach_wagon_h01ch_template4m2(name, vehid1, vehid2, vehmid1, vehmid2, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                                       \
  (count_veh_id(vehid1) +                                                                          \
   count_veh_id(vehid2)) > num * 2 - 1)                                                            \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                                       \
     return string(STR_CAN_ATTACH_NO_MORE); }                                                      \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                                          \
  (count_veh_id(vehid1) +                                                                          \
   count_veh_id(vehid2)) % 2)                                                                      \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                                      \
     return CB_RESULT_ATTACH_ALLOW; }                                                              \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                                            \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                                  \
{  vehid1: name##_c_can_attach_wagon_h;                                                            \
   vehid2: name##_c_can_attach_wagon_h;                                                            \
  vehmid1: error;                                                                                  \
  vehmid2: error;                                                                                  \
  return CB_RESULT_ATTACH_ALLOW; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)                               \
{  vehid1: name##_can_attach_wagon_length;                                                         \
   vehid2: name##_can_attach_wagon_length;                                                         \
  vehmid1: name##_c_can_attach_wagon;                                                              \
  vehmid2: name##_c_can_attach_wagon;                                                              \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                                    \

// Head - 0..2car - Head. (2 types) 1 head type and 1 car type
#define MU_can_attach_wagon_h02ch_template2m(name, vehid1, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                     \
  (count_veh_id(vehid1)) > num * 2 - 1)                                          \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                     \
     return string(STR_CAN_ATTACH_NO_MORE); }                                    \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                        \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                    \
     return CB_RESULT_ATTACH_ALLOW; }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                         \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                \
{ vehmid1: error;                                                                \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_c_can_attach_wagon_h;                                          \
  vehmid1: name##_c_can_attach_wagon2;                                           \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)             \
{  vehid1: name##_can_attach_wagon_length;                                       \
  vehmid1: name##_c_can_attach_wagon;                                            \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \

// Head - 0..2car - Head. (3 types) 2 head types and 1 cars types
#define MU_can_attach_wagon_h02ch_template3m(name, vehid1, vehid2, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                             \
  (count_veh_id(vehid1) +                                                                \
   count_veh_id(vehid2)) > num * 2 - 1)                                                  \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                             \
     return string(STR_CAN_ATTACH_NO_MORE); }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                                \
  (count_veh_id(vehid1) +                                                                \
   count_veh_id(vehid2)) % 2)                                                            \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                            \
     return CB_RESULT_ATTACH_ALLOW; }                                                    \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                                 \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                        \
{ vehmid1: error;                                                                        \
  return CB_RESULT_ATTACH_ALLOW; }                                                       \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                                  \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                        \
{  vehid1: name##_c_can_attach_wagon_h;                                                  \
   vehid2: name##_c_can_attach_wagon_h;                                                  \
  vehmid1: name##_c_can_attach_wagon2;                                                   \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                          \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)                     \
{  vehid1: name##_can_attach_wagon_length;                                               \
   vehid2: name##_can_attach_wagon_length;                                               \
  vehmid1: name##_c_can_attach_wagon;                                                    \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                          \

// Head - 0..2car - Head. (4 types) 2 head types and 2 cars types
#define MU_can_attach_wagon_h02ch_template4m2(name, vehid1, vehid2, vehmid1, vehmid2, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                                       \
  (count_veh_id(vehid1) +                                                                          \
   count_veh_id(vehid2)) > num * 2 - 1)                                                            \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                                       \
     return string(STR_CAN_ATTACH_NO_MORE); }                                                      \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                                          \
  (count_veh_id(vehid1) +                                                                          \
   count_veh_id(vehid2)) % 2)                                                                      \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                                      \
     return CB_RESULT_ATTACH_ALLOW; }                                                              \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                                           \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                                  \
{ vehmid1: error;                                                                                  \
  vehmid2: error;                                                                                  \
  return CB_RESULT_ATTACH_ALLOW; }                                                                 \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                                            \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                                  \
{  vehid1: name##_c_can_attach_wagon_h;                                                            \
   vehid2: name##_c_can_attach_wagon_h;                                                            \
  vehmid1: name##_c_can_attach_wagon2;                                                             \
  vehmid2: name##_c_can_attach_wagon2;                                                             \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                                    \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)                               \
{  vehid1: name##_can_attach_wagon_length;                                                         \
   vehid2: name##_can_attach_wagon_length;                                                         \
  vehmid1: name##_c_can_attach_wagon;                                                              \
  vehmid2: name##_c_can_attach_wagon;                                                              \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                                    \

// Head - 0..3car - Head. (3 types) 2 head types and 1 car type
#define MU_can_attach_wagon_h03ch_template3m(name, vehid1, vehid2, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                             \
  (count_veh_id(vehid1) +                                                                \
   count_veh_id(vehid2)) > num * 2 - 1)                                                  \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                             \
     return string(STR_CAN_ATTACH_NO_MORE); }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                                \
  (count_veh_id(vehid1) +                                                                \
   count_veh_id(vehid2)) % 2)                                                            \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                            \
     return CB_RESULT_ATTACH_ALLOW; }                                                    \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon3,                                 \
[ set_offset_to(num_vehs_in_consist-6), prev_vehicle_type_id() ])                        \
{ vehmid1: error;                                                                        \
  return CB_RESULT_ATTACH_ALLOW; }                                                       \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                                 \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                        \
{ vehmid1: name##_c_can_attach_wagon3;                                                   \
  return CB_RESULT_ATTACH_ALLOW; }                                                       \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                                  \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                        \
{ vehmid1: name##_c_can_attach_wagon2;                                                   \
   vehid1: name##_c_can_attach_wagon_h;                                                  \
   vehid2: name##_c_can_attach_wagon_h;                                                  \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                          \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)                     \
{  vehid1: name##_can_attach_wagon_length;                                               \
   vehid2: name##_can_attach_wagon_length;                                               \
  vehmid1: name##_c_can_attach_wagon;                                                    \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                          \

// Head - 0..4car - Head. (8 types) 4 head types and 4 cars types
#define MU_can_attach_wagon_h04ch_template8m4(name, vehid1, vehid2, vehid3, vehid4, vehmid1, vehmid2, vehmid3, vehmid4, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                                                                         \
  (count_veh_id(vehid1) +                                                                                                            \
   count_veh_id(vehid2) +                                                                                                            \
   count_veh_id(vehid3) +                                                                                                            \
   count_veh_id(vehid4)) > num * 2 - 1)                                                                                              \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                                                                         \
     return string(STR_CAN_ATTACH_NO_MORE); }                                                                                        \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                                                                            \
  (count_veh_id(vehid1) +                                                                                                            \
   count_veh_id(vehid2) +                                                                                                            \
   count_veh_id(vehid3) +                                                                                                            \
   count_veh_id(vehid4)) % 2)                                                                                                        \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                                                                        \
     return CB_RESULT_ATTACH_ALLOW; }                                                                                                \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon4,                                                                             \
[ set_offset_to(num_vehs_in_consist-8), prev_vehicle_type_id() ])                                                                    \
{ vehmid1: error;                                                                                                                    \
  vehmid2: error;                                                                                                                    \
  vehmid3: error;                                                                                                                    \
  vehmid4: error;                                                                                                                    \
  return CB_RESULT_ATTACH_ALLOW; }                                                                                                   \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon3,                                                                             \
[ set_offset_to(num_vehs_in_consist-6), prev_vehicle_type_id() ])                                                                    \
{ vehmid1: name##_c_can_attach_wagon4;                                                                                               \
  vehmid2: name##_c_can_attach_wagon4;                                                                                               \
  vehmid3: name##_c_can_attach_wagon4;                                                                                               \
  vehmid4: name##_c_can_attach_wagon4;                                                                                               \
  return CB_RESULT_ATTACH_ALLOW; }                                                                                                   \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                                                                             \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                                                                    \
{ vehmid1: name##_c_can_attach_wagon3;                                                                                               \
  vehmid2: name##_c_can_attach_wagon3;                                                                                               \
  vehmid3: name##_c_can_attach_wagon3;                                                                                               \
  vehmid4: name##_c_can_attach_wagon3;                                                                                               \
  return CB_RESULT_ATTACH_ALLOW; }                                                                                                   \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                                                                              \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                                                                    \
{ vehmid1: name##_c_can_attach_wagon2;                                                                                               \
  vehmid2: name##_c_can_attach_wagon2;                                                                                               \
  vehmid3: name##_c_can_attach_wagon2;                                                                                               \
  vehmid4: name##_c_can_attach_wagon2;                                                                                               \
   vehid1: name##_c_can_attach_wagon_h;                                                                                              \
   vehid2: name##_c_can_attach_wagon_h;                                                                                              \
   vehid3: name##_c_can_attach_wagon_h;                                                                                              \
   vehid4: name##_c_can_attach_wagon_h;                                                                                              \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                                                                      \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)                                                                 \
{  vehid1: name##_can_attach_wagon_length;                                                                                           \
   vehid2: name##_can_attach_wagon_length;                                                                                           \
   vehid3: name##_can_attach_wagon_length;                                                                                           \
   vehid4: name##_can_attach_wagon_length;                                                                                           \
  vehmid1: name##_c_can_attach_wagon;                                                                                                \
  vehmid2: name##_c_can_attach_wagon;                                                                                                \
  vehmid3: name##_c_can_attach_wagon;                                                                                                \
  vehmid4: name##_c_can_attach_wagon;                                                                                                \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                                                                      \

// Head - 1..2car - Head. (2 types) 1 head type and 1 car type
#define MU_can_attach_wagon_h12ch_template2m(name, vehid1, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                     \
  (count_veh_id(vehid1)) > num * 2 - 1)                                          \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                     \
     return string(STR_CAN_ATTACH_NO_MORE); }                                    \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon2,                         \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 1: return string(STR_CAN_ATTACH_CAR_ONLY);                                     \
     name##_can_attach_wagon_length; }                                           \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_h_can_attach_wagon2;                                           \
  vehmid1: CB_RESULT_ATTACH_ALLOW;                                               \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                        \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                    \
     return CB_RESULT_ATTACH_ALLOW; }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                         \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                \
{ vehmid1: error;                                                                \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_c_can_attach_wagon_h;                                          \
  vehmid1: name##_c_can_attach_wagon2;                                           \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)             \
{  vehid1: name##_h_can_attach_wagon;                                            \
  vehmid1: name##_c_can_attach_wagon;                                            \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \

// Head - 1..4car - Head. (2 types) 1 head type and 1 car type
#define MU_can_attach_wagon_h14ch_template2m(name, vehid1, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                     \
  (count_veh_id(vehid1)) > num * 2 - 1)                                          \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                     \
     return string(STR_CAN_ATTACH_NO_MORE); }                                    \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon2,                         \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 1: return string(STR_CAN_ATTACH_CAR_ONLY);                                     \
     name##_can_attach_wagon_length; }                                           \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_h_can_attach_wagon2;                                           \
  vehmid1: CB_RESULT_ATTACH_ALLOW;                                               \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                        \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                    \
     return CB_RESULT_ATTACH_ALLOW; }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon4,                         \
[ set_offset_to(num_vehs_in_consist-8), prev_vehicle_type_id() ])                \
{ vehmid1: error;                                                                \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon3,                         \
[ set_offset_to(num_vehs_in_consist-6), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon4;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                         \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon3;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_c_can_attach_wagon_h;                                          \
  vehmid1: name##_c_can_attach_wagon2;                                           \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)             \
{  vehid1: name##_h_can_attach_wagon;                                            \
  vehmid1: name##_c_can_attach_wagon;                                            \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \

// Head - 1..5car - Head. (2 types) 1 head type and 1 car type
#define MU_can_attach_wagon_h15ch_template2m(name, vehid1, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                     \
  (count_veh_id(vehid1)) > num * 2 - 1)                                          \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                     \
     return string(STR_CAN_ATTACH_NO_MORE); }                                    \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon2,                         \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 1: return string(STR_CAN_ATTACH_CAR_ONLY);                                     \
     name##_can_attach_wagon_length; }                                           \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_h_can_attach_wagon2;                                           \
  vehmid1: CB_RESULT_ATTACH_ALLOW;                                               \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                        \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                    \
     return CB_RESULT_ATTACH_ALLOW; }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon5,                         \
[ set_offset_to(num_vehs_in_consist-10), prev_vehicle_type_id() ])               \
{ vehmid1: error;                                                                \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon4,                         \
[ set_offset_to(num_vehs_in_consist-8), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon5;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon3,                         \
[ set_offset_to(num_vehs_in_consist-6), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon4;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                         \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon3;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_c_can_attach_wagon_h;                                          \
  vehmid1: name##_c_can_attach_wagon2;                                           \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)             \
{  vehid1: name##_h_can_attach_wagon;                                            \
  vehmid1: name##_c_can_attach_wagon;                                            \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \

// Head - 1..6car - Head. (2 types) 1 head type and 1 car type
#define MU_can_attach_wagon_h16ch_template2m(name, vehid1, vehmid1, num, error)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,                     \
  (count_veh_id(vehid1)) > num * 2 - 1)                                          \
{ 0: CB_RESULT_ATTACH_ALLOW;                                                     \
     return string(STR_CAN_ATTACH_NO_MORE); }                                    \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon2,                         \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 1: return string(STR_CAN_ATTACH_CAR_ONLY);                                     \
     name##_can_attach_wagon_length; }                                           \
switch (FEAT_TRAINS, PARENT, name##_h_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_h_can_attach_wagon2;                                           \
  vehmid1: CB_RESULT_ATTACH_ALLOW;                                               \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon_h,                        \
  (count_veh_id(vehid1)) % 2)                                                    \
{ 0: return string(STR_CAN_ATTACH_HEAD_ONLY);                                    \
     return CB_RESULT_ATTACH_ALLOW; }                                            \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon6,                         \
[ set_offset_to(num_vehs_in_consist-12), prev_vehicle_type_id() ])               \
{ vehmid1: error;                                                                \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon5,                         \
[ set_offset_to(num_vehs_in_consist-10), prev_vehicle_type_id() ])               \
{ vehmid1: name##_c_can_attach_wagon6;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon4,                         \
[ set_offset_to(num_vehs_in_consist-8), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon5;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon3,                         \
[ set_offset_to(num_vehs_in_consist-6), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon4;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon2,                         \
[ set_offset_to(num_vehs_in_consist-4), prev_vehicle_type_id() ])                \
{ vehmid1: name##_c_can_attach_wagon3;                                           \
  return CB_RESULT_ATTACH_ALLOW; }                                               \
switch (FEAT_TRAINS, PARENT, name##_c_can_attach_wagon,                          \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{  vehid1: name##_c_can_attach_wagon_h;                                          \
  vehmid1: name##_c_can_attach_wagon2;                                           \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)             \
{  vehid1: name##_h_can_attach_wagon;                                            \
  vehmid1: name##_c_can_attach_wagon;                                            \
  return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                                  \

// Heads - heads - Head. 1 head type
#define MU_can_attach_wagon_hnhh_template(name, vehid, h_num)         \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,          \
  count_veh_id(vehid) >= h_num)                                       \
{ 0: CB_RESULT_ATTACH_ALLOW;                                          \
     return string(STR_CAN_ATTACH_NO_MORE); }                         \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)  \
{ vehid: name##_can_attach_wagon_length;                              \
     return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                    \

// Heads - heads - Head. 2 head types
#define MU_can_attach_wagon_hnhh_template2(name, vehid1, vehid2, h_num)  \
switch (FEAT_TRAINS, PARENT, name##_can_attach_wagon_length,             \
  count_veh_id(vehid1) + count_veh_id(vehid2) >= h_num)                  \
{ 0: CB_RESULT_ATTACH_ALLOW;                                             \
     return string(STR_CAN_ATTACH_NO_MORE); }                            \
switch (FEAT_TRAINS, SELF, name##_can_attach_wagon, vehicle_type_id)     \
{ vehid1: name##_can_attach_wagon_length;                                \
  vehid2: name##_can_attach_wagon_length;                                \
     return string(STR_CAN_ATTACH_SAME_MU_ONLY); }                       \

// Can start / stop templates

// Missing the last car / wagon
#define MU_start_stop_template_notlast(name, vehid, errstr)        \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                    \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])  \
{ vehid: return errstr;                                            \
         return CB_RESULT_NO_TEXT; }                               \

#define MU_start_stop_template_notlast_alt(name, vehid, num, errstr, base_name)  \
[ set_offset_to(num_vehs_in_consist-2), prev_vehicle_type_id() ])                \
{ vehid: return errstr;                                                          \
     base_name; }                                                                \

// Consist length shorter, than intended. 1 head car type
#define MU_start_stop_template_minamount(name, vehid, num, errstr)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                     \
  count_veh_id(vehid) < num)                                        \
{ 0: return CB_RESULT_NO_TEXT;                                      \
     return errstr; }                                               \

#define MU_start_stop_template_minamount_alt(name, vehid, num, errstr, base_name)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                                    \
  count_veh_id(vehid) < num)                                                       \
{ 0: base_name##_start_stop;                                                       \
     return errstr; }                                                              \

// Consist length shorter, than intended. 2 head car types
#define MU_start_stop_template2_minamount(name, vehid1, vehid2, num, errstr)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                               \
  count_veh_id(vehid1) + count_veh_id(vehid2) < num)                          \
{ 0: return CB_RESULT_NO_TEXT;                                                \
     return errstr; }                                                         \

#define MU_start_stop_template2_minamount_alt(name, vehid1, vehid2, num, errstr, base_name)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                                              \
  count_veh_id(vehid1) + count_veh_id(vehid2) < num)                                         \
{ 0: base_name##_start_stop;                                                                 \
     return errstr; }                                                                        \

// Consist length shorter, than intended. 3 head car types
#define MU_start_stop_template3_minamount(name, vehid1, vehid2, vehid3, num, errstr)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                                       \
  count_veh_id(vehid1) +                                                              \
  count_veh_id(vehid2) +                                                              \
  count_veh_id(vehid3) < num)                                                         \
{ 0: return CB_RESULT_NO_TEXT;                                                        \
     return errstr; }                                                                 \

#define MU_start_stop_template3_minamount_alt(name, vehid1, vehid2, vehid3, num, errstr, base_name)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                                                      \
  count_veh_id(vehid1) +                                                                             \
  count_veh_id(vehid2) +                                                                             \
  count_veh_id(vehid3) < num)                                                                        \
{ 0: base_name##_start_stop;                                                                         \
     return errstr; }                                                                                \

// Number of head sections should be even. 1 head car type
#define MU_start_stop_template_even(name, vehid)                       \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                        \
  (count_veh_id(vehid)) % 2)                                           \
{ 0: return CB_RESULT_NO_TEXT;                                         \
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN); }  \

// Number of head sections should be even. 2 head car types
#define MU_start_stop_template2_even(name, vehid1, vehid2)             \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                        \
  (count_veh_id(vehid1) +                                              \
   count_veh_id(vehid2)) % 2)                                          \
{ 0: return CB_RESULT_NO_TEXT;                                         \
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN); }  \

// Number of head sections should be even. 3 head car types
#define MU_start_stop_template3_even(name, vehid1, vehid2, vehid3)     \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                        \
  (count_veh_id(vehid1) +                                              \
   count_veh_id(vehid2) +                                              \
   count_veh_id(vehid3)) % 2)                                          \
{ 0: return CB_RESULT_NO_TEXT;                                         \
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN); }  \

// Number of head sections should be even. 4 head car types
#define MU_start_stop_template4_even(name, vehid1, vehid2, vehid3, vehid4)  \
switch (FEAT_TRAINS, PARENT, name##_start_stop,                             \
  (count_veh_id(vehid1) +                                                   \
   count_veh_id(vehid2) +                                                   \
   count_veh_id(vehid3) +                                                   \
   count_veh_id(vehid4)) % 2)                                               \
{ 0: return CB_RESULT_NO_TEXT;                                              \
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN); }       \

// не выпускать новые четвёрки без средней секции
#define  new_4x_train_start_stop(name)                                               \
switch (FEAT_TRAINS, PARENT, name##_start_stop3,                                     \
[ set_offset_to(4),                                                                  \
  prev_vehicle_type_id() == name##_m ])                                              \
{ 1: any_start_stop;                                                                 \
     return string(STR_START_STOP_NEED_2AND2_OR_MORE_ENGINE); }                      \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                     \
[ set_offset_to(2),                                                                  \
  prev_vehicle_type_id() == name##_m ])                                              \
{ 1: name##_start_stop3;                                                             \
     return string(STR_START_STOP_NEED_2AND2_OR_MORE_ENGINE); }                      \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * NEW_TRAIN_AGE)  \
{  1: any_start_stop;                                                                \
      name##_start_stop2; }                                                          \

// не выпускать новые тройники без средней секции
#define  new_3x_train_start_stop(name)                                               \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                     \
[ set_offset_to(2),                                                                  \
  prev_vehicle_type_id() == name##_m ])                                              \
{ 1: any_start_stop;                                                                 \
     return string(STR_START_STOP_NEED_2AND1_OR_MORE_ENGINE); }                      \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * NEW_TRAIN_AGE)  \
{  1: any_start_stop;                                                                \
      name##_start_stop2; }                                                          \

// не выпускать новые двойки с средней секцией
#define  new_2x_train_start_stop(name, namem)                                        \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                     \
[ set_offset_to(2),                                                                  \
  prev_vehicle_type_id() != namem ])                                                 \
{ 1: any_start_stop;                                                                 \
     return string(STR_START_STOP_NEED_NO_MIDDLE_SECTION); }                         \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * NEW_TRAIN_AGE)  \
{  1: any_start_stop;                                                                \
      name##_start_stop2; }                                                          \

// тендер
#define engine_tender(name)                                                \
switch (FEAT_TRAINS, SELF, name##_articulated_part, extra_callback_info1)  \
{ 1: return name;                                                          \
  2: return name;                                                          \
  3: return name;                                                          \
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS; }                         \

#define engine_tender_length(name, num1, num2, num3, num4)              \
switch (FEAT_TRAINS, SELF, name##_length, position_in_articulated_veh)  \
{ 0: return num1;                                                       \
  1: return num2;                                                       \
  2: return num3;                                                       \
  3: return num4;                                                       \
     return 8; }                                                        \

// Если рисуем на карте и следующий в цепочке вагон скрыт, то отдаём пустышку
// пляски с 0x9C и 0x9A для паровозов, чтобы колёса крутились в зависимости от положения, а не от времени.
// Регистр 5 и 6 занимаем под ЭМВПС
// long vehicle template
// проработать удаление is_hidden_at(1). Заменить на is_hidden_at(0)

#define long_vehicle(name)                           \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,   \
[ STORE_TEMP(                                        \
             (var[0x9F, 0, 0x07] == 3) ?             \
               var[0x9C, 0, 0x0F] & 3  :             \
             (var[0x9F, 0, 0x07] == 7) ?             \
               (3 - var[0x9C, 0, 0x0F] & 3)  :       \
             (var[0x9F, 0, 0x07] > 3) ?              \
               var[0x9A, 0, 0x0F] & 3  :             \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])   \
{  name##_sprites_start; }                           \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,  \
[ STORE_TEMP(count_veh_id(name), 0),                 \
  STORE_TEMP(current_speed, 1),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                  \
{  name##_sprites_selfpos; }                         \
switch (FEAT_TRAINS, SELF, name##_sprites,           \
  is_not_build_yet() ||                              \
  (is_drawn_in_viewport() && is_hidden_at(1)))       \
{ 1: dummy_sprites;                                  \
     name##_sprites_parent; }                        \

// special vehicle template (отличия в имени вызываемого метода _sprites_start_##base)
#define long_vehicle_advanced(name, basename)        \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,   \
[ STORE_TEMP(                                        \
             (var[0x9F, 0, 0x07] == 3) ?             \
               var[0x9C, 0, 0x0F] & 3  :             \
             (var[0x9F, 0, 0x07] == 7) ?             \
               (3 - var[0x9C, 0, 0x0F] & 3)  :       \
             (var[0x9F, 0, 0x07] > 3) ?              \
               var[0x9A, 0, 0x0F] & 3  :             \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])   \
{ basename; }                                        \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,  \
[ STORE_TEMP(count_veh_id(name), 0),                 \
  STORE_TEMP(current_speed, 1),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                  \
{  name##_sprites_selfpos; }                         \
switch (FEAT_TRAINS, SELF, name##_sprites,           \
  is_not_build_yet() ||                              \
  (is_drawn_in_viewport() && is_hidden_at(1)))       \
{ 1: dummy_sprites;                                  \
     name##_sprites_parent; }                        \

// special vehicle template (отличия в имени вызываемого метода _sprites_start_sp)
#define long_vehicle_sp(name)                        \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,   \
[ STORE_TEMP(                                        \
             (var[0x9F, 0, 0x07] == 3) ?             \
               var[0x9C, 0, 0x0F] & 3  :             \
             (var[0x9F, 0, 0x07] == 7) ?             \
               (3 - var[0x9C, 0, 0x0F] & 3)  :       \
             (var[0x9F, 0, 0x07] > 3) ?              \
               var[0x9A, 0, 0x0F] & 3  :             \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])   \
{  name##_sprites_start_sp;  }                       \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,  \
[ STORE_TEMP(count_veh_id(name), 0),                 \
  STORE_TEMP(current_speed, 1),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                  \
{  name##_sprites_selfpos; }                         \
switch (FEAT_TRAINS, SELF, name##_sprites,           \
  is_not_build_yet() ||                              \
  (is_drawn_in_viewport() && is_hidden_at(1)))       \
{ 1: dummy_sprites;                                  \
     name##_sprites_parent; }                        \

// special vehicle template (отличия в имени вызываемого метода _direction_template)
#define long_vehicle_dir(name)                       \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,   \
[ STORE_TEMP(                                        \
             (var[0x9F, 0, 0x07] == 3) ?             \
               var[0x9C, 0, 0x0F] & 3  :             \
             (var[0x9F, 0, 0x07] == 7) ?             \
               (3 - var[0x9C, 0, 0x0F] & 3)  :       \
             (var[0x9F, 0, 0x07] > 3) ?              \
               var[0x9A, 0, 0x0F] & 3  :             \
               (3 - var[0x9A, 0, 0x0F] & 3), 3) ])   \
{  name##_direction_template;  }                     \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,  \
[ STORE_TEMP(count_veh_id(name), 0),                 \
  STORE_TEMP(current_speed, 1),                      \
  STORE_TEMP(vehicle_type_id, 4) ])                  \
{  name##_sprites_selfpos; }                         \
switch (FEAT_TRAINS, SELF, name##_sprites,           \
  is_not_build_yet() ||                              \
  (is_drawn_in_viewport() && is_hidden_at(1)))       \
{ 1: dummy_sprites;                                  \
     name##_sprites_parent; }                        \

#define long_vehicle_nocount(name)                         \
switch (FEAT_TRAINS, SELF, name##_sprites_selfpos,         \
[ STORE_TEMP(((var[0x9F, 0, 0x07] & 3) == 3) ?             \
  var[0x9C, 0, 0x0F] & 3  : var[0x9A, 0, 0x0F] & 3, 3) ])  \
{  name##_sprites_start; }                                 \
switch (FEAT_TRAINS, PARENT, name##_sprites_parent,        \
[ STORE_TEMP(current_speed, 1),                            \
  STORE_TEMP(vehicle_type_id, 4)                           \
])                                                         \
{  name##_sprites_selfpos; }                               \
switch (FEAT_TRAINS, SELF, name##_sprites,                 \
  is_not_build_yet() ||                                    \
  (is_drawn_in_viewport() && is_hidden_at(1)))             \
{ 1: dummy_sprites;                                        \
     name##_sprites_parent; }                              \

// train default cargo type template
#define models_default_cargo_template(name)                                                                                               \
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))                                                             \
   { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [PASS]; default_cargo_type: PASS; } } }                                     \
   else                                                                                                                                   \
   { if (models_default_cargo == 1) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [GOOD]; default_cargo_type: GOOD; } } }    \
     if (models_default_cargo == 2) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [PASS]; default_cargo_type: PASS; } } }    \
     if (models_default_cargo == 3) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [MAIL]; default_cargo_type: MAIL; } } } }  \

// train default cargo type template
#define long_name_template(nname, strname)                                                    \
if (enable_long_names) { item (FEAT_TRAINS, nname) { property { name: string(strname); } } }  \

// train availability template
#define allow_steamer(name)                                                                         \
if (disable_steamer) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_diesel(name)                                                                         \
if (disable_diesel) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_acelectric(name)                                                                         \
if (disable_acelectric) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_dcelectric(name)                                                                         \
if (disable_dcelectric) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_acdcelectric(name)                                                                         \
if (disable_acdcelectric) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_dmu(name)                                                                         \
if (disable_dmu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_acemu(name)                                                                         \
if (disable_acemu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_dcemu(name)                                                                         \
if (disable_dcemu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_acdcemu(name)                                                                         \
if (disable_acdcemu) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

#define allow_subway(name)                                                                         \
if (disable_subway) { item (FEAT_TRAINS, name) { property { climates_available: NO_CLIMATE; } } }  \

// Special cargo support
#define use_yeti(name, cargo_allow_refit_list)                                                           \
if (yeti_on) { item (FEAT_TRAINS, name) { property { cargo_allow_refit: [cargo_allow_refit_list]; } } }  \

// невидимый вагон размером num для ARV Call-back
#define ap_dummy(num)                                                          \
switch (FEAT_TRAINS, SELF, articulated_part_dummy##num, extra_callback_info1)  \
{ 1: return dummy##num; return CB_RESULT_NO_MORE_ARTICULATED_PARTS; }          \

ap_dummy(1)
ap_dummy(2)
ap_dummy(3)
ap_dummy(4)
ap_dummy(5)
ap_dummy(6)
ap_dummy(7)
ap_dummy(8)

// end
