 /// code definition

// Определение спрайта меню покупки

#define purchase_spriteset(name, x, y)                  \
spriteset (name##_purchase_spriteset_ico, IMAGEFILE)    \
{ [x, y, 100, 18, -40, -11] }                           \
spriteset (name##_purchase_spriteset_noico, IMAGEFILE)  \
{ [x+18, y, 82, 18, -40, -11] }                         \
switch (FEAT_TRAINS, SELF, name##_purchase_spriteset,   \
  enable_icons)                                         \
{  1: name##_purchase_spriteset_ico;                    \
      name##_purchase_spriteset_noico;}                 \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив в СМЕ)

#define engine_direction_template(name)                      \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2l,          \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (position_in_consist == 0) ])                              \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) + 1) % 2) )            \
{ 1: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_16,          \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_old;                               \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_14,          \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_16;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_12,          \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_14;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_10,          \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_12;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_8,           \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_10;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_6,           \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_8;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_4,           \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_6;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2,           \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_4;                                 \
     name##_get_spriteset_2l; }                              \
switch (FEAT_TRAINS, PARENT, name##_get_spriteset_t,         \
[ STORE_TEMP(count_veh_id(name), 0),                         \
  STORE_TEMP(current_speed, 1),                              \
  STORE_TEMP(date_of_last_service, 2) ])                     \
{  name##_get_spriteset_2;  }                                \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой)

#define engine_direction_template2(name, name2)              \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2l,          \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ||                       \
  (position_in_consist == 0) ])                              \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(name2) + 1) % 2) )                          \
{ 1: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_16,          \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_old;                               \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_14,          \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_16;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_12,          \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_14;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_10,          \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_12;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_8,           \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_10;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_6,           \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_8;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_4,           \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_6;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2,           \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_4;                                 \
     name##_get_spriteset_2l; }                              \
switch (FEAT_TRAINS, PARENT, name##_get_spriteset_t,         \
[ STORE_TEMP(count_veh_id(name), 0),                         \
  STORE_TEMP(current_speed, 1),                              \
  STORE_TEMP(date_of_last_service, 2) ])                     \
{  name##_get_spriteset_2; }                                 \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и средней секцией)

#define engine_direction_template3m(name, name2, namem)      \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2l,          \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ||                       \
  (position_in_consist == 0) ])                              \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(name2) - count_veh_id(namem) + 1) % 2) )    \
{ 1: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_16,          \
[  set_offset_to(-16),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_old;                               \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_14,          \
[  set_offset_to(-14),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_16;                                \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_12,          \
[  set_offset_to(-12),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_14;                                \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_10,          \
[  set_offset_to(-10),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_12;                                \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_8,           \
[  set_offset_to(-8),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_10;                                \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_6,           \
[  set_offset_to(-6),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_8;                                 \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_4,           \
[  set_offset_to(-4),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_6;                                 \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2,           \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_4;                                 \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l; }                              \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_ml,          \
[  set_offset_to(2),                                         \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_2; }                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_mr,          \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_get_spriteset_r;                                 \
     name##_get_spriteset_ml; }                              \
switch (FEAT_TRAINS, PARENT, name##_get_spriteset_t,         \
[ STORE_TEMP(count_veh_id(name), 0),                         \
  STORE_TEMP(current_speed, 1),                              \
  STORE_TEMP(date_of_last_service, 2) ])                     \
{  name##_get_spriteset_mr; }                                \

// Определение пенальти на скорость (схема без СМЕ)

#define engine_penalise_speed0(name)                                        \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \

// Определение пенальти на скорость (схема без альтернатив в СМЕ)

#define engine_penalise_speed(name, num)                                    \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name), 0),                         \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name), 0),                                        \
  STORE_TEMP(vehicle_type_id == name, 1) ])                                 \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)

#define engine_penalise_speed2(name, name1, num)                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)

#define engine_penalise_speed3(name, name1, name2, num)                     \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)

#define engine_penalise_speed4(name, name1, name2, name3, num)              \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)

#define engine_penalise_speed5(name, name1, name2, name3, name4, num)       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)

#define engine_penalise_speed6(name, name1, name2, name3, name4, name5, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)

#define engine_penalise_speed7(name, name1, name2, name3, name4, name5, name6, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5) -                           \
                            count_veh_id(name6), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5) +                                          \
             count_veh_id(name6), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5) ||                                  \
             (vehicle_type_id == name6), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение скорости без вариантов

#define engine_speed(name, speed)                                           \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                    \
{ return; }                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
  is_penalise_speed() ? get_penalised_speed(speed) : speed)                 \
{ return; }                                                                 \

// Определение скорости с изменением в заданный год

#define engine_speed_change_after(name, speed, new_speed, year)             \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, current_year >= year)     \
{ 1: return new_speed;                                                      \
     return speed; }                                                        \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(current_year >= year ? new_speed : speed , 0),                 \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости с изменением по году постройки

#define engine_speed_change_build_after(name, speed, new_speed, year)       \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)       \
{ 1: return new_speed;                                                      \
     return speed; }                                                        \
switch (FEAT_TRAINS, SELF, name##_speed,                                    \
[ STORE_TEMP(build_year >= year ? new_speed : speed , 0),                   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ]) \
{ return; }                                                                 \

// Определение скорости с изменением по году постройки и в заданном году

#define engine_speed_change_build_after_and_year(name, speed, new_speed, year, new_speed2, year2)    \
switch (FEAT_TRAINS, SELF, name##_purchase_speed,                                                    \
        (build_year >= year) + ((current_year >= year2) * 2))                                        \
{ 0: return speed;                                                                                   \
  1: return new_speed;                                                                               \
     return new_speed2; }                                                                            \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(current_year >= year2 ? new_speed2 : build_year >= year ? new_speed : speed , 0),       \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости с изменением в 2 заданных года

#define engine_speed_change_after2(name, speed, new_speed, year, new_speed2, year2)                  \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, (current_year >= year) +                           \
                                                 (current_year >= year2))                            \
{ 1: return new_speed;                                                                               \
  2: return new_speed2;                                                                              \
     return speed; }                                                                                 \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(current_year >= year ? (current_year >= year2 ? new_speed2 : new_speed) : speed , 0),   \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \

// Определение скорости со снижением для старых

#define engine_speed_with_reduce(name, speed, speed_r, life)                                         \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                             \
{ return; }                                                                                          \
switch (FEAT_TRAINS, SELF, name##_speed,                                                             \
[ STORE_TEMP(get_max_speed(life, speed_r, speed), 0),                                                \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                          \
{ return; }                                                                                          \
                                                                                                     
// Определение скорости со снижением для старых и изменением скорости по году постройки

#define engine_speed_with_reduce_change_build_after(name, speed, speed_r, life, new_speed, year)      \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, build_year >= year)                                 \
{ 1: return new_speed;                                                                                \
     return speed; }                                                                                  \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP(get_max_speed(life, speed_r, ((build_year >= year) ? new_speed : speed)), 0),            \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// Определение скорости со снижением для старых и с предсерийной моделью

#define engine_speed_with_reduce_and_pre_model(name, speed, speed_r, life, life_pre, pre_year)        \
switch (FEAT_TRAINS, SELF, name##_purchase_speed, speed)                                              \
{ return; }                                                                                           \
switch (FEAT_TRAINS, SELF, name##_speed,                                                              \
[ STORE_TEMP( ((age_in_days >= (life_pre*365)) && (build_year < pre_year)) ||                         \
  ((age_in_days >= (life*365)) && (build_year >= pre_year)) ? speed_r : speed, 0),                    \
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0) ])                           \
{ return; }                                                                                           \

// не выпускать новые тройники без средней секции                                                                                        

#define  new_3x_train_start_stop(name)                                                                \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  STORE_TEMP((prev_vehicle_type_id() == name) || ((prev_vehicle_type_id() == name##_m)), 0),          \
  set_offset_to(4),                                                                                   \
  ((prev_vehicle_type_id() == name) || (prev_vehicle_type_id() == name##_m)) && LOAD_TEMP(0) ])       \
{ 1: any_start_stop;                                                                                  \
  return string(STR_START_STOP_NEED_AT_LEAST_3_CONSECUTIVE_ENGINE); }                                 \
switch (FEAT_TRAINS, PARENT, name##_start_stop1,                                                      \
  (count_veh_id(name) >= 2) && (count_veh_id(name##_m) >= 1) )                                        \
{ 1: name##_start_stop2;                                                                              \
  return string(STR_START_STOP_NEED_2AND1_OR_MORE_ENGINE); }                                          \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop1; }                                                                           \

// не выпускать новые двойки с средней секцией                                                                                        

#define  new_2x_train_start_stop(name, namem)                                                                \
switch (FEAT_TRAINS, PARENT, name##_start_stop2,                                                      \
[ set_offset_to(2),                                                                                   \
  STORE_TEMP((prev_vehicle_type_id() != namem), 0) ])                                                 \
{ 1: any_start_stop;                                                                                  \
  return string(STR_START_STOP_NEED_NO_MIDDLE_SECTION); }                                             \
switch (FEAT_TRAINS, PARENT, name##_start_stop, age_in_days >= 365 * new_train_age)                   \
{  1: any_start_stop;                                                                                 \
      name##_start_stop2; }                                                                           \


