 /// definition

// Используем полноразмерные поезда в депо
train_width_32_px = 1;
// Вертикаль поезда в депо
traininfo_y_offset = 3;

// Истечение срока
retire_early_default = -8;
// RE
#define get_retire_early(x, y) x-y-2 < retire_early_default ? retire_early_default+1 : x-y-1
// модель
#define get_model_life(x, y) x-y-2 < retire_early_default ? y-x+2 : -retire_early_default
// максимальная скорость
#define get_max_speed(life, slow, normal) (age_in_days >= (life * 365 + life / 4)) ? slow : normal

// вычитаем 2 года из года ввода ТС, для прицепных и немоторных вагонов
#define get_car_year(year) year - 2
// вычитаем 2 года из года ввода ТС, для головных вагонов и локомотивов
#define get_loc_year(year) year - 2

// рисуем [не] на карте?
#define is_drawn_in_viewport() ((extra_callback_info1 & 0xFF) == 0)
#define is_not_drawn_in_viewport() ((extra_callback_info1 & 0xFF) != 0)

// рисуем в депо
#define is_drawn_in_depot() ((extra_callback_info1 & 0xFF) == 0x10)

// ТС по [-]смещению в цепочке [не] скрыто?
#define is_hidden_at(offset) (var[0x62, 7, 1, offset] != 0)
#define is_not_hidden_at(offset) (var[0x62, 7, 1, offset] == 0)

// Для получения предыдущего ID в цепочке
#define prev_vehicle_type_id() var[0x61, 0, 0xFFFF, 0xC6]
#define prev_vehicle_cargo_subtype() var[0x61, 0, 0xFFFF, 0xF2]
// для записи смещения в регистр (работа с переменной 0x61)
#define set_offset_to(offset) STORE_TEMP(offset, 0x10F)

// Для краткой записи списка климатов ПС
#define get_climates_available() bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, \
CLIMATE_TROPICAL)

// Для выбора правильного набора спрайтов в случае флага TRAIN_FLAG_FLIP
// или CB_RESULT_REVERSED_VEHICLE
#define is_flipped() (var[0xC8, 0, 0xFF] != 0xFD)
#define is_not_flipped() (var[0xC8, 0, 0xFF] == 0xFD)

// Порог скорости электровозов
// x км/ч * 0.2778 == value
// 50 км/ч --> 13 (13.89)
// 62 км/ч --> 17 (17.2236)
//threshold of speed
#define threshold_of_speed() 17

// обобщение свойств для категорий ПС
#define get_steam_cost_factor() 2
#define get_steam_running_cost_factor() 4
#define get_diesel_cost_factor() 2
#define get_diesel_running_cost_factor() 4
#define get_diesel_m_running_cost_factor() 3
#define get_electric_cost_factor() 2
#define get_electric_running_cost_factor() 4
#define get_electric_m_running_cost_factor() 3
#define get_dmu_cost_factor() 2
#define get_dmu_running_cost_factor() 4
#define get_emu_cost_factor() 2
#define get_emu_running_cost_factor() 4
#define get_car_cost_factor() 2
#define get_car_running_cost_factor() 4

// сокращение для отключения визуальных эффектов тяги и тяги вагонов
#define disable_visual_effect_and_powered() \
visual_effect_and_powered(VISUAL_EFFECT_DISABLE, \
  0, DISABLE_WAGON_POWER)
// визуальные эффекты для электротяги
#define electric_visual_effect_and_powered(offset) \
visual_effect_and_powered(VISUAL_EFFECT_ELECTRIC, \
  offset, DISABLE_WAGON_POWER)
// визуальные эффекты для дизельной тяги
#define diesel_visual_effect_and_powered(offset) \
visual_effect_and_powered(VISUAL_EFFECT_DIESEL, \
  offset, DISABLE_WAGON_POWER)
// визуальные эффекты для паровой тяги
#define steam_visual_effect_and_powered(offset) \
visual_effect_and_powered(VISUAL_EFFECT_STEAM, \
  offset, DISABLE_WAGON_POWER)

// поправка для функции мощности (power cb)
// задаваемое в свойстве отличается от возвращаемого функцией
#define get_power_in_cb(value) int (value * 0.9865)

// Получаем оштрафованную величину скорости, 15%
#define get_penalised_speed(speed) speed * (100 - speed_penalty_percent) / 100

// Флаг штрафа поезда по скорости
#define FLAG_PENALISE_SPEED 1
// обычные рельсы в зависимости от настроек
#define get_normal_track_type() enable_our_own_tracks ? RLA1 : RAIL
// рельсы для постоянного и переменного тока в зависимости от настроек
#define get_ac_track_type() enable_our_own_tracks ? ERA1 : ELRL
#define get_dc_track_type() enable_our_own_tracks ? ERD1 : ELRL
// для двусистемных
#define get_dual_track_type() enable_our_own_tracks ? ER2S : ELRL

// Штрафуем ли по скорости
#define is_penalise_speed() \
((bitmask_consist_info & FLAG_PENALISE_SPEED) == FLAG_PENALISE_SPEED)

// Вычисляем ТУ по формуле (табличное_значение/масса/9.8)
#define get_tec(tec, weight) (tec/(weight)/9.8)
// ТУ для cb tractive_effort_coefficient
#define get_tec_int(tec, weight) int(tec/(weight)/9.8*256)

// Определение спрайта меню покупки
#define purchase_spriteset(name, x, y)                  \
spriteset (name##_purchase_spriteset_ico, IMAGEFILE)    \
{ [x, y, 100, 18, -40, -11] }                           \
spriteset (name##_purchase_spriteset_noico, IMAGEFILE)  \
{ [x+18, y, 82, 18, -40, -11] }                         \
switch (FEAT_TRAINS, SELF, name##_purchase_spriteset,   \
  enable_icons)                                         \
{  1: name##_purchase_spriteset_ico;                    \
      name##_purchase_spriteset_noico;}                 \

// Выбор ориентации кабины секции для СМЕ (схема без альтернатив в СМЕ)
#define engine_direction_template(name)                      \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2l,          \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (position_in_consist == 0) ])                              \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) + 1) % 2) )            \
{ 1: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_16,          \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_old;                               \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_14,          \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_16;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_12,          \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_14;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_10,          \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_12;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_8,           \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_10;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_6,           \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_8;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_4,           \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_6;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2,           \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == name) ])                        \
{ 1: name##_get_spriteset_4;                                 \
     name##_get_spriteset_2l; }                              \
switch (FEAT_TRAINS, PARENT, name##_get_spriteset_t,         \
[ STORE_TEMP(count_veh_id(name), 0),                         \
  STORE_TEMP(current_speed, 1),                              \
  STORE_TEMP(date_of_last_service, 2) ])                     \
{  name##_get_spriteset_2;  }                                \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой)

#define engine_direction_template2(name, name2)              \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2l,          \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ||                       \
  (position_in_consist == 0) ])                              \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(name2) + 1) % 2) )                          \
{ 1: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_16,          \
[  set_offset_to(-16),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_old;                               \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_14,          \
[  set_offset_to(-14),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_16;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_12,          \
[  set_offset_to(-12),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_14;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_10,          \
[  set_offset_to(-10),                                       \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_12;                                \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_8,           \
[  set_offset_to(-8),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_10;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_6,           \
[  set_offset_to(-6),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_8;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_4,           \
[  set_offset_to(-4),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_6;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2,           \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ])                       \
{ 1: name##_get_spriteset_4;                                 \
     name##_get_spriteset_2l; }                              \
switch (FEAT_TRAINS, PARENT, name##_get_spriteset_t,         \
[ STORE_TEMP(count_veh_id(name), 0),                         \
  STORE_TEMP(current_speed, 1),                              \
  STORE_TEMP(date_of_last_service, 2) ])                     \
{  name##_get_spriteset_2; }                                 \

// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и средней секцией)

#define engine_direction_template3m(name, name2, namem)      \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2l,          \
[ set_offset_to(2),                                          \
  (prev_vehicle_type_id() == name) ||                        \
  (prev_vehicle_type_id() == name2) ||                       \
  (position_in_consist == 0) ])                              \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_old,         \
  ((LOAD_TEMP(0) - count_veh_id(name) -                      \
    count_veh_id(name2) - count_veh_id(namem) + 1) % 2) )    \
{ 1: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_16,          \
[  set_offset_to(-16),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_old;                               \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_14,          \
[  set_offset_to(-14),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_16;                                \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_12,          \
[  set_offset_to(-12),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_14;                                \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_10,          \
[  set_offset_to(-10),                                       \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_12;                                \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_8,           \
[  set_offset_to(-8),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_10;                                \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_6,           \
[  set_offset_to(-6),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_8;                                 \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l;}                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_4,           \
[  set_offset_to(-4),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_6;                                 \
  2: name##_get_spriteset_2l;                                \
     name##_get_spriteset_r;}                                \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_2,           \
[  set_offset_to(-2),                                        \
  ((prev_vehicle_type_id() == name) ||                       \
   (prev_vehicle_type_id() == name2)) +                      \
  ((prev_vehicle_type_id() == namem) * 2) ])                 \
{ 1: name##_get_spriteset_4;                                 \
  2: name##_get_spriteset_r;                                 \
     name##_get_spriteset_2l; }                              \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_ml,          \
[  set_offset_to(2),                                         \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_get_spriteset_l;                                 \
     name##_get_spriteset_2; }                               \
switch (FEAT_TRAINS, SELF, name##_get_spriteset_mr,          \
[  set_offset_to(-2),                                        \
  (prev_vehicle_type_id() == namem) ])                       \
{ 1: name##_get_spriteset_r;                                 \
     name##_get_spriteset_ml; }                              \
switch (FEAT_TRAINS, PARENT, name##_get_spriteset_t,         \
[ STORE_TEMP(count_veh_id(name), 0),                         \
  STORE_TEMP(current_speed, 1),                              \
  STORE_TEMP(date_of_last_service, 2) ])                     \
{  name##_get_spriteset_mr; }                                \

// Определение пенальти на скорость (схема без СМЕ)

#define engine_penalise_speed0(name)                                        \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \

// Определение пенальти на скорость (схема без альтернатив в СМЕ)

#define engine_penalise_speed(name, num)                                    \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name), 0),                         \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name), 0),                                        \
  STORE_TEMP(vehicle_type_id == name, 1) ])                                 \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)

#define engine_penalise_speed2(name, name1, num)                            \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)

#define engine_penalise_speed3(name, name1, name2, num)                     \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)

#define engine_penalise_speed4(name, name1, name2, name3, num)              \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)

#define engine_penalise_speed5(name, name1, name2, name3, name4, num)       \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)

#define engine_penalise_speed6(name, name1, name2, name3, name4, name5, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)

#define engine_penalise_speed7(name, name1, name2, name3, name4, name5, name6, num) \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info3,                    \
[ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(name) -                            \
                            count_veh_id(name1) -                           \
                            count_veh_id(name2) -                           \
                            count_veh_id(name3) -                           \
                            count_veh_id(name4) -                           \
                            count_veh_id(name5) -                           \
                            count_veh_id(name6), 0),                        \
  (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) &&             \
    LOAD_TEMP(0) < num) ])                                                  \
{ 1: return 0;                                                              \
  return FLAG_PENALISE_SPEED; }                                             \
switch (FEAT_TRAINS, PARENT, name##_bitmask_vehicle_info2,                  \
[ STORE_TEMP(count_veh_id(name) +                                           \
             count_veh_id(name1) +                                          \
             count_veh_id(name2) +                                          \
             count_veh_id(name3) +                                          \
             count_veh_id(name4) +                                          \
             count_veh_id(name5) +                                          \
             count_veh_id(name6), 0),                                       \
  STORE_TEMP((vehicle_type_id == name) ||                                   \
             (vehicle_type_id == name1) ||                                  \
             (vehicle_type_id == name2) ||                                  \
             (vehicle_type_id == name3) ||                                  \
             (vehicle_type_id == name4) ||                                  \
             (vehicle_type_id == name5) ||                                  \
             (vehicle_type_id == name6), 1) ])                              \
{ name##_bitmask_vehicle_info3; }                                           \
switch (FEAT_TRAINS, SELF, name##_bitmask_vehicle_info,                     \
  position_in_consist == 0)                                                 \
{ 1: return 0;                                                              \
  name##_bitmask_vehicle_info2; }                                           \

