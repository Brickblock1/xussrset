 // 4te10s

// Спрайты

#define IMAGEFILE  "src/diesel/4te10s.png"

// покупка
spriteset (_4te10s_purchase_spriteset, IMAGEFILE)
{
  s10_purchase_template(4, 16, -4)
}

// обычный: погрузка/перемещение
spriteset (_4te10s_loading_spriteset, IMAGEFILE)
{
  s10_template(4, 16, 0)
} 

spriteset (_4te10s_traveling_spriteset, IMAGEFILE)
{
  s10_template(4, 82, 0)
} 

spritegroup _4te10s_spritegroup
{
  loading: _4te10s_loading_spriteset;
  loaded: _4te10s_traveling_spriteset;
}

// секция Б
spriteset (_4te10s_rb_spriteset, IMAGEFILE)
{
  s10_template(423, 16, 0)
} 

// секции В, Г
spriteset (_4te10s_rcd_spriteset, IMAGEFILE)
{
  s10_template(842, 16, 0)
} 

#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, _4te10s_get_spriteset2,
  ((last_computed_result - count_veh_id(_4te10s)) % 4)
)
{
  0: _4te10s_spritegroup;
  1: _4te10s_rcd_spriteset;
  2: _4te10s_rcd_spriteset;
  _4te10s_rb_spriteset;
}

switch (FEAT_TRAINS, PARENT, _4te10s_get_spriteset1,
  count_veh_id(_4te10s))
{
  _4te10s_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, _4te10s_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  _4te10s_get_spriteset1;
}

// Что присоединяем?
switch (FEAT_TRAINS, SELF, _4te10s_can_attach_wagon,
  0)
{
  return CB_RESULT_ATTACH_ALLOW;
}

// Если хотя бы 4 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop5,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == _4te10s, 0),
  set_offset_to(4),
  STORE_TEMP((prev_vehicle_type_id() == _4te10s) && LOAD_TEMP(0), 0),
  set_offset_to(6),
  (prev_vehicle_type_id() == _4te10s) && LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_NEED_AT_LEAST_4_CONSECUTIVE_ENGINE);
}

// Если локомотивов меньше 4, то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop4,
  count_veh_id(_4te10s) >= 4)
{
  1: _4te10s_start_stop5;
  return string(STR_START_STOP_NEED_4_OR_MORE_ENGINE);
}

// Если хотя бы 3 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop3,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == _4te10s, 0),
  set_offset_to(4),
  (prev_vehicle_type_id() == _4te10s) && LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_NEED_AT_LEAST_3_CONSECUTIVE_ENGINE);
}

// Если локомотивов меньше 3, то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop2,
  count_veh_id(_4te10s) >= 3)
{
  1: _4te10s_start_stop3;
  return string(STR_START_STOP_NEED_3_OR_MORE_ENGINE);
}

// Если год >= 1993, можно в 3 секции
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop,
  current_year >= 1993)
{
  1: _4te10s_start_stop2;
  _4te10s_start_stop4;
}

// Макс. скорость: 100 км/ч
#define MAX_SPEED 100

switch (FEAT_TRAINS, SELF, _4te10s_purchase_speed,
  MAX_SPEED)
{
  return;
}

switch (FEAT_TRAINS, SELF, _4te10s_speed,
  is_penalise_speed() ? get_penalised_speed(MAX_SPEED) : MAX_SPEED)
{
  return;
}

#undef MAX_SPEED

switch (FEAT_TRAINS, SELF, _4te10s_bitmask_vehicle_info3,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_4te10s) - count_veh_id(_2te10m) -
    count_veh_id(_2te10u) - count_veh_id(_2te116), 0),
  (last_computed_result && (position_in_consist == 2 * LOAD_TEMP(0)) &&
    LOAD_TEMP(0) < 4)
])
{
  1: return 0;
  return FLAG_PENALISE_SPEED;
}

switch (FEAT_TRAINS, PARENT, _4te10s_bitmask_vehicle_info2,
[
  STORE_TEMP(count_veh_id(_4te10s) + count_veh_id(_2te10m) +
    count_veh_id(_2te10u) + count_veh_id(_2te116), 0),
  (vehicle_type_id == _4te10s) || (vehicle_type_id == _2te10m) ||
    (vehicle_type_id == _2te10u) || (vehicle_type_id == _2te116)
])
{
  _4te10s_bitmask_vehicle_info3;
}

switch (FEAT_TRAINS, SELF, _4te10s_bitmask_vehicle_info,
  position_in_consist == 0)
{
  1: return 0;
  _4te10s_bitmask_vehicle_info2;
}

switch (FEAT_TRAINS, SELF, _4te10s_cost_factor,
  (current_year >= 1987))
{
  1: return 90;
  return 86;
}

item (FEAT_TRAINS, _4te10s) 
{
  property
  {
    name: string(STR_4TE10S_NAME);
    climates_available: get_climates_available();
    introduction_date: date(1983, 1, 1);
    vehicle_life: 30; // срок службы
    model_life: 30; // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cost_factor: get_diesel_cost_factor();
    running_cost_factor: get_diesel_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    track_type: RAIL;
    ai_special_flag: AI_FLAG_CARGO;
    power: 2273 hpM;
    running_cost_base: RUNNING_COST_DIESEL;
    weight: 138 ton;
    engine_class: ENGINE_CLASS_DIESEL;
    tractive_effort_coefficient: 0.18115942;
    length: 8;
    visual_effect_and_powered: diesel_visual_effect_and_powered(0);
    cargo_allow_refit: [GOOD];
    default_cargo_type: GOOD;
    cargo_capacity: 1;
  }
  graphics {
    default: _4te10s_get_spriteset;
    purchase: _4te10s_purchase_spriteset;
    articulated_part: articulated_part_dummy2;
    can_attach_wagon: _4te10s_can_attach_wagon;
    start_stop: _4te10s_start_stop;
    additional_text: return string(STR_4TE10S_PURCHASE_HINT);
    speed: _4te10s_speed;
    purchase_speed: _4te10s_purchase_speed;
    bitmask_vehicle_info: _4te10s_bitmask_vehicle_info;
    cargo_subtype_text: cargo_subtype_text_default;
    cargo_capacity: return 0;
    cost_factor: _4te10s_cost_factor;
  }
}
