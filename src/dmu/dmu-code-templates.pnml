  /// code definition

// --- ограничение скорости по окончанию установленного срока службы ---
// ограничиваем скорость через 25 лет работы 120 --> 110
switch (FEAT_TRAINS, SELF, speed_after25_120to110,
  age_in_days >= (25*365+5))
{
  1: return 110;
  return 120;
}
// ограничиваем скорость через 25 лет работы 120 --> 100
switch (FEAT_TRAINS, SELF, speed_after25_120to100,
  age_in_days >= (25*365+5))
{
  1: return 100;
  return 120;
}

// прицепной моторный постоянного тока, эксплуатация не под током
#define DMU_power_dir_template_DC(name, vehid)                                            \
switch (FEAT_TRAINS, SELF, name##_direction_left_D,                                       \
  LOAD_TEMP(4) == vehid)                                                                  \
{ 1: name##_mu_normal_sprites_left;                                                       \
     name##_mu_notpowered_sprites_left; }                                                 \
switch (FEAT_TRAINS, SELF, name##_direction_right_D,                                      \
  LOAD_TEMP(4) == vehid)                                                                  \
{ 1: name##_mu_normal_sprites_right;                                                      \
     name##_mu_notpowered_sprites_right; }                                                \
switch (FEAT_TRAINS, SELF, name##_direction_left_DC,                                      \
  LOAD_TEMP(4) == vehid)                                                                  \
{ 0: name##_mu_notpowered_sprites_left;                                                   \
     name##_mu_sprites_left; }                                                            \
switch (FEAT_TRAINS, SELF, name##_direction_right_DC,                                     \
  LOAD_TEMP(4) == vehid)                                                                  \
{ 0: name##_mu_notpowered_sprites_right;                                                  \
     name##_mu_sprites_right; }                                                           \
is_ER3DC_ds(name##_direction_left, name##_direction_left_DC, name##_direction_left_D)     \
is_ER3DC_ds(name##_direction_right, name##_direction_right_DC, name##_direction_right_D)  \

// автомотрисы
#define railcar_RND_nomid_direction_template(name, vehid, p1, p2)                            \
random_switch (FEAT_TRAINS, SELF, name##_0_sprites_start, bitmask(TRIGGER_VEHICLE_SERVICE))  \
{ 1: name##_notpowered_sprites_left;                                                         \
  1: name##_notpowered_sprites_right; }                                                      \
random_switch (FEAT_TRAINS, SELF, name##_1_sprites_start, bitmask(TRIGGER_VEHICLE_SERVICE))  \
{ 1: name##_sprites_3left;                                                                   \
  1: name##_sprites_3right; }                                                                \
random_switch (FEAT_TRAINS, SELF, name##_sprites_left, bitmask(TRIGGER_VEHICLE_SERVICE))     \
{ p1: name##_sprites_2left;                                                                  \
  p2: name##_sprites_1left; }                                                                \
random_switch (FEAT_TRAINS, SELF, name##_sprites_right, bitmask(TRIGGER_VEHICLE_SERVICE))    \
{ p1: name##_sprites_2right;                                                                 \
  p2: name##_sprites_1right; }                                                               \
switch (FEAT_TRAINS, SELF, name##_2b_sprites_start, position_in_consist_from_end)            \
{ 1: name##_sprites_right;                                                                   \
     name##_0_sprites_start; }                                                               \
switch (FEAT_TRAINS, SELF, name##_2_sprites_start, position_in_consist)                      \
{ 0: name##_sprites_left;                                                                    \
     name##_2b_sprites_start; }                                                              \
switch (FEAT_TRAINS, PARENT, name##_sprites_start,                                           \
  (vehicle_type_id == vehid) * (1 + (num_vehs_in_consist > 2)))                              \
{ 1: name##_1_sprites_start;                                                                 \
  2: name##_2_sprites_start;                                                                 \
     name##_0_sprites_start; }                                                               \

#define railcar_RND_mideq_direction_template(name, vehid, p1, p2)                            \
random_switch (FEAT_TRAINS, SELF, name##_0_sprites_start, bitmask(TRIGGER_VEHICLE_SERVICE))  \
{ 1: name##_notpowered_sprites_left;                                                         \
  1: name##_notpowered_sprites_right; }                                                      \
random_switch (FEAT_TRAINS, SELF, name##_1_sprites_start, bitmask(TRIGGER_VEHICLE_SERVICE))  \
{ 1: name##_sprites_3left;                                                                   \
  1: name##_sprites_3right; }                                                                \
random_switch (FEAT_TRAINS, SELF, name##_sprites_left, bitmask(TRIGGER_VEHICLE_SERVICE))     \
{ p1: name##_sprites_2left;                                                                  \
  p2: name##_sprites_1left; }                                                                \
random_switch (FEAT_TRAINS, SELF, name##_sprites_right, bitmask(TRIGGER_VEHICLE_SERVICE))    \
{ p1: name##_sprites_2right;                                                                 \
  p2: name##_sprites_1right; }                                                               \
random_switch (FEAT_TRAINS, SELF, name##_sprites_middle, bitmask(TRIGGER_VEHICLE_SERVICE))   \
{ 1: name##_normal_sprites_left;                                                             \
  1: name##_normal_sprites_right; }                                                          \
switch (FEAT_TRAINS, SELF, name##_2b_sprites_start, position_in_consist_from_end)            \
{ 1: name##_sprites_right;                                                                   \
     name##_sprites_middle; }                                                                \
switch (FEAT_TRAINS, SELF, name##_2_sprites_start, position_in_consist)                      \
{ 0: name##_sprites_left;                                                                    \
     name##_2b_sprites_start; }                                                              \
switch (FEAT_TRAINS, PARENT, name##_sprites_start,                                           \
  (vehicle_type_id == vehid) * (1 + (num_vehs_in_consist > 2)))                              \
{ 1: name##_1_sprites_start;                                                                 \
  2: name##_2_sprites_start;                                                                 \
     name##_0_sprites_start; }                                                               \

#define railcar_RND_mideq_effect_direction_template(name, vehid, p1, p2)          \
switch (FEAT_TRAINS, SELF, name##_create_effect1, random_bits % (p1 + p2))        \
{ 0: name##_create_effect_sprites_right;                                          \
     name##_create_effect_sprites_left; }                                         \
switch (FEAT_TRAINS, SELF, name##_create_effect2, random_bits % (p1 + p2))        \
{ 0: name##_create_effect_sprites_left;                                           \
     name##_create_effect_sprites_right; }                                        \
switch (FEAT_TRAINS, SELF, name##_create_effect3, random_bits % 2)                \
{ 0: name##_create_effect_sprites_left;                                           \
     name##_create_effect_sprites_right; }                                        \
switch (FEAT_TRAINS, SELF, name##_create_effect00, position_in_consist_from_end)  \
{ 1: name##_create_effect2;                                                       \
     name##_create_effect3; }                                                     \
switch (FEAT_TRAINS, SELF, name##_create_effect0, position_in_consist)            \
{ 0: name##_create_effect1;                                                       \
     name##_create_effect00; }                                                    \
switch (FEAT_TRAINS, PARENT, name##_create_effect,                                \
  (vehicle_type_id == vehid) * (1 + (num_vehs_in_consist > 2)))                   \
{ 1: name##_create_effect3;                                                       \
  2: name##_create_effect0;                                                       \
     return disable_create_effect(); }                                            \

// end
