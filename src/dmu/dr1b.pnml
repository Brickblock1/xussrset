 // dr1b

// Спрайты

#define IMAGEFILE  "src/dmu/dr1b.png"

// покупка
spriteset (dr1b_m_purchase_spriteset_ico, IMAGEFILE)
{ new_purchase_template(0, 0) }
spriteset (dr1b_m_purchase_spriteset_noico, IMAGEFILE)
{ new_purchase_template_noico(0, 0) }
switch (FEAT_TRAINS, SELF, dr1b_m_purchase_spriteset, 
  enable_icons)
{  1: dr1b_m_purchase_spriteset_ico;
      dr1b_m_purchase_spriteset_noico;}

spriteset (dr1b_c_purchase_spriteset_ico, IMAGEFILE)
{ new_purchase_template(100, 0) }
spriteset (dr1b_c_purchase_spriteset_noico, IMAGEFILE)
{ new_purchase_template_noico(100, 0) }
switch (FEAT_TRAINS, SELF, dr1b_c_purchase_spriteset, 
  enable_icons)
{  1: dr1b_c_purchase_spriteset_ico;
      dr1b_c_purchase_spriteset_noico;}

spriteset (dr1b_n_purchase_spriteset_ico, IMAGEFILE)
{ new_purchase_template(200, 0) }
spriteset (dr1b_n_purchase_spriteset_noico, IMAGEFILE)
{ new_purchase_template_noico(200, 0) }
switch (FEAT_TRAINS, SELF, dr1b_n_purchase_spriteset, 
  enable_icons)
{  1: dr1b_n_purchase_spriteset_ico;
      dr1b_n_purchase_spriteset_noico;}

// головной: погрузка/перемещение
spriteset (dr1b_m_loading_spriteset, IMAGEFILE)
{
  s15_template(82, 35, 0)
} 

spriteset (dr1b_m_traveling_spriteset, IMAGEFILE)
{
  s15_template(541, 35, 0)
} 

spritegroup dr1b_m_spritegroup
{
  loading: dr1b_m_loading_spriteset;
  loaded: dr1b_m_traveling_spriteset;
}

// головной развёрнутый
spriteset (dr1b_rm_spriteset, IMAGEFILE)
{
  s15_template(82, 104, 0)
} 

// прицепной
spriteset (dr1b_c_spriteset, IMAGEFILE)
{
  s15_template(82, 311, 0)
} 

// головной немоторный: погрузка/перемещение
spriteset (dr1b_n_loading_spriteset, IMAGEFILE)
{
  s15_template(82, 173, 0)
} 

spriteset (dr1b_n_traveling_spriteset, IMAGEFILE)
{
  s15_template(541, 173, 0)
} 

spritegroup dr1b_n_spritegroup
{
  loading: dr1b_n_loading_spriteset;
  loaded: dr1b_n_traveling_spriteset;
}

// головной немоторный развёрнутый
spriteset (dr1b_rn_spriteset, IMAGEFILE)
{
  s15_template(82, 242, 0)
} 

#undef IMAGEFILE

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, dr1b_c_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  dr1b_c_spriteset;
}

// Определяем необходимость разворота моторного вагона по чётности его позиции
// от начала состава
switch (FEAT_TRAINS, SELF, dr1b_m_get_spriteset2,
  (last_computed_result - count_veh_id(dr1b_m) - count_veh_id(dr1b_n)) % 2  
)
{
  0: dr1b_m_spritegroup;
  dr1b_rm_spriteset;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_get_spriteset1,
  count_veh_id(dr1b_m) + count_veh_id(dr1b_n))
{
  dr1b_m_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, dr1b_m_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  dr1b_m_get_spriteset1;
}

// Определяем необходимость разворота немоторного вагона по чётности его позиции
// от начала состава
switch (FEAT_TRAINS, SELF, dr1b_n_get_spriteset2,
  (last_computed_result - count_veh_id(dr1b_m) - count_veh_id(dr1b_n)) % 2  
)
{
  0: dr1b_n_spritegroup;
  dr1b_rn_spriteset;
}

switch (FEAT_TRAINS, PARENT, dr1b_n_get_spriteset1,
  count_veh_id(dr1b_m) + count_veh_id(dr1b_n))
{
  dr1b_n_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, dr1b_n_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  dr1b_n_get_spriteset1;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon10,
[
  set_offset_to(num_vehs_in_consist-8),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_ALLOW;
  dr1b_c: return CB_RESULT_ATTACH_DISALLOW;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon9,
  num_vehs_in_consist)
{
  8: return CB_RESULT_ATTACH_ALLOW;
  dr1b_m_can_attach_wagon10;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon8,
[
  set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_ALLOW;
  dr1b_c: dr1b_m_can_attach_wagon9;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon7,
  num_vehs_in_consist)
{
  6: return CB_RESULT_ATTACH_ALLOW;
  dr1b_m_can_attach_wagon8;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon6,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_ALLOW;
  dr1b_c: dr1b_m_can_attach_wagon7;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon5,
  num_vehs_in_consist)
{
  4: return CB_RESULT_ATTACH_ALLOW;
  dr1b_m_can_attach_wagon6;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon4,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_ALLOW;
  dr1b_c: dr1b_m_can_attach_wagon5;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon3,
  num_vehs_in_consist)
{
  2: return CB_RESULT_ATTACH_ALLOW;
  dr1b_m_can_attach_wagon4;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon1,
  (count_veh_id(dr1b_m) + count_veh_id(dr1b_n)) % 2)
{
  1: dr1b_m_can_attach_wagon3;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon16,
[
  set_offset_to(num_vehs_in_consist-10),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_DISALLOW;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon15,
[
  set_offset_to(num_vehs_in_consist-8),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_DISALLOW;
  dr1b_c: dr1b_m_can_attach_wagon16;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon14,
[
  set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_DISALLOW;
  dr1b_c: dr1b_m_can_attach_wagon15;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon13,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_DISALLOW;
  dr1b_c: dr1b_m_can_attach_wagon14;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon12,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id()
])
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: return CB_RESULT_ATTACH_DISALLOW;
  dr1b_c: dr1b_m_can_attach_wagon13;
  return CB_RESULT_ATTACH_DISALLOW;
}

// количество голов чётное?
switch (FEAT_TRAINS, PARENT, dr1b_m_can_attach_wagon11,
  (count_veh_id(dr1b_m) + count_veh_id(dr1b_n)) % 2)
{
  0: return CB_RESULT_ATTACH_ALLOW; // да
  dr1b_m_can_attach_wagon12; // нет, проверяем последнюю на соответствие dr1b_m
}

switch (FEAT_TRAINS, SELF, dr1b_m_can_attach_wagon,
  vehicle_type_id)
{
  dr1b_m: return CB_RESULT_ATTACH_ALLOW;
  dr1b_n: dr1b_m_can_attach_wagon11;
  dr1b_c: dr1b_m_can_attach_wagon1;
  return CB_RESULT_ATTACH_DISALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1b_m_start_stop,
  (count_veh_id(dr1b_m) + count_veh_id(dr1b_n)) % 2)
{
  0: return CB_RESULT_NO_TEXT;
  return string(STR_CANNOT_START);
}

switch (FEAT_TRAINS, SELF, dr1b_m_visual_effect_and_powered1,
  (last_computed_result - count_veh_id(dr1b_m) - count_veh_id(dr1b_n)) % 2)
{
  0: return diesel_visual_effect_and_powered(-2);
  return diesel_visual_effect_and_powered(7);
}

switch (FEAT_TRAINS, PARENT, dr1b_m_visual_effect_and_powered0,
  count_veh_id(dr1b_m) + count_veh_id(dr1b_n))
{
  dr1b_m_visual_effect_and_powered1;
}

// Визуализируем эффекты тяги только если локомотив - dr1b_m или dr1b_n
switch (FEAT_TRAINS, PARENT, dr1b_m_visual_effect_and_powered,
  (vehicle_type_id == dr1b_m) || (vehicle_type_id == dr1b_n) 
  )
{
  1: dr1b_m_visual_effect_and_powered0; 
  return disable_visual_effect_and_powered();
} 

// Даём тягу, только если локомотив - dr1b_m или dr1b_n
switch (FEAT_TRAINS, PARENT, dr1b_m_power,
  (vehicle_type_id == dr1b_m) || (vehicle_type_id == dr1b_n) 
  )
{
  1: return get_power_in_cb(810); 
  return 0;
} 

// Допускается эксплуатация с пассажирами только если голова - dr1b_m или dr1b_n
switch (FEAT_TRAINS, PARENT, dr1b_m_cargo_capacity,
  (vehicle_type_id == dr1b_m) || (vehicle_type_id == dr1b_n)
)
{
  1: return 68;
  return 0;
}

switch (FEAT_TRAINS, PARENT, dr1b_n_cargo_capacity,
  (vehicle_type_id == dr1b_m) || (vehicle_type_id == dr1b_n)
)
{
  1: return 96;
  return 0;
}

switch (FEAT_TRAINS, PARENT, dr1b_c_cargo_capacity,
  (vehicle_type_id == dr1b_m) || (vehicle_type_id == dr1b_n)
)
{
  1: return 124;
  return 0;
}

item (FEAT_TRAINS, dr1b_m) 
{
  property
  {
    name: string(STR_DR1B_M_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(2005), 1, 1);
    model_life: get_model_life(2005,2009); // VEHICLE_NEVER_EXPIRES;
    vehicle_life: 25; // срок службы
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12; // скорость погрузки/выгрузки, пассажиров
    cost_factor: get_dmu_cost_factor();
    running_cost_factor: get_dmu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 121 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_normal_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 810 hpM;
    running_cost_base: RUNNING_COST_DIESEL;
    cargo_capacity: 68;
    weight: 58 ton;
    engine_class: ENGINE_CLASS_DIESEL;
    tractive_effort_coefficient: get_tec(130.0, 58);
    length: 8;
  }
  graphics {
    default: dr1b_m_get_spriteset;
    purchase: dr1b_m_purchase_spriteset;
    articulated_part: articulated_part_dummy7;
    can_attach_wagon: dr1b_m_can_attach_wagon;
    start_stop: dr1b_m_start_stop;
    visual_effect_and_powered: dr1b_m_visual_effect_and_powered;
    speed: speed_after20_120to110;
    purchase_speed: return 120;
    additional_text: return string(STR_DR1B_M_PURCHASE_HINT);
    power: dr1b_m_power;
    cargo_capacity: dr1b_m_cargo_capacity;
  }
}

item (FEAT_TRAINS, dr1b_n) 
{
  property
  {
    name: string(STR_DR1B_N_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(2005), 1, 1);
    model_life: get_model_life(2005,2009);
    retire_early: get_retire_early(2005,2009);
    vehicle_life: 25;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_dmu_cost_factor();
    running_cost_factor: get_dmu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_normal_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_DIESEL;
    cargo_capacity: 96;
    weight: 40 ton;
    engine_class: ENGINE_CLASS_DIESEL;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: dr1b_n_get_spriteset;
    purchase: dr1b_n_purchase_spriteset;
    articulated_part: articulated_part_dummy7;
    can_attach_wagon: dr1b_m_can_attach_wagon;
    start_stop: dr1b_m_start_stop;
    speed: speed_after20_120to110;
    purchase_speed: return 120;
    power: return 0; // сам тянуть составы не может
    additional_text: return string(STR_DR1B_N_PURCHASE_HINT);
    cargo_capacity: dr1b_n_cargo_capacity;
  }
}

item (FEAT_TRAINS, dr1b_c) 
{
  property
  {
    name: string(STR_DR1B_C_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(2005), 1, 1);
    model_life: get_model_life(2005,2009);
    retire_early: get_retire_early(2005,2009); // VEHICLE_NEVER_EXPIRES;
    vehicle_life: 25;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_dmu_cost_factor();
    running_cost_factor: get_dmu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_normal_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_DIESEL;
    cargo_capacity: 124;
    weight: 37.5 ton;
    engine_class: ENGINE_CLASS_DIESEL;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: dr1b_c_get_spriteset;
    purchase: dr1b_c_purchase_spriteset;
    articulated_part: articulated_part_dummy7;
    speed: speed_after20_120to110;
    purchase_speed: return 120;
    power: return 0;
    can_attach_wagon: return CB_RESULT_ATTACH_ALLOW;
    start_stop: return string(STR_CANNOT_START_HEAD);
    additional_text: return string(STR_DR1B_M_PURCHASE_HINT);
    cargo_capacity: dr1b_c_cargo_capacity;
  }
}
