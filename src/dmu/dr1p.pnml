 // dr1p

#define IMAGEFILE  "src/dmu/dr1p.png"
purchase_sprites(dr1p_h, 0, 0)
purchase_sprites(dr1p_c, 120, 0)

MU_4r_0_0_sprites(15, dr1p_v1, 32, 40)
MU_0_0_2_sprites(15,  dr1p_v1, 32, 40)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, dr1p_h_sprites_left,
  (LOAD_TEMP(4) == dr1p_h) *
  (1 + (position_in_consist == 0)))
{
  0: dr1p_v1_h_notpowered_sprites_left;
  1: dr1p_v1_h_notpowered_normal_sprites_left;
  2: dr1p_v1_h_sprites_left;
     align_15_sprites;
}

switch (FEAT_TRAINS, SELF, dr1p_h_sprites_right,
  (LOAD_TEMP(4) == dr1p_h) *
  (1 + (position_in_consist_from_end == 1)))
{
  0: dr1p_v1_h_notpowered_sprites_right;
  1: dr1p_v1_h_notpowered_normal_sprites_right;
  2: dr1p_v1_h_sprites_right;
     align_15_sprites;
}

engine_direction_template2m(dr1p_h, dr1p_c, )

long_vehicle(dr1p_h)

random_switch (FEAT_TRAINS, SELF, dr1p_c_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: dr1p_v1_c_sprites_left;
  1: dr1p_v1_c_sprites_right;
}

long_vehicle(dr1p_c)

switch (FEAT_TRAINS, PARENT, dr1p_can_attach_wagon_length,
  count_veh_id(dr1p_h) > 3)
{
  0: CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, PARENT, dr1p_c_can_attach_wagon3,
[
  set_offset_to(num_vehs_in_consist-8),
  prev_vehicle_type_id() ])
{
  dr1p_c: return string(STR_WRONG_STRUCTURE_OF_TRAIN_6D);
          return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1p_c_can_attach_wagon2,
[
  set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id() ])
{
  dr1p_c: dr1p_c_can_attach_wagon3;
          return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1p_c_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  dr1p_c: dr1p_c_can_attach_wagon2;
          return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, dr1p_c_can_attach_wagon_h,
  count_veh_id(dr1p_h) % 2)
{
  0: return string(STR_CAN_ATTACH_HEAD_ONLY);
     dr1p_c_can_attach_wagon1;
}

switch (FEAT_TRAINS, PARENT, dr1p_c_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  dr1p_c: dr1p_c_can_attach_wagon1;
  dr1p_h: dr1p_c_can_attach_wagon_h;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, dr1p_can_attach_wagon,
  vehicle_type_id)
{
  dr1p_h: dr1p_can_attach_wagon_length;
  dr1p_c: dr1p_c_can_attach_wagon;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, dr1p_h_start_stop,
  count_veh_id(dr1p_h) % 2)
{
  0: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

engine_diesel_1_effect(dr1p_h, -2, 7, 12)  

switch (FEAT_TRAINS, SELF, dr1p_h_create_effect1,
  (LOAD_TEMP(0) - count_veh_id(dr1p_h)) % 2)
{
  0: dr1p_h_create_effect_sprites_left;
     dr1p_h_create_effect_sprites_right;
}

switch (FEAT_TRAINS, PARENT, dr1p_h_create_effect0,
  STORE_TEMP(count_veh_id(dr1p_h), 0))
{
  dr1p_h_create_effect1;
}

// Визуализируем эффекты тяги только если локомотив - dr1p_h
switch (FEAT_TRAINS, PARENT, dr1p_h_create_effect,
  (vehicle_type_id == dr1p_h) )
{
  1: dr1p_h_create_effect0; 
     return disable_create_effect();
} 

// Даём тягу, только если локомотив - dr1p_h
switch (FEAT_TRAINS, PARENT, dr1p_h_power,
  (vehicle_type_id == dr1p_h) )
{
  1: return get_power_in_cb(800); 
     return 0;
} 

// Допускается эксплуатация с пассажирами только если голова - dr1p_h
switch (FEAT_TRAINS, PARENT, dr1p_h_cargo_capacity,
  (vehicle_type_id == dr1p_h) )
{
  1: return 68;
     return 0;
}

switch (FEAT_TRAINS, PARENT, dr1p_c_cargo_capacity,
  (vehicle_type_id == dr1p_h) )
{
  1: return 124;
     return 0;
}

general_running_cost(dr1p_h_v1, 216)

switch (FEAT_TRAINS, PARENT, dr1p_h_running_cost_factor,
  vehicle_type_id == dr1p_h)
{
  1: dr1p_h_v1_running_cost_factor;
     return RC_MU_AS_CAR;
}

running_cost_wagon(dr1p_c_v1, 59)

switch (FEAT_TRAINS, PARENT, dr1p_c_running_cost_factor,
  vehicle_type_id == dr1p_h)
{
  1: dr1p_c_v1_running_cost_factor;
     return RC_MU_AS_CAR;
}

item (FEAT_TRAINS, dr1p_h) {
  property {
    name: string(STR_DR1P_H_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1970), 1, 1);
    model_life: get_model_life(1970,1976);
    retire_early: get_retire_early(1970,1976);
    vehicle_life: 25;
    reliability_decay: 1;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 48; 
    cost_factor: 27;
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 121 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_normal_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 800 hpM;
    running_cost_base: RUNNING_COST_DIESEL;
    cargo_capacity: 68;
    weight: 53.5 ton;
    engine_class: ENGINE_CLASS_DIESEL;
    tractive_effort_coefficient: get_tec(128.0, 53.5);
    length: 8;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
  }
  graphics {
    default: dr1p_h_sprites;
    purchase: dr1p_h_purchase_sprites;
    running_cost_factor: dr1p_h_running_cost_factor;
    articulated_part: articulated_part_dummy7;
    can_attach_wagon: dr1p_can_attach_wagon;
    start_stop: dr1p_h_start_stop;
    create_effect: dr1p_h_create_effect;
    speed: speed_after25_120to110;
    purchase_speed: return 120;
    additional_text: return string(STR_DR1P_H_PURCHASE_HINT, string(STR_SECTIONS_DMU_2_6));
    power: dr1p_h_power;
    cargo_capacity: dr1p_h_cargo_capacity;
    cargo_subtype_text: return string(STR_REFIT_FACTORY_63319);
  }
}

item (FEAT_TRAINS, dr1p_c) {
  property {
    name: string(STR_DR1P_C_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(1970), 1, 1);
    model_life: get_model_life(1970,1976);
    retire_early: get_retire_early(1970,1976);
    vehicle_life: 25;
    reliability_decay: 1;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 48;
    cost_factor: 7;
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_normal_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_DIESEL;
    cargo_capacity: 124;
    weight: 34.5 ton;
    engine_class: ENGINE_CLASS_DIESEL;
    length: 8;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_NONE;
  }
  graphics {
    default: dr1p_c_sprites;
    purchase: dr1p_c_purchase_sprites;
    running_cost_factor: dr1p_c_running_cost_factor;
    articulated_part: articulated_part_dummy7;
    speed: speed_after25_120to110;
    purchase_speed: return 120;
    power: return 0;
    cargo_capacity: dr1p_c_cargo_capacity;
    can_attach_wagon: dr1p_can_attach_wagon;
    start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    additional_text: return string(STR_DR1P_C_PURCHASE_HINT, string(STR_SECTIONS_DMU_2_6));
    cargo_subtype_text: return string(STR_REFIT_FACTORY_63319);
  }
}

if (enable_long_names) {
  item (FEAT_TRAINS, dr1p_h) {
    property { name: string(STR_DR1P_H_NAME_LONG); }
  }
  item (FEAT_TRAINS, dr1p_c) {
    property { name: string(STR_DR1P_C_NAME_LONG); }
  }
}

