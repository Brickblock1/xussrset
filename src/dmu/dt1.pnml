// dt1

#define PROP_dt1_h_num  2
#define PROP_dt1_n_num  0
#define PROP_dt1_m_num  1
#define PROP_dt1_c_num  1

#define PROP_dt1_h_CF  19
#define PROP_dt1_h_RC  141
#define PROP_dt1_h_SD  120
#define PROP_dt1_h_WT  58
#define PROP_dt1_h_TE  0
#define PROP_dt1_h_PR  0
#define PROP_dt1_h_CC  76

#define PROP_dt1_n_CF  0
#define PROP_dt1_n_RC  0
#define PROP_dt1_n_SD  120
#define PROP_dt1_n_WT  0
#define PROP_dt1_n_TE  0
#define PROP_dt1_n_PR  0
#define PROP_dt1_n_CC  0

#define PROP_dt1_m_CF  25
#define PROP_dt1_m_RC  97
#define PROP_dt1_m_SD  120
#define PROP_dt1_m_WT  66
#define PROP_dt1_m_TE  70.0
#define PROP_dt1_m_PR  1108
#define PROP_dt1_m_CC  73

#define PROP_dt1_c_CF  7
#define PROP_dt1_c_RC  91
#define PROP_dt1_c_SD  120
#define PROP_dt1_c_WT  39
#define PROP_dt1_c_TE  0
#define PROP_dt1_c_PR  0
#define PROP_dt1_c_CC  145

#define IMAGEFILE  "src/dmu/dt1_h.png"
purchase_sprites(dt1_h, 0, 0)
MU_head_middle_sprites(13, dt1_h_v1_mu, 32, 40)
MU_head_middle_sprites(13, dt1_h_v2_mu, 32, 308)
#undef IMAGEFILE
#define IMAGEFILE  "src/dmu/dt1_m.png"
purchase_sprites(dt1_mp, 0, 0)
EMU_motor1_middle_sprites(13, dt1_mp_v1_mu, 32, 40)
EMU_motor1_middle_sprites(13, dt1_mp_v2_mu, 32, 308)
#undef IMAGEFILE
#define IMAGEFILE  "src/dmu/dt1_c.png"
purchase_sprites(dt1_c, 0, 0)
MU_car_sprites(13, dt1_c_v1_mu, 32, 40)
MU_car_sprites(13, dt1_c_v2_mu, 32, 308)
#undef IMAGEFILE
map_sprites(dt1_purchase_sprites, dt1_h_purchase_sprites)

MU_head_middle_direction_template(dt1_h_v1, dt1_h)
MU_head_middle_direction_template(dt1_h_v2, dt1_h)

switch (FEAT_TRAINS, SELF, dt1_h_sprites_left,
  cargo_subtype)
{
           0: dt1_h_v1_sprites_left;
  LV_RZD_PID: dt1_h_v2_sprites_left;
  align_13_sprites;
}

switch (FEAT_TRAINS, SELF, dt1_h_sprites_right,
  cargo_subtype)
{
           0: dt1_h_v1_sprites_right;
  LV_RZD_PID: dt1_h_v2_sprites_right;
  align_13_sprites;
}

engine_direction_template3m2(dt1_h, dt1_mp, dt1_c, )
long_vehicle(dt1_h)

DEMU_motor_direction_template_DC(dt1_mp_v1, dt1_h)
DEMU_motor_direction_template_DC(dt1_mp_v2, dt1_h)

switch (FEAT_TRAINS, SELF, dt1_mp_direction_left,
  cargo_subtype)
{
           0: dt1_mp_v1_direction_left;
  LV_RZD_PID: dt1_mp_v2_direction_left;
  align_13_sprites;
}

switch (FEAT_TRAINS, SELF, dt1_mp_direction_right,
  cargo_subtype)
{
           0: dt1_mp_v1_direction_right;
  LV_RZD_PID: dt1_mp_v2_direction_right;
  align_13_sprites;
}

EMU_direction_calculation_template_s(dt1_mp, dt1_h, )
long_vehicle_dir(dt1_mp)

EMU_motor_direction_template(dt1_c_v1, dt1_h)
EMU_motor_direction_template(dt1_c_v2, dt1_h)

switch (FEAT_TRAINS, SELF, dt1_c_direction_left,
  cargo_subtype)
{
           0: dt1_c_v1_direction_left;
  LV_RZD_PID: dt1_c_v2_direction_left;
  align_13_sprites;
}

switch (FEAT_TRAINS, SELF, dt1_c_direction_right,
  cargo_subtype)
{
           0: dt1_c_v1_direction_right;
  LV_RZD_PID: dt1_c_v2_direction_right;
  align_13_sprites;
}

EMU_direction_calculation_template_s(dt1_c, dt1_h, )
long_vehicle_dir(dt1_c)

switch (FEAT_TRAINS, SELF, dt1_can_attach_wagon_head, vehicle_type_id)
{
  dt1_h: return CB_RESULT_ATTACH_ALLOW;
         return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, SELF, dt1_can_attach_wagon_mc, vehicle_type_id)
{
  dt1_mp: return CB_RESULT_ATTACH_ALLOW;
   dt1_c: return CB_RESULT_ATTACH_ALLOW;
         return string(STR_CAN_ATTACH_OTHERCAR_ONLY);
}

switch (FEAT_TRAINS, SELF, dt1_can_attach_wagon_m, vehicle_type_id)
{
  dt1_mp: return CB_RESULT_ATTACH_ALLOW;
         return string(STR_CAN_ATTACH_MCARP_ONLY);
}

switch (FEAT_TRAINS, SELF, dt1_can_attach_wagon_ch, vehicle_type_id)
{
  dt1_c: return CB_RESULT_ATTACH_ALLOW;
  dt1_h: return CB_RESULT_ATTACH_ALLOW;
         return string(STR_CAN_ATTACH_OTHERCAR_ONLY);
}

switch (FEAT_TRAINS, PARENT, dt1_can_attach_wagon4_c,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  dt1_mp: dt1_can_attach_wagon_head;
   dt1_h: dt1_can_attach_wagon_m;
        return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, dt1_can_attach_wagon3_m,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  dt1_c: dt1_can_attach_wagon_head;
  dt1_h: dt1_can_attach_wagon_ch;
        return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, dt1_can_attach_wagon2,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
   dt1_c: dt1_can_attach_wagon4_c;
  dt1_mp: dt1_can_attach_wagon3_m;
   dt1_h: dt1_can_attach_wagon_mc;
        return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, dt1_can_attach_wagon1,
  count_veh_id(dt1_h))
{
  0: return string(STR_CAN_ATTACH_HEAD_ONLY);
  1: dt1_can_attach_wagon2;
  2: dt1_can_attach_wagon_head;
  3: dt1_can_attach_wagon2;
     return string(STR_CAN_ATTACH_NO_AFTER_REAR_HEAD);
}

switch (FEAT_TRAINS, SELF, dt1_can_attach_wagon, vehicle_type_id)
{
    dt1_h: dt1_can_attach_wagon1;
   dt1_mp: dt1_can_attach_wagon1;
    dt1_c: dt1_can_attach_wagon1;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, dt1_h_start_stop,
  count_veh_id(dt1_h))
{
  2: return CB_RESULT_NO_TEXT;
  4: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

engine_diesel_1r_effect(dt1_h_create_effect_sprites, 0, 5, 12)
engine_direction_template3m2(dt1_h, dt1_mp, dt1_c, _create_effect)
is_ERD_ds(dt1_h_create_effect_DC, return 0, dt1_h_create_effect_sprites_start)
engine_effects_MU(dt1_h, _create_effect_DC, dt1_h)

engine_electric1r_1_effect(dt1_mp_create_effect_direction, -2, 7)
EMU_direction_calculation_template_s(dt1_mp, dt1_h, _create_effect)
is_ERD_ds(dt1_mp_create_effect_DC, dt1_mp_create_effect_direction_template, return 0)
engine_effects_MU(dt1_mp, _create_effect_DC, dt1_h)

engine_power_MU(dt1_mp, PROP_dt1_m_PR, dt1_h)
engine_capacity_MU(dt1_h, PROP_dt1_h_CC, dt1_h)
engine_capacity_MU(dt1_mp, PROP_dt1_m_CC, dt1_h)
engine_capacity_MU(dt1_c, PROP_dt1_c_CC, dt1_h)

engine_speed(dt1, PROP_dt1_h_SD)

RC_head_check_new(dt1_h, dt1_h)
switch (FEAT_TRAINS, SELF, dt1_h_running_cost_factor_DC,
[  STORE_TEMP(0, 0),   // Моторы
   STORE_TEMP(11, 1),  // Бригада
   STORE_TEMP(28, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(20, 4),  // ТО
   STORE_TEMP(1, 5),   // Сертификация

   STORE_TEMP(PROP_dt1_h_SD, 6),                             // Скорость
   STORE_TEMP(int(PROP_dt1_h_WT), 7),                        // Тара
   STORE_TEMP(int(PROP_dt1_h_WT + PROP_dt1_h_CC / 16), 8)])  // Максимальная масса
{ dt1_h_check_running_cost_factor; }                         // 141
switch (FEAT_TRAINS, SELF, dt1_h_running_cost_factor_D,
[  STORE_TEMP(80, 0),  // Моторы
   STORE_TEMP(11, 1),  // Бригада
   STORE_TEMP(28, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(20, 4),  // ТО
   STORE_TEMP(1, 5),   // Сертификация

   STORE_TEMP(PROP_dt1_h_SD, 6),                             // Скорость
   STORE_TEMP(int(PROP_dt1_h_WT), 7),                        // Тара
   STORE_TEMP(int(PROP_dt1_h_WT + PROP_dt1_h_CC / 16), 8)])  // Максимальная масса
{ dt1_h_check_running_cost_factor; }                         // 141
is_ERD_ds(dt1_h_running_cost_factor, dt1_h_running_cost_factor_DC, dt1_h_running_cost_factor_D)

RC_head_check_new(dt1_mp, dt1_h)
switch (FEAT_TRAINS, SELF, dt1_mp_running_cost_factor_DC,
[  STORE_TEMP(55, 0),  // Моторы
   STORE_TEMP(0, 1),   // Бригада
   STORE_TEMP(19, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(14, 4),  // ТО
   STORE_TEMP(1, 5),   // Сертификация

   STORE_TEMP(PROP_dt1_m_SD, 6),                             // Скорость
   STORE_TEMP(int(PROP_dt1_m_WT), 7),                        // Тара
   STORE_TEMP(int(PROP_dt1_m_WT + PROP_dt1_m_CC / 16), 8)])  // Максимальная масса
{ dt1_mp_check_running_cost_factor; }                        // 97
switch (FEAT_TRAINS, SELF, dt1_mp_running_cost_factor_D,
[  STORE_TEMP(0, 0),   // Моторы
   STORE_TEMP(0, 1),   // Бригада
   STORE_TEMP(19, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(14, 4),  // ТО
   STORE_TEMP(1, 5),   // Сертификация

   STORE_TEMP(PROP_dt1_m_SD, 6),                             // Скорость
   STORE_TEMP(int(PROP_dt1_m_WT), 7),                        // Тара
   STORE_TEMP(int(PROP_dt1_m_WT + PROP_dt1_m_CC / 16), 8)])  // Максимальная масса
{ dt1_mp_check_running_cost_factor; }                        // 97
is_ERD_ds(dt1_mp_running_cost_factor, dt1_mp_running_cost_factor_DC, dt1_mp_running_cost_factor_D)

RC_head_check_new(dt1_c, dt1_h)
switch (FEAT_TRAINS, SELF, dt1_c_running_cost_factor,
[  STORE_TEMP(0, 0),   // Моторы
   STORE_TEMP(0, 1),   // Бригада
   STORE_TEMP(18, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(13, 4),  // ТО
   STORE_TEMP(1, 5),   // Сертификация

   STORE_TEMP(PROP_dt1_c_SD, 6),                             // Скорость
   STORE_TEMP(int(PROP_dt1_c_WT), 7),                        // Тара
   STORE_TEMP(int(PROP_dt1_c_WT + PROP_dt1_c_CC / 16), 8)])  // Максимальная масса
{ dt1_c_check_running_cost_factor; }                         // 91

name_in_group_subgroup(dt1_h, string(STR_NAME_IN_GROUP, string(STR_NAME_DT1_SERIES), string(STR_NAME_DT1)),
                              string(STR_NAME_IN_GROUP, string(STR_NAME_DT1_SERIES), string(STR_LONGNAME_DT1_H)),
                              string(STR_NAME_DT1))
name_in_group_subgroup(dt1_mp, string(STR_NAME_IN_GROUP, string(STR_NAME_DT1_SERIES), string(STR_NAME_DT1)),
                               string(STR_NAME_IN_GROUP, string(STR_NAME_DT1_SERIES), string(STR_LONGNAME_DT1_MP)),
                               string(STR_NAME_DT1))
name_in_group_subgroup(dt1_c, string(STR_NAME_IN_GROUP, string(STR_NAME_DT1_SERIES), string(STR_NAME_DT1)),
                              string(STR_NAME_IN_GROUP, string(STR_NAME_DT1_SERIES), string(STR_LONGNAME_DT1_C)),
                              string(STR_NAME_DT1))
hint_MU(dt1_h,
     calc_loading(PROP_dt1_h_CC / (2 * WIDERST_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_DEMU_H_E,
     STR_SECTIONS_DEMU_DT1,
     2008, 2013,
     string(STR_PURCHASE_HINT_FACTORY_TORZHOK_CW))
hint_MU(dt1_mp,
     calc_loading(PROP_dt1_m_CC / (2 * WIDERST_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_DEMU_MP,
     STR_SECTIONS_DEMU_DT1,
     2008, 2013,
     string(STR_PURCHASE_HINT_FACTORY_TORZHOK_CW))
hint_MU(dt1_c,
     calc_loading(PROP_dt1_c_CC / (2 * WIDERST_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_DEMU_C,
     STR_SECTIONS_DEMU_DT1,
     2008, 2013,
     string(STR_PURCHASE_HINT_FACTORY_TORZHOK_CW))
map_sprites(dt1_additional_text, dt1_h_additional_text)

item (FEAT_TRAINS, dt1_h, 741) {
  property {
    name: string(STR_NAME_DT1);
    vehicle_dates(2008, 2013, 25, 10, 8, PROP_dt1_h_CF)
    vehicle_dmu_c(PROP_dt1_h_WT, PROP_dt1_h_CC, 2 * WIDERST_D_DOOR)
    vehicle_group_mu(dt1_group)
  }
  graphics {
     purchase_menu(PROP_dt1_h_CF, PROP_dt1_h_RC, PROP_dt1_h_SD, PROP_dt1_h_WT, PROP_dt1_h_TE, PROP_dt1_h_PR, PROP_dt1_h_CC)
        additional_text: dt1_h_additional_text;
       articulated_part: articulated_part_dummy5;
       can_attach_wagon: dt1_can_attach_wagon;
       cargo_age_period: return 60;
         cargo_capacity: dt1_h_cargo_capacity;
     cargo_subtype_text: FP_cargo_subtype_text;
         colour_mapping: any_cc_colour;
          create_effect: dt1_h_create_effect;
                default: dt1_h_sprites;
                   name: dt1_h_name;
                  power: return 0;
               purchase: dt1_h_purchase_sprites;
    running_cost_factor: dt1_h_running_cost_factor;
                  speed: dt1_speed;
             start_stop: dt1_h_start_stop;
  }
}

item (FEAT_TRAINS, dt1_mp, 742) {
  property {
    name: string(STR_NAME_DT1);
    vehicle_dates(2008, 2013, 25, 10, 8, PROP_dt1_m_CF)
    vehicle_demu(PROP_dt1_m_PR, PROP_dt1_m_WT, PROP_dt1_m_TE, PROP_dt1_m_CC, 2 * WIDERST_D_DOOR)
    vehicle_group_mu(dt1_h)
  }
  graphics {
      purchase_menu(PROP_dt1_m_CF, PROP_dt1_m_RC, PROP_dt1_m_SD, PROP_dt1_m_WT, PROP_dt1_m_TE, PROP_dt1_m_PR, PROP_dt1_m_CC)
        additional_text: dt1_mp_additional_text;
       articulated_part: articulated_part_dummy5;
       can_attach_wagon: dt1_can_attach_wagon;
       cargo_age_period: return 60;
         cargo_capacity: dt1_mp_cargo_capacity;
     cargo_subtype_text: FP_cargo_subtype_text;
         colour_mapping: any_cc_colour;
          create_effect: dt1_mp_create_effect;
                default: dt1_mp_sprites;
                   name: dt1_mp_name;
                  power: dt1_mp_power;
               purchase: dt1_mp_purchase_sprites;
    running_cost_factor: dt1_mp_running_cost_factor;
                  speed: dt1_speed;
             start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
  }
}

item (FEAT_TRAINS, dt1_c, 743) {
  property {
    name: string(STR_NAME_DT1);
    vehicle_dates(2008, 2013, 25, 10, 8, PROP_dt1_c_CF)
    vehicle_dmu_c(PROP_dt1_c_WT, PROP_dt1_c_CC, 2 * WIDERST_D_DOOR)
    vehicle_group_mu(dt1_h)
  }
  graphics {
      purchase_menu(PROP_dt1_c_CF, PROP_dt1_c_RC, PROP_dt1_c_SD, PROP_dt1_c_WT, PROP_dt1_c_TE, PROP_dt1_c_PR, PROP_dt1_c_CC)
        additional_text: dt1_c_additional_text;
       articulated_part: articulated_part_dummy5;
       can_attach_wagon: dt1_can_attach_wagon;
       cargo_age_period: return 60;
         cargo_capacity: dt1_c_cargo_capacity;
     cargo_subtype_text: FP_cargo_subtype_text;
         colour_mapping: any_cc_colour;
                default: dt1_c_sprites;
                   name: dt1_c_name;
                  power: return 0;
               purchase: dt1_c_purchase_sprites;
    running_cost_factor: dt1_c_running_cost_factor;
                  speed: dt1_speed;
             start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
  }
}

long_name_template(dt1_h, STR_LONGNAME_DT1_H)
long_name_template(dt1_mp, STR_LONGNAME_DT1_MP)
long_name_template(dt1_c, STR_LONGNAME_DT1_C)
allow_dmu(dt1_h)
allow_dmu(dt1_mp)
allow_dmu(dt1_c)
