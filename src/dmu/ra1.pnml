 // ra1
// 485

#define IMAGEFILE  "src/dmu/ra1.png"
purchase_sprites(ra1, 0, 0)
MU_head_single_middle_sprites(15, ra1_v1, 32, 40)
MU_head_single_middle_sprites(15, ra1_v2, 32, 40 + 268)
MU_head_single_middle_sprites(15, ra1_v3, 32, 40 + 268 * 2)
#undef IMAGEFILE

random_switch (FEAT_TRAINS, SELF, ra1_sprites_left_green, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v1_sprites_1left;
  1: ra1_v1_sprites_2left;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_left_blue, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v2_sprites_1left;
  1: ra1_v2_sprites_2left;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_left_red, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v3_sprites_1left;
  1: ra1_v3_sprites_2left;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_left,
  cargo_subtype)
{
  0: ra1_sprites_left_green;
  1: ra1_sprites_left_blue;
  2: ra1_sprites_left_red;
     align_14_sprites;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_right_green, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v1_sprites_1right;
  1: ra1_v1_sprites_2right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_right_blue, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v2_sprites_1right;
  1: ra1_v2_sprites_2right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_right_red, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v3_sprites_1right;
  1: ra1_v3_sprites_2right;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_right,
  cargo_subtype)
{
  0: ra1_sprites_right_green;
  1: ra1_sprites_right_blue;
  2: ra1_sprites_right_red;
     align_14_sprites;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_start2,
  position_in_consist)
{
  0: ra1_sprites_left;
     ra1_sprites_right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_middle_green, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v1_notpowered_normal_sprites_left;
  1: ra1_v1_notpowered_normal_sprites_right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_middle_blue, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v2_notpowered_normal_sprites_left; 
  1: ra1_v2_notpowered_normal_sprites_right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_middle_red, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v3_notpowered_normal_sprites_left; 
  1: ra1_v3_notpowered_normal_sprites_right;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_middle,
  cargo_subtype)
{
  0: ra1_sprites_middle_green;
  1: ra1_sprites_middle_blue;
  2: ra1_sprites_middle_red;
     align_14_sprites;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_start3,
  position_in_consist)
{
  0: ra1_sprites_left;
  2: ra1_sprites_middle;
     ra1_sprites_right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_start1_green, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v1_sprites_3left;
  1: ra1_v1_sprites_3right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_start1_blue, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v2_sprites_3left;
  1: ra1_v2_sprites_3right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_start1_red, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v3_sprites_3left;
  1: ra1_v3_sprites_3right;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_start1,
  cargo_subtype)
{
  0: ra1_sprites_start1_green;
  1: ra1_sprites_start1_blue;
  2: ra1_sprites_start1_red;
     align_14_sprites;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_start0_green, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v1_notpowered_sprites_left;
  1: ra1_v1_notpowered_sprites_right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_start0_blue, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v2_notpowered_sprites_left;
  1: ra1_v2_notpowered_sprites_right;
}

random_switch (FEAT_TRAINS, SELF, ra1_sprites_start0_red, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: ra1_v2_notpowered_sprites_left;
  1: ra1_v2_notpowered_sprites_right;
}

switch (FEAT_TRAINS, SELF, ra1_sprites_start0,
  cargo_subtype)
{
  0: ra1_sprites_start0_green;
  1: ra1_sprites_start0_blue;
  2: ra1_sprites_start0_red;
     align_14_sprites;
}

switch (FEAT_TRAINS, PARENT, ra1_sprites_start,
  (vehicle_type_id == ra1) * (count_veh_id(ra1)))
{
  1: ra1_sprites_start1;
  2: ra1_sprites_start2;
  3: ra1_sprites_start3;
     ra1_sprites_start0;
}

long_vehicle_RND(ra1, ra1_sprites_start0_green)

switch (FEAT_TRAINS, PARENT, ra1_can_attach_wagon_length,
  count_veh_id(ra1) > 2)
{
  0: CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, ra1_can_attach_wagon,
  vehicle_type_id)
{
  ra1: ra1_can_attach_wagon_length;
       return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

engine_diesel_1r_effect(ra1, -2, 7, 12) // TODO учитывать рэндом

switch (FEAT_TRAINS, SELF, ra1_create_effect1,
  random_bits % 2)
{
  0: ra1_create_effect_sprites_left;
     ra1_create_effect_sprites_right;
}

switch (FEAT_TRAINS, SELF, ra1_create_effect21,
  random_bits % 2)
{
  0: ra1_create_effect_sprites_right;
     ra1_create_effect_sprites_left;
}

switch (FEAT_TRAINS, SELF, ra1_create_effect2,
  position_in_consist)
{
  0: ra1_create_effect1;
     ra1_create_effect21;
}                        

switch (FEAT_TRAINS, SELF, ra1_create_effect3,
  position_in_consist)
{
  0: ra1_create_effect1;
  2: ra1_create_effect1;
     ra1_create_effect21;
}                        

switch (FEAT_TRAINS, PARENT, ra1_create_effect,
  (vehicle_type_id == ra1) * (count_veh_id(ra1)))
{
  1: ra1_create_effect1;
  2: ra1_create_effect2;
  3: ra1_create_effect3;
     return disable_create_effect();
}

// Даём тягу, только если локомотив - ra1
switch (FEAT_TRAINS, PARENT, ra1_power,
  vehicle_type_id == ra1)
{
  1: return get_power_in_cb(70);
     return 0;
}

// Допускается эксплуатация с пассажирами только если голова - ra1
switch (FEAT_TRAINS, PARENT, ra1_cargo_capacity,
  vehicle_type_id == ra1)
{
  1: return 24;
     return 0;
}

general_running_cost(ra1_v1, 89)

switch (FEAT_TRAINS, PARENT, ra1_running_cost_factor,
  vehicle_type_id == ra1)
{
  1: ra1_v1_running_cost_factor;
     return RC_MU_AS_CAR;
}

livery_template1(ra1_alt, TTD_53)
livery_template_alt2(ra1, TTD_93, TTD_B7)
engine_speed(ra1, 80)

item (FEAT_TRAINS, ra1, 485) {
  property {
    name: string(STR_NAME_RA1);
    vehicle_no_dates(1998, 2006, 25, 10, 8, 11)
    vehicle_dmu(337, 32, 54.0, 62, 48)
  }
  graphics {
    default: ra1_sprites;
    purchase: ra1_purchase_sprites;
    speed: ra1_speed;
    articulated_part: articulated_part_dummy7;
    cargo_age_period: return 60;
    running_cost_factor: ra1_running_cost_factor;
    can_attach_wagon: ra1_can_attach_wagon;
    cargo_subtype_text: ra1_cargo_subtype_text;
    power: ra1_power;
    create_effect: ra1_create_effect;
    cargo_capacity: ra1_cargo_capacity;
    colour_mapping: any_cc_colour;
    purchase_speed: return 80;
    additional_text: return string(STR_PURCHASE_HINT_ENGINE_MU,
                                   string(STR_PURCHASE_HINT_LOADING_SPEED_2TIC),
                                   string(STR_PURCHASE_HINT_AGING_PERIOD_1_1),
                                   string(STR_PURCHASE_HINT_ENGINE_TYPE_DMU_M),
                                   string(STR_SECTIONS_DMU_1_3),
                                   string(STR_PURCHASE_HINT_FROMTO, 1998, 2006),
                                   string(STR_PURCHASE_HINT_FACTORY_MYTISHCHI));
  }
}

long_name_template(ra1, STR_LONGNAME_RA1)
allow_dmu(ra1)
