 // 2es5k

// Спрайты
// 2ЭС5К и 3ЭС5К "Ермак" - новочеркасские электровозы переменного тока.

#define IMAGEFILE  "src/electric/2es5k-3es5k.png"

// покупка
spriteset (_2es5k_purchase_spriteset, IMAGEFILE)
{
  new_purchase_template(0, 0)
}

// нет тока
spriteset (_2es5k_notpowered_spriteset, IMAGEFILE)
{
  s10_template(152, 26, 0)
} 

// обычный: погрузка/перемещение
spriteset (_2es5k_loading_spriteset, IMAGEFILE)
{
  s10_template(152, 93, 0)
} 

spriteset (_2es5k_traveling_spriteset, IMAGEFILE)
{
  s10_template(152, 160, 0)
} 

spritegroup _2es5k_spritegroup
{
  loading: _2es5k_loading_spriteset;
  loaded: _2es5k_traveling_spriteset;
}

spriteset (_2es5k_speedoverTH_spriteset, IMAGEFILE)
{
  s10_template(152, 227, 0)
} 

// нет тока
spriteset (_2es5k_b_notpowered_spriteset, IMAGEFILE)
{
  s10_template(610, 26, 0)
} 

// секция Б: погрузка
spriteset (_2es5k_b_spriteset, IMAGEFILE)
{
  s10_template(610, 93, 0)
} 

// нет тока
spriteset (_2es5k_v2_notpowered_spriteset, IMAGEFILE)
{
  s10_template(152, 294, 0)
} 

// обычный: погрузка/перемещение
spriteset (_2es5k_v2_loading_spriteset, IMAGEFILE)
{
  s10_template(152, 361, 0)
} 

spriteset (_2es5k_v2_traveling_spriteset, IMAGEFILE)
{
  s10_template(152, 428, 0)
} 

spritegroup _2es5k_v2_spritegroup
{
  loading: _2es5k_v2_loading_spriteset;
  loaded: _2es5k_v2_traveling_spriteset;
}

spriteset (_2es5k_v2_speedoverTH_spriteset, IMAGEFILE)
{
  s10_template(152, 495, 0)
} 

// нет тока
spriteset (_2es5k_b_v2_notpowered_spriteset, IMAGEFILE)
{
  s10_template(610, 294, 0)
} 

// секция Б: погрузка
spriteset (_2es5k_b_v2_spriteset, IMAGEFILE)
{
  s10_template(610, 361, 0)
} 

#undef IMAGEFILE

// расчёт ориентации секций локомотива. Первые 8 ориентируются парами, далее по номеру в составе. 
switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset2l2,
  (((LOAD_TEMP(1) > threshold_of_speed()) + 1) *
    (!(vehicle_is_not_powered || vehicle_is_in_depot))) +
  ((build_year >= 2006) * 3))
{
  0: _2es5k_notpowered_spriteset;
  1: _2es5k_spritegroup;
  2: _2es5k_speedoverTH_spriteset;
  3: _2es5k_v2_notpowered_spriteset;
  4: _2es5k_v2_spritegroup;
     _2es5k_v2_speedoverTH_spriteset;
}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset2r,
  (((LOAD_TEMP(1) > threshold_of_speed()) + 1) *
    (!(vehicle_is_not_powered || vehicle_is_in_depot))) +
  ((build_year >= 2006) * 3))
{ 0: _2es5k_b_notpowered_spriteset;
  1..2: _2es5k_b_spriteset;
  3: _2es5k_b_v2_notpowered_spriteset;
     _2es5k_b_v2_spriteset; }

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset2l,
[ set_offset_to(2),
  (prev_vehicle_type_id() == _2es5k) || (prev_vehicle_type_id() == _3es5k) || 
  (position_in_consist == 0) ])
{ 1: _2es5k_get_spriteset2l2;
     _2es5k_get_spriteset2r;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_old,
  ((LOAD_TEMP(0) - count_veh_id(_2es5k) + 1) % 2) )
{ 1: _2es5k_get_spriteset2l;
     _2es5k_get_spriteset2r;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_14,
[  set_offset_to(-14),
  ((prev_vehicle_type_id() == _2es5k) ||
   (prev_vehicle_type_id() == _3es5k)) +
  ((prev_vehicle_type_id() == _3es5k_m) * 2) ])
{ 1: _2es5k_get_spriteset_old;
  2: _2es5k_get_spriteset2r;
     _2es5k_get_spriteset2l;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_12,
[  set_offset_to(-12),
  ((prev_vehicle_type_id() == _2es5k) ||
   (prev_vehicle_type_id() == _3es5k)) +
  ((prev_vehicle_type_id() == _3es5k_m) * 2) ])
{ 1: _2es5k_get_spriteset_14;
  2: _2es5k_get_spriteset2l;
     _2es5k_get_spriteset2r;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_10,
[  set_offset_to(-10),
  ((prev_vehicle_type_id() == _2es5k) ||
   (prev_vehicle_type_id() == _3es5k)) +
  ((prev_vehicle_type_id() == _3es5k_m) * 2) ])
{ 1: _2es5k_get_spriteset_12;
  2: _2es5k_get_spriteset2r;
     _2es5k_get_spriteset2l;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_8,
[  set_offset_to(-8),
  ((prev_vehicle_type_id() == _2es5k) ||
   (prev_vehicle_type_id() == _3es5k)) +
  ((prev_vehicle_type_id() == _3es5k_m) * 2) ])
{ 1: _2es5k_get_spriteset_10;
  2: _2es5k_get_spriteset2l;
     _2es5k_get_spriteset2r;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_6,
[  set_offset_to(-6),
  ((prev_vehicle_type_id() == _2es5k) ||
   (prev_vehicle_type_id() == _3es5k)) +
  ((prev_vehicle_type_id() == _3es5k_m) * 2) ])
{ 1: _2es5k_get_spriteset_8;
  2: _2es5k_get_spriteset2r;
     _2es5k_get_spriteset2l;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_4,
[  set_offset_to(-4),
  ((prev_vehicle_type_id() == _2es5k) ||
   (prev_vehicle_type_id() == _3es5k)) +
  ((prev_vehicle_type_id() == _3es5k_m) * 2) ])
{ 1: _2es5k_get_spriteset_6;
  2: _2es5k_get_spriteset2l;
     _2es5k_get_spriteset2r;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset_2,
[  set_offset_to(-2),
  (prev_vehicle_type_id() == _2es5k) ||
  (prev_vehicle_type_id() == _3es5k)])
{ 1: _2es5k_get_spriteset_4;
     _2es5k_get_spriteset2l;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset4,
[  set_offset_to(2),
  (prev_vehicle_type_id() == _3es5k_m)  
  
])
{ 1: _2es5k_get_spriteset2l2;
     _2es5k_get_spriteset_2;}

switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset2,
[  set_offset_to(-2),
  (prev_vehicle_type_id() == _3es5k_m)  
  
])
{ 1: _2es5k_get_spriteset2r;
     _2es5k_get_spriteset4;}

switch (FEAT_TRAINS, PARENT, _2es5k_get_spriteset1,
[
  STORE_TEMP(count_veh_id(_2es5k), 0),
  STORE_TEMP(current_speed, 1) ])
{
     _2es5k_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, _2es5k_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  _2es5k_get_spriteset1;
}

// Если хотя бы 2 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, _2es5k_start_stop2,
[
  set_offset_to(2),
  (prev_vehicle_type_id() == _2es5k) || (prev_vehicle_type_id() == _3es5k)
])
{
  1: any_start_stop;
  return string(STR_START_STOP_NEED_AT_LEAST_2_CONSECUTIVE_ENGINE);
}

// Если локомотивов меньше двух, то не выпускать
switch (FEAT_TRAINS, PARENT, _2es5k_start_stop,
  count_veh_id(_2es5k) >= 2)
{
  1: _2es5k_start_stop2;
  return string(STR_START_STOP_NEED_2_OR_MORE_ENGINE);
}

// Макс. скорость: 110 км/ч
#define MAX_SPEED 110

switch (FEAT_TRAINS, SELF, _2es5k_purchase_speed,
  MAX_SPEED)
{
  return;
}

switch (FEAT_TRAINS, SELF, _2es5k_speed,
[
  STORE_TEMP(MAX_SPEED, 0),
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0)
])
{
  return;
}

#undef MAX_SPEED

switch (FEAT_TRAINS, SELF, _2es5k_bitmask_vehicle_info3,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2es5k) - count_veh_id(_3es5k) - count_veh_id(_3es5k_m), 0),
  (last_computed_result && (position_in_consist == 2 * LOAD_TEMP(0)) &&
    LOAD_TEMP(0) < 4)
])
{
  1: return 0;
  return FLAG_PENALISE_SPEED;
}

switch (FEAT_TRAINS, PARENT, _2es5k_bitmask_vehicle_info2,
[
  STORE_TEMP(count_veh_id(_2es5k) + count_veh_id(_3es5k) + count_veh_id(_3es5k_m), 0),
  (vehicle_type_id == _2es5k) || (vehicle_type_id == _3es5k) || (vehicle_type_id == _3es5k_m)
])
{
  _2es5k_bitmask_vehicle_info3;
}

switch (FEAT_TRAINS, SELF, _2es5k_bitmask_vehicle_info,
  position_in_consist == 0)
{
  1: return 0;
  _2es5k_bitmask_vehicle_info2;
}

item (FEAT_TRAINS, _2es5k)
{
  property
  {
    name: string(STR_2ES5K_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(2004), 1, 1);
    vehicle_life: 30; // срок службы
    model_life: get_model_life(2004,2020);
    retire_early: get_retire_early(2004,2020); // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cost_factor: get_electric_cost_factor();
    running_cost_factor: get_electric_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    track_type: get_ac_track_type();
    ai_special_flag: AI_FLAG_CARGO;
    power: 4065 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    weight: 96 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(211.0, 96);
    length: 8;
    visual_effect_and_powered: electric_visual_effect_and_powered(0);
    cargo_allow_refit: [GOOD];
    default_cargo_type: GOOD;
    cargo_capacity: 1;
  }
  graphics {
    default: _2es5k_get_spriteset;
    purchase: _2es5k_purchase_spriteset;
    articulated_part: articulated_part_dummy2;
    can_attach_wagon: any_can_attach_wagon;
    start_stop: _2es5k_start_stop;
    additional_text: return string(STR_2ES5K_PURCHASE_HINT);
    speed: _2es5k_speed;
    purchase_speed: _2es5k_purchase_speed;
    bitmask_vehicle_info: _2es5k_bitmask_vehicle_info;
    cargo_subtype_text: cargo_subtype_text_default;
    cargo_capacity: return 0;
    cost_factor: return 356;
  }
}
