 // 2es6

// Спрайты

#define IMAGEFILE  "src/electric/2es6.png"

// покупка
spriteset (_2es6_purchase_spriteset, IMAGEFILE)
{
  new_purchase_template(0, 0)
}

// нет тока
spriteset (_2es6_notpowered_spriteset, IMAGEFILE)
{
  s10_template(105, 30, 0)
} 

// обычный: погрузка/перемещение
spriteset (_2es6_loading_spriteset, IMAGEFILE)
{
  s10_template(105, 97, 0)
} 

spriteset (_2es6_traveling_spriteset, IMAGEFILE)
{
  s10_template(105, 164, 0)
} 

spritegroup _2es6_spritegroup
{
  loading: _2es6_loading_spriteset;
  loaded: _2es6_traveling_spriteset;
}

spriteset (_2es6_speedover50_spriteset, IMAGEFILE)
{
  s10_template(105, 231, 0)
} 

// нет тока
spriteset (_2es6_b_notpowered_spriteset, IMAGEFILE)
{
  s10_template(563, 30, 0)
} 

// секция Б: погрузка
spriteset (_2es6_b_spriteset, IMAGEFILE)
{
  s10_template(563, 97, 0)
} 

// нет тока
spriteset (_2es6_v2_notpowered_spriteset, IMAGEFILE)
{
  s10_template(105, 298, 0)
} 

// обычный: погрузка/перемещение
spriteset (_2es6_v2_loading_spriteset, IMAGEFILE)
{
  s10_template(105, 365, 0)
} 

spriteset (_2es6_v2_traveling_spriteset, IMAGEFILE)
{
  s10_template(105, 432, 0)
} 

spritegroup _2es6_v2_spritegroup
{
  loading: _2es6_v2_loading_spriteset;
  loaded: _2es6_v2_traveling_spriteset;
}

spriteset (_2es6_v2_speedover50_spriteset, IMAGEFILE)
{
  s10_template(105, 499, 0)
} 

// нет тока
spriteset (_2es6_b_v2_notpowered_spriteset, IMAGEFILE)
{
  s10_template(563, 298, 0)
} 

// секция Б: погрузка
spriteset (_2es6_b_v2_spriteset, IMAGEFILE)
{
  s10_template(563, 365, 0)
} 

// нет тока
spriteset (_2es6_v3_notpowered_spriteset, IMAGEFILE)
{
  s10_template(105, 566, 0)
} 

// обычный: погрузка/перемещение
spriteset (_2es6_v3_loading_spriteset, IMAGEFILE)
{
  s10_template(105, 633, 0)
} 

spriteset (_2es6_v3_traveling_spriteset, IMAGEFILE)
{
  s10_template(105, 700, 0)
} 

spritegroup _2es6_v3_spritegroup
{
  loading: _2es6_v3_loading_spriteset;
  loaded: _2es6_v3_traveling_spriteset;
}

spriteset (_2es6_v3_speedover50_spriteset, IMAGEFILE)
{
  s10_template(105, 767, 0)
} 

// нет тока
spriteset (_2es6_b_v3_notpowered_spriteset, IMAGEFILE)
{
  s10_template(563, 566, 0)
} 

// секция Б: погрузка
spriteset (_2es6_b_v3_spriteset, IMAGEFILE)
{
  s10_template(563, 633, 0)
} 

#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, _2es6_get_spriteset2,
  (((LOAD_TEMP(0) - count_veh_id(_2es6)) % 2) * 3) +
  // поправка на нет тока
  (((LOAD_TEMP(1) > threshold_of_speed()) + 1) *
    (!(vehicle_is_not_powered || vehicle_is_in_depot))) +
  (cargo_subtype * 6)
)
{
  0: _2es6_notpowered_spriteset;
  1: _2es6_spritegroup;
  2: _2es6_speedover50_spriteset;
  3: _2es6_b_notpowered_spriteset;
  4: _2es6_b_spriteset;
  5: _2es6_b_spriteset;
  6: _2es6_v2_notpowered_spriteset;
  7: _2es6_v2_spritegroup;
  8: _2es6_v2_speedover50_spriteset;
  9: _2es6_b_v2_notpowered_spriteset;
  10: _2es6_b_v2_spriteset;
  11: _2es6_b_v2_spriteset;
  12: _2es6_v3_notpowered_spriteset;
  13: _2es6_v3_spritegroup;
  14: _2es6_v3_speedover50_spriteset;
  15: _2es6_b_v3_notpowered_spriteset;
  16: _2es6_b_v3_spriteset;
  17: _2es6_b_v3_spriteset;
  align_10_spriteset; // параллелепипед
}

switch (FEAT_TRAINS, PARENT, _2es6_get_spriteset1,
[
  STORE_TEMP(count_veh_id(_2es6), 0),
  STORE_TEMP(current_speed, 1)
])
{
  _2es6_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, _2es6_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  _2es6_get_spriteset1;
}

// Что присоединяем?
switch (FEAT_TRAINS, SELF, _2es6_can_attach_wagon,
  0)
{
  return CB_RESULT_ATTACH_ALLOW;
}

// Если хотя бы 2 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, _2es6_start_stop2,
[
  set_offset_to(2),
  prev_vehicle_type_id() == _2es6
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_NEED_AT_LEAST_2_CONSECUTIVE_ENGINE);
}

// Если локомотивов меньше двух, то не выпускать
switch (FEAT_TRAINS, PARENT, _2es6_start_stop,
  count_veh_id(_2es6) >= 2)
{
  1: _2es6_start_stop2;
  return string(STR_START_STOP_NEED_2_OR_MORE_ENGINE);
}

switch (FEAT_TRAINS, SELF, _2es6_cargo_subtype_text,
  cargo_subtype)
{
  0: string(STR_REFIT_ER);
  1: string(STR_REFIT_SINARA_V1);
  2: string(STR_REFIT_SINARA_V2);
  return CB_RESULT_NO_TEXT;
}

// Макс. скорость: 120 км/ч
#define MAX_SPEED 120

switch (FEAT_TRAINS, SELF, _2es6_purchase_speed,
  MAX_SPEED)
{
  return;
}

switch (FEAT_TRAINS, SELF, _2es6_speed,
[
  STORE_TEMP(MAX_SPEED, 0),
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0)
])
{
  return;
}

#undef MAX_SPEED

switch (FEAT_TRAINS, SELF, _2es6_bitmask_vehicle_info3,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2es6), 0),
  (last_computed_result && (position_in_consist == 2 * LOAD_TEMP(0)) &&
    LOAD_TEMP(0) < 4)
])
{
  1: return 0;
  return FLAG_PENALISE_SPEED;
}

switch (FEAT_TRAINS, PARENT, _2es6_bitmask_vehicle_info2,
[
  STORE_TEMP(count_veh_id(_2es6), 0),
  vehicle_type_id == _2es6
])
{
  _2es6_bitmask_vehicle_info3;
}

switch (FEAT_TRAINS, SELF, _2es6_bitmask_vehicle_info,
  position_in_consist == 0)
{
  1: return 0;
  _2es6_bitmask_vehicle_info2;
}

item (FEAT_TRAINS, _2es6)
{
  property
  {
    name: string(STR_2ES6_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(2008), 1, 1);
    vehicle_life: 30; // срок службы
    model_life: get_model_life(2008,2030);
    retire_early: get_retire_early(2008,2030); // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cargo_allow_refit: [GOOD];
    default_cargo_type: GOOD;
    cost_factor: get_electric_cost_factor();
    running_cost_factor: get_electric_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_CARGO;
    power: 4000 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 1;
    weight: 100 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(209.0, 100);
    length: 8;
    visual_effect_and_powered: electric_visual_effect_and_powered(0);
  }
  graphics {
    default: _2es6_get_spriteset;
    purchase: _2es6_purchase_spriteset;
    articulated_part: articulated_part_dummy2;
    can_attach_wagon: _2es6_can_attach_wagon;
    start_stop: _2es6_start_stop;
    additional_text: return string(STR_2ES6_PURCHASE_HINT);
    cargo_subtype_text: _2es6_cargo_subtype_text;
    cargo_capacity: return 0;
    speed: _2es6_speed;
    purchase_speed: _2es6_purchase_speed;
    bitmask_vehicle_info: _2es6_bitmask_vehicle_info;
    cost_factor: return 358;
  }
}
