 // f

// Спрайты

#define IMAGEFILE  "src/electric/f.png"

// покупка
spriteset (f_purchase_spriteset, IMAGEFILE)
{
  s14_purchase_template(0, 17, -12)
}

// нет тока
spriteset (f_notpowered_spriteset, IMAGEFILE)
{
  s14_template(0, 17, 0)
} 

// обычный: погрузка/перемещение
spriteset (f_loading_spriteset, IMAGEFILE)
{
  s14_template(0, 84, 0)
} 

spriteset (f_traveling_spriteset, IMAGEFILE)
{
  s14_template(0, 151, 0)
} 

spritegroup f_spritegroup
{
  loading: f_loading_spriteset;
  loaded: f_traveling_spriteset;
}

spriteset (f_speedover50_spriteset, IMAGEFILE)
{
  s14_template(0, 218, 0)
} 

// нет тока
spriteset (f_r_notpowered_spriteset, IMAGEFILE)
{
  s14_template(440, 17, 0)
} 

// развёрнутый: погрузка/перемещение
spriteset (f_r_loading_spriteset, IMAGEFILE)
{
  s14_template(440, 84, 0)
} 

spriteset (f_r_traveling_spriteset, IMAGEFILE)
{
  s14_template(440, 151, 0)
} 

spritegroup f_r_spritegroup
{
  loading: f_r_loading_spriteset;
  loaded: f_r_traveling_spriteset;
}

spriteset (f_r_speedover50_spriteset, IMAGEFILE)
{
  s14_template(440, 218, 0)
} 

// нет тока
spriteset (f_v2_notpowered_spriteset, IMAGEFILE)
{
  s14_template(0, 295, 0)
} 

// 2: обычный: погрузка/перемещение
spriteset (f_v2_loading_spriteset, IMAGEFILE)
{
  s14_template(0, 362, 0)
} 

spriteset (f_v2_traveling_spriteset, IMAGEFILE)
{
  s14_template(0, 429, 0)
} 

spritegroup f_v2_spritegroup
{
  loading: f_v2_loading_spriteset;
  loaded: f_v2_traveling_spriteset;
}

spriteset (f_v2_speedover50_spriteset, IMAGEFILE)
{
  s14_template(0, 496, 0)
} 

// нет тока
spriteset (f_r_v2_notpowered_spriteset, IMAGEFILE)
{
  s14_template(440, 295, 0)
} 

// развёрнутый: погрузка/перемещение
spriteset (f_r_v2_loading_spriteset, IMAGEFILE)
{
  s14_template(440, 362, 0)
} 

spriteset (f_r_v2_traveling_spriteset, IMAGEFILE)
{
  s14_template(440, 429, 0)
} 

spritegroup f_r_v2_spritegroup
{
  loading: f_r_v2_loading_spriteset;
  loaded: f_r_v2_traveling_spriteset;
}

spriteset (f_r_v2_speedover50_spriteset, IMAGEFILE)
{
  s14_template(440, 496, 0)
} 


#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, f_get_spriteset2,
  (((LOAD_TEMP(0) - count_veh_id(f)) % 2) * 3) +
  // поправка на нет тока
  ((LOAD_TEMP(1) > threshold_of_speed()) + 1) *
    (!(vehicle_is_not_powered || vehicle_is_in_depot)) +
  cargo_subtype * 6
)
{
  0: f_notpowered_spriteset;
  1: f_spritegroup;
  2: f_speedover50_spriteset;
  3: f_r_notpowered_spriteset;
  4: f_r_spritegroup;
  5: f_r_speedover50_spriteset;
  6: f_v2_notpowered_spriteset;
  7: f_v2_spritegroup;
  8: f_v2_speedover50_spriteset;
  9: f_r_v2_notpowered_spriteset;
  10: f_r_v2_spritegroup;
  11: f_r_v2_speedover50_spriteset;
  align_14_spriteset;
}

switch (FEAT_TRAINS, PARENT, f_get_spriteset1,
[
  STORE_TEMP(count_veh_id(f), 0),
  STORE_TEMP(current_speed, 1)
])
{
  f_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, f_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  f_get_spriteset1;
}

// Что присоединяем?
switch (FEAT_TRAINS, SELF, f_can_attach_wagon,
  0)
{
  return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, f_start_stop,
  0)
{
  return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, f_cargo_subtype_text,
  cargo_subtype)
{
  0: string(STR_REFIT_V1);
  1: string(STR_REFIT_V2);
  return CB_RESULT_NO_TEXT;
}

// Макс. скорость: 100 км/ч
#define MAX_SPEED 100

switch (FEAT_TRAINS, SELF, f_purchase_speed,
  MAX_SPEED)
{
  return;
}

switch (FEAT_TRAINS, SELF, f_speed,
[
  STORE_TEMP(MAX_SPEED, 0),
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0)
])
{
  return;
}

#undef MAX_SPEED

switch (FEAT_TRAINS, SELF, f_bitmask_vehicle_info3,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(f), 0),
  (last_computed_result && (position_in_consist == 2 * LOAD_TEMP(0)) &&
    LOAD_TEMP(0) < 2)
])
{
  1: return 0;
  return FLAG_PENALISE_SPEED;
}

switch (FEAT_TRAINS, PARENT, f_bitmask_vehicle_info2,
[
  STORE_TEMP(count_veh_id(f), 0),
  vehicle_type_id == f
])
{
  f_bitmask_vehicle_info3;
}

switch (FEAT_TRAINS, SELF, f_bitmask_vehicle_info,
  position_in_consist == 0)
{
  1: return 0;
  f_bitmask_vehicle_info2;
}

item (FEAT_TRAINS, f) 
{
  property
  {
    name: string(STR_F_NAME);
    climates_available: get_climates_available();
    introduction_date: date(1959, 1, 1);
    vehicle_life: 15; // срок службы
    model_life: 15; // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    cost_factor: get_electric_cost_factor();
    running_cost_factor: get_electric_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 100 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: ELRL;
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 6080 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 1;
    weight: 138 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: 0.24622892;
    length: 8;
    visual_effect_and_powered: electric_visual_effect_and_powered(0);
  }
  graphics {
    default: f_get_spriteset;
    purchase: f_purchase_spriteset;
    articulated_part: articulated_part_dummy6;
    can_attach_wagon: f_can_attach_wagon;
    start_stop: f_start_stop;
    additional_text: return string(STR_F_PURCHASE_HINT);
    cargo_subtype_text: f_cargo_subtype_text;
    cargo_capacity: return 0;
    speed: f_speed;
    purchase_speed: f_purchase_speed;
    bitmask_vehicle_info: f_bitmask_vehicle_info;
  }
}
