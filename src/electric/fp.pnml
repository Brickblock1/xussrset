 // fp

// Спрайты

#define IMAGEFILE  "src/electric/fp.png"

// покупка
spriteset (fp_purchase_spriteset, IMAGEFILE)
{
  new_purchase_template(930, 0)
}

// нет тока
spriteset (fp_notpowered_spriteset, IMAGEFILE)
{
  s14_template(0, 17, 0)
} 

// обычный: погрузка/перемещение
spriteset (fp_loading_spriteset, IMAGEFILE)
{
  s14_template(0, 84, 0)
} 

spriteset (fp_traveling_spriteset, IMAGEFILE)
{
  s14_template(0, 151, 0)
} 

spritegroup fp_spritegroup
{
  loading: fp_loading_spriteset;
  loaded: fp_traveling_spriteset;
}

spriteset (fp_speedoverTH_spriteset, IMAGEFILE)
{
  s14_template(0, 218, 0)
} 

// нет тока
spriteset (fp_r_notpowered_spriteset, IMAGEFILE)
{
  s14_template(440, 17, 0)
} 

// развёрнутый: погрузка/перемещение
spriteset (fp_r_loading_spriteset, IMAGEFILE)
{
  s14_template(440, 84, 0)
} 

spriteset (fp_r_traveling_spriteset, IMAGEFILE)
{
  s14_template(440, 151, 0)
} 

spritegroup fp_r_spritegroup
{
  loading: fp_r_loading_spriteset;
  loaded: fp_r_traveling_spriteset;
}

spriteset (fp_r_speedoverTH_spriteset, IMAGEFILE)
{
  s14_template(440, 218, 0)
} 

// нет тока
spriteset (fp_v2_notpowered_spriteset, IMAGEFILE)
{
  s14_template(0, 295, 0)
} 

// 2: обычный: погрузка/перемещение
spriteset (fp_v2_loading_spriteset, IMAGEFILE)
{
  s14_template(0, 362, 0)
} 

spriteset (fp_v2_traveling_spriteset, IMAGEFILE)
{
  s14_template(0, 429, 0)
} 

spritegroup fp_v2_spritegroup
{
  loading: fp_v2_loading_spriteset;
  loaded: fp_v2_traveling_spriteset;
}

spriteset (fp_v2_speedoverTH_spriteset, IMAGEFILE)
{
  s14_template(0, 496, 0)
} 

// нет тока
spriteset (fp_r_v2_notpowered_spriteset, IMAGEFILE)
{
  s14_template(440, 295, 0)
} 

// развёрнутый: погрузка/перемещение
spriteset (fp_r_v2_loading_spriteset, IMAGEFILE)
{
  s14_template(440, 362, 0)
} 

spriteset (fp_r_v2_traveling_spriteset, IMAGEFILE)
{
  s14_template(440, 429, 0)
} 

spritegroup fp_r_v2_spritegroup
{
  loading: fp_r_v2_loading_spriteset;
  loaded: fp_r_v2_traveling_spriteset;
}

spriteset (fp_r_v2_speedoverTH_spriteset, IMAGEFILE)
{
  s14_template(440, 496, 0)
} 


#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, fp_get_spriteset2,
  (((LOAD_TEMP(0) - count_veh_id(fp)) % 2) * 3) +
  // поправка на нет тока
  ((LOAD_TEMP(1) > threshold_of_speed()) + 1) *
    (!(vehicle_is_not_powered || vehicle_is_in_depot)) +
  cargo_subtype * 6
)
{
  0: fp_notpowered_spriteset;
  1: fp_spritegroup;
  2: fp_speedoverTH_spriteset;
  3: fp_r_notpowered_spriteset;
  4: fp_r_spritegroup;
  5: fp_r_speedoverTH_spriteset;
  6: fp_v2_notpowered_spriteset;
  7: fp_v2_spritegroup;
  8: fp_v2_speedoverTH_spriteset;
  9: fp_r_v2_notpowered_spriteset;
  10: fp_r_v2_spritegroup;
  11: fp_r_v2_speedoverTH_spriteset;
  align_14_spriteset;
}

switch (FEAT_TRAINS, PARENT, fp_get_spriteset1,
[
  STORE_TEMP(count_veh_id(fp), 0),
  STORE_TEMP(current_speed, 1)
])
{
  fp_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, fp_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  fp_get_spriteset1;
}

switch (FEAT_TRAINS, SELF, fp_cargo_subtype_text,
  cargo_subtype)
{
  0: string(STR_REFIT_V1);
  1: string(STR_REFIT_V2);
  return CB_RESULT_NO_TEXT;
}

// Макс. скорость: 160 км/ч, 
#define MAX_SPEED 160

switch (FEAT_TRAINS, SELF, fp_purchase_speed,
  MAX_SPEED)
{
  return;
}

switch (FEAT_TRAINS, SELF, fp_speed,
[
  STORE_TEMP(get_max_speed(20, 120, MAX_SPEED), 0),
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0)
])
{
  return;
}

#undef MAX_SPEED

switch (FEAT_TRAINS, SELF, fp_bitmask_vehicle_info3,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(fp), 0),
  (last_computed_result && (position_in_consist == 2 * LOAD_TEMP(0)) &&
    LOAD_TEMP(0) < 2)
])
{
  1: return 0;
  return FLAG_PENALISE_SPEED;
}

switch (FEAT_TRAINS, PARENT, fp_bitmask_vehicle_info2,
[
  STORE_TEMP(count_veh_id(fp), 0),
  vehicle_type_id == fp
])
{
  fp_bitmask_vehicle_info3;
}

switch (FEAT_TRAINS, SELF, fp_bitmask_vehicle_info,
  position_in_consist == 0)
{
  1: return 0;
  fp_bitmask_vehicle_info2;
}

item (FEAT_TRAINS, fp) 
{
  property
  {
    name: string(STR_FP_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1960), 1, 1);
    vehicle_life: 20; // срок службы
    model_life: get_model_life(1960,1960);
    retire_early: get_retire_early(1960,1960); // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    cost_factor: 112;
    running_cost_factor: get_electric_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 160 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_ac_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 6090 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 1;
    weight: 131 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(213.0, 131);
    length: 8;
    visual_effect_and_powered: electric_visual_effect_and_powered(0);
  }
  graphics {
    default: fp_get_spriteset;
    purchase: fp_purchase_spriteset;
    articulated_part: articulated_part_dummy6;
    can_attach_wagon: any_can_attach_wagon;
    start_stop: any_start_stop;
    additional_text: return string(STR_FP_PURCHASE_HINT);
    cargo_subtype_text: fp_cargo_subtype_text;
    cargo_capacity: return 0;
    speed: fp_speed;
    purchase_speed: fp_purchase_speed;
    bitmask_vehicle_info: fp_bitmask_vehicle_info;
  }
}
