 // vl8m

// Спрайты

#define IMAGEFILE  "src/electric/vl8m.png"

// покупка
spriteset (vl8m_purchase_spriteset, IMAGEFILE)
{
  s8_purchase_template(4, 18, 0)
}

// нет тока
spriteset (vl8m_notpowered_spriteset, IMAGEFILE)
{
  s8_template(4, 18, 0)
} 

// обычный: погрузка/перемещение
spriteset (vl8m_loading_spriteset, IMAGEFILE)
{
  s8_template(4, 53, 0)
} 

spriteset (vl8m_traveling_spriteset, IMAGEFILE)
{
  s8_template(4, 88, 0)
} 

spritegroup vl8m_spritegroup
{
  loading: vl8m_loading_spriteset;
  loaded: vl8m_traveling_spriteset;
}

spriteset (vl8m_speedover50_spriteset, IMAGEFILE)
{                  
  s8_template(4, 123, 0)
} 

// нет тока
spriteset (vl8m_r_notpowered_spriteset, IMAGEFILE)
{
  s8_template(291, 18, 0)
} 

// развёрнутый
spriteset (vl8m_r_spriteset, IMAGEFILE)
{
  s8_template(291, 53, 0)
} 

// нет тока
spriteset (vl8m_v2_notpowered_spriteset, IMAGEFILE)
{
  s8_template(4, 163, 0)
} 

// обычный: погрузка/перемещение
spriteset (vl8m_v2_loading_spriteset, IMAGEFILE)
{
  s8_template(4, 198, 0)
} 

spriteset (vl8m_v2_traveling_spriteset, IMAGEFILE)
{
  s8_template(4, 233, 0)
} 

spritegroup vl8m_v2_spritegroup
{
  loading: vl8m_v2_loading_spriteset;
  loaded: vl8m_v2_traveling_spriteset;
}

spriteset (vl8m_v2_speedover50_spriteset, IMAGEFILE)
{
  s8_template(4, 268, 0)
} 

// нет тока
spriteset (vl8m_r_v2_notpowered_spriteset, IMAGEFILE)
{
  s8_template(291, 163, 0)
} 

// развёрнутый
spriteset (vl8m_r_v2_spriteset, IMAGEFILE)
{
  s8_template(291, 198, 0)
} 

#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, vl8m_get_spriteset2,
  (((LOAD_TEMP(0) - count_veh_id(vl8m)) % 2) * 3) +
  // поправка на нет тока
  (((LOAD_TEMP(1) > threshold_of_speed()) + 1) *
    (!(vehicle_is_not_powered || vehicle_is_in_depot))) +
  (cargo_subtype * 6)
)
{
  0: vl8m_notpowered_spriteset;
  1: vl8m_spritegroup;
  2: vl8m_speedover50_spriteset;
  3: vl8m_r_notpowered_spriteset;
  4..5: vl8m_r_spriteset;

  6: vl8m_v2_notpowered_spriteset;
  7: vl8m_v2_spritegroup;
  8: vl8m_v2_speedover50_spriteset;
  9: vl8m_r_v2_notpowered_spriteset;
  10..11: vl8m_r_v2_spriteset;
  align_8_spriteset; // параллелепипед
}

switch (FEAT_TRAINS, PARENT, vl8m_get_spriteset1,
[
  STORE_TEMP(count_veh_id(vl8m), 0),
  STORE_TEMP(current_speed, 1)
])
{
  vl8m_get_spriteset2;
}

// Если рисуем на карте и следующий в цепочке вагон скрыт, то
// отдаём пустышку
switch (FEAT_TRAINS, SELF, vl8m_get_spriteset,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  vl8m_get_spriteset1;
}

// Что присоединяем?
switch (FEAT_TRAINS, SELF, vl8m_can_attach_wagon,
  0)
{
  return CB_RESULT_ATTACH_ALLOW;
}

// Если хотя бы 2 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, vl8m_start_stop2,
[
  set_offset_to(1),
  prev_vehicle_type_id() == vl8m
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_NEED_AT_LEAST_2_CONSECUTIVE_ENGINE);
}

// Если локомотивов меньше двух, то не выпускать
switch (FEAT_TRAINS, PARENT, vl8m_start_stop,
  count_veh_id(vl8m) >= 2)
{
  1: vl8m_start_stop2;
  return string(STR_START_STOP_NEED_2_OR_MORE_ENGINE);
}

switch (FEAT_TRAINS, SELF, vl8m_cargo_subtype_text,
  cargo_subtype)
{
  0: string(STR_REFIT_V1);
  1: string(STR_REFIT_V2);
  return CB_RESULT_NO_TEXT;
}

// Макс. скорость: 95 км/ч до 1990, 90 км/ч после
#define MAX_SPEED current_year >= 1990 ? 90 : 95

switch (FEAT_TRAINS, SELF, vl8m_purchase_speed,
  MAX_SPEED)
{
  return;
}

switch (FEAT_TRAINS, SELF, vl8m_speed,
[
  STORE_TEMP(MAX_SPEED, 0),
  is_penalise_speed() ? get_penalised_speed(LOAD_TEMP(0)) : LOAD_TEMP(0)
])
{
  return;
}

#undef MAX_SPEED

switch (FEAT_TRAINS, SELF, vl8m_bitmask_vehicle_info3,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vl8m), 0),
  (last_computed_result && (position_in_consist == LOAD_TEMP(0)) &&
    LOAD_TEMP(0) < 2)
])
{
  1: return 0;
  return FLAG_PENALISE_SPEED;
}

switch (FEAT_TRAINS, PARENT, vl8m_bitmask_vehicle_info2,
[
  STORE_TEMP(count_veh_id(vl8m), 0),
  vehicle_type_id == vl8m
])
{
  vl8m_bitmask_vehicle_info3;
}

switch (FEAT_TRAINS, SELF, vl8m_bitmask_vehicle_info,
  position_in_consist == 0)
{
  1: return 0;
  vl8m_bitmask_vehicle_info2;
}

item (FEAT_TRAINS, vl8m) 
{
  property
  {
    name: string(STR_VL8M_NAME);
    climates_available: get_climates_available();
    introduction_date: date(1976, 1, 1);
    vehicle_life: 20; // срок службы
    model_life: 20; // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cargo_allow_refit: [MAIL];
    default_cargo_type: MAIL;
    cost_factor: get_electric_cost_factor();
    running_cost_factor: get_electric_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: (4970/2) hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 1;
    weight: (180/2) ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: 0.16836734693;
    length: 8;
    visual_effect_and_powered: electric_visual_effect_and_powered(0);
  }
  graphics {
    default: vl8m_get_spriteset;
    purchase: vl8m_purchase_spriteset;
    can_attach_wagon: vl8m_can_attach_wagon;
    start_stop: vl8m_start_stop;
    additional_text: return string(STR_VL8M_PURCHASE_HINT);
    cargo_subtype_text: vl8m_cargo_subtype_text;
    cargo_capacity: return 0;
    speed: vl8m_speed;
    purchase_speed: vl8m_purchase_speed;
    bitmask_vehicle_info: vl8m_bitmask_vehicle_info;
  }
}
