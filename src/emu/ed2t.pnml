 // ed2t

// Спрайты
// ЭД2Т "Камаз" (1993-1999), электропоезд постоянного тока.

#define IMAGEFILE  "src/emu/ed2t.png"

/// Головной
// покупка
purchase_sprites(ed2t_h, 0, 0)

// вариант 1
spriteset (ed2t_h_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 381, 0)
} 

spriteset (ed2t_h_spriteset, IMAGEFILE)
{
  s13_template(561, 381, 0)
} 

// вариант 2
spriteset (ed2t_h_v2_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 448, 0)
} 

spriteset (ed2t_h_v2_spriteset, IMAGEFILE)
{
  s13_template(561, 448, 0)
} 

// вариант 3
spriteset (ed2t_h_v3_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 515, 0)
} 

spriteset (ed2t_h_v3_spriteset, IMAGEFILE)
{
  s13_template(561, 515, 0)
} 

// вариант 4
spriteset (ed2t_h_v4_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 582, 0)
} 

spriteset (ed2t_h_v4_spriteset, IMAGEFILE)
{
  s13_template(561, 582, 0)
} 

// вариант 5
spriteset (ed2t_h_v5_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 649, 0)
} 

spriteset (ed2t_h_v5_spriteset, IMAGEFILE)
{
  s13_template(561, 649, 0)
} 

/// Головной развёрнутый

spriteset (ed2t_hr_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 716, 0)
} 

spriteset (ed2t_hr_spriteset, IMAGEFILE)
{
  s13_template(561, 716, 0)
} 

// вариант 2
spriteset (ed2t_hr_v2_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 783, 0)
} 

spriteset (ed2t_hr_v2_spriteset, IMAGEFILE)
{
  s13_template(561, 783, 0)
} 

// вариант 3
spriteset (ed2t_hr_v3_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 850, 0)
} 

spriteset (ed2t_hr_v3_spriteset, IMAGEFILE)
{
  s13_template(561, 850, 0)
} 

// вариант 4
spriteset (ed2t_hr_v4_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 917, 0)
} 

spriteset (ed2t_hr_v4_spriteset, IMAGEFILE)
{
  s13_template(561, 917, 0)
} 

// вариант 5
spriteset (ed2t_hr_v5_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 984, 0)
} 

spriteset (ed2t_hr_v5_spriteset, IMAGEFILE)
{
  s13_template(561, 984, 0)
} 

/// Моторный
// покупка
purchase_sprites(ed2t_m, 0, 20)

spriteset (ed2t_m_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1051, 0)
} 

spriteset (ed2t_m_spriteset, IMAGEFILE)
{
  s13_template(561, 1051, 0)
} 

spriteset (ed2t_m_v2_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1118, 0)
} 

spriteset (ed2t_m_v2_spriteset, IMAGEFILE)
{
  s13_template(561, 1118, 0)
} 

spriteset (ed2t_m_v3_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1185, 0)
} 

spriteset (ed2t_m_v3_spriteset, IMAGEFILE)
{
  s13_template(561, 1185, 0)
} 

spriteset (ed2t_m_v4_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1252, 0)
} 

spriteset (ed2t_m_v4_spriteset, IMAGEFILE)
{
  s13_template(561, 1252, 0)
} 

spriteset (ed2t_m_v5_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1319, 0)
} 

spriteset (ed2t_m_v5_spriteset, IMAGEFILE)
{
  s13_template(561, 1319, 0)
} 

/// моторный развёрнутый
spriteset (ed2t_mr_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1386, 0)
} 

spriteset (ed2t_mr_spriteset, IMAGEFILE)
{
  s13_template(561, 1386, 0)
} 

spriteset (ed2t_mr_v2_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1453, 0)
} 

spriteset (ed2t_mr_v2_spriteset, IMAGEFILE)
{
  s13_template(561, 1453, 0)
} 

spriteset (ed2t_mr_v3_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1520, 0)
} 

spriteset (ed2t_mr_v3_spriteset, IMAGEFILE)
{
  s13_template(561, 1520, 0)
} 

spriteset (ed2t_mr_v4_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1587, 0)
} 

spriteset (ed2t_mr_v4_spriteset, IMAGEFILE)
{
  s13_template(561, 1587, 0)
} 

spriteset (ed2t_mr_v5_notpowered_spriteset, IMAGEFILE)
{
  s13_template(121, 1654, 0)
} 

spriteset (ed2t_mr_v5_spriteset, IMAGEFILE)
{
  s13_template(561, 1654, 0)
} 

/// прицепной

purchase_sprites(ed2t_c, 0, 40)

spriteset (ed2t_c_spriteset, IMAGEFILE)
{
  s13_template(561, 1721, 0)
} 

spriteset (ed2t_c_v2_spriteset, IMAGEFILE)
{
  s13_template(561, 1788, 0)
} 

spriteset (ed2t_c_v3_spriteset, IMAGEFILE)
{
  s13_template(561, 1855, 0)
} 

spriteset (ed2t_c_v4_spriteset, IMAGEFILE)
{
  s13_template(561, 1922, 0)
} 

spriteset (ed2t_c_v5_spriteset, IMAGEFILE)
{
  s13_template(561, 1989, 0)
} 

spriteset (ed2t_cr_spriteset, IMAGEFILE)
{
  s13_template(561, 2056, 0)
} 

spriteset (ed2t_cr_v2_spriteset, IMAGEFILE)
{
  s13_template(561, 2123, 0)
} 

spriteset (ed2t_cr_v3_spriteset, IMAGEFILE)
{
  s13_template(561, 2190, 0)
} 

spriteset (ed2t_cr_v4_spriteset, IMAGEFILE)
{
  s13_template(561, 2257, 0)
} 

spriteset (ed2t_cr_v5_spriteset, IMAGEFILE)
{
  s13_template(561, 2324, 0)
} 

/// паззл
// головной
spriteset (ed2t_h_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 381, 0)
} 

spriteset (ed2t_h_v2_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 448, 0)
} 

spriteset (ed2t_h_v3_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 515, 0)
} 

spriteset (ed2t_h_v4_wrong_place_spriteset, IMAGEFILE)
{                   
  s13ui1_template(1124, 582, 0)
} 

spriteset (ed2t_h_v5_wrong_place_spriteset, IMAGEFILE)
{                   
  s13ui1_template(1124, 649, 0)
} 

// головной развёрнутый
spriteset (ed2t_hr_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 716, 0)
} 

spriteset (ed2t_hr_v2_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 783, 0)
} 

spriteset (ed2t_hr_v3_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 850, 0)
} 

spriteset (ed2t_hr_v4_wrong_place_spriteset, IMAGEFILE)
{                   
  s13ui1_template(1124, 917, 0)
} 

spriteset (ed2t_hr_v5_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 984, 0)
} 

// моторный
spriteset (ed2t_m_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1051, 0)
} 

spriteset (ed2t_m_v2_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1118, 0)
} 

spriteset (ed2t_m_v3_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1185, 0)
} 

spriteset (ed2t_m_v4_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1252, 0)
} 

spriteset (ed2t_m_v5_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1319, 0)
} 

// моторный развёрнутый
spriteset (ed2t_mr_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1386, 0)
} 

spriteset (ed2t_mr_v2_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1453, 0)
} 

spriteset (ed2t_mr_v3_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1520, 0)
} 

spriteset (ed2t_mr_v4_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1587, 0)
} 

spriteset (ed2t_mr_v5_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1654, 0)
} 

// прицепной
spriteset (ed2t_c_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1721, 0)
} 

spriteset (ed2t_c_v2_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1788, 0)
} 

spriteset (ed2t_c_v3_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1855, 0)
} 

spriteset (ed2t_c_v4_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1922, 0)
} 

spriteset (ed2t_c_v5_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 1989, 0)
} 

// прицепной развёрнутый
spriteset (ed2t_cr_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 2056, 0)
} 

spriteset (ed2t_cr_v2_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 2123, 0)
} 

spriteset (ed2t_cr_v3_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 2190, 0)
} 

spriteset (ed2t_cr_v4_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 2257, 0)
} 

spriteset (ed2t_cr_v5_wrong_place_spriteset, IMAGEFILE)
{
  s13ui1_template(1124, 2324, 0)
} 

#undef IMAGEFILE

// Рисуем вариант в депо
// R0 - длина  состава, R1 - позиция вагона в составе
// R2 - кол-во элементов Г в составе --> позиция среди элементов Г в составе
switch (FEAT_TRAINS, SELF, ed2t_h_sprites_depot2,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(ed2t_h) - count_veh_id(ed2t_m)
    - count_veh_id(ed2t_c), 1),
  STORE_TEMP(LOAD_TEMP(2) - count_veh_id(ed2t_h), 2),
  ((LOAD_TEMP(1) == 0) || (
    LOAD_TEMP(1) == 3 ? LOAD_TEMP(0) <= 4 :
    LOAD_TEMP(1) == 5 ? LOAD_TEMP(0) <= 6 :
    LOAD_TEMP(1) == 6 ? LOAD_TEMP(0) <= 7 :
    LOAD_TEMP(1) == 7 ? LOAD_TEMP(0) <= 8 :
    LOAD_TEMP(1) == 8 ? LOAD_TEMP(0) <= 9 :
    LOAD_TEMP(1) == 9 ? LOAD_TEMP(0) <= 10 :
    LOAD_TEMP(1) == 10 ? LOAD_TEMP(0) <= 11 :
    LOAD_TEMP(1) == 11 ? LOAD_TEMP(0) <= 12 : 0) * (LOAD_TEMP(2) < 2)) +
  ((LOAD_TEMP(2) % 2) * 2) +
  (cargo_subtype * 4) ])
{
  0: ed2t_h_wrong_place_spriteset;
  1: ed2t_h_spriteset;
  2: ed2t_hr_wrong_place_spriteset;
  3: ed2t_hr_spriteset;
  4: ed2t_h_v2_wrong_place_spriteset;
  5: ed2t_h_v2_spriteset;
  6: ed2t_hr_v2_wrong_place_spriteset;
  7: ed2t_hr_v2_spriteset;
  8: ed2t_h_v3_wrong_place_spriteset;
  9: ed2t_h_v3_spriteset;
 10: ed2t_hr_v3_wrong_place_spriteset;
 11: ed2t_hr_v3_spriteset;
 12: ed2t_h_v4_wrong_place_spriteset;
 13: ed2t_h_v4_spriteset;
 14: ed2t_hr_v4_wrong_place_spriteset;
 15: ed2t_hr_v4_spriteset;
 16: ed2t_h_v5_wrong_place_spriteset;
 17: ed2t_h_v5_spriteset;
 18: ed2t_hr_v5_wrong_place_spriteset;
 19: ed2t_hr_v5_spriteset;
     align_13_spriteset;
}

switch (FEAT_TRAINS, PARENT, ed2t_h_sprites_depot,
[
  STORE_TEMP(count_veh_id(ed2t_h) + count_veh_id(ed2t_m)
    + count_veh_id(ed2t_c), 0), // длина поезда в элементах ЭР2
  STORE_TEMP(count_veh_id(ed2t_h), 2) // для определения реверса
])
{
  ed2t_h_sprites_depot2;
}

// Рисуем вариант не в депо, разворачиваем каждый второй
switch (FEAT_TRAINS, SELF, ed2t_h_sprites_2,
[
  ((LOAD_TEMP(0) - count_veh_id(ed2t_h)) % 2) +
  (cargo_subtype * 2)
])
{
  0: ed2t_h_spriteset;
  1: ed2t_hr_spriteset;
  2: ed2t_h_v2_spriteset;
  3: ed2t_hr_v2_spriteset;
  4: ed2t_h_v3_spriteset;
  5: ed2t_hr_v3_spriteset;
  6: ed2t_h_v4_spriteset;
  7: ed2t_hr_v4_spriteset;
  8: ed2t_h_v5_spriteset;
  9: ed2t_hr_v5_spriteset;
     align_13_spriteset;
}

long_vehicle(ed2t_h, )

// рисуем в депо?
switch (FEAT_TRAINS, SELF, ed2t_h_sprites_0,
  is_drawn_in_depot())
{
  1: ed2t_h_sprites_depot;
     ed2t_h_sprites;
}

// Рисуем вариант в депо
// R0 - длина  поезда, R1 - позиция вагона
// R2 - кол-во элементов М в составе
switch (FEAT_TRAINS, SELF, ed2t_m_sprites_depot2,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(ed2t_h) - count_veh_id(ed2t_m)
    - count_veh_id(ed2t_c), 1),
  STORE_TEMP(LOAD_TEMP(2) - count_veh_id(ed2t_m), 3),
  (((LOAD_TEMP(1) == 1) || (
    LOAD_TEMP(1) == 2 ? LOAD_TEMP(0) <= 4 :
    LOAD_TEMP(1) == 3 ? (LOAD_TEMP(0) <= 6) || (LOAD_TEMP(0) >= 8) :
    LOAD_TEMP(1) == 4 ? (LOAD_TEMP(0) > 4) && (LOAD_TEMP(0) <= 9) :
    LOAD_TEMP(1) == 5 ? (LOAD_TEMP(0) == 7) || (LOAD_TEMP(0) >= 10) :
    LOAD_TEMP(1) == 6 ? (LOAD_TEMP(0) == 8) || (LOAD_TEMP(0) >= 10) :
    LOAD_TEMP(1) == 7 ? LOAD_TEMP(0) == 9 :
    LOAD_TEMP(1) == 8 ? (LOAD_TEMP(0) == 10) || (LOAD_TEMP(0) == 12) :
    LOAD_TEMP(1) == 9 ? LOAD_TEMP(0) == 11 :
    LOAD_TEMP(1) == 10 ? LOAD_TEMP(0) > 11 : 0)) *
    ((!(vehicle_is_not_powered || vehicle_is_in_depot || LOAD_TEMP(4))) + 1) *
    (LOAD_TEMP(3) < 6)) +
  ((LOAD_TEMP(3) >= ((LOAD_TEMP(2) / 2) + (LOAD_TEMP(2) % 2))) * 3) +
  (cargo_subtype * 6)
])
{
  0: ed2t_m_wrong_place_spriteset;
  1: ed2t_m_notpowered_spriteset;
  2: ed2t_m_spriteset;
  3: ed2t_mr_wrong_place_spriteset;
  4: ed2t_mr_notpowered_spriteset;
  5: ed2t_mr_spriteset;

  6: ed2t_m_v2_wrong_place_spriteset;
  7: ed2t_m_v2_notpowered_spriteset;
  8: ed2t_m_v2_spriteset;
  9: ed2t_mr_v2_wrong_place_spriteset;
  10: ed2t_mr_v2_notpowered_spriteset;
  11: ed2t_mr_v2_spriteset;
  12: ed2t_m_v3_wrong_place_spriteset;
  13: ed2t_m_v3_notpowered_spriteset;
  14: ed2t_m_v3_spriteset;
  15: ed2t_mr_v3_wrong_place_spriteset;
  16: ed2t_mr_v3_notpowered_spriteset;
  17: ed2t_mr_v3_spriteset;
  18: ed2t_m_v4_wrong_place_spriteset;
  19: ed2t_m_v4_notpowered_spriteset;
  20: ed2t_m_v4_spriteset;
  21: ed2t_mr_v4_wrong_place_spriteset;
  22: ed2t_mr_v4_notpowered_spriteset;
  23: ed2t_mr_v4_spriteset;
  24: ed2t_m_v5_wrong_place_spriteset;
  25: ed2t_m_v5_notpowered_spriteset;
  26: ed2t_m_v5_spriteset;
  27: ed2t_mr_v5_wrong_place_spriteset;
  28: ed2t_mr_v5_notpowered_spriteset;
  29: ed2t_mr_v5_spriteset;
  align_13_spriteset;
}


switch (FEAT_TRAINS, PARENT, ed2t_m_sprites_depot,
[
  STORE_TEMP(count_veh_id(ed2t_h) + count_veh_id(ed2t_m)
    + count_veh_id(ed2t_c), 0), // длина поезда в элементах ЭР2
  STORE_TEMP(count_veh_id(ed2t_m), 2), // для определения реверса
  STORE_TEMP(vehicle_type_id != ed2t_h, 4) // локомотив не ed2t_h
])
{
  ed2t_m_sprites_depot2;
}

// Рисуем вариант не в депо
// R2 - кол-во элементов Г в составе
// R3 - наличие тяги (локомотив ed2t_h)
switch (FEAT_TRAINS, SELF, ed2t_m_sprites3,
[
  ((!(vehicle_is_not_powered || vehicle_is_in_depot)) && LOAD_TEMP(3)) +
  (((LOAD_TEMP(0) - count_veh_id(ed2t_m)) >=
    ((LOAD_TEMP(0) / 2) + (LOAD_TEMP(0) % 2))) * 2) +
  (cargo_subtype * 4) 
])
{
  0: ed2t_m_notpowered_spriteset;
  1: ed2t_m_spriteset;
  2: ed2t_mr_notpowered_spriteset;
  3: ed2t_mr_spriteset;

  4: ed2t_m_v2_notpowered_spriteset;
  5: ed2t_m_v2_spriteset;
  6: ed2t_mr_v2_notpowered_spriteset;
  7: ed2t_mr_v2_spriteset;
  8: ed2t_m_v3_notpowered_spriteset;
  9: ed2t_m_v3_spriteset;
 10: ed2t_mr_v3_notpowered_spriteset;
 11: ed2t_mr_v3_spriteset;
 12: ed2t_m_v4_notpowered_spriteset;
 13: ed2t_m_v4_spriteset;
 14: ed2t_mr_v4_notpowered_spriteset;
 15: ed2t_mr_v4_spriteset;
 16: ed2t_m_v5_notpowered_spriteset;
 17: ed2t_m_v5_spriteset;
 18: ed2t_mr_v5_notpowered_spriteset;
 19: ed2t_mr_v5_spriteset;
     align_13_spriteset;
}

switch (FEAT_TRAINS, PARENT, ed2t_m_sprites_2,
[
  STORE_TEMP(vehicle_type_id == ed2t_h, 3) // для определения наличия тяги
])
{
  ed2t_m_sprites3;
}

long_vehicle(ed2t_m, )

// рисуем в депо?
switch (FEAT_TRAINS, SELF, ed2t_m_sprites_0,
  is_drawn_in_depot())
{
  1: ed2t_m_sprites_depot;
     ed2t_m_sprites;
}

// Рисуем вариант в депо
// R0 - длина  поезда, R1 - позиция вагона
// R2 - кол-во элементов С в составе
// R4 - кол-во элементов M в составе
// Реверс для П считаем по М (R4 и R5)
switch (FEAT_TRAINS, SELF, ed2t_c_sprites_depot2,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(ed2t_h) - count_veh_id(ed2t_m)
    - count_veh_id(ed2t_c), 1),
  STORE_TEMP(LOAD_TEMP(2) - count_veh_id(ed2t_c), 3),
  STORE_TEMP(LOAD_TEMP(4) - count_veh_id(ed2t_m), 5),
  ((LOAD_TEMP(1) == 2 ? (LOAD_TEMP(0) > 4) :
    LOAD_TEMP(1) == 3 ? LOAD_TEMP(0) == 7 :
    LOAD_TEMP(1) == 4 ? LOAD_TEMP(0) > 9 :
    LOAD_TEMP(1) == 5 ? (LOAD_TEMP(0) > 7) && (LOAD_TEMP(0) <= 9) :
    LOAD_TEMP(1) == 6 ? LOAD_TEMP(0) == 9 :
    LOAD_TEMP(1) == 7 ? LOAD_TEMP(0) > 9 :
    LOAD_TEMP(1) == 8 ? LOAD_TEMP(0) == 11 :
    LOAD_TEMP(1) == 9 ? LOAD_TEMP(0) > 11 : 0) * (LOAD_TEMP(3) < 4)) +
  ((LOAD_TEMP(5) > ((LOAD_TEMP(4) / 2) + (LOAD_TEMP(4) % 2))) * 2) +
  (cargo_subtype * 4)
])
{
  0: ed2t_c_wrong_place_spriteset;
  1: ed2t_c_spriteset;
  2: ed2t_cr_wrong_place_spriteset;
  3: ed2t_cr_spriteset;

  4: ed2t_c_v2_wrong_place_spriteset;
  5: ed2t_c_v2_spriteset;
  6: ed2t_cr_v2_wrong_place_spriteset;
  7: ed2t_cr_v2_spriteset;
  8: ed2t_c_v3_wrong_place_spriteset;
  9: ed2t_c_v3_spriteset;
  10: ed2t_cr_v3_wrong_place_spriteset;
  11: ed2t_cr_v3_spriteset;
  12: ed2t_c_v4_wrong_place_spriteset;
  13: ed2t_c_v4_spriteset;
  14: ed2t_cr_v4_wrong_place_spriteset;
  15: ed2t_cr_v4_spriteset;
  16: ed2t_c_v5_wrong_place_spriteset;
  17: ed2t_c_v5_spriteset;
  18: ed2t_cr_v5_wrong_place_spriteset;
  19: ed2t_cr_v5_spriteset;
  align_13_spriteset;
}

switch (FEAT_TRAINS, PARENT, ed2t_c_sprites_depot,
[
  STORE_TEMP(count_veh_id(ed2t_h) + count_veh_id(ed2t_m)
    + count_veh_id(ed2t_c), 0), // длина поезда в элементах ЭР2
  STORE_TEMP(count_veh_id(ed2t_c), 2), // для определения реверса
  STORE_TEMP(count_veh_id(ed2t_m), 4) // для определения реверса по М
])
{
  ed2t_c_sprites_depot2;
}

// Рисуем вариант не в депо
// R0 - кол-во элементов Г в составе
// Реверс для П считаем по М
switch (FEAT_TRAINS, SELF, ed2t_c_sprites3,
[
  ((LOAD_TEMP(3) - count_veh_id(ed2t_m)) >
    ((LOAD_TEMP(3) / 2) + (LOAD_TEMP(3) % 2))) +
  (cargo_subtype * 2)
])
{
  0: ed2t_c_spriteset;
  1: ed2t_cr_spriteset;
  2: ed2t_c_v2_spriteset;
  3: ed2t_cr_v2_spriteset;
  4: ed2t_c_v3_spriteset;
  5: ed2t_cr_v3_spriteset;
  6: ed2t_c_v4_spriteset;
  7: ed2t_cr_v4_spriteset;
  8: ed2t_c_v5_spriteset;
  9: ed2t_cr_v5_spriteset;
     align_13_spriteset;
}


switch (FEAT_TRAINS, PARENT, ed2t_c_sprites_2,
  STORE_TEMP(count_veh_id(ed2t_m), 3)) // для определения реверса
{
  ed2t_c_sprites3;
}

long_vehicle(ed2t_c, )

// рисуем в депо?
switch (FEAT_TRAINS, SELF, ed2t_c_sprites_0,
  is_drawn_in_depot())
{
  1: ed2t_c_sprites_depot;
     ed2t_c_sprites;
}

// Более 2-х головных вагонов нельзя
// После головного присоединять нельзя
// Более 12 вагонов в составе нельзя
switch (FEAT_TRAINS, PARENT, ed2t_h_can_attach_wagon1,
  (count_veh_id(ed2t_h) > 1) ? (LOAD_TEMP(0) == ed2t_h ? 0 : 1) :
    (num_vehs_in_consist >= 12 * 2) ? 2 : 3
)
{
  0: return string(STR_CAN_ATTACH_NO_MORE_THAN_2_HEAD);
  1: return string(STR_CAN_ATTACH_NO_AFTER_REAR_HEAD);
  2: return string(STR_CAN_ATTACH_NO_MORE_THAN_12_UNITS);
     return CB_RESULT_ATTACH_ALLOW;
}

// Можно присоединять только компоненты ЭР1
switch (FEAT_TRAINS, SELF, ed2t_h_can_attach_wagon,
  STORE_TEMP(vehicle_type_id, 0))
{
  ed2t_h: ed2t_h_can_attach_wagon1;
  ed2t_m: ed2t_h_can_attach_wagon1;
  ed2t_c: ed2t_h_can_attach_wagon1;
     return CB_RESULT_ATTACH_DISALLOW;
}

// Можно присоединять только компоненты ЭР1
switch (FEAT_TRAINS, SELF, ed2t_m_can_attach_wagon,
  vehicle_type_id)
{
  ed2t_h: return CB_RESULT_ATTACH_ALLOW;
  ed2t_m: return CB_RESULT_ATTACH_ALLOW;
  ed2t_c: return CB_RESULT_ATTACH_ALLOW;
     return CB_RESULT_ATTACH_DISALLOW;
}

// TL == 12
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop8,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(16),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(18),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(20),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(22),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_12);
}

// TL == 11
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop7,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(16),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(18),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(20),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_11);
}

// TL == 10
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop6,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(16),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(18),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_10);
}

// TL == 9
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop5,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(16),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_9);
}

// TL == 8
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop4,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_8);
}

// TL == 7
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop3,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_7);
}

// TL == 6
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop2,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_6);
}

// TL == 4
switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop1,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == ed2t_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_m), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == ed2t_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_4);
}

switch (FEAT_TRAINS, PARENT, ed2t_h_start_stop,
  // длина состава в элементах ЭР2
  count_veh_id(ed2t_h) + count_veh_id(ed2t_m) + count_veh_id(ed2t_c))
{
  4: ed2t_h_start_stop1;
  6: ed2t_h_start_stop2;
  7: ed2t_h_start_stop3;
  8: ed2t_h_start_stop4;
  9: ed2t_h_start_stop5;
  10: ed2t_h_start_stop6;
  11: ed2t_h_start_stop7;
  12: ed2t_h_start_stop8;
     return string(STR_START_STOP_WRONG_TRAIN_LENGTH_SHOULD_BE_4_6_7_8_9_10_11_12);
}

// Моторный самостоятельно выпускать из депо нельзя
switch (FEAT_TRAINS, SELF, ed2t_m_start_stop,
  0)
{
     return string(STR_START_STOP_MOTORIZED_CAR_CANNOT_LEAVE_DEPOT);
}

// Визуализируем эффекты тяги у ed2t_m, только если локомотив - ed2t_h
switch (FEAT_TRAINS, PARENT, ed2t_m_visual_effect_and_powered,
  vehicle_type_id == ed2t_h)
{
  1: return electric_visual_effect_and_powered(0);
     return disable_visual_effect_and_powered();
}

// Даём тягу, только если локомотив - ed2t_h
switch (FEAT_TRAINS, PARENT, ed2t_m_power,
  vehicle_type_id == ed2t_h)
{
  1: return get_power_in_cb(1039); 
     return 0;
}

// Допускается эксплуатация с пассажирами только если голова - ed2t_h
switch (FEAT_TRAINS, PARENT, ed2t_h_cargo_capacity,
  (vehicle_type_id == ed2t_h)
)
{
  1: return 86;
     return 0;
}

switch (FEAT_TRAINS, PARENT, ed2t_m_cargo_capacity,
  (vehicle_type_id == ed2t_h) 
)
{
  1: return 116;
     return 0;
}

switch (FEAT_TRAINS, PARENT, ed2t_c_cargo_capacity,
  (vehicle_type_id == ed2t_h) 
)
{
  1: return 116;
     return 0;
}

switch (FEAT_TRAINS, SELF, ed2t_cargo_subtype_text,
  cargo_subtype)
{
  0: string(STR_REFIT_FACTORY_62233, string(STR_REFIT_TTD_53));
  1: string(STR_REFIT_FACTORY_62233, string(STR_REFIT_FACTORY_DEMIKHOVSKII));
  2: string(STR_REFIT_FACTORY_62233, string(STR_REFIT_OCTOBER_RAILWAY));
  3: string(STR_REFIT_FACTORY_62233, string(STR_REFIT_MOSCOW_RAILWAY, ""));
  4: string(STR_REFIT_FACTORY_62233, string(STR_REFIT_UKRAINIAN_RAILWAY));
     return CB_RESULT_NO_TEXT;
}

item (FEAT_TRAINS, ed2t_h) 
{
  property
  {
    name: string(STR_ED2T_H_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1993), 1, 1);
    model_life: get_model_life(1993,1999);
    retire_early: get_retire_early(1993,1999); // VEHICLE_NEVER_EXPIRES;
    vehicle_life: 30; // срок службы
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12; 
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 130 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 86;
    weight: 44.8 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: ed2t_h_sprites_0;
    purchase: ed2t_h_purchase_sprites;
    articulated_part: articulated_part_dummy5;
    can_attach_wagon: ed2t_h_can_attach_wagon;
    start_stop: ed2t_h_start_stop;
    speed: speed_after30_130to110;
    purchase_speed: return 130;
    additional_text: return string(STR_ED2T_H_PURCHASE_HINT);
    cargo_subtype_text: ed2t_cargo_subtype_text;
    power: return 0;
    cargo_capacity: ed2t_h_cargo_capacity;
  }
}

item (FEAT_TRAINS, ed2t_m) 
{
  property
  {
    name: string(STR_ED2T_M_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(1993), 1, 1);
    model_life: get_model_life(1993,1999);
    retire_early: get_retire_early(1993,1999);
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1039 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 116;
    weight: 58.2 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(59.0, 58.2);
    length: 8;
  }
  graphics {
    default: ed2t_m_sprites_0;
    purchase: ed2t_m_purchase_sprites;
    articulated_part: articulated_part_dummy5;
    can_attach_wagon: ed2t_m_can_attach_wagon;
    start_stop: ed2t_m_start_stop;
    speed: speed_after30_130to110;
    purchase_speed: return 130;
    additional_text: return string(STR_ED2T_M_PURCHASE_HINT);
    cargo_subtype_text: ed2t_cargo_subtype_text;
    visual_effect_and_powered: ed2t_m_visual_effect_and_powered;
    power: ed2t_m_power;
    cargo_capacity: ed2t_m_cargo_capacity;
  }
}

item (FEAT_TRAINS, ed2t_c) 
{
  property
  {
    name: string(STR_ED2T_C_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(1993), 1, 1);
    model_life: get_model_life(1993,1999);
    retire_early: get_retire_early(1993,1999); // VEHICLE_NEVER_EXPIRES;
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 116;
    weight: 41.3 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: ed2t_c_sprites_0;
    purchase: ed2t_c_purchase_sprites;
    articulated_part: articulated_part_dummy5;
    additional_text: return string(STR_ED2T_C_PURCHASE_HINT);
    cargo_subtype_text: ed2t_cargo_subtype_text;
    speed: speed_after30_130to110;
    purchase_speed: return 130;
    power: return 0;
    can_attach_wagon: ed2t_m_can_attach_wagon;
    start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    cargo_capacity: ed2t_c_cargo_capacity;
  }
}

if (enable_long_names)
{
  item (FEAT_TRAINS, ed2t_h)
  {
    property
    { name: string(STR_ED2T_H_NAME_LONG); }
  }
  item (FEAT_TRAINS, ed2t_m)
  {
    property
    { name: string(STR_ED2T_M_NAME_LONG); }
  }
  item (FEAT_TRAINS, ed2t_c)
  {
    property
    { name: string(STR_ED2T_C_NAME_LONG); }
  }
}

