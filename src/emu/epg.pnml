 // epg

// Электропоезд переменного тока ЭПг - Stadler FLIRT для городских линий Минска
// ЭПг (Stadler FLIRT)

#define IMAGEFILE  "src/emu/epg.png"
purchase_sprites(epg, 0, 0)

MU_4r_0_0_sprites(11, epg,  32,  40)
MU_0_4_0_sprites(10, epg_1, 32,  40)
MU_0_4_0_sprites(10, epg_2, 32, 576)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, epg_h_sprites_left_check,
  position_in_consist == 0)
{
  1: epg_h_sprites_left;
     epg_h_notpowered_normal_sprites_left;
}

random_switch (FEAT_TRAINS, SELF, epg_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: epg_h_sprites_left_check;
  1: epg_h_sprites_left_check;
}

long_vehicle(epg)

switch (FEAT_TRAINS, SELF, epg_b_sprites_start,
[  set_offset_to(-2),
   ((LOAD_TEMP(4) != epg) * 2) +
   (prev_vehicle_randombits() % 2)])
{
  0: epg_1_m_notpowered_normal_sprites_left;
  1: epg_2_m_notpowered_normal_sprites_right;
  2: epg_1_m_notpowered_sprites_left;
  3: epg_2_m_notpowered_sprites_right;
     align_11_sprites;
}

long_vehicle_nocount(epg_b)

switch (FEAT_TRAINS, SELF, epg_c_sprites_start,
[  set_offset_to(-4),
   ((LOAD_TEMP(4) != epg) * 2) +
   (prev_vehicle_randombits() % 2)])
{
  0: epg_2_m_sprites_left;
  1: epg_1_m_sprites_right;
  2: epg_2_m_notpowered_sprites_left;
  3: epg_1_m_notpowered_sprites_right;
     align_11_sprites;
}

long_vehicle_nocount(epg_c)

switch (FEAT_TRAINS, SELF, epg_never_train, 0)
{
  1: epg_1_m_sprites_left;    
  2: epg_1_m_normal_sprites;  
  3: epg_2_m_sprites_right;   
  4: epg_2_m_r_normal_sprites;
     align_11_sprites;
}

switch (FEAT_TRAINS, SELF, epg_h_sprites_right_check,
  position_in_consist_from_end == 1)
{
  1: epg_h_sprites_right;
  0: epg_h_notpowered_normal_sprites_right;
     epg_never_train;
}

switch (FEAT_TRAINS, SELF, epg_d_sprites_start,
   LOAD_TEMP(4) == epg)
{
   1: epg_h_sprites_right_check;
      epg_h_notpowered_sprites_right;
}

long_vehicle_nocount(epg_d)

// Можно ли ещё присоединить? (1..3 секции)
switch (FEAT_TRAINS, SELF, epg_can_attach_wagon2,
  LOAD_TEMP(0) < 3)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

// считаем уже имеющиеся вагоны

switch (FEAT_TRAINS, PARENT, epg_can_attach_wagon1,
  STORE_TEMP(count_veh_id(epg), 0))
{
  epg_can_attach_wagon2;
}

switch (FEAT_TRAINS, PARENT, epg_can_attach_wagon,
  vehicle_type_id == epg)
{
  1: epg_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, epg_articulated_part,
  extra_callback_info1)
{
  1: return dummy3;
  2: return unitb;
  3: return dummy2;
  4: return unitc;
  5: return dummy2;
  6: return unitd;
  7: return dummy3;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// даём тягу, если локомотив epg
switch (FEAT_TRAINS, PARENT, epg_power,
  vehicle_type_id == epg)
{
  1: return get_power_in_cb(2719);
     return 0;
}

switch (FEAT_TRAINS, SELF, epg_c_create_effect1, 
  electric_create_effect(4)) 
{ 
  return 1; 
}    

// показываем визуальные эффекты, если локомотив epg
switch (FEAT_TRAINS, PARENT, epg_c_create_effect,
  vehicle_type_id == epg)
{
  1: epg_c_create_effect1;
     return disable_create_effect();
}

// Допускается эксплуатация с пассажирами только если голова - epg
switch (FEAT_TRAINS, PARENT, epg_cargo_capacity,
  (vehicle_type_id == epg) )
{
  1: return 260;
     return 0;
}

emu_running_cost(epg_v1, 695 * 2, 296 * 2)

switch (FEAT_TRAINS, PARENT, epg_running_cost_factor,
  vehicle_type_id == epg)
{
  1: epg_v1_running_cost_factor;
     return RC_MU_AS_CAR * 4;
}

item (FEAT_TRAINS, epg) {
  property {
    name: string(STR_EPG_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(2011), 1, 1);
    vehicle_life: 30;
    model_life: get_model_life(2011,2050);
    retire_early: get_retire_early(2011,2050);
    reliability_decay: 1;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
//    cost_factor: 274;
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 160 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    track_type: get_ac_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 2719 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    loading_speed: (30*6);
    cargo_capacity: 255;
    weight: 132 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(150.0, 132);
    length: 8;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_NONE;
  }
  graphics {
    default: epg_sprites;
    purchase: epg_purchase_sprites;
    running_cost_factor: epg_running_cost_factor;
    articulated_part: epg_articulated_part;
    can_attach_wagon: epg_can_attach_wagon;
    additional_text: return string(STR_EPG_PURCHASE_HINT, string(STR_SECTIONS_MU_S1_3of4));
    power: epg_power;
    cargo_capacity: epg_cargo_capacity;
    cost_factor: return 274;
  }
  livery_override(unitb) {
    length: return 8;
    epg_b_sprites;

  }
  livery_override(unitc) {
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
    length: return 8;
    create_effect: epg_c_create_effect;
    epg_c_sprites;

  }
  livery_override(unitd) {
    length: return 8;
    epg_d_sprites;

  }
}

if (enable_long_names) {
  item (FEAT_TRAINS, epg) {
    property { name: string(STR_EPG_NAME_LONG); }
  }
}

