 // epg
// 225 (E1h)

#define IMAGEFILE  "src/emu/epg.png"
purchase_sprites(epg, 0, 0)

MU_4r_0_0_sprites(11, epg,  32,  40)
MU_0_4_0_sprites(10, epg_1, 32,  40)
MU_0_4_0_sprites(10, epg_2, 32, 576)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, epg_h_sprites_left_check,
  position_in_consist == 0)
{
  1: epg_h_sprites_left;
     epg_h_notpowered_normal_sprites_left;
}

random_switch (FEAT_TRAINS, SELF, epg_a_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: epg_h_sprites_left_check;
  1: epg_h_sprites_left_check;
}

switch (FEAT_TRAINS, SELF, epg_b_sprites_start,
[  set_offset_to(-2),
   ((LOAD_TEMP(4) != epg) * 2) +
   (prev_vehicle_randombits() % 2)])
{
  0: epg_1_m_notpowered_normal_sprites_left;
  1: epg_2_m_notpowered_normal_sprites_right;
  2: epg_1_m_notpowered_sprites_left;
  3: epg_2_m_notpowered_sprites_right;
     align_11_sprites;
}

switch (FEAT_TRAINS, SELF, epg_c_sprites_start,
[  set_offset_to(-4),
   ((LOAD_TEMP(4) != epg) * 2) +
   (prev_vehicle_randombits() % 2)])
{
  0: epg_2_m_sprites_left;
  1: epg_1_m_sprites_right;
  2: epg_2_m_notpowered_sprites_left;
  3: epg_1_m_notpowered_sprites_right;
     align_11_sprites;
}

switch (FEAT_TRAINS, SELF, epg_never_train, 0)
{
  1: epg_1_m_sprites_left;    
  2: epg_1_m_normal_sprites;  
  3: epg_2_m_sprites_right;   
  4: epg_2_m_r_normal_sprites;
     align_11_sprites;
}

switch (FEAT_TRAINS, SELF, epg_h_sprites_right_check,
  position_in_consist_from_end == 1)
{
  1: epg_h_sprites_right;
  0: epg_h_notpowered_normal_sprites_right;
     epg_never_train;
}

switch (FEAT_TRAINS, SELF, epg_d_sprites_start,
   LOAD_TEMP(4) == epg)
{
   1: epg_h_sprites_right_check;
      epg_h_notpowered_sprites_right;
}

switch (FEAT_TRAINS, SELF, epg_sprites_start, 
  position_in_articulated_veh)    
{ 
  0: epg_a_sprites_start;
  2: epg_b_sprites_start;                                        
  4: epg_c_sprites_start;                                        
  6: epg_d_sprites_start;                                        
     dummy_sprites; 
}                                           

long_vehicle_RND(epg, epg_a_sprites_start)

// Можно ли ещё присоединить (1..3 секции)
switch (FEAT_TRAINS, SELF, epg_can_attach_wagon2,
  LOAD_TEMP(0) < 3)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

// считаем уже имеющиеся вагоны

switch (FEAT_TRAINS, PARENT, epg_can_attach_wagon1,
  STORE_TEMP(count_veh_id(epg) + count_veh_id(epr), 0))
{
  epg_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, epg_can_attach_wagon,
  (vehicle_type_id == epg) || (vehicle_type_id == epr))
{
  1: epg_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, epg_articulated_part,
  extra_callback_info1)
{
  1: return dummy3;
  2: return epg_part2;
  3: return dummy2;
  4: return epg_part2;
  5: return dummy2;
  6: return epg_part2;
  7: return dummy3;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// даём тягу, если локомотив epg
switch (FEAT_TRAINS, PARENT, epg_power,
  (vehicle_type_id == epg) || (vehicle_type_id == epr))
{
  1: return get_power_in_cb(2719);
     return 0;
}

// показываем визуальные эффекты, если локомотив epg
switch (FEAT_TRAINS, SELF, epg_c_create_effect1, 
  electric_create_effect(4)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, PARENT, epg_c_create_effect,
  (vehicle_type_id == epg) || (vehicle_type_id == epr))
{
  1: epg_c_create_effect1;
     return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, epg_create_effect,
  position_in_articulated_veh)    
{ 
  4: epg_c_create_effect;                                        
     return disable_create_effect();
}

// Допускается эксплуатация с пассажирами только если голова - epg
switch (FEAT_TRAINS, PARENT, epg_cargo_capacity,
  (vehicle_type_id == epg) || (vehicle_type_id == epr))
{
  1: return 260;
     return 0;
}

emu_running_cost(epg_v1, 439 * 2, 187 * 2)

switch (FEAT_TRAINS, PARENT, epg_running_cost_factor,
  (vehicle_type_id == epg) || (vehicle_type_id == epr))
{
  1: epg_v1_running_cost_factor;
     return RC_MU_AS_CAR * 4;
}

engine_speed(epg, 160)

item (FEAT_TRAINS, epg, 225) {
  property {
    name: string(STR_NAME_EPG);
    vehicle_dates(2011, 2050, 30, 10, 8, 255)
    vehicle_acemu(2719, 132, 200.0, 260, 30*6)
  }
  graphics {
    default: epg_sprites;
    purchase: epg_purchase_sprites;
    speed: epg_speed;
    purchase_speed: epg_purchase_speed;
    cargo_age_period: return 68;
    running_cost_factor: epg_running_cost_factor;
    articulated_part: epg_articulated_part;
    create_effect: epg_create_effect;
    can_attach_wagon: epg_can_attach_wagon;
    additional_text: return string(STR_PURCHASE_HINT_ENGINE_MU,
                                   string(STR_PURCHASE_HINT_LOADING_SPEED_2TIC),
                                   string(STR_PURCHASE_HINT_AGING_PERIOD_1_2),
                                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_SI_AC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_FLIRT)),
                                   string(STR_SECTIONS_MU_S1_3of4),
                                   string(STR_PURCHASE_HINT_FROM, 2011),
                                   string(STR_PURCHASE_HINT_FACTORY_BUSSNANG));
    power: epg_power;
    cargo_capacity: epg_cargo_capacity;
    cost_factor: return 274;
  }
}

long_name_template(epg, STR_LONGNAME_EPG)
allow_acemu(epg)

item (FEAT_TRAINS, epg_part2, 455) {
  property {
    vehicle_no_dates(2011, 2050, 30, 10, 8, 0)
    vehicle_acemu_c(1, 0, 0)
  }
  graphics {
    default: epg_sprites;
    create_effect: epg_create_effect;
  }
}
