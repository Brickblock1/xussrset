 // er1

// Спрайты
// 2 окраски, только головной с 1972 имеет замену на
// др. 2 окраски

#define IMAGEFILE  "src/emu/er1-1957-1962.png"

// вариант 1
// покупка
purchase_spriteset(er1_h, 0, 0)

purchase_spriteset(er1_m, 0, 20)

purchase_spriteset(er1_c, 0, 40)

// головной: погрузка/перемещение
spriteset (er1_h_loading_spriteset, IMAGEFILE)
{
  s12_template(608, 214, 0)
} 

spriteset (er1_h_traveling_spriteset, IMAGEFILE)
{
  s12_template(1059, 214, 0)
} 

spritegroup er1_h_spritegroup
{
  loading: er1_h_loading_spriteset;
  loaded: er1_h_traveling_spriteset;
}

// головной развёрнутый
spriteset (er1_hr_spriteset, IMAGEFILE)
{
  s12_template(608, 490, 0)
} 

// моторный
spriteset (er1_m_spriteset, IMAGEFILE)
{
  s12_template(608, 766, 0)
} 

spriteset (er1_m_notpowered_spriteset, IMAGEFILE)
{
  s12_template(157, 766, 0)
} 

// моторный развёрнутый
spriteset (er1_mr_spriteset, IMAGEFILE)
{
  s12_template(608, 904, 0)
} 

spriteset (er1_mr_notpowered_spriteset, IMAGEFILE)
{
  s12_template(157, 904, 0)
} 

// прицепной
spriteset (er1_c_spriteset, IMAGEFILE)
{
  s12_template(608, 1042, 0)
} 

spriteset (er1_cr_spriteset, IMAGEFILE)
{
  s12_template(608, 1180, 0)
} 

// вариант 2
// головной: погрузка/перемещение
spriteset (er1_h_v2_loading_spriteset, IMAGEFILE)
{
  s12_template(608, 283, 0)
} 

spriteset (er1_h_v2_traveling_spriteset, IMAGEFILE)
{
  s12_template(1059, 283, 0)
} 

spritegroup er1_h_v2_spritegroup
{
  loading: er1_h_v2_loading_spriteset;
  loaded: er1_h_v2_traveling_spriteset;
}

// головной развёрнутый
spriteset (er1_hr_v2_spriteset, IMAGEFILE)
{
  s12_template(608, 559, 0)
} 

// моторный
spriteset (er1_m_v2_spriteset, IMAGEFILE)
{
  s12_template(608, 835, 0)
} 

spriteset (er1_m_v2_notpowered_spriteset, IMAGEFILE)
{
  s12_template(157, 835, 0)
} 

// моторный развёрнутый
spriteset (er1_mr_v2_spriteset, IMAGEFILE)
{
  s12_template(608, 973, 0)
} 

spriteset (er1_mr_v2_notpowered_spriteset, IMAGEFILE)
{
  s12_template(157, 973, 0)
} 

// прицепной
spriteset (er1_c_v2_spriteset, IMAGEFILE)
{
  s12_template(608, 1111, 0)
} 

spriteset (er1_cr_v2_spriteset, IMAGEFILE)
{
  s12_template(608, 1249, 0)
} 

// вариант 3
// покупка
purchase_spriteset(er1_h_v3, 0, 0)

// головной: погрузка/перемещение
spriteset (er1_h_v3_loading_spriteset, IMAGEFILE)
{
  s12_template(608, 352, 0)
} 

spriteset (er1_h_v3_traveling_spriteset, IMAGEFILE)
{
  s12_template(1059, 352, 0)
} 

spritegroup er1_h_v3_spritegroup
{
  loading: er1_h_v3_loading_spriteset;
  loaded: er1_h_v3_traveling_spriteset;
}

// головной развёрнутый
spriteset (er1_hr_v3_spriteset, IMAGEFILE)
{
  s12_template(608, 628, 0)
} 

// вариант 4
// головной: погрузка/перемещение
spriteset (er1_h_v4_loading_spriteset, IMAGEFILE)
{
  s12_template(608, 421, 0)
} 

spriteset (er1_h_v4_traveling_spriteset, IMAGEFILE)
{
  s12_template(1059, 421, 0)
} 

spritegroup er1_h_v4_spritegroup
{
  loading: er1_h_v4_loading_spriteset;
  loaded: er1_h_v4_traveling_spriteset;
}

// головной развёрнутый
spriteset (er1_hr_v4_spriteset, IMAGEFILE)
{
  s12_template(608, 697, 0)
} 

/// паззл
// вариант 1
spriteset (er1_h_cannot_start_spriteset, IMAGEFILE)
{
  s12ui1_template(1510, 214, 0)
} 

spriteset (er1_m_cannot_start_spriteset, IMAGEFILE)
{
  s12ui1_template(1510, 766, 0)
} 

spriteset (er1_h_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 214, 0)
} 

spriteset (er1_hr_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 490, 0)
} 

spriteset (er1_m_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 766, 0)
} 

spriteset (er1_mr_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 904, 0)
} 

spriteset (er1_c_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 1042, 0)
} 

spriteset (er1_cr_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 1180, 0)
} 

// вариант 2
spriteset (er1_h_v2_cannot_start_spriteset, IMAGEFILE)
{
  s12ui1_template(1510, 283, 0)
} 

spriteset (er1_m_v2_cannot_start_spriteset, IMAGEFILE)
{
  s12ui1_template(1510, 835, 0)
} 

spriteset (er1_h_v2_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 283, 0)
} 

spriteset (er1_hr_v2_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 559, 0)
} 

spriteset (er1_m_v2_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 835, 0)
} 

spriteset (er1_mr_v2_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 973, 0)
} 

spriteset (er1_c_v2_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 1111, 0)
} 

spriteset (er1_cr_v2_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 1249, 0)
} 

// вариант 3
spriteset (er1_h_v3_cannot_start_spriteset, IMAGEFILE)
{
  s12ui1_template(1510, 352, 0)
} 

spriteset (er1_h_v3_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 352, 0)
} 

spriteset (er1_hr_v3_wrong_place_spriteset, IMAGEFILE)
{
  s12ui1_template(1588, 628, 0)
} 

// вариант 4
spriteset (er1_h_v4_cannot_start_spriteset, IMAGEFILE)
{
  s12ui1_template(1510, 421, 0)
} 

spriteset (er1_h_v4_wrong_place_spriteset, IMAGEFILE)
{                   
  s12ui1_template(1588, 421, 0)
} 

spriteset (er1_hr_v4_wrong_place_spriteset, IMAGEFILE)
{                   
  s12ui1_template(1588, 697, 0)
} 

#undef IMAGEFILE

// Рисуем вариант в депо
// R0 - длина  состава, R1 - позиция вагона в составе
// R2 - кол-во элементов Г в составе --> позиция среди элементов Г в составе
switch (FEAT_TRAINS, SELF, er1_h_get_spriteset5,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(er1_h) - count_veh_id(er1_m)
    - count_veh_id(er1_c), 1),
  STORE_TEMP(LOAD_TEMP(2) - count_veh_id(er1_h), 2),
  ((LOAD_TEMP(1) == 0) || (
    LOAD_TEMP(1) == 3 ? LOAD_TEMP(0) <= 4 :
    LOAD_TEMP(1) == 5 ? LOAD_TEMP(0) <= 6 :
    LOAD_TEMP(1) == 7 ? LOAD_TEMP(0) <= 8 :
    LOAD_TEMP(1) == 9 ? LOAD_TEMP(0) <= 10 : 0) * (LOAD_TEMP(2) < 2)) +
  ((LOAD_TEMP(2) % 2) * 2) +
  (cargo_subtype * 4) +
  ((LOAD_TEMP(3) >= date(1972,1,1)) * 8)
])
{
  0: er1_h_wrong_place_spriteset;
  1: er1_h_spritegroup;
  2: er1_hr_wrong_place_spriteset;
  3: er1_hr_spriteset;
  4: er1_h_v2_wrong_place_spriteset;
  5: er1_h_v2_spritegroup;
  6: er1_hr_v2_wrong_place_spriteset;
  7: er1_hr_v2_spriteset;
  8: er1_h_v3_wrong_place_spriteset;
  9: er1_h_v3_spritegroup;
  10: er1_hr_v3_wrong_place_spriteset;
  11: er1_hr_v3_spriteset;
  12: er1_h_v4_wrong_place_spriteset;
  13: er1_h_v4_spritegroup;
  14: er1_hr_v4_wrong_place_spriteset;
  15: er1_hr_v4_spriteset;
  align_12_spriteset;
}


switch (FEAT_TRAINS, PARENT, er1_h_get_spriteset4,
[
  STORE_TEMP(count_veh_id(er1_h) + count_veh_id(er1_m)
    + count_veh_id(er1_c), 0), // длина поезда в элементах ЭР1
  STORE_TEMP(count_veh_id(er1_h), 2), // для определения реверса
    STORE_TEMP(date_of_last_service, 3)
])
{
  er1_h_get_spriteset5;
}

// Рисуем вариант не в депо, разворачиваем каждый второй
switch (FEAT_TRAINS, SELF, er1_h_get_spriteset3,
[
  ((LOAD_TEMP(0) - count_veh_id(er1_h)) % 2) +
  (cargo_subtype * 2) +
  ((LOAD_TEMP(3) >= date(1972,1,1)) * 4)
])
{
  0: er1_h_spritegroup;
  1: er1_hr_spriteset;
  2: er1_h_v2_spritegroup;
  3: er1_hr_v2_spriteset;
  4: er1_h_v3_spritegroup;
  5: er1_hr_v3_spriteset;
  6: er1_h_v4_spritegroup;
  7: er1_hr_v4_spriteset;
  align_12_spriteset;
}

switch (FEAT_TRAINS, PARENT, er1_h_get_spriteset2,
[  STORE_TEMP(count_veh_id(er1_h), 0), // для определения реверса
  STORE_TEMP(date_of_last_service, 3)])
{
  er1_h_get_spriteset3;
}

// рисуем на карте?
switch (FEAT_TRAINS, SELF, er1_h_get_spriteset1,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  er1_h_get_spriteset2;
}

// рисуем в депо?
switch (FEAT_TRAINS, SELF, er1_h_get_spriteset,
  is_drawn_in_depot())
{
  1: er1_h_get_spriteset4;
  er1_h_get_spriteset1;
}

// Рисуем вариант в депо
// R0 - длина  поезда, R1 - позиция вагона
// R2 - кол-во элементов М в составе
switch (FEAT_TRAINS, SELF, er1_m_get_spriteset5,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(er1_h) - count_veh_id(er1_m)
    - count_veh_id(er1_c), 1),
  STORE_TEMP(LOAD_TEMP(2) - count_veh_id(er1_m), 3),
  (((LOAD_TEMP(1) == 1) || (
    LOAD_TEMP(1) == 2 ? LOAD_TEMP(0) <= 4 :
    LOAD_TEMP(1) == 3 ? LOAD_TEMP(0) > 4 :
    LOAD_TEMP(1) == 4 ? (LOAD_TEMP(0) > 4) && (LOAD_TEMP(0) <= 8) :
    LOAD_TEMP(1) == 5 ? LOAD_TEMP(0) > 8 :
    LOAD_TEMP(1) == 6 ? LOAD_TEMP(0) > 6 :
    LOAD_TEMP(1) == 8 ? LOAD_TEMP(0) > 8 : 0)) *
    ((!(vehicle_is_not_powered || vehicle_is_in_depot || LOAD_TEMP(4))) + 1) *
    (LOAD_TEMP(3) < 5)) +
  ((LOAD_TEMP(3) >= ((LOAD_TEMP(2) / 2) + (LOAD_TEMP(2) % 2))) * 3) +
  (cargo_subtype * 6)
])
{
  0: er1_m_wrong_place_spriteset;
  1: er1_m_notpowered_spriteset;
  2: er1_m_spriteset;
  3: er1_mr_wrong_place_spriteset;
  4: er1_mr_notpowered_spriteset;
  5: er1_mr_spriteset;

  6: er1_m_v2_wrong_place_spriteset;
  7: er1_m_v2_notpowered_spriteset;
  8: er1_m_v2_spriteset;
  9: er1_mr_v2_wrong_place_spriteset;
  10: er1_mr_v2_notpowered_spriteset;
  11: er1_mr_v2_spriteset;
  align_12_spriteset;
}


switch (FEAT_TRAINS, PARENT, er1_m_get_spriteset4,
[
  STORE_TEMP(count_veh_id(er1_h) + count_veh_id(er1_m)
    + count_veh_id(er1_c), 0), // длина поезда в элементах ЭР1
  STORE_TEMP(count_veh_id(er1_m), 2), // для определения реверса
  STORE_TEMP(vehicle_type_id != er1_h, 4) // локомотив не er1_h
])
{
  er1_m_get_spriteset5;
}

// Рисуем вариант не в депо
// R2 - кол-во элементов Г в составе
// R3 - наличие тяги (локомотив er1_h)
switch (FEAT_TRAINS, SELF, er1_m_get_spriteset3,
[
  ((!(vehicle_is_not_powered || vehicle_is_in_depot)) && LOAD_TEMP(3)) +
  (((LOAD_TEMP(2) - count_veh_id(er1_m)) >=
    ((LOAD_TEMP(2) / 2) + (LOAD_TEMP(2) % 2))) * 2) +
  (cargo_subtype * 4)
])
{
  0: er1_m_notpowered_spriteset;
  1: er1_m_spriteset;
  2: er1_mr_notpowered_spriteset;
  3: er1_mr_spriteset;

  4: er1_m_v2_notpowered_spriteset;
  5: er1_m_v2_spriteset;
  6: er1_mr_v2_notpowered_spriteset;
  7: er1_mr_v2_spriteset;
  align_12_spriteset;
}


switch (FEAT_TRAINS, PARENT, er1_m_get_spriteset2,
[
  STORE_TEMP(count_veh_id(er1_m), 2), // для определения реверса
  STORE_TEMP(vehicle_type_id == er1_h, 3) // для определения наличия тяги
])
{
  er1_m_get_spriteset3;
}

// рисуем на карте?
switch (FEAT_TRAINS, SELF, er1_m_get_spriteset1,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  er1_m_get_spriteset2;
}

// рисуем в депо?
switch (FEAT_TRAINS, SELF, er1_m_get_spriteset,
  is_drawn_in_depot())
{
  1: er1_m_get_spriteset4;
  er1_m_get_spriteset1;
}

// Рисуем вариант в депо
// R0 - длина  поезда, R1 - позиция вагона
// R2 - кол-во элементов М в составе
switch (FEAT_TRAINS, SELF, er1_c_get_spriteset5,
[
  STORE_TEMP(LOAD_TEMP(0) - count_veh_id(er1_h) - count_veh_id(er1_m)
    - count_veh_id(er1_c), 1),
  STORE_TEMP(LOAD_TEMP(2) - count_veh_id(er1_c), 3),
  ((LOAD_TEMP(1) == 2 ? (LOAD_TEMP(0) > 4) :
    LOAD_TEMP(1) == 4 ? LOAD_TEMP(0) > 8 :
    LOAD_TEMP(1) == 5 ? (LOAD_TEMP(0) > 6) && (LOAD_TEMP(0) <= 8) :
    LOAD_TEMP(1) == 7 ? LOAD_TEMP(0) > 8 : 0) * (LOAD_TEMP(3) < 3)) +
  ((LOAD_TEMP(3) > ((LOAD_TEMP(2) / 2) + (LOAD_TEMP(2) % 2))) * 2) +
  (cargo_subtype * 4)
])
{
  0: er1_c_wrong_place_spriteset;
  1: er1_c_spriteset;
  2: er1_cr_wrong_place_spriteset;
  3: er1_cr_spriteset;

  4: er1_c_v2_wrong_place_spriteset;
  5: er1_c_v2_spriteset;
  6: er1_cr_v2_wrong_place_spriteset;
  7: er1_cr_v2_spriteset;
  align_12_spriteset;
}


switch (FEAT_TRAINS, PARENT, er1_c_get_spriteset4,
[
  STORE_TEMP(count_veh_id(er1_h) + count_veh_id(er1_m)
    + count_veh_id(er1_c), 0), // длина поезда в элементах ЭР1
  STORE_TEMP(count_veh_id(er1_c), 2) // для определения реверса
])
{
  er1_c_get_spriteset5;
}

// Рисуем вариант не в депо
// last_computed_result - кол-во элементов Г в составе
switch (FEAT_TRAINS, SELF, er1_c_get_spriteset3,
[
  ((last_computed_result - count_veh_id(er1_c)) >
    ((last_computed_result / 2) + (last_computed_result % 2))) +
  (cargo_subtype * 2)
])
{
  0: er1_c_spriteset;
  1: er1_cr_spriteset;

  2: er1_c_v2_spriteset;
  3: er1_cr_v2_spriteset;
  align_12_spriteset;
}


switch (FEAT_TRAINS, PARENT, er1_c_get_spriteset2,
  count_veh_id(er1_c)) // для определения реверса
{
  er1_c_get_spriteset3;
}

// рисуем на карте?
switch (FEAT_TRAINS, SELF, er1_c_get_spriteset1,
  is_drawn_in_viewport() && is_hidden_at(1))
{
  1: dummy_spriteset;
  er1_c_get_spriteset2;
}

// рисуем в депо?
switch (FEAT_TRAINS, SELF, er1_c_get_spriteset,
  is_drawn_in_depot())
{
  1: er1_c_get_spriteset4;
  er1_c_get_spriteset1;
}

// покупка
switch (FEAT_TRAINS, SELF, er1_h_get_purchase_spriteset,
  (current_year >= 1972)
)
{
  0: er1_h_purchase_spriteset;
  er1_h_v3_purchase_spriteset;
}

// Более 2-х головных вагонов нельзя
// После головного присоединять нельзя
// Более 10 вагонов в составе нельзя
switch (FEAT_TRAINS, PARENT, er1_h_can_attach_wagon1,
  (count_veh_id(er1_h) > 1) ? (last_computed_result == er1_h ? 0 : 1) :
    (num_vehs_in_consist >= 10 * 2) ? 2 : 3
)
{
  0: return string(STR_CAN_ATTACH_NO_MORE_THAN_2_HEAD);
  1: return string(STR_CAN_ATTACH_NO_AFTER_REAR_HEAD);
  2: return string(STR_CAN_ATTACH_NO_MORE_THAN_10_UNITS);
  return CB_RESULT_ATTACH_ALLOW;
}

// Можно присоединять только компоненты ЭР1
switch (FEAT_TRAINS, SELF, er1_h_can_attach_wagon,
  vehicle_type_id)
{
  er1_h: er1_h_can_attach_wagon1;
  er1_m: er1_h_can_attach_wagon1;
  er1_c: er1_h_can_attach_wagon1;
  return CB_RESULT_ATTACH_DISALLOW;
}

// Можно присоединять только компоненты ЭР1
switch (FEAT_TRAINS, SELF, er1_m_can_attach_wagon,
  vehicle_type_id)
{
  er1_h: return CB_RESULT_ATTACH_ALLOW;
  er1_m: return CB_RESULT_ATTACH_ALLOW;
  er1_c: return CB_RESULT_ATTACH_ALLOW;
  return CB_RESULT_ATTACH_DISALLOW;
}

// TL == 10
switch (FEAT_TRAINS, PARENT, er1_h_start_stop4,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == er1_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_c), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_c), 0),
  set_offset_to(16),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(18),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_10);
}

// TL == 8
switch (FEAT_TRAINS, PARENT, er1_h_start_stop3,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == er1_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_c), 0),
  set_offset_to(12),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(14),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_8);
}

// TL == 6
switch (FEAT_TRAINS, PARENT, er1_h_start_stop2,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == er1_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_c), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(8),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(10),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_6);
}

// TL == 4
switch (FEAT_TRAINS, PARENT, er1_h_start_stop1,
[
  set_offset_to(2),
  STORE_TEMP(prev_vehicle_type_id() == er1_m, 0),
  set_offset_to(4),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_m), 0),
  set_offset_to(6),
  STORE_TEMP(LOAD_TEMP(0) && (prev_vehicle_type_id() == er1_h), 0),
  LOAD_TEMP(0)
])
{
  1: return CB_RESULT_NO_TEXT;
  return string(STR_START_STOP_WRONG_STRUCTURE_OF_TRAIN_4);
}

switch (FEAT_TRAINS, PARENT, er1_h_start_stop,
  // длина состава в элементах ЭР1
  count_veh_id(er1_h) + count_veh_id(er1_m) + count_veh_id(er1_c))
{
  4: er1_h_start_stop1;
  6: er1_h_start_stop2;
  8: er1_h_start_stop3;
  10: er1_h_start_stop4;
  return string(STR_START_STOP_WRONG_TRAIN_LENGTH_SHOULD_BE_4_6_8_10);
}

// Моторный самостоятельно выпускать из депо нельзя
switch (FEAT_TRAINS, SELF, er1_m_start_stop,
  0)
{
  return string(STR_START_STOP_MOTORIZED_CAR_CANNOT_LEAVE_DEPOT);
}

// Визуализируем эффекты тяги у er1_m, только если локомотив - er1_h
switch (FEAT_TRAINS, PARENT, er1_m_visual_effect_and_powered,
  vehicle_type_id == er1_h)
{
  1: return electric_visual_effect_and_powered(0);
  return disable_visual_effect_and_powered();
}

// Даём тягу, только если локомотив - er1_h
switch (FEAT_TRAINS, PARENT, er1_m_power,
  vehicle_type_id == er1_h)
{
  1: return get_power_in_cb(853); // -12 Поправка, чтобы показывалось 853
  return 0;
}

// Допускается эксплуатация с пассажирами только если голова - er1_h
switch (FEAT_TRAINS, PARENT, er1_h_cargo_capacity,
  (vehicle_type_id == er1_h)
)
{
  1: return 88;
  return 0;
}

switch (FEAT_TRAINS, PARENT, er1_m_cargo_capacity,
  (vehicle_type_id == er1_h) 
)
{
  1: return 110;
  return 0;
}

switch (FEAT_TRAINS, PARENT, er1_c_cargo_capacity,
  (vehicle_type_id == er1_h) 
)
{
  1: return 110;
  return 0;
}

switch (FEAT_TRAINS, SELF, er1_cargo_subtype_text,
  cargo_subtype)
{
  0: string(STR_REFIT_GREEN_GRASS);
  1: string(STR_REFIT_RAL_6020);
  return CB_RESULT_NO_TEXT;
}

item (FEAT_TRAINS, er1_h) 
{
  property
  {
    name: string(STR_ER1_H_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1957), 1, 1);
    model_life: get_model_life(1957,1962);
    retire_early: get_retire_early(1957,1962); // VEHICLE_NEVER_EXPIRES;
    vehicle_life: 30; // срок службы
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12; // скорость погрузки/выгрузки, пассажиров
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 130 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 88;
    weight: 38.5 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: er1_h_get_spriteset;
    purchase: er1_h_get_purchase_spriteset;
    articulated_part: articulated_part_dummy4;
    can_attach_wagon: er1_h_can_attach_wagon;
    start_stop: er1_h_start_stop;
    speed: speed_after30_130to100;
    purchase_speed: return 130;
    additional_text: return string(STR_ER1_H_PURCHASE_HINT);
    cargo_subtype_text: er1_cargo_subtype_text;
    power: return 0;
    cargo_capacity: er1_h_cargo_capacity;
  }
}

item (FEAT_TRAINS, er1_m) 
{
  property
  {
    name: string(STR_ER1_M_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(1957), 1, 1);
    model_life: get_model_life(1957,1962);
    retire_early: get_retire_early(1957,1962);
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 853 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 110;
    weight: 52.5 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(35.0, 52.5);
    length: 8;
  }
  graphics {
    default: er1_m_get_spriteset;
    purchase: er1_m_purchase_spriteset;
    articulated_part: articulated_part_dummy4;
    can_attach_wagon: er1_m_can_attach_wagon;
    start_stop: er1_m_start_stop;
    speed: speed_after30_130to100;
    purchase_speed: return 130;
    additional_text: return string(STR_ER1_M_PURCHASE_HINT);
    cargo_subtype_text: er1_cargo_subtype_text;
    visual_effect_and_powered: er1_m_visual_effect_and_powered;
    power: er1_m_power;
    cargo_capacity: er1_m_cargo_capacity;
  }
}

item (FEAT_TRAINS, er1_c) 
{
  property
  {
    name: string(STR_ER1_C_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_car_year(1957), 1, 1);
    model_life: get_model_life(1957,1962);
    retire_early: get_retire_early(1957,1962); // VEHICLE_NEVER_EXPIRES;
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 110;
    weight: 36.9 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: er1_c_get_spriteset;
    purchase: er1_c_purchase_spriteset;
    articulated_part: articulated_part_dummy4;
    additional_text: return string(STR_ER1_C_PURCHASE_HINT);
    cargo_subtype_text: er1_cargo_subtype_text;
    speed: speed_after30_130to100;
    purchase_speed: return 130;
    power: return 0;
    can_attach_wagon: er1_m_can_attach_wagon;
    start_stop: return string(STR_CANNOT_START_HEAD);
    cargo_capacity: er1_c_cargo_capacity;
  }
}
