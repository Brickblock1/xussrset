// er200_2 uses er200

#define PROP_er200_2_h_num  2
#define PROP_er200_2_n_num  0
#define PROP_er200_2_m_num  6
#define PROP_er200_2_c_num  6

#define PROP_er200_2_h_CF  35
#define PROP_er200_2_h_RC  275
#define PROP_er200_2_h_SD  200
#define PROP_er200_2_h_WT  50
#define PROP_er200_2_h_TE  0
#define PROP_er200_2_h_PR  0
#define PROP_er200_2_h_CC  24

#define PROP_er200_2_n_CF  0
#define PROP_er200_2_n_RC  0
#define PROP_er200_2_n_SD  200
#define PROP_er200_2_n_WT  0
#define PROP_er200_2_n_TE  0
#define PROP_er200_2_n_PR  0
#define PROP_er200_2_n_CC  0

#define PROP_er200_2_m_CF  39
#define PROP_er200_2_m_RC  309
#define PROP_er200_2_m_SD  200
#define PROP_er200_2_m_WT  60
#define PROP_er200_2_m_TE  35.6
#define PROP_er200_2_m_PR  1146
#define PROP_er200_2_m_CC  64

#define PROP_er200_2_c_CF  39
#define PROP_er200_2_c_RC  306
#define PROP_er200_2_c_SD  200
#define PROP_er200_2_c_WT  58
#define PROP_er200_2_c_TE  36.0
#define PROP_er200_2_c_PR  1146
#define PROP_er200_2_c_CC  64

map_sprites(er200_2_purchase_sprites, er200_h_purchase_sprites)

MU_head_direction_template_reuse(er200_2_h, er200_h, er200_2_h)
engine_direction_template3m2(er200_2_h, er200_2_m, er200_2_c, )
MU_attach_wagon_icon_template_only(er200_2_h, er200_2_h, type_head, type_car_motor_pant_car_motor_add_mandatory)
long_vehicle_sp(er200_2_h)

switch (FEAT_TRAINS, SELF, er200_2_m_sprites_3,
  ((LOAD_TEMP(0) - count_veh_id(er200_2_m)) >=
   (LOAD_TEMP(6) - count_veh_id(er200_2_c))) +
  ((LOAD_TEMP(4) != er200_2_h) * 100))
{
    0: er200_m_v1_sprites_left;
    1: er200_m_v1_sprites_right;
  100: er200_m_v1_notpowered_sprites_left;
  101: er200_m_v1_notpowered_sprites_right;
       align_15_sprites;
}

switch (FEAT_TRAINS, PARENT, er200_2_m_sprites_start,
[  STORE_TEMP(count_veh_id(er200_2_c), 6)])
{ er200_2_m_sprites_3; }

switch (FEAT_TRAINS, PARENT, er200_2_m_sprites_start6,
  count_veh_id(er200_2_m) == count_veh_id(er200_2_c))
{
  1: type_head_car_motor_add_mandatory;
     type_car_motor_add_mandatory;
}

switch (FEAT_TRAINS, PARENT, er200_2_m_sprites_start5,
  count_veh_id(er200_2_m) + count_veh_id(er200_2_c) >= 12 )
{
  1: type_head_add_mandatory;
  er200_2_m_sprites_start6;
}

switch (FEAT_TRAINS, PARENT, er200_2_m_sprites_start4,
  count_veh_id(er200_2_m) + count_veh_id(er200_2_c) < 4 )
{
  1: type_car_motor_add_mandatory;
     er200_2_m_sprites_start5;
}

MU_attach_wagon_icon_template_only(er200_2_m, er200_2_h, type_car_motor_pant, er200_2_m_sprites_start4)
long_vehicle_sp(er200_2_m)

switch (FEAT_TRAINS, SELF, er200_2_c_sprites_3,
  ((LOAD_TEMP(0) - count_veh_id(er200_2_c)) >=
   (LOAD_TEMP(6) - count_veh_id(er200_2_m))) +
  ((LOAD_TEMP(4) != er200_2_h) * 100))
{
    0: er200_c_v1_sprites_left;
    1: er200_c_v1_sprites_right;
  100: er200_c_v1_notpowered_sprites_left;
  101: er200_c_v1_notpowered_sprites_right;
       align_15_sprites;
}

switch (FEAT_TRAINS, PARENT, er200_2_c_sprites_start,
[  STORE_TEMP(count_veh_id(er200_2_m), 6)])
{ er200_2_c_sprites_3; }

switch (FEAT_TRAINS, PARENT, er200_2_c_sprites_start6,
  count_veh_id(er200_2_m) == count_veh_id(er200_2_c))
{
  1: type_head_car_motor_pant_add_mandatory;
     type_car_motor_pant_add_mandatory;
}

switch (FEAT_TRAINS, PARENT, er200_2_c_sprites_start5,
  count_veh_id(er200_2_m) + count_veh_id(er200_2_c) >= 12 )
{
  1: type_head_add_mandatory;
     er200_2_c_sprites_start6;
}

switch (FEAT_TRAINS, PARENT, er200_2_c_sprites_start4,
  count_veh_id(er200_2_m) + count_veh_id(er200_2_c) < 4 )
{
  1: type_car_motor_pant_add_mandatory;
     er200_2_c_sprites_start5;
}

MU_attach_wagon_icon_template_only(er200_2_c, er200_2_h, type_car_motor, er200_2_c_sprites_start4)
long_vehicle_sp(er200_2_c)

switch (FEAT_TRAINS, PARENT, er200_2_h_can_attach_wagon3,
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  er200_2_h: return string(STR_CAN_ATTACH_CAR_ONLY);
            return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, er200_2_h_can_attach_wagon2,
  ((count_veh_id(er200_2_h) + count_veh_id(er200_2_m) + count_veh_id(er200_2_c)) < 5) ||
  (((count_veh_id(er200_2_h) + count_veh_id(er200_2_m) + count_veh_id(er200_2_c)) % 2) == 0))
{
  1: return string(STR_CAN_ATTACH_CAR_ONLY);
     er200_2_h_can_attach_wagon3;
}

switch (FEAT_TRAINS, PARENT, er200_2_h_can_attach_wagon,
  count_veh_id(er200_2_h) > 1)
{
  1: return string(STR_CAN_ATTACH_NO_MORE_THAN_2_HEAD);
     er200_2_h_can_attach_wagon2;
}

switch (FEAT_TRAINS, PARENT, er200_2_m_can_attach_wagon,
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  er200_2_m: return string(STR_CAN_ATTACH_OTHERCAR_ONLY);
           CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, er200_2_c_can_attach_wagon,
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  er200_2_c: return string(STR_CAN_ATTACH_OTHERCAR_ONLY);
           CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, SELF, er200_2_can_attach_wagon3,
  vehicle_type_id)
{
  er200_2_h: er200_2_h_can_attach_wagon;
  er200_2_m: er200_2_m_can_attach_wagon;
  er200_2_c: er200_2_c_can_attach_wagon;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, er200_2_can_attach_wagon2,
  ((count_veh_id(er200_2_h) + count_veh_id(er200_2_m) + count_veh_id(er200_2_c)) >= 13) && (LOAD_TEMP(0) != er200_2_h))
{
  1: return string(STR_CAN_ATTACH_HEAD_ONLY);
     er200_2_can_attach_wagon3;
}

switch (FEAT_TRAINS, PARENT, er200_2_can_attach_wagon1,
  count_veh_id(er200_2_h) > 1)
{
  1: return string(STR_CAN_ATTACH_NO_AFTER_REAR_HEAD);
     er200_2_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, er200_2_can_attach_wagon,
  [STORE_TEMP(vehicle_type_id, 0),
   STORE_TEMP(build_year, 1) ])
{
  er200_2_can_attach_wagon1;
}

switch (FEAT_TRAINS, PARENT, er200_2_h_start_stop,
  count_veh_id(er200_2_h))
{
  2: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

switch (FEAT_TRAINS, SELF, er200_2_m_create_effect3,
  electric_create_effect(-3)) { return 1; }

switch (FEAT_TRAINS, SELF, er200_2_m_create_effect2,
  electric_create_effect(8)) { return 1; }

switch (FEAT_TRAINS, SELF, er200_2_m_create_effect1,
  position_in_consist % 4 == 0)
{
  0: er200_2_m_create_effect2;
     er200_2_m_create_effect3;
}

switch (FEAT_TRAINS, PARENT, er200_2_m_create_effect,
  vehicle_type_id == er200_2_h)
{
  1: er200_2_m_create_effect1;
     return disable_create_effect();
}

engine_power_MU(er200_2_m, PROP_er200_2_m_PR, er200_2_h)
engine_power_MU(er200_2_c, PROP_er200_2_c_PR, er200_2_h)
engine_capacity_MU(er200_2_h_r0, PROP_er200_2_h_CC, er200_2_h)
engine_capacity_MU(er200_2_h_r1, 16, er200_2_h)
engine_capacity_MU(er200_2_m_r0, PROP_er200_2_m_CC, er200_2_h)
engine_capacity_MU(er200_2_m_r1, 36, er200_2_h)
engine_capacity_MU(er200_2_c_r0, PROP_er200_2_c_CC, er200_2_h)
engine_capacity_MU(er200_2_c_r1, 36, er200_2_h)
engine_change_refit(er200_2_h_cargo_capacity, er200_2_h_r0_cargo_capacity, er200_2_h_r1_cargo_capacity)
engine_change_refit(er200_2_m_cargo_capacity, er200_2_m_r0_cargo_capacity, er200_2_m_r1_cargo_capacity)
engine_change_refit(er200_2_c_cargo_capacity, er200_2_c_r0_cargo_capacity, er200_2_c_r1_cargo_capacity)
engine_change_refit(er200_2_h_cargo_age_period, return 200, return 500)
engine_change_refit(er200_2_cargo_age_period, return 120, return 500)
livery_template_refit_f(er200_2, STR_REFIT_FACTORY_GENERAL_TYPE_SP, STR_REFIT_WITH_INCREASED_CP, STR_EMPTY)
engine_refit_cost_for_a2_livery_change(er200_2, 0xE0, 2, 1)

RC_head_check_new(er200_2_h, er200_2_h)
switch (FEAT_TRAINS, SELF, er200_2_h_running_cost_factor,
[  STORE_TEMP(156, 0),  // Моторы
   STORE_TEMP(22, 1),   // Бригада
   STORE_TEMP(55, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(39, 4),   // ТО
   STORE_TEMP(3, 5),    // Сертификация

   STORE_TEMP(PROP_er200_2_h_SD, 6),                                 // Скорость
   STORE_TEMP(int(PROP_er200_2_h_WT), 7),                            // Тара
   STORE_TEMP(int(PROP_er200_2_h_WT + PROP_er200_2_h_CC / 16), 8)])  // Максимальная масса
{ er200_2_h_check_running_cost_factor; }                             // 285 - 275

RC_head_check_new(er200_2_m, er200_2_h)
switch (FEAT_TRAINS, SELF, er200_2_m_running_cost_factor,
[  STORE_TEMP(176, 0),  // Моторы
   STORE_TEMP(0, 1),    // Бригада
   STORE_TEMP(60, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(41, 4),   // ТО
   STORE_TEMP(3, 5),    // Сертификация

   STORE_TEMP(PROP_er200_2_m_SD, 6),                                 // Скорость
   STORE_TEMP(int(PROP_er200_2_m_WT), 7),                            // Тара
   STORE_TEMP(int(PROP_er200_2_m_WT + PROP_er200_2_m_CC / 16), 8)])  // Максимальная масса
{ er200_2_m_check_running_cost_factor; }                             // 320 - 309

RC_head_check_new(er200_2_c, er200_2_h)
switch (FEAT_TRAINS, SELF, er200_2_c_running_cost_factor,
[  STORE_TEMP(175, 0),  // Моторы
   STORE_TEMP(0, 1),    // Бригада
   STORE_TEMP(61, 2),   // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(42, 4),   // ТО
   STORE_TEMP(3, 5),    // Сертификация

   STORE_TEMP(PROP_er200_2_c_SD, 6),                                 // Скорость
   STORE_TEMP(int(PROP_er200_2_c_WT), 7),                            // Тара
   STORE_TEMP(int(PROP_er200_2_c_WT + PROP_er200_2_c_CC / 16), 8)])  // Максимальная масса
{ er200_2_c_check_running_cost_factor; }                             // 317 - 306

name_in_group_subgroup(er200_2_h, string(STR_NAME_IN_GROUP, string(STR_NAME_ER200_SERIES), string(STR_NAME_ER200_2)),
                                  string(STR_NAME_IN_GROUP, string(STR_NAME_ER200_SERIES), string(STR_LONGNAME_ER200_2_H)),
                                  string(STR_NAME_ER200_2))
name_in_group_subgroup(er200_2_m, string(STR_NAME_IN_GROUP, string(STR_NAME_ER200_SERIES), string(STR_NAME_ER200_2)),
                                  string(STR_NAME_IN_GROUP, string(STR_NAME_ER200_SERIES), string(STR_LONGNAME_ER200_2_M)),
                                  string(STR_NAME_ER200_2))
name_in_group_subgroup(er200_2_c, string(STR_NAME_IN_GROUP, string(STR_NAME_ER200_SERIES), string(STR_NAME_ER200_2)),
                                  string(STR_NAME_IN_GROUP, string(STR_NAME_ER200_SERIES), string(STR_LONGNAME_ER200_2_C)),
                                  string(STR_NAME_ER200_2))

hint_MU_with_model2_comment(er200_2_h,
     calc_loading(16 / WAGON_DOOR),
     STR_PURCHASE_HINT_AGING_PERIOD_3_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC_WITH_SUBTYPE, 62, 287,
     STR_SECTIONS_EMU_AM6_8_10_12_14,
     1991, 1994,
     fact_rigacw(),
     string(STR_PURCHASE_HINT_EDITION_LUX))
hint_MU_with_model2_comment(er200_2_m,
     calc_loading(64 / WAGON_DOOR),
     STR_PURCHASE_HINT_AGING_PERIOD_3_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_MP_DC_WITH_SUBTYPE, 62, 286,
     STR_SECTIONS_EMU_AM6_8_10_12_14,
     1991, 1994,
     fact_rigacw(),
     string(STR_PURCHASE_HINT_LIST2_COMMENT,
            string(STR_PURCHASE_HINT_EDITION_LUX),
            string(STR_PURCHASE_HINT_PROVIDES_POWER_TO, string(STR_NAME_ER200_2), string(STR_UNITS_POWER_METRIC, PROP_er200_2_m_PR), string(STR_UNITS_FORCE_METRIC, round(PROP_er200_2_m_TE * KN2KGS)))))
hint_MU_with_model2_comment(er200_2_c,
     calc_loading(64 / WAGON_DOOR),
     STR_PURCHASE_HINT_AGING_PERIOD_3_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_MN_DC_WITH_SUBTYPE, 62, 288,
     STR_SECTIONS_EMU_AM6_8_10_12_14,
     1991, 1994,
     fact_rigacw(),
     string(STR_PURCHASE_HINT_LIST2_COMMENT,
            string(STR_PURCHASE_HINT_EDITION_LUX),
            string(STR_PURCHASE_HINT_PROVIDES_POWER_TO, string(STR_NAME_ER200_2), string(STR_UNITS_POWER_METRIC, PROP_er200_2_c_PR), string(STR_UNITS_FORCE_METRIC, round(PROP_er200_2_c_TE * KN2KGS)))))
map_sprites(er200_2_additional_text, er200_2_h_additional_text)

item (FEAT_TRAINS, er200_2_h, 812) {
  property {
    name: string(STR_NAME_ER200_2);
    vehicle_dates(1991, 1994, 30, 10, 8, PROP_er200_2_h_CF)
    vehicle_emu_c(dc, PROP_er200_2_h_WT, PROP_er200_2_h_CC, WAGON_DOOR, _highspeed)
    vehicle_group(er200_group)
  }
  graphics {
  purchase_menu(PROP_er200_2_h_CF, PROP_er200_2_h_RC, PROP_er200_2_h_SD, PROP_er200_2_h_WT, PROP_er200_2_h_TE, PROP_er200_2_h_PR, PROP_er200_2_h_CC)
        additional_text: er200_2_h_additional_text;
       articulated_part: articulated_part_dummy7;
       can_attach_wagon: er200_2_can_attach_wagon;
       cargo_age_period: er200_2_h_cargo_age_period;
         cargo_capacity: er200_2_h_cargo_capacity;
     cargo_subtype_text: er200_2_cargo_subtype_text;
         colour_mapping: any_cc_colour;
                default: er200_2_h_sprites;
                   name: er200_2_h_name;
                  power: return 0;
               purchase: er200_h_purchase_sprites;
             refit_cost: er200_2_refit_cost;
    running_cost_factor: er200_2_h_running_cost_factor;
                  speed: return 200;
             start_stop: er200_2_h_start_stop;
  }
}

item (FEAT_TRAINS, er200_2_m, 813) {
  property {
    name: string(STR_NAME_ER200_2);
    vehicle_dates(1991, 1994, 30, 10, 8, PROP_er200_2_m_CF)
    vehicle_emu_wagon(dc, PROP_er200_2_m_WT, PROP_er200_2_m_CC, WAGON_DOOR, _highspeed)
    vehicle_group_mu(er200_2_h)
  }
  graphics {
  purchase_menu(PROP_er200_2_m_CF, PROP_er200_2_m_RC, PROP_er200_2_m_SD, PROP_er200_2_m_WT, PROP_er200_2_m_TE, PROP_er200_2_m_PR, PROP_er200_2_m_CC)
                additional_text: er200_2_m_additional_text;
               articulated_part: articulated_part_dummy7;
               can_attach_wagon: er200_2_can_attach_wagon;
               cargo_age_period: er200_2_cargo_age_period;
                 cargo_capacity: er200_2_m_cargo_capacity;
             cargo_subtype_text: er200_2_cargo_subtype_text;
                 colour_mapping: any_cc_colour;
                  create_effect: er200_2_m_create_effect;
                        default: er200_2_m_sprites;
                           name: er200_2_m_name;
                          power: er200_2_m_power;
                       purchase: er200_m_purchase_sprites;
                     refit_cost: er200_2_refit_cost;
            running_cost_factor: er200_2_m_running_cost_factor;
                          speed: return 200;
                     start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    tractive_effort_coefficient: return get_tec_int(PROP_er200_2_m_TE, PROP_er200_2_m_WT);
  }
}

item (FEAT_TRAINS, er200_2_c, 814) {
  property {
    name: string(STR_NAME_ER200_2);
    vehicle_dates(1991, 1994, 30, 10, 8, PROP_er200_2_c_CF)
    vehicle_emu_wagon(dc, PROP_er200_2_c_WT, PROP_er200_2_c_CC, WAGON_DOOR, _highspeed)
    vehicle_group_mu(er200_2_h)
  }
  graphics {
  purchase_menu(PROP_er200_2_c_CF, PROP_er200_2_c_RC, PROP_er200_2_c_SD, PROP_er200_2_c_WT, PROP_er200_2_c_TE, PROP_er200_2_c_PR, PROP_er200_2_c_CC)
                additional_text: er200_2_c_additional_text;
               articulated_part: articulated_part_dummy7;
               can_attach_wagon: er200_2_can_attach_wagon;
               cargo_age_period: er200_2_cargo_age_period;
                 cargo_capacity: er200_2_c_cargo_capacity;
             cargo_subtype_text: er200_2_cargo_subtype_text;
                 colour_mapping: any_cc_colour;
                        default: er200_2_c_sprites;
                           name: er200_2_c_name;
                          power: er200_2_c_power;
                       purchase: er200_c_purchase_sprites;
                     refit_cost: er200_2_refit_cost;
            running_cost_factor: er200_2_c_running_cost_factor;
                          speed: return 200;
                     start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    tractive_effort_coefficient: return get_tec_int(PROP_er200_2_c_TE, PROP_er200_2_c_WT);
  }
}

long_name_template(er200_2_h, STR_LONGNAME_ER200_2_H)
long_name_template(er200_2_m, STR_LONGNAME_ER200_2_M)
long_name_template(er200_2_c, STR_LONGNAME_ER200_2_C)
allow_dcemu(er200_2_h)
allow_dcemu(er200_2_m)
allow_dcemu(er200_2_c)
