 // er200

// Спрайты

#define IMAGEFILE  "src/emu/er200.png"
purchase_sprites(er200_h, 0, 0)
purchase_sprites(er200_m, 120, 0)
purchase_sprites(er200_c, 240, 0)

emu_3r_0_0_sprites(15, er200_v1, 32, 40)
emu_0_3_0_sprites(15, er200_v1, 32, 40)
emu_0_0_2_sprites(15, er200_v1, 32, 40)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, er200_h_sprites_2,
  ((LOAD_TEMP(0) - count_veh_id(er200_h)) % 2) +
  ((LOAD_TEMP(4) != er200_h) * 100) )
{
    0: er200_v1_h_sprites_left;
    1: er200_v1_h_sprites_right;
  100: er200_v1_h_notpowered_sprites_left;
  101: er200_v1_h_notpowered_sprites_right;
       align_15_sprites;
}

long_vehicle(er200_h)

switch (FEAT_TRAINS, SELF, er200_m_sprites_3,
  ((LOAD_TEMP(0) - count_veh_id(er200_m)) >=
   (LOAD_TEMP(6) - count_veh_id(er200_c))) +
  ((LOAD_TEMP(4) != er200_h) * 100) )
{
    0: er200_v1_m_sprites_left;
    1: er200_v1_m_sprites_right;
  100: er200_v1_m_notpowered_sprites_left;
  101: er200_v1_m_notpowered_sprites_right;
       align_15_sprites;
}

switch (FEAT_TRAINS, PARENT, er200_m_sprites_2,
[ 
  STORE_TEMP(count_veh_id(er200_c), 6)
])                                                          
{ 
  er200_m_sprites_3; 
}                               

long_vehicle(er200_m)

switch (FEAT_TRAINS, SELF, er200_c_sprites_3,
  ((LOAD_TEMP(0) - count_veh_id(er200_c)) >=
   (LOAD_TEMP(6) - count_veh_id(er200_m))) +
  ((LOAD_TEMP(4) != er200_h) * 100) )
{
    0: er200_v1_c_sprites_left;
    1: er200_v1_c_sprites_right;
  100: er200_v1_c_notpowered_sprites_left;
  101: er200_v1_c_notpowered_sprites_right;
       align_15_sprites;
}

switch (FEAT_TRAINS, PARENT, er200_c_sprites_2,
[ 
  STORE_TEMP(count_veh_id(er200_m), 6)
])                                                          
{ 
  er200_c_sprites_3; 
}                               

long_vehicle(er200_c)

switch (FEAT_TRAINS, PARENT, er200_h_can_attach_wagon_2, 
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  er200_h: return string(STR_CAN_ATTACH_CAR_ONLY);
           return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, er200_h_can_attach_wagon, 
  (count_veh_id(er200_h) > 1) ? 0 : 
  (((count_veh_id(er200_h) + count_veh_id(er200_m) + count_veh_id(er200_c)) < 5) ||
  ((count_veh_id(er200_h) + count_veh_id(er200_m) + count_veh_id(er200_c)) % 2 == 0 ) ) ? 1 : 2)
{
  0: return string(STR_CAN_ATTACH_NO_MORE_THAN_2_HEAD);
  1: return string(STR_CAN_ATTACH_CAR_ONLY);
     er200_h_can_attach_wagon_2;
}

switch (FEAT_TRAINS, PARENT, er200_m_can_attach_wagon, 
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  er200_m: return string(STR_CAN_ATTACH_OTHERCAR_ONLY);
           return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, er200_c_can_attach_wagon, 
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  er200_c: return string(STR_CAN_ATTACH_OTHERCAR_ONLY);
           return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, SELF, er200_can_attach_wagon2,
  vehicle_type_id)
{
  er200_h: er200_h_can_attach_wagon;
  er200_m: er200_m_can_attach_wagon;
  er200_c: er200_c_can_attach_wagon;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, er200_can_attach_wagon1,
  (count_veh_id(er200_h) > 1) ? 0 : 
  (((count_veh_id(er200_h) + count_veh_id(er200_m) + count_veh_id(er200_c)) >= 9) && (LOAD_TEMP(0) != er200_h)) ? 1 : 2)
{
  0: return string(STR_CAN_ATTACH_NO_AFTER_REAR_HEAD);
  1: return string(STR_CAN_ATTACH_HEAD_ONLY);
     er200_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, er200_can_attach_wagon,
  STORE_TEMP(vehicle_type_id, 0))
{
  er200_can_attach_wagon1;
}

switch (FEAT_TRAINS, PARENT, er200_h_start_stop,
  count_veh_id(er200_h))
{
  2: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

// Моторный самостоятельно выпускать из депо нельзя
switch (FEAT_TRAINS, SELF, er200_m_start_stop,
  0)
{
     return string(STR_START_STOP_MOTORIZED_CAR_CANNOT_LEAVE_DEPOT);
}

// Визуализируем эффекты тяги у er200_m, только если локомотив - er200_h
switch (FEAT_TRAINS, SELF, er200_m_visual_effect_and_powered1,
  position_in_consist % 4 == 0
)
{
  0: return electric_visual_effect_and_powered(7);
     return electric_visual_effect_and_powered(-3);
}

switch (FEAT_TRAINS, PARENT, er200_m_visual_effect_and_powered,
  vehicle_type_id == er200_h)
{
  1: er200_m_visual_effect_and_powered1;
     return disable_visual_effect_and_powered();
}

// Даём тягу, только если локомотив - er200_h
switch (FEAT_TRAINS, PARENT, er200_m_power,
  vehicle_type_id == er200_h)
{
  1: return get_power_in_cb(1146); 
     return 0;
}

// Допускается эксплуатация с пассажирами только если голова - er200_h
switch (FEAT_TRAINS, PARENT, er200_h_cargo_capacity,
  (vehicle_type_id == er200_h) )
{
  1: return 16;
     return 0;
}

switch (FEAT_TRAINS, PARENT, er200_m_cargo_capacity,
  (vehicle_type_id == er200_h) )
{
  1: return 64;
     return 0;
}

switch (FEAT_TRAINS, PARENT, er200_c_cargo_capacity,
  (vehicle_type_id == er200_h) )
{
  1: return 64;
     return 0;
}

item (FEAT_TRAINS, er200_h) 
{
  property
  {
    name: string(STR_ER200_H_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1979), 1, 1);
    model_life: get_model_life(1979,1992);
    retire_early: get_retire_early(1979,1992);
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12; 
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 16;
    weight: 48.7 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    length: 8;
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: er200_h_sprites;
    purchase: er200_h_purchase_sprites;
    articulated_part: articulated_part_dummy7;
    can_attach_wagon: er200_can_attach_wagon;
    start_stop: er200_h_start_stop;
    speed: return 200;
    purchase_speed: return 200;
    additional_text: return string(STR_ER200_H_PURCHASE_HINT, string(STR_SECTIONS_EMU_AM6_8_10));
    power: return 0;
    cargo_capacity: er200_h_cargo_capacity;
  }
}

item (FEAT_TRAINS, er200_m) 
{
  property
  {
    name: string(STR_ER200_M_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1979), 1, 1);
    model_life: get_model_life(1979,1992);
    retire_early: get_retire_early(1979,1992);
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1146 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 64;
    weight: 58.5 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(36.0, 58.5);
    length: 8;
  }
  graphics {
    default: er200_m_sprites;
    purchase: er200_m_purchase_sprites;
    articulated_part: articulated_part_dummy7;
    can_attach_wagon: er200_can_attach_wagon;
    start_stop: er200_m_start_stop;
    speed: return 200;
    purchase_speed: return 200;
    additional_text: return string(STR_ER200_M_PURCHASE_HINT, string(STR_SECTIONS_EMU_AM6_8_10));
    visual_effect_and_powered: er200_m_visual_effect_and_powered;
    power: er200_m_power;
    cargo_capacity: er200_m_cargo_capacity;
  }
}

item (FEAT_TRAINS, er200_c) 
{
  property
  {
    name: string(STR_ER200_C_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1979), 1, 1);
    model_life: get_model_life(1979,1992);
    retire_early: get_retire_early(1979,1992);
    vehicle_life: 30;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    loading_speed: 12;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    refit_cost: 0;
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 1146 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    cargo_capacity: 64;
    weight: 56.5 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    length: 8;
    tractive_effort_coefficient: get_tec(36.0, 56.5);
    visual_effect_and_powered: disable_visual_effect_and_powered();
  }
  graphics {
    default: er200_c_sprites;
    purchase: er200_c_purchase_sprites;
    articulated_part: articulated_part_dummy7;
    additional_text: return string(STR_ER200_C_PURCHASE_HINT, string(STR_SECTIONS_EMU_AM6_8_10));
    speed: return 200;
    purchase_speed: return 200;
    can_attach_wagon: er200_can_attach_wagon;
    start_stop: er200_m_start_stop;
    power: er200_m_power;
    cargo_capacity: er200_c_cargo_capacity;
  }
}

if (enable_long_names)
{
  item (FEAT_TRAINS, er200_h)
  {
    property
    { name: string(STR_ER200_H_NAME_LONG); }
  }
  item (FEAT_TRAINS, er200_m)
  {
    property
    { name: string(STR_ER200_M_NAME_LONG); }
  }
  item (FEAT_TRAINS, er200_c)
  {
    property
    { name: string(STR_ER200_C_NAME_LONG); }
  }
}

