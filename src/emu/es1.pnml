 // es1

#define IMAGEFILE  "src/emu/es1.png"
purchase_sprites(es1, 0, 0)

MU_4r_0_0_sprites(15, es1, 32, 40)
MU_0_4_0_sprites(14,  es1, 32, 40)
MU_0_0_2_sprites(14,  es1, 32, 40)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, es1_h_sprites_left_check, 
  position_in_consist == 0)
{
  1: es1_h_sprites_left;
     es1_h_notpowered_normal_sprites_left;
}

random_switch (FEAT_TRAINS, SELF, es1_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: es1_h_sprites_left_check;
  1: es1_h_sprites_left_check;
}

long_vehicle(es1)

switch (FEAT_TRAINS, SELF, es1_h_sprites_right_check, 
  position_in_consist_from_end == 1)
{
  1: es1_h_sprites_right;
     es1_h_notpowered_normal_sprites_right;
}           

switch (FEAT_TRAINS, SELF, es1_never_train, 0)
{
   1: es1_m_sprites_right;   
   2: es1_m_r_normal_sprites;
      align_14_sprites;
}

switch (FEAT_TRAINS, SELF, es1_b_sprites_start,
[  set_offset_to(-position_in_articulated_veh),
   ((LOAD_TEMP(4) != es1) * 200) +
   (prev_vehicle_randombits() % 2) * 100 +
   position_in_articulated_veh])
{
   2: es1_m_notpowered_normal_sprites_right;
   4: es1_c_sprites_left;
   6: es1_m_sprites_left;
   8: es1_h_sprites_right_check;

 102: es1_m_notpowered_normal_sprites_right;
 104: es1_c_sprites_right;
 106: es1_m_sprites_left;
 108: es1_h_sprites_right_check;

 202: es1_m_notpowered_sprites_right;
 204: es1_c_notpowered_sprites_left;
 206: es1_m_notpowered_sprites_left;
 208: es1_h_notpowered_sprites_right;
                               
 302: es1_m_notpowered_sprites_right;
 304: es1_c_notpowered_sprites_right;
 306: es1_m_notpowered_sprites_left;
 308: es1_h_notpowered_sprites_right;

 777: es1_never_train;

      align_14_sprites;
}

long_vehicle_nocount(es1_b)

switch (FEAT_TRAINS, SELF, es1_articulated_part,
  extra_callback_info1)
{
  1: return dummy7;
  2: return unitb;
  3: return dummy6;
  4: return unitb;
  5: return dummy6;
  6: return unitb;
  7: return dummy6;
  8: return unitb;
  9: return dummy7;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// даём тягу, если локомотив es1
switch (FEAT_TRAINS, PARENT, es1_power,
  vehicle_type_id == es1)
{
  1: return get_power_in_cb(3467); 
     return 0;
}

switch (FEAT_TRAINS, SELF, es1_b_create_effect3, 
  electric_create_effect(7)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, SELF, es1_b_create_effect2,
  position_in_articulated_veh == 6)
{
  1: es1_b_create_effect3;
     return disable_create_effect();
}                                               

// показываем визуальные эффекты, если локомотив es1
switch (FEAT_TRAINS, PARENT, es1_b_create_effect,
  vehicle_type_id == es1)
{
  1: es1_b_create_effect2;
     return disable_create_effect();
}

// Допускается эксплуатация с пассажирами только если голова - es1
switch (FEAT_TRAINS, PARENT, es1_cargo_capacity,
  (vehicle_type_id == es1) )
{
  1: return 443;
     return 0;
}

switch (FEAT_TRAINS, SELF, es1_can_attach_wagon2,
  LOAD_TEMP(0) <= 1)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, PARENT, es1_can_attach_wagon1,
  STORE_TEMP(count_veh_id(es1), 0) )
{
  es1_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, es1_can_attach_wagon,
  vehicle_type_id == es1)
{
  1: es1_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, es1_additional_text,
  current_year >= 2014 )
{
  1: return string(STR_ES1_PURCHASE_HINT);
     return string(STR_ES1_PURCHASE_HINT_PRE);
}

emu_running_cost(es1_v1, 893*2, 401*3)

switch (FEAT_TRAINS, PARENT, es1_running_cost_factor,
  vehicle_type_id == es1)
{
  1: es1_v1_running_cost_factor;
     return RC_MU_AS_CAR * 5;
}                     

item (FEAT_TRAINS, es1) {
  property {
    name: string(STR_ES1_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(2011), 1, 1);
    vehicle_life: 40; // срок службы
    model_life: get_model_life(2011,2050);
    retire_early: get_retire_early(2011,2050); // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 10;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
//    cost_factor: 506;
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    track_type: get_dual_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 3467 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    speed: 160 km/h;
    loading_speed: (25*2*5);
    cargo_capacity: 255;
    weight: 263.2 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(160.0, 263.2);
    length: 8;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_NONE;
  }
  graphics {
    default: es1_sprites;
    purchase: es1_purchase_sprites;
    cargo_age_period: return 90;
    running_cost_factor: es1_running_cost_factor;
    articulated_part: es1_articulated_part;
    can_attach_wagon: es1_can_attach_wagon;
    additional_text: es1_additional_text;
    power: es1_power;
    cargo_capacity: es1_cargo_capacity;
    cost_factor: return 506;
    colour_mapping: return ttdall_cc + 0xC6;
  }
  livery_override(unitb) {
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
    length: return 8;
    create_effect: es1_b_create_effect;
            es1_b_sprites;
  }  
}

if (enable_long_names) {
  item (FEAT_TRAINS, es1) {
    property { name: string(STR_ES1_NAME_LONG); }
  }
}

