 // es1
// 413 (19Dh), 453

#define IMAGEFILE  "src/emu/es1_h.png"
purchase_sprites(es1, 0, 0)
MU_head_middle_sprites(15, es1_h, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/es1_m.png"
EMU_motor1_middle_sprites(14, es1_m, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/es1_c.png"
MU_car_sprites(14, es1_c, 32, 40)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, es1_h_sprites_left_check,
  position_in_consist == 0)
{
  1: es1_h_sprites_left;
     es1_h_notpowered_normal_sprites_left;
}

random_switch (FEAT_TRAINS, SELF, es1_h_sprites_start,
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: es1_h_sprites_left_check;
  1: es1_h_sprites_left_check;
}

switch (FEAT_TRAINS, SELF, es1_h_sprites_right_check,
  position_in_consist_from_end == 1)
{
  1: es1_h_sprites_right;
     es1_h_notpowered_normal_sprites_right;
}

switch (FEAT_TRAINS, SELF, es1_never_train, 0)
{
   1: es1_m_sprites_right;
   2: es1_m_r_normal_sprites;
      align_14_sprites;
}

switch (FEAT_TRAINS, SELF, es1_sprites_start,
[  set_offset_to(-position_in_articulated_veh),
   ((LOAD_TEMP(4) != es1) * 200) +
   (prev_vehicle_randombits() % 2) * 100 +
   position_in_articulated_veh])
{
   0: es1_h_sprites_start;
   2: es1_m_notpowered_normal_sprites_right;
   4: es1_c_sprites_left;
   6: es1_m_sprites_left;
   8: es1_h_sprites_right_check;

 100: es1_h_sprites_start;
 102: es1_m_notpowered_normal_sprites_right;
 104: es1_c_sprites_right;
 106: es1_m_sprites_left;
 108: es1_h_sprites_right_check;

 200: es1_h_sprites_start;
 202: es1_m_notpowered_sprites_right;
 204: es1_c_notpowered_sprites_left;
 206: es1_m_notpowered_sprites_left;
 208: es1_h_notpowered_sprites_right;

 300: es1_h_sprites_start;
 302: es1_m_notpowered_sprites_right;
 304: es1_c_notpowered_sprites_right;
 306: es1_m_notpowered_sprites_left;
 308: es1_h_notpowered_sprites_right;

 777: es1_never_train;

      align_14_sprites;
}

long_vehicle_RND(es1, es1_h_sprites_start)

switch (FEAT_TRAINS, SELF, es1_articulated_part,
  extra_callback_info1)
{
  1: return dummy7;
  2: return es1_part2;
  3: return dummy6;
  4: return es1_part2;
  5: return dummy6;
  6: return es1_part2;
  7: return dummy6;
  8: return es1_part2;
  9: return dummy7;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// даём тягу, если локомотив es1
switch (FEAT_TRAINS, PARENT, es1_power,
  vehicle_type_id == es1)
{
  1: return get_power_in_cb(3467);
     return 0;
}

switch (FEAT_TRAINS, SELF, es1_create_effect3,
  electric_create_effect(7))
{
  return 1;
}

switch (FEAT_TRAINS, SELF, es1_create_effect2,
  position_in_articulated_veh == 6)
{
  1: es1_create_effect3;
     return disable_create_effect();
}

// показываем визуальные эффекты, если локомотив es1
switch (FEAT_TRAINS, PARENT, es1_create_effect,
  vehicle_type_id == es1)
{
  1: es1_create_effect2;
     return disable_create_effect();
}

// Допускается эксплуатация с пассажирами только если голова - es1
switch (FEAT_TRAINS, SELF, es1_cargo_capacity1,
  position_in_articulated_veh)
{
  0: return 443;
     return 0;
}

switch (FEAT_TRAINS, PARENT, es1_cargo_capacity,
  (vehicle_type_id == es1))
{
  1: es1_cargo_capacity1;
     return 0;
}

switch (FEAT_TRAINS, SELF, es1_can_attach_wagon2,
  LOAD_TEMP(0) <= 1)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, PARENT, es1_can_attach_wagon1,
  STORE_TEMP(count_veh_id(es1), 0))
{
  es1_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, es1_can_attach_wagon,
  vehicle_type_id == es1)
{
  1: es1_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, es1_additional_text,
  current_year >= 2014 )
{
  0: return string(STR_PURCHASE_HINT_ENGINE_MU,
                   string(STR_PURCHASE_HINT_LOADING_SPEED_2TIC),
                   string(STR_PURCHASE_HINT_AGING_PERIOD_2_2),
                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_SR_ACDC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_DESIRO)),
                   string(STR_SECTIONS_MU_S1_2of5),
                   string(STR_PURCHASE_HINT_FROM, 2011),
                   string(STR_PURCHASE_HINT_FACTORY_SIEMENS));
     return string(STR_PURCHASE_HINT_ENGINE_MU,
                   string(STR_PURCHASE_HINT_LOADING_SPEED_2TIC),
                   string(STR_PURCHASE_HINT_AGING_PERIOD_2_2),
                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_SR_ACDC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_DESIRO)),
                   string(STR_SECTIONS_MU_S1_2of5),
                   string(STR_PURCHASE_HINT_FROM, 2011),
                   string(STR_PURCHASE_HINT_FACTORY_URAL));
}

emu_running_cost(es1_v1, 687*2, 308*3)

switch (FEAT_TRAINS, PARENT, es1_running_cost_factor,
  vehicle_type_id == es1)
{
  1: es1_v1_running_cost_factor;
     return RC_MU_AS_CAR * 5;
}

engine_speed(es1, 160)

item (FEAT_TRAINS, es1, 413) {
  property {
    name: string(STR_NAME_ES1);
    vehicle_dates(2011, 2050, 40, 10, 8, 255)
    vehicle_acdcemu(3467, 263.2, 256.0, 443, 25*2*5)
  }
  graphics {
    default: es1_sprites;
    purchase: es1_purchase_sprites;
    speed: es1_speed;
    cargo_age_period: return 90;
    running_cost_factor: es1_running_cost_factor;
    articulated_part: es1_articulated_part;
    can_attach_wagon: es1_can_attach_wagon;
    additional_text: es1_additional_text;
    power: es1_power;
    cargo_capacity: es1_cargo_capacity;
    cost_factor: return 506;
    colour_mapping: any_cc_colour;
    create_effect: es1_create_effect;
    cargo_subtype_text: return string(STR_REFIT_FACTORY);
    purchase_speed: return 160;
  }
}

long_name_template(es1, STR_LONGNAME_ES1)
allow_acdcemu(es1)

item (FEAT_TRAINS, es1_part2, 453) {
  property {
    vehicle_no_dates(2011, 2050, 40, 10, 8, 0)
    vehicle_acdcemu_empty()
  }
  graphics {
    default: es1_sprites;
    create_effect: es1_create_effect;
  }
}
