// esh2

#define PROP_esh2_h_num  2
#define PROP_esh2_n_num  0
#define PROP_esh2_m_num  2
#define PROP_esh2_c_num  2

#define PROP_esh2_h_CF  220
#define PROP_esh2_h_RC  1711
#define PROP_esh2_h_SD  160
#define PROP_esh2_h_WT  60
#define PROP_esh2_h_TE  0
#define PROP_esh2_h_PR  0
#define PROP_esh2_h_CC  84

#define PROP_esh2_h2_CF  220
#define PROP_esh2_h2_RC  1711
#define PROP_esh2_h2_SD  160
#define PROP_esh2_h2_WT  60
#define PROP_esh2_h2_TE  0
#define PROP_esh2_h2_PR  0
#define PROP_esh2_h2_CC  120

#define PROP_esh2_n_CF  0
#define PROP_esh2_n_RC  0
#define PROP_esh2_n_SD  160
#define PROP_esh2_n_WT  0
#define PROP_esh2_n_TE  0
#define PROP_esh2_n_PR  0
#define PROP_esh2_n_CC  0

#define PROP_esh2_m_CF  235
#define PROP_esh2_m_RC  1824
#define PROP_esh2_m_SD  160
#define PROP_esh2_m_WT  59
#define PROP_esh2_m_TE  200.0
#define PROP_esh2_m_PR  2176
#define PROP_esh2_m_CC  94

#define PROP_esh2_m2_CF  117
#define PROP_esh2_m2_RC  909
#define PROP_esh2_m2_SD  160
#define PROP_esh2_m2_WT  58
#define PROP_esh2_m2_TE  100.0
#define PROP_esh2_m2_PR  1088
#define PROP_esh2_m2_CC  94

#define PROP_esh2_c_CF  136
#define PROP_esh2_c_RC  1060
#define PROP_esh2_c_SD  160
#define PROP_esh2_c_WT  55.5
#define PROP_esh2_c_TE  0
#define PROP_esh2_c_PR  0
#define PROP_esh2_c_CC  152

#define IMAGEFILE  "src/emu/esh2_h1.png"
purchase_sprites(esh2_h1, 0, 0)
MU_head_middle_sp_sprites(17, esh2_h1_mu, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/esh2_h2.png"
purchase_sprites(esh2_h2, 0, 0)
MU_head_middle_sp_sprites(17, esh2_h2_mu, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/esh2_c.png"
purchase_sprites(esh2_c, 0, 0)
MU_car_sprites(15, esh2_c, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/esh2_m1.png"
purchase_sprites(esh2_m1, 0, 0)
MU_car_sprites(13, esh2_m1, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/esh2_m2.png"
purchase_sprites(esh2_m2, 0, 0)
MU_car_sprites(13, esh2_m2, 32, 40)
#undef IMAGEFILE
map_sprites(esh2_purchase_sprites, esh2_h1_purchase_sprites)

MU_head_middle_sp_direction_template2(esh2_h1, esh2_h1, esh2_h2)

switch (FEAT_TRAINS, SELF, esh2_h1_sprites_start_sp3,
[ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100),
  ((LOAD_TEMP(0) - count_veh_id(esh2_h1) - count_veh_id(esh2_h2)) % 2) ] )
{
  0: esh2_h1_sprites_left;
     esh2_h1_sprites_right;
}

switch (FEAT_TRAINS, PARENT, esh2_h1_sprites_start,
[ STORE_TEMP(LOAD_TEMP(0) + count_veh_id(esh2_h2), 0) ])
{  esh2_h1_sprites_start_sp3; }

MU_attach_wagon_icon_template2_only3_shift(esh2_h1, esh2_h1, esh2_h2, type_head_pant, type_car_motor_add_mandatory, type_head_pant_add_optional, type_head_pant_add_optional, 2)
long_vehicle_sp(esh2_h1)

MU_head_middle_sp_direction_template2(esh2_h2, esh2_h1, esh2_h2)

switch (FEAT_TRAINS, SELF, esh2_h2_sprites_start_sp3,
[ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100),
  ((LOAD_TEMP(0) - count_veh_id(esh2_h1) - count_veh_id(esh2_h2)) % 2) ] )
{
  0: esh2_h2_sprites_left;
     esh2_h2_sprites_right;
}

switch (FEAT_TRAINS, PARENT, esh2_h2_sprites_start,
[ STORE_TEMP(LOAD_TEMP(0) + count_veh_id(esh2_h1), 0) ])
{  esh2_h2_sprites_start_sp3; }

MU_attach_wagon_icon_template2_only3_shift(esh2_h2, esh2_h1, esh2_h2, type_head_pant, type_car_motor_add_mandatory, type_head_pant_add_optional, type_head_pant_add_optional, 2)
long_vehicle_sp(esh2_h2)

switch (FEAT_TRAINS, SELF, esh2_c_sprites_start,
[ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100),
  set_offset_to(-2),
  prev_vehicle_type_id() ])
{
  esh2_c: esh2_c_sprites_right;
          esh2_c_sprites_left;
}

switch (FEAT_TRAINS, SELF, esh2_c_sprites_start4,
[ set_offset_to(-2),
  prev_vehicle_type_id() ])
{
  esh2_c: type_car_motor_add_mandatory;
          type_car_motor_car_add_mandatory;
}

MU_attach_wagon_icon_template2_only(esh2_c, esh2_h1, esh2_h2, type_car, esh2_c_sprites_start4)
long_vehicle_sp(esh2_c)

switch (FEAT_TRAINS, SELF, esh2_m1_sprites_start,
[ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100) ,
  set_offset_to(-2),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: esh2_m1_sprites_left;
                esh2_m1_sprites_right;
}

switch (FEAT_TRAINS, SELF, esh2_m1_sprites_start4,
[ set_offset_to(-2),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: type_car_motor_car_add_mandatory;
                type_head_pant_add_mandatory;
}

MU_attach_wagon_icon_template2_only(esh2_m1, esh2_h1, esh2_h2, type_car_motor, esh2_m1_sprites_start4)
long_vehicle_sp(esh2_m1)

switch (FEAT_TRAINS, SELF, esh2_m2_sprites_start,
[ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100),
  set_offset_to(-2),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: esh2_m2_sprites_left;
                esh2_m2_sprites_right;
}

switch (FEAT_TRAINS, SELF, esh2_m2_sprites_start4,
[ set_offset_to(-2),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: type_car_motor_add_mandatory;
                type_head_pant_add_mandatory;
}

MU_attach_wagon_icon_template2_only(esh2_m2, esh2_h1, esh2_h2, type_car_motor, esh2_m2_sprites_start4)
long_vehicle_sp(esh2_m2)

switch (FEAT_TRAINS, PARENT, esh2_can_attach_wagon_length,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) > 5)
{
  0: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon2,
[
  set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id() ])

{
  esh2_m1: esh2_can_attach_wagon_length;
  esh2_m2: esh2_can_attach_wagon_length;
   esh2_c: esh2_can_attach_wagon_length;
    return string(STR_CAN_ATTACH_MCAR_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])

{
  esh2_h_part2: return string(STR_CAN_ATTACH_MCAR_ONLY);
       esh2_m1: esh2_can_attach_wagon_length;
       esh2_m2: esh2_can_attach_wagon_length;
        esh2_c: esh2_can_attach_wagon_length;
          return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: return string(STR_CAN_ATTACH_MCAR_ONLY);
  esh2_h_part2: esh2_h1_can_attach_wagon2;
       esh2_m1: esh2_h1_can_attach_wagon1;
       esh2_m2: esh2_h1_can_attach_wagon1;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_c2_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return CB_RESULT_ATTACH_ALLOW;
                return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_c_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_c: return string(STR_CAN_ATTACH_MCAR_ONLY);
          return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, esh2_c_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: esh2_c_can_attach_wagon1;
  esh2_h_part2: return string(STR_CAN_ATTACH_MCAR_ONLY);
       esh2_m1: esh2_c2_can_attach_wagon1;
       esh2_m2: return string(STR_CAN_ATTACH_MCAR_ONLY);
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m1_can_attach_wagon_h,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  0: return string(STR_CAN_ATTACH_HEAD_ONLY);
     return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, esh2_m2_can_attach_wagon1,
[
  set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return CB_RESULT_ATTACH_ALLOW;
                return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m2_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: return string(STR_CAN_ATTACH_MCAR_ONLY);
  esh2_h_part2: esh2_m1_can_attach_wagon_h;
       esh2_m1: esh2_m2_can_attach_wagon1;
       esh2_m2: return string(STR_CAN_ATTACH_SAME_MU_ONLY);
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m1_can_attach_wagon,
[
  set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: return CB_RESULT_ATTACH_ALLOW;
  esh2_h_part2: esh2_m1_can_attach_wagon_h;
       esh2_m1: esh2_m2_can_attach_wagon1;
       esh2_m2: esh2_m2_can_attach_wagon1;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, esh2_can_attach_wagon,
  vehicle_type_id)
{
  esh2_h1: esh2_h1_can_attach_wagon;
  esh2_h2: esh2_h1_can_attach_wagon;
  esh2_m1: esh2_m1_can_attach_wagon;
  esh2_m2: esh2_m2_can_attach_wagon;
   esh2_c: esh2_c_can_attach_wagon;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_start_stop,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  0: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

switch (FEAT_TRAINS, SELF, esh2_h_articulated_part, extra_callback_info1)
{
  1: return dummy7;
  2: return esh2_h_part2;
  3: return dummy1;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

engine_electric1r_1_effect(esh2_h1_create_effect_sprites, 12, -3)
switch (FEAT_TRAINS, SELF, esh2_h1_create_effect_sprites_ml,
[  set_offset_to(4),
  ((prev_vehicle_type_id() == esh2_c) ||
   (prev_vehicle_type_id() == esh2_m1) ||
   (prev_vehicle_type_id() == esh2_m2)) ])
{ 1: esh2_h1_create_effect_sprites_left;
     return disable_create_effect(); }
switch (FEAT_TRAINS, SELF, esh2_h1_create_effect_sprites_start,
[  set_offset_to(-2),
  ((prev_vehicle_type_id() == esh2_c) ||
   (prev_vehicle_type_id() == esh2_m1) ||
   (prev_vehicle_type_id() == esh2_m2)) ])
{ 1: esh2_h1_create_effect_sprites_right;
     esh2_h1_create_effect_sprites_ml; }
engine_effects_MU2(esh2_h1, _create_effect_sprites_start, esh2_h1, esh2_h2)

engine_power_MU2(esh2_m1, PROP_esh2_m_PR, esh2_h1, esh2_h2)
engine_power_MU2(esh2_m2, PROP_esh2_m2_PR, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_h1, PROP_esh2_h_CC, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_h2, PROP_esh2_h2_CC, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_m1, PROP_esh2_m_CC, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_m2, PROP_esh2_m2_CC, esh2_h1, esh2_h2)
engine_capacity_MU2(esh2_c, PROP_esh2_c_CC, esh2_h1, esh2_h2)

RC_head_check2(esh2_h1, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h1_running_cost_factor,
[  STORE_TEMP(975, 0),  // Моторы
   STORE_TEMP(137, 1),  // Бригада
   STORE_TEMP(342, 2),  // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(240, 4),  // ТО
   STORE_TEMP(17, 5),   // Сертификация

   STORE_TEMP(PROP_esh2_h_SD, 6),                                // Скорость
   STORE_TEMP(round(PROP_esh2_h_WT), 7),                         // Тара
   STORE_TEMP(round(PROP_esh2_h_WT + PROP_esh2_h_CC / 16), 8)])  // Максимальная масса
{ esh2_h1_check_running_cost_factor; }                           //

RC_head_check2(esh2_h2, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h2_running_cost_factor,
[  STORE_TEMP(975, 0),  // Моторы
   STORE_TEMP(137, 1),  // Бригада
   STORE_TEMP(342, 2),  // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(240, 4),  // ТО
   STORE_TEMP(17, 5),   // Сертификация

   STORE_TEMP(PROP_esh2_h_SD, 6),                                  // Скорость
   STORE_TEMP(round(PROP_esh2_h2_WT), 7),                          // Тара
   STORE_TEMP(round(PROP_esh2_h2_WT + PROP_esh2_h2_CC / 16), 8)])  // Максимальная масса
{ esh2_h2_check_running_cost_factor; }                             //

RC_head_check2(esh2_m1, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_m1_running_cost_factor,
[  STORE_TEMP(1040, 0),  // Моторы
   STORE_TEMP(146, 1),   // Бригада
   STORE_TEMP(365, 2),   // Износ
   STORE_TEMP(0, 3),     // Сопровождение
   STORE_TEMP(255, 4),   // ТО
   STORE_TEMP(18, 5),    // Сертификация

   STORE_TEMP(PROP_esh2_m_SD, 6),                                // Скорость
   STORE_TEMP(round(PROP_esh2_m_WT), 7),                         // Тара
   STORE_TEMP(round(PROP_esh2_m_WT + PROP_esh2_m_CC / 16), 8)])  // Максимальная масса
{ esh2_m1_check_running_cost_factor; }                           //

RC_head_check2(esh2_m2, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_m2_running_cost_factor,
[  STORE_TEMP(518, 0),  // Моторы
   STORE_TEMP(73, 1),   // Бригада
   STORE_TEMP(182, 2),  // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(127, 4),  // ТО
   STORE_TEMP(9, 5),    // Сертификация

   STORE_TEMP(PROP_esh2_m2_SD, 6),                                 // Скорость
   STORE_TEMP(round(PROP_esh2_m2_WT), 7),                          // Тара
   STORE_TEMP(round(PROP_esh2_m2_WT + PROP_esh2_m2_CC / 16), 8)])  // Максимальная масса
{ esh2_m2_check_running_cost_factor; }                             //

RC_head_check2(esh2_c, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_c_running_cost_factor,
[  STORE_TEMP(604, 0),  // Моторы
   STORE_TEMP(85, 1),   // Бригада
   STORE_TEMP(212, 2),  // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(148, 4),  // ТО
   STORE_TEMP(11, 5),   // Сертификация

   STORE_TEMP(PROP_esh2_c_SD, 6),                                // Скорость
   STORE_TEMP(round(PROP_esh2_c_WT), 7),                         // Тара
   STORE_TEMP(round(PROP_esh2_c_WT + PROP_esh2_c_CC / 16), 8)])  // Максимальная масса
{ esh2_c_check_running_cost_factor; }                            //

name_in_group(esh2_h1, string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_NAME_ESH2)),
                       string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_LONGNAME_ESH2_H1)))
name_in_group(esh2_h2, string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_NAME_ESH2)),
                       string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_LONGNAME_ESH2_H2)))
name_in_group(esh2_m1, string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_NAME_ESH2)),
                       string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_LONGNAME_ESH2_M1)))
name_in_group(esh2_m2, string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_NAME_ESH2)),
                       string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_LONGNAME_ESH2_M2)))
name_in_group(esh2_c,  string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_NAME_ESH2)),
                       string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_LONGNAME_ESH2_C)))

hint_MU_with_subtype_noto(esh2_h1,
     calc_loading(PROP_esh2_h_CC / (2 * WIDER_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_2_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014,
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
hint_MU_with_subtype_noto(esh2_h2,
     calc_loading(PROP_esh2_h2_CC / (2 * WIDER_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014,
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
hint_MU_with_subtype_noto_PTE(esh2_m1,
     calc_loading(PROP_esh2_m_CC / (2 * WIDER_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_MP_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014,
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK),
     string(STR_NAME_ESH2), PROP_esh2_m_PR, PROP_esh2_m_TE)
hint_MU_with_subtype_noto_PTE(esh2_m2,
     calc_loading(PROP_esh2_m2_CC / (2 * WIDER_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_MP_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014,
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK),
     string(STR_NAME_ESH2), PROP_esh2_m2_PR, PROP_esh2_m2_TE)
hint_MU_with_subtype_noto(esh2_c,
     calc_loading(PROP_esh2_c_CC / (2 * WIDER_D_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_C_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014,
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
map_sprites(esh2_additional_text, esh2_h1_additional_text)

item (FEAT_TRAINS, esh2_h1, 647) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, PROP_esh2_h_CF)
    vehicle_emu_c(dc, PROP_esh2_h_WT, PROP_esh2_h_CC, 2 * WIDER_D_DOOR, _highspeed)
    vehicle_allow_tourists()
    vehicle_group(esh2_group)
  }
  graphics {
  purchase_menu(PROP_esh2_h_CF, PROP_esh2_h_RC, PROP_esh2_h_SD, PROP_esh2_h_WT, PROP_esh2_h_TE, PROP_esh2_h_PR, PROP_esh2_h_CC)
                power: return 0;
                 name: esh2_h1_name;
      additional_text: esh2_h1_additional_text;
     articulated_part: esh2_h_articulated_part;
     can_attach_wagon: esh2_can_attach_wagon;
     cargo_age_period: return 120;
       cargo_capacity: esh2_h1_cargo_capacity;
       colour_mapping: any_cc_colour;
        create_effect: esh2_h1_create_effect;
              default: esh2_h1_sprites;
             purchase: esh2_h1_purchase_sprites;
           refit_cost: return 0 | CB_RESULT_AUTOREFIT;
  running_cost_factor: esh2_h1_running_cost_factor;
                speed: return 160;
           start_stop: esh2_h1_start_stop;
  }
}

item (FEAT_TRAINS, esh2_h2, 648) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, PROP_esh2_h2_CF)
    vehicle_emu_c(dc, PROP_esh2_h2_WT, PROP_esh2_h2_CC, 2 * WIDER_D_DOOR, _highspeed)
    vehicle_group_mu(esh2_group)
  }
  graphics {
  purchase_menu(PROP_esh2_h2_CF, PROP_esh2_h2_RC, PROP_esh2_h2_SD, PROP_esh2_h2_WT, PROP_esh2_h2_TE, PROP_esh2_h2_PR, PROP_esh2_h2_CC)
        additional_text: esh2_h2_additional_text;
       articulated_part: esh2_h_articulated_part;
       can_attach_wagon: esh2_can_attach_wagon;
       cargo_age_period: return 60;
         cargo_capacity: esh2_h2_cargo_capacity;
         colour_mapping: any_cc_colour;
          create_effect: esh2_h1_create_effect;
                default: esh2_h2_sprites;
                   name: esh2_h2_name;
                  power: return 0;
               purchase: esh2_h2_purchase_sprites;
    running_cost_factor: esh2_h2_running_cost_factor;
                  speed: return 160;
             start_stop: esh2_h1_start_stop;
  }
}

item (FEAT_TRAINS, esh2_m1, 649) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, PROP_esh2_m_CF)
    vehicle_emu_wagon(dc, PROP_esh2_m_WT, PROP_esh2_m_CC, 2 * WIDER_D_DOOR, _highspeed)
    vehicle_group_mu(esh2_group)
  }
  graphics {
  purchase_menu_wagon(PROP_esh2_m_CF, PROP_esh2_m_RC, PROP_esh2_m_SD, PROP_esh2_m_WT, PROP_esh2_m_TE, PROP_esh2_m_PR, PROP_esh2_m_CC)
                additional_text: esh2_m1_additional_text;
               articulated_part: articulated_part_dummy5;
               can_attach_wagon: esh2_can_attach_wagon;
               cargo_age_period: return 60;
                 cargo_capacity: esh2_m1_cargo_capacity;
                 colour_mapping: any_cc_colour;
                  create_effect: return disable_create_effect();
                        default: esh2_m1_sprites;
                           name: esh2_m1_name;
                          power: esh2_m1_power;
                       purchase: esh2_m1_purchase_sprites;
            running_cost_factor: esh2_m1_running_cost_factor;
                          speed: return 160;
                     start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    tractive_effort_coefficient: return get_tec_int(PROP_esh2_m_TE, PROP_esh2_m_WT);
  }
}

item (FEAT_TRAINS, esh2_m2, 650) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, PROP_esh2_m2_CF)
    vehicle_emu_wagon(dc, PROP_esh2_m2_WT, PROP_esh2_m2_CC, 2 * WIDER_D_DOOR, _highspeed)
    vehicle_group_mu(esh2_group)
  }
  graphics {
  purchase_menu_wagon(PROP_esh2_m2_CF, PROP_esh2_m2_RC, PROP_esh2_m2_SD, PROP_esh2_m2_WT, PROP_esh2_m2_TE, PROP_esh2_m2_PR, PROP_esh2_m2_CC)
                additional_text: esh2_m2_additional_text;
               articulated_part: articulated_part_dummy5;
               can_attach_wagon: esh2_can_attach_wagon;
               cargo_age_period: return 60;
                 cargo_capacity: esh2_m2_cargo_capacity;
                 colour_mapping: any_cc_colour;
                  create_effect: return disable_create_effect();
                        default: esh2_m2_sprites;
                           name: esh2_m2_name;
                          power: esh2_m2_power;
                       purchase: esh2_m2_purchase_sprites;
            running_cost_factor: esh2_m2_running_cost_factor;
                          speed: return 160;
                     start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
    tractive_effort_coefficient: return get_tec_int(PROP_esh2_m2_TE, PROP_esh2_m2_WT);
  }
}

item (FEAT_TRAINS, esh2_c, 651) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2050, 40, 10, 8, PROP_esh2_c_CF)
    vehicle_emu_wagon(dc, PROP_esh2_c_WT, PROP_esh2_c_CC, 2 * WIDER_D_DOOR, _highspeed)
    vehicle_group_mu(esh2_group)
  }
  graphics {
  purchase_menu_wagon(PROP_esh2_c_CF, PROP_esh2_c_RC, PROP_esh2_c_SD, PROP_esh2_c_WT, PROP_esh2_c_TE, PROP_esh2_c_PR, PROP_esh2_c_CC)
        additional_text: esh2_c_additional_text;
       articulated_part: articulated_part_dummy7;
       can_attach_wagon: esh2_can_attach_wagon;
       cargo_age_period: return 60;
         cargo_capacity: esh2_c_cargo_capacity;
         colour_mapping: any_cc_colour;
          create_effect: return disable_create_effect();
                default: esh2_c_sprites;
                   name: esh2_c_name;
               purchase: esh2_c_purchase_sprites;
    running_cost_factor: esh2_c_running_cost_factor;
                  speed: return 160;
             start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
  }
}

engine_capacity_MU2(esh2_h_part2, 4, esh2_h1, esh2_h2)

item (FEAT_TRAINS, esh2_h_part2, 653) {
  property {
    vehicle_no_dates(2014, 2050, 30, 10, 1, 0)
    vehicle_emu_c(dc, 0, 4, 4, _highspeed)  // 4 места 2 класса в вагоне 1 класса
  }
  graphics {
    cargo_age_period: return 370;
      cargo_capacity: esh2_h_part2_cargo_capacity;
       create_effect: return disable_create_effect();
             default: dummy_sprites;
  }
}

long_name_template(esh2_h1, STR_LONGNAME_ESH2_H1)
long_name_template(esh2_h2, STR_LONGNAME_ESH2_H2)
long_name_template(esh2_m1, STR_LONGNAME_ESH2_M1)
long_name_template(esh2_m2, STR_LONGNAME_ESH2_M2)
long_name_template(esh2_c,  STR_LONGNAME_ESH2_C)
allow_dcemu(esh2_h1)
allow_dcemu(esh2_h2)
allow_dcemu(esh2_m1)
allow_dcemu(esh2_m2)
allow_dcemu(esh2_c)
