// esh2

#define PROP_esh2_h_num  2
#define PROP_esh2_n_num  0
#define PROP_esh2_m_num  2
#define PROP_esh2_c_num  2

#define PROP_esh2_h_CF  220
#define PROP_esh2_h_RC  1711
#define PROP_esh2_h_SD  160
#define PROP_esh2_h_WT  60
#define PROP_esh2_h_TE  0
#define PROP_esh2_h_PR  0
#define PROP_esh2_h_CC  84

#define PROP_esh2_n_CF  0
#define PROP_esh2_n_RC  0
#define PROP_esh2_n_SD  0
#define PROP_esh2_n_WT  0
#define PROP_esh2_n_TE  0
#define PROP_esh2_n_PR  0
#define PROP_esh2_n_CC  0

#define IMAGEFILE  "src/emu/esh2_h1.png"
purchase_sprites_with_icon(esh2_h1, 18, 0, 3dc)
MU_head_middle_sp_sprites(17, esh2_h1_mu, 32, 40)
#undef IMAGEFILE
map_sprites(esh2_purchase_sprites, esh2_h1_purchase_sprites)

MU_power_template2(esh2_h1, esh2_h1, esh2_h2)

// ESH2 uses 17-th template and because of that can't use standart template

switch (FEAT_TRAINS, SELF, esh2_h1_sprites_right_check,
  (position_in_consist_from_end == 3) &&
  ((LOAD_TEMP(4) == esh2_h1) ||
   (LOAD_TEMP(4) == esh2_h2) ))
{ 1: esh2_h1_mu_regular_sprites_right;
     esh2_h1_sprites_right; }

switch (FEAT_TRAINS, SELF, esh2_h1_sprites_old2,
[ set_offset_to(4),
  (prev_vehicle_type_id() == esh2_h1) ||
  (prev_vehicle_type_id() == esh2_h2) ||
  (position_in_consist == 0) ])
{ 1: esh2_h1_sprites_left;
     esh2_h1_sprites_right_check; }
switch (FEAT_TRAINS, SELF, esh2_h1_sprites_old,
  ((LOAD_TEMP(0) - count_veh_id(esh2_h1) -
    count_veh_id(esh2_h2) - count_veh_id(esh2_m1) -
    count_veh_id(esh2_m2) - count_veh_id(esh2_c) + 1) % 2))
{ 1: esh2_h1_sprites_old2;
     esh2_h1_sprites_right_check;}
switch (FEAT_TRAINS, SELF, esh2_h1_sprites_ml,
[  set_offset_to(4),
  ((prev_vehicle_type_id() == esh2_m1) ||
   (prev_vehicle_type_id() == esh2_m2) ||
   (prev_vehicle_type_id() == esh2_c)) ])
{ 1: esh2_h1_sprites_left;
     esh2_h1_sprites_old; }
switch (FEAT_TRAINS, SELF, esh2_h1_sprites_start,
[  set_offset_to(-2),
  ((prev_vehicle_type_id() == esh2_m1) ||
   (prev_vehicle_type_id() == esh2_m2) ||
   (prev_vehicle_type_id() == esh2_c)) ])
{ 1: esh2_h1_sprites_right_check;
     esh2_h1_sprites_ml; }

MU_attach_wagon_icon_template2_only3_shift(esh2_h1, esh2_h1, esh2_h2, type_head_pant, type_car_motor_add_mandatory, type_head_pant_add_optional, type_head_pant_add_optional, 2)
long_vehicle_advanced(esh2_h1, esh2_h1_sprites_start_sp)

switch (FEAT_TRAINS, PARENT, esh2_can_attach_wagon_length,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) > 5)
{
  0: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon2,
[ set_offset_to(num_vehs_in_consist-6),
  prev_vehicle_type_id() ])

{
  esh2_m1: esh2_can_attach_wagon_length;
  esh2_m2: esh2_can_attach_wagon_length;
   esh2_c: esh2_can_attach_wagon_length;
    return string(STR_CAN_ATTACH_MCAR_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon1,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])

{
  esh2_h_part2: return string(STR_CAN_ATTACH_MCAR_ONLY);
       esh2_m1: esh2_can_attach_wagon_length;
       esh2_m2: esh2_can_attach_wagon_length;
        esh2_c: esh2_can_attach_wagon_length;
          return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_can_attach_wagon,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: return string(STR_CAN_ATTACH_MCAR_ONLY);
  esh2_h_part2: esh2_h1_can_attach_wagon2;
       esh2_m1: esh2_h1_can_attach_wagon1;
       esh2_m2: esh2_h1_can_attach_wagon1;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_c2_can_attach_wagon1,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return CB_RESULT_ATTACH_ALLOW;
                return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_c_can_attach_wagon1,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_c: return string(STR_CAN_ATTACH_MCAR_ONLY);
          return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, esh2_c_can_attach_wagon,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: esh2_c_can_attach_wagon1;
  esh2_h_part2: return string(STR_CAN_ATTACH_MCAR_ONLY);
       esh2_m1: esh2_c2_can_attach_wagon1;
       esh2_m2: return string(STR_CAN_ATTACH_MCAR_ONLY);
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m1_can_attach_wagon_h,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  0: return string(STR_CAN_ATTACH_HEAD_ONLY);
     return CB_RESULT_ATTACH_ALLOW;
}

switch (FEAT_TRAINS, PARENT, esh2_m2_can_attach_wagon1,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  esh2_h_part2: return CB_RESULT_ATTACH_ALLOW;
                return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m2_can_attach_wagon,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: return string(STR_CAN_ATTACH_MCAR_ONLY);
  esh2_h_part2: esh2_m1_can_attach_wagon_h;
       esh2_m1: esh2_m2_can_attach_wagon1;
       esh2_m2: return string(STR_CAN_ATTACH_SAME_MU_ONLY);
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_m1_can_attach_wagon,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
        esh2_c: return CB_RESULT_ATTACH_ALLOW;
  esh2_h_part2: esh2_m1_can_attach_wagon_h;
       esh2_m1: esh2_m2_can_attach_wagon1;
       esh2_m2: esh2_m2_can_attach_wagon1;
           return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, esh2_can_attach_wagon,
  vehicle_type_id)
{
  esh2_h1: esh2_h1_can_attach_wagon;
  esh2_h2: esh2_h1_can_attach_wagon;
  esh2_m1: esh2_m1_can_attach_wagon;
  esh2_m2: esh2_m2_can_attach_wagon;
   esh2_c: esh2_c_can_attach_wagon;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, esh2_h1_start_stop,
  (count_veh_id(esh2_h1) + count_veh_id(esh2_h2)) % 2)
{
  0: return CB_RESULT_NO_TEXT;
     return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
}

switch (FEAT_TRAINS, SELF, esh2_h_articulated_part, extra_callback_info1)
{
  1: return dummy7;
  2: return esh2_h_part2;
  3: return dummy1;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

engine_electric1r_1_effect(esh2_h1_create_effect_sprites, 12, -3)
engine_direction_template5m3(esh2_h1_create_effect, esh2_h1,  esh2_h2, esh2_m1, esh2_m2, esh2_c)
engine_effects_MU2(esh2_h1, _create_effect_sprites_start, esh2_h1, esh2_h2)

engine_capacity_MU2(esh2_h1, PROP_esh2_h_CC, esh2_h1, esh2_h2)

RC_head_check2(esh2_h1, esh2_h1, esh2_h2)
switch (FEAT_TRAINS, SELF, esh2_h1_running_cost_factor,
[  STORE_TEMP(975, 0),  // Моторы
   STORE_TEMP(137, 1),  // Бригада
   STORE_TEMP(342, 2),  // Износ
   STORE_TEMP(0, 3),    // Сопровождение
   STORE_TEMP(240, 4),  // ТО
   STORE_TEMP(17, 5),   // Сертификация

   STORE_TEMP(PROP_esh2_h_SD, 6),                                // Скорость
   STORE_TEMP(round(PROP_esh2_h_WT), 7),                         // Тара
   STORE_TEMP(round(PROP_esh2_h_WT + PROP_esh2_h_CC / 16), 8)])  // Максимальная масса
{ esh2_h1_check_running_cost_factor; }                           //

name_in_group(esh2_h1, string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_NAME_ESH2)),
                       string(STR_NAME_IN_GROUP, string(STR_NAME_ESH2_SERIES), string(STR_LONGNAME_ESH2_H1)))

hint_MU_with_subtype(esh2_h1,
     calc_loading(PROP_esh2_h_CC / (2 * WIDER_D_DOOR)),
     STR_PURCHASE_HINT_CAP_001_NORMAL,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC_WITH_SUBTYPE, STR_PURCHASE_HINT_KISS,
     STR_SECTIONS_EMU_ESH2,
     2014, 2017,
     string(STR_PURCHASE_HINT_FACTORY_BUSSNANG_MINSK))
map_sprites(esh2_additional_text, esh2_h1_additional_text)

item (FEAT_TRAINS, esh2_h1, 647) {
  property {
    name: string(STR_NAME_ESH2);
    vehicle_dates(2014, 2017, 40, 10, 8, PROP_esh2_h_CF)
    vehicle_emu_c(dc, PROP_esh2_h_WT, PROP_esh2_h_CC, 2 * WIDER_D_DOOR, _highspeed)
    vehicle_tourists()
    vehicle_group(group_esh2)
  }
  graphics {
  purchase_menu(PROP_esh2_h_CF, PROP_esh2_h_RC, PROP_esh2_h_SD, PROP_esh2_h_WT, PROP_esh2_h_TE, PROP_esh2_h_PR, PROP_esh2_h_CC)
        additional_text: esh2_h1_additional_text;
       articulated_part: esh2_h_articulated_part;
       can_attach_wagon: esh2_can_attach_wagon;
       cargo_age_period: return CAP_001_NORMAL;
         cargo_capacity: esh2_h1_cargo_capacity;
         colour_mapping: any_cc_colour;
          create_effect: esh2_h1_create_effect;
                default: esh2_h1_sprites;
                   name: esh2_h1_name;
                  power: return 0;
               purchase: esh2_h1_purchase_sprites;
             refit_cost: return 0 | CB_RESULT_AUTOREFIT;
    running_cost_factor: esh2_h1_running_cost_factor;
                  speed: return 160;
             start_stop: esh2_h1_start_stop;
  }
}

engine_capacity_MU2(esh2_h_part2, 4, esh2_h1, esh2_h2)

item (FEAT_TRAINS, esh2_h_part2, 653) {
  property {
    vehicle_no_dates(2014, 2017, 30, 10, 1, 0)
    vehicle_emu_c(dc, 0, 4, 4, _highspeed)  // 4 места 2 класса в вагоне 1 класса
  }
  graphics {
    cargo_age_period: return CAP_00075_ACCELERATED;
      cargo_capacity: esh2_h_part2_cargo_capacity;
       create_effect: return disable_create_effect();
             default: dummy_sprites;
  }
}

long_name_template(esh2_h1, STR_LONGNAME_ESH2_H1)
allow_dcemu(esh2_h1)
