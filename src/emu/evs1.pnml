 // evs1

// Спрайты

#define IMAGEFILE  "src/emu/evs.png"

purchase_sprites(evs1, 0, 0)

MU_3r_0_0_sprites(15, evs1_gbt, 32, 40)
MU_0_4_0_sprites(14, evs1_dt,  32, 40)
MU_0_0_2_sprites(14, evs1_t,   32, 40)
MU_2_0_0_sprites(15, evs1_gbt_middle, 32, 576)
MU_0_4_0_sprites(14, evs1_ttr, 32, 576)
MU_0_0_2_sprites(14, evs1_tt,  32, 576)
MU_0_0_2_sprites(14, evs1_ta,  32, 1112)
MU_0_0_1_sprites(14, evs1_tab, 32, 1380)

#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, evs1_gbt_h_sprites_left_check,
  position_in_consist == 0)
{
  1: evs1_gbt_h_sprites_left;
     evs1_gbt_middle_h_sprites_left;
}

random_switch (FEAT_TRAINS, SELF, evs1_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: evs1_gbt_h_sprites_left_check;
  1: evs1_gbt_h_sprites_left_check;
}

long_vehicle(evs1)

switch (FEAT_TRAINS, SELF, evs1_gbt_h_sprites_right_check,
  position_in_consist_from_end == 1)
{
  1: evs1_gbt_h_sprites_right;
     evs1_gbt_middle_h_sprites_right;
}

switch (FEAT_TRAINS, SELF, evs1_gbt_h_notpowered_sprites_right_check,
[  set_offset_to(2),
   prev_vehicle_type_id() == evs1])
{
  1: evs1_gbt_h_notpowered_sprites_right;
     evs1_gbt_middle_h_notpowered_sprites_right;
}

switch (FEAT_TRAINS, SELF, evs_never_train, 0)
{
   1: evs1_ttr_m_sprites_left;  
   2: evs1_ttr_m_normal_sprites;
      align_14_sprites;
}

switch (FEAT_TRAINS, SELF, evs1_b_sprites_start,
[  set_offset_to(-position_in_articulated_veh),
   ((LOAD_TEMP(4) != evs1) * 200) +
   (prev_vehicle_randombits() % 2) * 100 +
   position_in_articulated_veh])
{
   2: evs1_dt_m_sprites_left;
   4: evs1_t_c_sprites_left;
   6: evs1_tt_c_sprites_left;
   8: evs1_ta_c_sprites_left;
  10: evs1_tab_c_sprites_right;
  12: evs1_tt_c_sprites_right;
  14: evs1_t_c_sprites_right;
  16: evs1_dt_m_sprites_right;
  18: evs1_gbt_h_sprites_right_check;

 102: evs1_dt_m_sprites_left;
 104: evs1_t_c_sprites_left;
 106: evs1_tt_c_sprites_left;
 108: evs1_tab_c_sprites_left;
 110: evs1_ta_c_sprites_right;
 112: evs1_tt_c_sprites_right;
 114: evs1_t_c_sprites_right;
 116: evs1_dt_m_sprites_right;
 118: evs1_gbt_h_sprites_right_check;

 202: evs1_dt_m_notpowered_sprites_left;
 204: evs1_t_c_notpowered_sprites_left;
 206: evs1_tt_c_notpowered_sprites_left;
 208: evs1_ta_c_notpowered_sprites_left;
 210: evs1_tab_c_sprites_right;
 212: evs1_tt_c_notpowered_sprites_right;
 214: evs1_t_c_notpowered_sprites_right;
 216: evs1_dt_m_notpowered_sprites_right;
 218: evs1_gbt_h_notpowered_sprites_right_check;

 302: evs1_dt_m_notpowered_sprites_left;
 304: evs1_t_c_notpowered_sprites_left;
 306: evs1_tt_c_notpowered_sprites_left;
 308: evs1_tab_c_sprites_left;
 310: evs1_ta_c_notpowered_sprites_right;
 312: evs1_tt_c_notpowered_sprites_right;
 314: evs1_t_c_notpowered_sprites_right;
 316: evs1_dt_m_notpowered_sprites_right;
 318: evs1_gbt_h_notpowered_sprites_right_check;

 777: evs_never_train;

      align_14_sprites;
}

long_vehicle_nocount(evs1_b)

switch (FEAT_TRAINS, SELF, evs1_articulated_part,
  extra_callback_info1)
{
  1: return dummy7;
  2: return unitb;
  3: return dummy6;
  4: return unitb;
  5: return dummy6;
  6: return unitb;
  7: return dummy6;
  8: return unitb;
  9: return dummy6;
 10: return unitb;
 11: return dummy6;
 12: return unitb;
 13: return dummy6;
 14: return unitb;
 15: return dummy6;
 16: return unitb;
 17: return dummy6;
 18: return unitb;
 19: return dummy7;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// даём тягу, если локомотив evs1
switch (FEAT_TRAINS, PARENT, evs1_power,
  vehicle_type_id == evs1)
{
  1: return get_power_in_cb(10876); 
     return 0;
}

switch (FEAT_TRAINS, SELF, evs1_b_create_effect3, 
  electric_create_effect(-3)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, SELF, evs1_b_create_effect2, 
  electric_create_effect(7)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, SELF, evs1_b_create_effect1,
  position_in_articulated_veh)
{
   2: evs1_b_create_effect2;
  16: evs1_b_create_effect3;
      return disable_create_effect();
}

// показываем визуальные эффекты, если локомотив evs1
switch (FEAT_TRAINS, PARENT, evs1_b_create_effect,
  vehicle_type_id == evs1)
{
  1: evs1_b_create_effect1;
     return disable_create_effect();
}

// Допускается эксплуатация с пассажирами только если голова - evs1
switch (FEAT_TRAINS, PARENT, evs1_cargo_capacity,
  (vehicle_type_id == evs1) * (1 + (build_year >= 2014)))
{
  1: return 562;
  2: return 506;
     return 0;
}

switch (FEAT_TRAINS, PARENT, evs1_purchase_cargo_capacity,
  current_year >= 2014)
{
  0: return 562;
     return 506;
}

switch (FEAT_TRAINS, SELF, evs1_can_attach_wagon3,
  LOAD_TEMP(0) <= 1)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, evs1_can_attach_wagon2,
  (LOAD_TEMP(1) >= 2014) +
  ((build_year >= 2014) *10) )
{
   0: return string(STR_CAN_ATTACH_NO_MORE);
   1: return string(STR_CAN_ATTACH_WRONG_YEAR,"...-2013","2014-...");
  10: return string(STR_CAN_ATTACH_WRONG_YEAR,"...-2013","2014-...");
  11: evs1_can_attach_wagon3;
      return string(STR_CAN_ATTACH_WRONG_YEAR,"2000","2000");
}

switch (FEAT_TRAINS, PARENT, evs1_can_attach_wagon1,
[  STORE_TEMP(build_year, 1),
   STORE_TEMP(count_veh_id(evs1), 0) ])
{
  evs1_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, evs1_can_attach_wagon,
  vehicle_type_id == evs1)
{
  1: evs1_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

item (FEAT_TRAINS, evs1) 
{
  property
  {
    name: string(STR_EVS1_NAME);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(2009), 1, 1);
    vehicle_life: 30; // срок службы
    model_life: get_model_life(2009,2050);
    retire_early: get_retire_early(2009,2050); // VEHICLE_NEVER_EXPIRES;
    reliability_decay: 20;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    cost_factor: get_emu_cost_factor();
    running_cost_factor: get_emu_running_cost_factor();
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 156 mph;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    track_type: get_dc_track_type();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 10876 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    loading_speed: (260/8);
    cargo_capacity: 255; 
    weight: 662 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(380.0, 651);
    length: 8;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_NONE;
  }
  graphics {
    default: evs1_sprites;
    purchase: evs1_purchase_sprites;
    articulated_part: evs1_articulated_part;
    can_attach_wagon: evs1_can_attach_wagon;
    additional_text: return string(STR_EVS1_PURCHASE_HINT);
    power: evs1_power;
    cargo_capacity: evs1_cargo_capacity;
    purchase_cargo_capacity: evs1_purchase_cargo_capacity;
    cost_factor: return 1697;
    colour_mapping: return ttdall_cc + 0xC6;
  }
  livery_override(unitb)
  {
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
    length: return 8;
    create_effect: evs1_b_create_effect;
            evs1_b_sprites;
  }  
}

if (enable_long_names)
{
  item (FEAT_TRAINS, evs1)
  {
    property
    { name: string(STR_EVS1_NAME_LONG); }
  }
}

