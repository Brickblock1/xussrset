 // evs2
// 401 (191h)

switch (FEAT_TRAINS, SELF, evs2_gbt_h_sprites_left_check,
  position_in_consist == 0)
{
  1: evs1_gbt_h_sprites_left;
     evs1_gbt_middle_h_sprites_left;
}

random_switch (FEAT_TRAINS, SELF, evs2_h_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: evs2_gbt_h_sprites_left_check;
  1: evs2_gbt_h_sprites_left_check;
}

switch (FEAT_TRAINS, SELF, evs2_gbt_h_sprites_right_check,
  position_in_consist_from_end == 1)
{
  1: evs1_gbt_h_sprites_right;
     evs1_gbt_middle_h_sprites_right;
}

switch (FEAT_TRAINS, SELF, evs2_gbt_h_notpowered_sprites_right_check,
[  set_offset_to(2),
   prev_vehicle_type_id() == evs2])
{
  1: evs1_gbt_h_notpowered_sprites_right;
     evs1_gbt_middle_h_notpowered_sprites_right;
}

switch (FEAT_TRAINS, SELF, evs2_dt_m_sprites_right_railcheck, current_railtype)
{
  ERD1: evs1_dt_m_sprites_right;
  ERD2: evs1_dt_m_sprites_right;
  ERD3: evs1_dt_m_sprites_right;
        evs1_dt_m_notpowered_normal_sprites_right;
}

switch (FEAT_TRAINS, SELF, evs2_ttr_m_sprites_right_railcheck, current_railtype)
{
  ERD1: evs1_ttr_m_notpowered_normal_sprites_right;
  ERD2: evs1_ttr_m_notpowered_normal_sprites_right;
  ERD3: evs1_ttr_m_notpowered_normal_sprites_right;
        evs1_ttr_m_sprites_right;
}

switch (FEAT_TRAINS, SELF, evs2_dt_m_sprites_left_railcheck, current_railtype)
{
  ERD1: evs1_dt_m_sprites_left;
  ERD2: evs1_dt_m_sprites_left;
  ERD3: evs1_dt_m_sprites_left;
        evs1_dt_m_notpowered_normal_sprites_left;
}

switch (FEAT_TRAINS, SELF, evs2_sprites_start,
[  set_offset_to(-position_in_articulated_veh),
   ((LOAD_TEMP(4) != evs2) * 200) +
   (prev_vehicle_randombits() % 2) * 100 +
   position_in_articulated_veh])
{
   0: evs2_h_sprites_start;
   2: evs2_dt_m_sprites_left_railcheck;
   4: evs1_ttr_m_notpowered_normal_sprites_left;
   6: evs1_tt_c_sprites_left;
   8: evs1_ta_c_sprites_left;
  10: evs1_tab_c_sprites_right;
  12: evs1_tt_c_sprites_right;
  14: evs2_ttr_m_sprites_right_railcheck;
  16: evs2_dt_m_sprites_right_railcheck;
  18: evs2_gbt_h_sprites_right_check;

 100: evs2_h_sprites_start;
 102: evs2_dt_m_sprites_left_railcheck;
 104: evs1_ttr_m_notpowered_normal_sprites_left;
 106: evs1_tt_c_sprites_left;
 108: evs1_tab_c_sprites_left;
 110: evs1_ta_c_sprites_right;
 112: evs1_tt_c_sprites_right;
 114: evs2_ttr_m_sprites_right_railcheck;
 116: evs2_dt_m_sprites_right_railcheck;
 118: evs2_gbt_h_sprites_right_check;

 200: evs2_h_sprites_start;
 202: evs1_dt_m_notpowered_sprites_left;
 204: evs1_ttr_m_notpowered_sprites_left;
 206: evs1_tt_c_notpowered_sprites_left;
 208: evs1_ta_c_notpowered_sprites_left;
 210: evs1_tab_c_sprites_right;
 212: evs1_tt_c_notpowered_sprites_right;
 214: evs1_ttr_m_notpowered_sprites_right;
 216: evs1_dt_m_notpowered_sprites_right;
 218: evs2_gbt_h_notpowered_sprites_right_check;

 300: evs2_h_sprites_start;
 302: evs1_dt_m_notpowered_sprites_left;
 304: evs1_ttr_m_notpowered_sprites_left;
 306: evs1_tt_c_notpowered_sprites_left;
 308: evs1_tab_c_sprites_left;
 310: evs1_ta_c_notpowered_sprites_right;
 312: evs1_tt_c_notpowered_sprites_right;
 314: evs1_ttr_m_notpowered_sprites_right;
 316: evs1_dt_m_notpowered_sprites_right;
 318: evs2_gbt_h_notpowered_sprites_right_check;

      align_14_sprites;
}

long_vehicle_RND(evs2, evs2_h_sprites_start)

switch (FEAT_TRAINS, SELF, evs2_articulated_part,
  extra_callback_info1)
{
  1: return dummy7;
  2: return evs2_part2;
  3: return dummy6;
  4: return evs2_part3;
  5: return dummy6;
  6: return evs2_part3;
  7: return dummy6;
  8: return evs2_part3;
  9: return dummy6;
 10: return evs2_part3;
 11: return dummy6;
 12: return evs2_part3;
 13: return dummy6;
 14: return evs2_part3;
 15: return dummy6;
 16: return evs2_part3;
 17: return dummy6;
 18: return evs2_part3;
 19: return dummy7;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// даём тягу, если локомотив evs2
switch (FEAT_TRAINS, PARENT, evs2_power,
  vehicle_type_id == evs2)
{
  1: return get_power_in_cb(10876); 
     return 0;
}

switch (FEAT_TRAINS, SELF, evs2_create_effect7, 
  electric_create_effect(7)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, SELF, evs2_create_effect3, 
  electric_create_effect(-3)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, SELF, evs2_create_effect16,
  current_railtype)
{
  ERD1: evs2_create_effect3;
  ERD2: evs2_create_effect3;
  ERD3: evs2_create_effect3;
        return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, evs2_create_effect14,
  current_railtype)
{
  ERD1: return disable_create_effect();
  ERD2: return disable_create_effect();
  ERD3: return disable_create_effect();
        evs2_create_effect3;
}

switch (FEAT_TRAINS, SELF, evs2_create_effect2,
  current_railtype)
{
  ERD1: evs2_create_effect7;
  ERD2: evs2_create_effect7;
  ERD3: evs2_create_effect7;
        return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, evs2_create_effect0,
  position_in_articulated_veh)
{
   2: evs2_create_effect2;
  14: evs2_create_effect14;
  16: evs2_create_effect16;
      return disable_create_effect();
}

// показываем визуальные эффекты, если локомотив evs2
switch (FEAT_TRAINS, PARENT, evs2_create_effect, vehicle_type_id == evs2)
{
  1: evs2_create_effect0;
     return disable_create_effect();
}

// Допускается эксплуатация с пассажирами только если голова - evs2
switch (FEAT_TRAINS, SELF, evs2_cargo_capacity2,
  build_year >= 2014)
{
  0: return 460;
     return 433;
}

switch (FEAT_TRAINS, PARENT, evs2_cargo_capacity,
  vehicle_type_id == evs2)
{
  1: evs2_cargo_capacity2;
     return 0;
}

switch (FEAT_TRAINS, SELF, evs2_purchase_cargo_capacity,
  current_year >= 2014)
{
  0: return 460;
     return 433;
}

switch (FEAT_TRAINS, SELF, evs2_can_attach_wagon3,
  LOAD_TEMP(0) <= 1)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, evs2_can_attach_wagon2,
  (LOAD_TEMP(1) >= 2014) +
  ((build_year >= 2014) * 100))
{
   0: return string(STR_CAN_ATTACH_NO_MORE);
   1: return string(STR_CAN_ATTACH_WRONG_YEAR,"...-2013","2014-...");
 100: return string(STR_CAN_ATTACH_WRONG_YEAR,"...-2013","2014-...");
 101: evs2_can_attach_wagon3;
      return string(STR_CAN_ATTACH_WRONG_YEAR,"2000","2000");
}

switch (FEAT_TRAINS, PARENT, evs2_can_attach_wagon1,
[  STORE_TEMP(build_year, 1),
   STORE_TEMP(count_veh_id(evs2), 0) ])
{
  evs2_can_attach_wagon2;
}

switch (FEAT_TRAINS, SELF, evs2_can_attach_wagon,
  vehicle_type_id == evs2)
{
  1: evs2_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}        

emu_running_cost(evs2_v1, 2966, 2658)
emu_running_cost(evs2_v2, 3055, 2738)

switch (FEAT_TRAINS, PARENT, evs2_running_cost_factor,
  (vehicle_type_id == evs2) * ((cargo_subtype == 1) + 1))
{
  1: evs2_v1_running_cost_factor;
  2: evs2_v2_running_cost_factor;
     return RC_MU_AS_CAR * 10;
}

livery_template(evs2_a2014, FACTORY, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
livery_template_alt(evs2_a2014, WITH_INCREASED_SPEED)

switch (FEAT_TRAINS, SELF, evs2_cargo_subtype_text,
  build_year >= 2014)
{
  1: evs2_a2014_cargo_subtype_text_pre;
     return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, evs2_additional_text,
  current_year >= 2014)
{
  0: return string(STR_PURCHASE_HINT_ENGINE_MU,
                   string(STR_PURCHASE_HINT_LOADING_SPEED_4TIC),
                   string(STR_PURCHASE_HINT_AGING_PERIOD_3_2),
                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_T_ACDC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_VALERO)),
                   string(STR_SECTIONS_MU_S1of10),
                   string(STR_PURCHASE_HINT_FROM, 2009),
                   string(STR_PURCHASE_HINT_FACTORY_SIEMENS));
     return string(STR_PURCHASE_HINT_ENGINE_MU_WITH_COMMENT,
                   string(STR_PURCHASE_HINT_LOADING_SPEED_4TIC),
                   string(STR_PURCHASE_HINT_AGING_PERIOD_3_2),
                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_T_ACDC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_VALERO)),
                   string(STR_SECTIONS_MU_S1_2of10),
                   string(STR_PURCHASE_HINT_FROM, 2009),
                   string(STR_PURCHASE_HINT_FACTORY_SIEMENS),
                   string(STR_PURCHASE_HINT_LIST2_COMMENT, string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 300), string(STR_PURCHASE_HINT_ATTACH_YEAR,"...-2013","2014-...")));
}

switch (FEAT_TRAINS, SELF, evs2_refit_cost,
  ((extra_callback_info1 & 0xFF00) == 0x100) +
  ((cargo_subtype == 1) * 2))
{
  1: return 105;
  2: return 105;
     return 0; 
}            

engine_speed(evs2_250, 250)
engine_speed(evs2_300, 300)
switch (FEAT_TRAINS, SELF, evs2_speed,
  cargo_subtype == 1)
{
  1: evs2_300_speed;
     evs2_250_speed;
}

item (FEAT_TRAINS, evs2, 401) {
  property {
    name: string(STR_NAME_EVS2);
    vehicle_dates(2009, 2050, 30, 10, 8, 255)
    vehicle_acdcemu(10876, 596.2, 328.0, 564-75, 15*8)
  }
  graphics {
    default: evs2_sprites;
    purchase: evs2_purchase_sprites;
    cargo_age_period: return 110;
    running_cost_factor: evs2_running_cost_factor;
    articulated_part: evs2_articulated_part;
    can_attach_wagon: evs2_can_attach_wagon;
    additional_text: evs2_additional_text;
    cargo_subtype_text: evs2_cargo_subtype_text;
    power: evs2_power;
    speed: evs2_speed;
    cargo_capacity: evs2_cargo_capacity;
    purchase_cargo_capacity: evs2_purchase_cargo_capacity;
    cost_factor: return 1748;
    colour_mapping: any_cc_colour;
    refit_cost: evs2_refit_cost;
    create_effect: evs2_create_effect;
  }
}

long_name_template(evs2, STR_LONGNAME_EVS2)
allow_acdcemu(evs2)

switch (FEAT_TRAINS, SELF, evs2_part2_purchase_cargo_capacity,
  current_year >= 2014)
{
  0: return 104;
     return 75;
}

switch (FEAT_TRAINS, PARENT, evs2_part2_cargo_capacity2,
  build_year >= 2014)
{
  0: return 104;
     return 75;
}

switch (FEAT_TRAINS, PARENT, evs2_part2_cargo_capacity,
  vehicle_type_id == evs2)
{
  1: return evs2_part2_cargo_capacity2;
     return 0;
}

engine_CAP_change_build_after(evs2_part2, 200, 
                                          300, 2014)

item (FEAT_TRAINS, evs2_part2, 449) {
  property {
    vehicle_no_dates(2009, 2050, 30, 10, 8, 0)
    vehicle_acdcemu_c(0, 75, 15*2)
    cargo_allow_refit: [TOUR, PASS];
    default_cargo_type: TOUR;
  }
  graphics {
    default: evs2_sprites;
    cargo_age_period: evs2_part2_cargo_age_period;
    purchase_cargo_capacity: evs2_part2_purchase_cargo_capacity;
    create_effect: evs2_create_effect;
    cargo_capacity: evs2_part2_cargo_capacity;
    refit_cost: return 0 | CB_RESULT_AUTOREFIT;
  }
}

item (FEAT_TRAINS, evs2_part3, 450) {
  property {
    vehicle_no_dates(2009, 2050, 30, 10, 8, 0)
    vehicle_acdcemu_empty()
  }
  graphics {
    default: evs2_sprites;
    create_effect: evs2_create_effect;
  }
}
