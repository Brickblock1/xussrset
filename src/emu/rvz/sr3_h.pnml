// sr3_h

#define PROP_sr3_h_num  2
#define PROP_sr3_n_num  0
#define PROP_sr3_m_num  1
#define PROP_sr3_c_num  0

#define PROP_sr3_h_CF  7
#define PROP_sr3_h_RC  52
#define PROP_sr3_h_SD  85
#define PROP_sr3_h_WT  38.5
#define PROP_sr3_h_TE  0
#define PROP_sr3_h_PR  0
#define PROP_sr3_h_CC  108

#define PROP_sr3_n_CF  0
#define PROP_sr3_n_RC  0
#define PROP_sr3_n_SD  0
#define PROP_sr3_n_WT  0
#define PROP_sr3_n_TE  0
#define PROP_sr3_n_PR  0
#define PROP_sr3_n_CC  0

#define IMAGEFILE  "src/emu/rvz/sr3_h.png"
purchase_sprites(sr3_h, 0, 0)
MU_head_middle_sprites(12, sr3_h_v1_mu,  32, 40)
MU_head_middle_sprites(12, sr3_h_v1u_mu, 32, 308)
MU_head_middle_sprites(12, sr3_h_v2_mu,  32, 576)
MU_head_middle_sprites(12, sr3_h_v2u_mu, 32, 844)
#undef IMAGEFILE
map_sprites(sr3_purchase_sprites, sr3_h_purchase_sprites)

MU_head_direction_template2(sr3_h_v1,  sr3_h, sr3_hmp)
MU_head_direction_template2(sr3_h_v1u, sr3_h, sr3_hmp)
MU_head_direction_template2(sr3_h_v2,  sr3_h, sr3_hmp)
MU_head_direction_template2(sr3_h_v2u, sr3_h, sr3_hmp)

switch (FEAT_TRAINS, SELF, sr3_h_sprites_left_gr,
  check_year(GREAT_CHANGE_YEAR))
{
  0: sr3_h_v1_sprites_left;
     sr3_h_v1u_sprites_left;
}

switch (FEAT_TRAINS, SELF, sr3_h_sprites_left_gr2,
  check_year(GREAT_CHANGE_YEAR))
{
  0: sr3_h_v2_sprites_left;
     sr3_h_v2u_sprites_left;
}

switch (FEAT_TRAINS, SELF, sr3_h_sprites_left,
  cargo_subtype)
{
           0: sr3_h_sprites_left_gr;
           1: sr3_h_sprites_left_gr2;
  LV_RAL6002: sr3_h_sprites_left_gr;
  align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sr3_h_sprites_right_gr,
  check_year(GREAT_CHANGE_YEAR))
{
  0: sr3_h_v1_sprites_right;
     sr3_h_v1u_sprites_right;
}

switch (FEAT_TRAINS, SELF, sr3_h_sprites_right_gr2,
  check_year(GREAT_CHANGE_YEAR))
{
  0: sr3_h_v2_sprites_right;
     sr3_h_v2u_sprites_right;
}

switch (FEAT_TRAINS, SELF, sr3_h_sprites_right,
  cargo_subtype)
{
           0: sr3_h_sprites_right_gr;
           1: sr3_h_sprites_right_gr2;
  LV_RAL6002: sr3_h_sprites_right_gr;
  align_12_sprites;
}

engine_direction_template4m3(sr3_h, sr3_hmp, sr3_c2, sr3_c3, )
map_sprites(sr3_h_direction_template, sr3_h_sprites_start)

switch (FEAT_TRAINS, SELF, sr3_h_prev1,
[ set_offset_to(-2),
  prev_vehicle_type_id() ])
{   sr3_h: type_head_motor_pant_add_mandatory;
  sr3_hmp: type_head_motor_pant_head_add_optional;  // TODO why doesn't it work????
           type_head_motor_pant_head_add_optional; }

switch (FEAT_TRAINS, PARENT, sr3_h_next_can_attach_wagon_template,
  count_veh_id(sr3_hmp))
{
     0: type_head_motor_pant_add_mandatory;
  1..2: sr3_h_prev1;
        dummy_sprites; }

MU_attach_wagon_icon_template2(sr3_h, sr3_h, sr3_hmp, type_head)
long_vehicle_sp(sr3_h)

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_h3,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  sr3_hmp: return CB_RESULT_ATTACH_ALLOW;
    sr3_h: return string(STR_CAN_ATTACH_NO_MORE);
         return string(STR_CAN_ATTACH_MHEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_h2,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  sr3_hmp: return CB_RESULT_ATTACH_ALLOW;
          return string(STR_CAN_ATTACH_MHEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_h1,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  sr3_hmp: return CB_RESULT_ATTACH_ALLOW;
    sr3_h: sr3_can_attach_wagon_h2;
           return string(STR_CAN_ATTACH_MHEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_h,
  count_veh_id(sr3_hmp) < 3)
{
  1: sr3_can_attach_wagon_h1;
     sr3_can_attach_wagon_h3;
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_hmp,
  count_veh_id(sr3_hmp))
{
  0..2: return CB_RESULT_ATTACH_ALLOW;
        return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_car3,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  sr3_hmp: return CB_RESULT_ATTACH_ALLOW;
    sr3_h: return CB_RESULT_ATTACH_ALLOW;
           return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_car2,
[ set_offset_to(num_vehs_in_consist-4),
  prev_vehicle_type_id() ])
{
  sr3_hmp: return CB_RESULT_ATTACH_ALLOW;
          return string(STR_CAN_ATTACH_MHEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_car1,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  sr3_hmp: sr3_can_attach_wagon_car3;
   sr3_c2: sr3_can_attach_wagon_car2;
   sr3_c3: sr3_can_attach_wagon_car2;
          return string(STR_CAN_ATTACH_MHEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_car11,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  sr3_hmp: CB_RESULT_ATTACH_ALLOW;
   sr3_c2: sr3_can_attach_wagon_car2;
   sr3_c3: sr3_can_attach_wagon_car2;
          return string(STR_CAN_ATTACH_MHEAD_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon_car,
  count_veh_id(sr3_hmp))
{
  1: sr3_can_attach_wagon_car11;
  2: sr3_can_attach_wagon_car1;
     return string(STR_CAN_ATTACH_HEAD_ONLY);
}

switch (FEAT_TRAINS, SELF, sr3_can_attach_wagon1,
  vehicle_type_id)
{
    sr3_h: sr3_can_attach_wagon_h;
  sr3_hmp: sr3_can_attach_wagon_hmp;
   sr3_c2: sr3_can_attach_wagon_car;
   sr3_c3: sr3_can_attach_wagon_car;
          return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon,
  num_vehs_in_consist < 18)
{
  1: return sr3_can_attach_wagon1;
     return string(STR_CAN_ATTACH_TRAIN_TOO_LONG, 9);
}

switch (FEAT_TRAINS, PARENT, sr3_start_stop2,
[ set_offset_to(num_vehs_in_consist-2),
  prev_vehicle_type_id() ])
{
  sr3_c2: return string(STR_START_STOP_DUAL_END_REQUIRED);  // last car should be head
  sr3_c3: return string(STR_START_STOP_DUAL_END_REQUIRED);  // last car should be head
          return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, PARENT, sr3_start_stop,
        (count_veh_id(sr3_hmp) * 2 - count_veh_id(sr3_h) - count_veh_id(sr3_c2) - count_veh_id(sr3_c3) >= 0) &&                        // at most 2 non-motors per motor
        (num_vehs_in_consist - 2 * (count_veh_id(sr3_hmp) + count_veh_id(sr3_h) + count_veh_id(sr3_c2) + count_veh_id(sr3_c3)) == 0))  // no other wagons types
{
  1: sr3_start_stop2;
     return string(STR_WRONG_STRUCTURE_OF_TRAIN_2CARS_PER_MOTOR);
}

livery_template_alt0(sr3, STR_REFIT_TTD_53, STR_REFIT_TTD_63)
engine_capacity_MU2(sr3_h, PROP_sr3_h_CC, sr3_h, sr3_hmp)

RC_head_check2(sr3_h, sr3_h, sr3_hmp)
switch (FEAT_TRAINS, SELF, sr3_h_running_cost_factor,
[  STORE_TEMP(30, 0),  // Моторы
   STORE_TEMP(4, 1),   // Бригада
   STORE_TEMP(10, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(7, 4),   // ТО
   STORE_TEMP(1, 5),   // Сертификация

   STORE_TEMP(PROP_sr3_h_SD, 6),                               // Скорость
   STORE_TEMP(round(PROP_sr3_h_WT), 7),                        // Тара
   STORE_TEMP(round(PROP_sr3_h_WT + PROP_sr3_h_CC / 16), 8)])  // Максимальная масса
{ sr3_h_check_running_cost_factor; }                           // 52

name_in_group_subgroup(sr3_h, string(STR_NAME_IN_GROUP, string(STR_NAME_EMU_S_SERIES), string(STR_NAME_SR3_H)),
                              string(STR_NAME_IN_GROUP, string(STR_NAME_EMU_S_SERIES), string(STR_LONGNAME_SR3_H)),
                              string(STR_NAME_SR3))

hint_MU(sr3_h,
     calc_loading(PROP_sr3_h_CC / (2 * DOUBLE_DOOR)),
     STR_PURCHASE_HINT_CAP_00033_VERY_FAST,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_H_DC,
     STR_SECTIONS_EMU_SR3,
     1952, 1955,
     fact_rigacw())
map_sprites(sr3_additional_text, sr3_h_additional_text)

item (FEAT_TRAINS, sr3_h, 415) {
  property {
    name: string(STR_NAME_SR3_H);
    vehicle_dates(1952, 1955, 30, 10, 8, PROP_sr3_h_CF)
    vehicle_emu_c(dc, PROP_sr3_h_WT, PROP_sr3_h_CC, 2 * DOUBLE_DOOR, _lowspeed)
    vehicle_group(group_emu_s)
  }
  graphics {
    purchase_menu(PROP_sr3_h_CF, PROP_sr3_h_RC, PROP_sr3_h_SD, PROP_sr3_h_WT, PROP_sr3_h_TE, PROP_sr3_h_PR, PROP_sr3_h_CC)
        additional_text: sr3_h_additional_text;
       articulated_part: articulated_part_dummy4;
       can_attach_wagon: sr3_can_attach_wagon;
       cargo_age_period: return CAP_00033_VERY_FAST;
         cargo_capacity: sr3_h_cargo_capacity;
     cargo_subtype_text: sr3_cargo_subtype_text;
         colour_mapping: any_cc_colour;
                default: sr3_h_sprites;
                   name: sr3_h_name;
                  power: return 0;
               purchase: sr3_h_purchase_sprites;
    running_cost_factor: sr3_h_running_cost_factor;
                  speed: return PROP_sr3_h_SD;
             start_stop: sr3_start_stop;
  }
}

long_name_template(sr3_h, STR_LONGNAME_SR3_H)
allow_dcemu(sr3_h)
