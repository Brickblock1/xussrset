// emu_sd

#define PROP_emu_sd_h_num  0
#define PROP_emu_sd_n_num  2
#define PROP_emu_sd_m_num  0
#define PROP_emu_sd_c_num  0

#define PROP_emu_sd_h_CF  0
#define PROP_emu_sd_h_RC  0
#define PROP_emu_sd_h_SD  85
#define PROP_emu_sd_h_WT  0
#define PROP_emu_sd_h_TE  0
#define PROP_emu_sd_h_PR  0
#define PROP_emu_sd_h_CC  0

#define PROP_emu_sd_n_CF  8 + 6 + 6
#define PROP_emu_sd_n_RC  160
#define PROP_emu_sd_n_SD  85
#define PROP_emu_sd_n_WT  59 + 38 + 38
#define PROP_emu_sd_n_TE  95.0
#define PROP_emu_sd_n_PR  680
#define PROP_emu_sd_n_CC  306
#define PROP_emu_sd_n_MC  20

#define PROP_emu_sd_m_CF  0
#define PROP_emu_sd_m_RC  0
#define PROP_emu_sd_m_SD  85
#define PROP_emu_sd_m_WT  0
#define PROP_emu_sd_m_TE  0
#define PROP_emu_sd_m_PR  0
#define PROP_emu_sd_m_CC  0

#define PROP_emu_sd_c_CF  0
#define PROP_emu_sd_c_RC  0
#define PROP_emu_sd_c_SD  85
#define PROP_emu_sd_c_WT  0
#define PROP_emu_sd_c_TE  0
#define PROP_emu_sd_c_PR  0
#define PROP_emu_sd_c_CC  0

#define IMAGEFILE  "src/emu/sd_h.png"
purchase_sprites(emu_sd, 0, 0)
MU_head_middle_sprites(12, emu_sd_h_v1, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/sd_h-bag.png"
MU_head_middle_sprites(12, emu_sd_h_v1u, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/sd_m.png"
EMU_motor2_sprites(12, emu_sd_m_v1, 32, 40)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, emu_sd_h_sprites_left_check2,
[ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100),
  (position_in_consist == 0) * 100 +
  (cargo_subtype >= 0xE0) * 10 +
  (cargo_subtype >= 0xE1) * 10 +
  (random_bits & 0x01) ] )
{
    0: emu_sd_h_v1u_notpowered_normal_sprites_left;
    1: emu_sd_h_v1_notpowered_normal_sprites_left;
   10: emu_sm_h_v1u_notpowered_normal_sprites_left;
   11: emu_sm_h_v1_notpowered_normal_sprites_left;
   20: emu_sm_h_v1_notpowered_normal_sprites_left;
   21: emu_sm_h_v1_notpowered_normal_sprites_left;
  100: emu_sd_h_v1u_sprites_left;
  101: emu_sd_h_v1_sprites_left;
  110: emu_sm_h_v1u_sprites_left;
  111: emu_sm_h_v1_sprites_left;
  120: emu_sm_h_v1_sprites_left;
  121: emu_sm_h_v1_sprites_left;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, emu_sd_h_sprites_left_current,
  cargo_subtype + 256 * (current_year < 1946) + 256 * (1 - enable_icons))
{
  0x00: icon_sprites_15dc;
  0xE0: icon_sprites_ddc;
  0xE1: icon_sprites_3dc;
        dummy_sprites;
}

switch (FEAT_TRAINS, SELF, emu_sd_h_sprites_left_depot,
  getbits(extra_callback_info1, 8, 8))
{
  0: emu_sd_h_sprites_left_check2;
  1: emu_sd_h_sprites_left_current;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, emu_sd_h_sprites_left_check,
  getbits(extra_callback_info1, 0, 8))
{
  0x10..0x1F: emu_sd_h_sprites_left_depot;
              emu_sd_h_sprites_left_check2;
}

switch (FEAT_TRAINS, SELF, emu_sd_b_sprites_start,
[  set_offset_to(-2),
  ((no_emu_s_inR4() ||
   ((prev_vehicle_cargo_subtype() == 0xE1) && (tile_powers_railtype("ERD0") == 0)) ||
   ((prev_vehicle_cargo_subtype() < 0xE0) && (tile_powers_railtype("ERd0") == 0))) * 100) +
  ((prev_vehicle_cargo_subtype() >= 0xE0) * 10) +
  (prev_vehicle_randombits() & 0x01) ])
{
    0: emu_sd_m_v1_sprites_left;
    1: emu_sd_m_v1_sprites_right;
   10: emu_sm_m_v1_sprites_left;
   11: emu_sm_m_v1_sprites_right;
  100: emu_sd_m_v1_notpowered_sprites_left;
  101: emu_sd_m_v1_notpowered_sprites_right;
  110: emu_sm_m_v1_notpowered_sprites_left;
  111: emu_sm_m_v1_notpowered_sprites_right;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, emu_sd_c_sprites_start,
[ set_offset_to(-4),
  ((position_in_consist_from_end == 1) * 100) +
  ((prev_vehicle_cargo_subtype() >= 0xE0) * 10) +
  ((prev_vehicle_cargo_subtype() >= 0xE1) * 10) +
  (prev_vehicle_randombits() & 0x01) ])
{
    0: emu_sd_h_v1_notpowered_normal_sprites_right;
    1: emu_sd_h_v1u_notpowered_normal_sprites_right;
   10: emu_sm_h_v1_notpowered_normal_sprites_right;
   11: emu_sm_h_v1u_notpowered_normal_sprites_right;
   20: emu_sm_h_v1_notpowered_normal_sprites_right;
   21: emu_sm_h_v1_notpowered_normal_sprites_right;
  100: emu_sd_h_v1_sprites_right;
  101: emu_sd_h_v1u_sprites_right;
  110: emu_sm_h_v1_sprites_right;
  111: emu_sm_h_v1u_sprites_right;
  120: emu_sm_h_v1_sprites_right;
  121: emu_sm_h_v1_sprites_right;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, emu_sd_sprites_start,
  position_in_articulated_veh)
{
  0: emu_sd_h_sprites_left_check;
  2: emu_sd_b_sprites_start;
  4: emu_sd_c_sprites_start;
     dummy_sprites;
}

long_vehicle(emu_sd)

// TODO change running cost according to refit

switch (FEAT_TRAINS, PARENT, emu_sd_can_attach_wagon1,
  emu_s_count() < (2 + (current_year >= 1939)))
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, emu_sd_can_attach_wagon,
  any_emu_s())
{
  1: emu_sd_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, emu_sd_articulated_part,
  extra_callback_info1)
{
  1: return dummy4;
  2: return emu_sd_part2;
  3: return dummy4;
  4: return emu_sd_part3;
  5: return dummy4;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

switch (FEAT_TRAINS, SELF, emu_sd_create_effect2,
  electric_create_effect(4)) { return 1; }

switch (FEAT_TRAINS, PARENT, emu_sd_create_effect1,
  any_emu_s())
{
  1: emu_sd_create_effect2;
     return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, emu_sd_0_create_effect,
  position_in_articulated_veh)
{
  2: emu_sd_create_effect1;
     return disable_create_effect();
}

     is_ER15DC_ds(emu_sd_2_create_effect, emu_sd_0_create_effect, return disable_create_effect())
  engine_change_refit_prev(emu_sd_1_create_effect, emu_sd_2_create_effect, emu_sd_0_create_effect, -2)

  is_ER3DC_ds(emu_sd_sr3_create_effect, emu_sd_0_create_effect, return disable_create_effect())
engine_change_refit_shift_prev(emu_sd_create_effect, emu_sd_1_create_effect, emu_sd_sr3_create_effect, 1, -2)

  engine_capacity_MU_emu_s(emu_sd_0, PROP_emu_sd_n_CC)
  engine_capacity_MU_emu_s(emu_sd_sr3, PROP_sr3_n_CC)
engine_change_refit_shift(emu_sd_cargo_capacity, emu_sd_0_cargo_capacity, emu_sd_sr3_cargo_capacity, 1)

  livery_template_refit_n(emu_sd_a1946, STR_REFIT_FACTORY_GENERAL_TYPE_D, STR_NAME_SD, STR_ER15DC, STR_NAME_SM, STR_ERDDC)

  livery_template_refit2_diff_n(emu_sd_a1952, STR_REFIT_FACTORY_GENERAL_TYPE_D, STR_NAME_SD, STR_ER15DC, STR_NAME_SM, STR_ERDDC, STR_NAME_SM3, STR_ER3DC)
livery_template_service_year2_ao(emu_sd, 1946, 1952)

engine_speed(emu_sd, PROP_emu_sd_n_SD)

        engine_power_MU_emu_s(emu_sd_0_DC_2, NO_POWER)
      engine_0_power_alt(emu_sd_0_DC, emu_sd_0_DC_2_power)

      engine_power_MU_emu_s(emu_sd_0_15DC, PROP_emu_sd_n_PR)
    is_ER15DC_ds(emu_sd_0_power, emu_sd_0_15DC_power, emu_sd_0_DC_power)

    engine_power_MU_emu_s(emu_sd_sm, PROP_emu_sm_n_PR)
  engine_change_refit(emu_sd_1_power, emu_sd_0_power, emu_sd_sm_power)

      engine_power_MU_emu_s(emu_sd_sr3_15DC_2, NO_POWER)
    engine_0_power_alt(emu_sd_sr3_15DC, emu_sd_sr3_15DC_2_power)

    engine_power_MU_emu_s(emu_sd_sr3_DC, PROP_sr3_n_PR)
  is_ER3DC_ds(emu_sd_sr3_power, emu_sd_sr3_DC_power, emu_sd_sr3_15DC_power)
engine_change_refit_shift(emu_sd_power, emu_sd_1_power, emu_sd_sr3_power, 1)

engine_refit_cost_for_a2_livery_change(emu_sd_3, 0xE0, 6, 7)
engine_refit_cost_for_extra_livery_change(emu_sd_2, 0xE0, 6, emu_sd_3_refit_cost)
engine_refit_cost_for_extra_livery_change(emu_sd, 0xE1, 4, emu_sd_2_refit_cost)

RC_head_check_emu_s_new(emu_sd)
switch (FEAT_TRAINS, SELF, emu_sd_running_cost_factor,
[  STORE_TEMP(91, 0),  // Моторы
   STORE_TEMP(13, 1),  // Бригада
   STORE_TEMP(32, 2),  // Износ
   STORE_TEMP(0, 3),   // Сопровождение
   STORE_TEMP(22, 4),  // ТО
   STORE_TEMP(2, 5),   // Сертификация

   STORE_TEMP(PROP_emu_sd_n_SD, 6),                                         // Скорость
   STORE_TEMP(int(PROP_emu_sd_n_WT), 7),                                    // Тара
   STORE_TEMP(int(PROP_emu_sd_n_WT + PROP_emu_sd_n_CC / 16 + 20 / 4), 8)])  // Максимальная масса
{ emu_sd_check_running_cost_factor; }

name_in_group(emu_sd, string(STR_NAME_IN_GROUP, string(STR_NAME_EMU_S_SERIES), string(STR_NAME_SD)),
                      string(STR_NAME_IN_GROUP, string(STR_NAME_EMU_S_SERIES), string(STR_LONGNAME_SD)))

hint_MU_2fact(emu_sd_b1939,
     calc_loading(PROP_emu_sd_n_CC / (3 * 2 * DOUBLE_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_15DC,
     STR_SECTIONS_MU_S1_2of3,
     1932, 1938,
     fact_mytishchi(),
     string(STR_PURCHASE_HINT_FACTORY_DINAMO))
hint_MU_2fact(emu_sd_a1939,
     calc_loading(PROP_emu_sd_n_CC / (3 * 2 * DOUBLE_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_15DC,
     STR_SECTIONS_MU_S1_3of3,
     1939, 1945,
     fact_mytishchi(),
     string(STR_PURCHASE_HINT_FACTORY_DINAMO))
hint_MU_2fact_comment(emu_sd_a1946,
     calc_loading(PROP_emu_sd_n_CC / (3 * 2 * DOUBLE_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_15DC,
     STR_SECTIONS_MU_S1_3of3,
     1939, 1945,
     fact_mytishchi(),
     string(STR_PURCHASE_HINT_FACTORY_DINAMO),
     string(STR_PURCHASE_HINT_UPGRADE_AVAILABLE,
                 string(STR_REFIT_FACTORY_GENERAL_TYPE_R, string(STR_NAME_SM), string(STR_ERDDC))))
hint_MU_2fact_comment(emu_sd_a1952,
     calc_loading(PROP_emu_sd_n_CC / (3 * 2 * DOUBLE_DOOR)),
     STR_PURCHASE_HINT_AGING_PERIOD_1_1,
     STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_15DC,
     STR_SECTIONS_MU_S1_3of3,
     1939, 1945,
     fact_mytishchi(),
     string(STR_PURCHASE_HINT_FACTORY_DINAMO),
     string(STR_PURCHASE_HINT_UPGRADE_AVAILABLE,
                 string(STR_REFIT_FACTORY_GENERAL_TYPE_R, string(STR_NAME_SM3), string(STR_ER3DC))))
hint_change_after3(emu_sd, 1939, 1946, 1952)

item (FEAT_TRAINS, emu_sd, 443) {
  property {
    name: string(STR_NAME_SD);
    vehicle_dates(1932, 1945, 20, 10, 8, PROP_emu_sd_n_CF)
    vehicle_emu(ddc, PROP_emu_sd_n_PR, PROP_emu_sd_n_WT, PROP_emu_sd_n_TE, PROP_emu_sd_n_CC, 3 * 2 * DOUBLE_DOOR)
    vehicle_group(emu_s_group)
  }
  graphics {
    purchase_menu(PROP_emu_sd_n_CF, PROP_emu_sd_n_RC, PROP_emu_sd_n_SD, PROP_emu_sd_n_WT, PROP_emu_sd_n_TE, PROP_emu_sd_n_PR, PROP_emu_sd_n_CC)
        additional_text: emu_sd_additional_text;
       articulated_part: emu_sd_articulated_part;
       can_attach_wagon: emu_sd_can_attach_wagon;
       cargo_age_period: return 60;
         cargo_capacity: emu_sd_cargo_capacity;
     cargo_subtype_text: emu_sd_cargo_subtype_text;
         colour_mapping: any_cc_colour;
          create_effect: emu_sd_create_effect;
                default: emu_sd_sprites;
                   name: emu_sd_name;
                  power: emu_sd_power;
               purchase: emu_sd_purchase_sprites;
             refit_cost: emu_sd_refit_cost;
    running_cost_factor: emu_sd_running_cost_factor;
                  speed: emu_sd_speed;
  }
}

long_name_template(emu_sd, STR_LONGNAME_SD)
allow_dcemu(emu_sd)

// TODO fix mail capacity

switch (FEAT_TRAINS, SELF, emu_sd_part2_cargo_capacity,
[  set_offset_to(-2),
   prev_vehicle_cargo_subtype() < 0xE1])
{
  1: return PROP_emu_sd_n_MC;
     return 0;
}

item (FEAT_TRAINS, emu_sd_part2, 448) {
  property {
    vehicle_no_dates(1932, 1945, 20, 10, 8, 0)
    vehicle_emu_c_mail(ddc, 0, 20, 10)
  }
  graphics {
    cargo_age_period: return 60;
      colour_mapping: any_cc_colour;
       create_effect: emu_sd_create_effect;
             default: emu_sd_sprites;
  }
}

item (FEAT_TRAINS, emu_sd_part3, 753) {
  property {
    vehicle_no_dates(1932, 1945, 20, 10, 8, 0)
    vehicle_emu_empty(ddc)
  }
  graphics {
    colour_mapping: any_cc_colour;
     create_effect: emu_sd_create_effect;
           default: emu_sd_sprites;
  }
}
