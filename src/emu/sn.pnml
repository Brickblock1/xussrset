 // sn
// 218 (DAh) 

#define IMAGEFILE  "src/emu/sn.png"
purchase_sprites(sn, 0, 0)

MU_4r_0_0_sprites(12, sn_v1, 32, 40)
MU_0_3r_0_sprites(12, sn_v1, 32, 40)
#undef IMAGEFILE

#define IMAGEFILE  "src/emu/sn-br.png"
MU_4r_0_0_sprites(12, sn_v2, 32, 40)
MU_0_3r_0_sprites(12, sn_v2, 32, 40)
#undef IMAGEFILE

#define IMAGEFILE  "src/emu/sn-gr.png"
MU_4r_0_0_sprites(12, sn_v3, 32, 40)
MU_0_3r_0_sprites(12, sn_v3, 32, 40)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, sn_h_sprites_left_check,
  (position_in_consist == 0) +
  (cargo_subtype * 2))
{
  0: sn_v1_h_notpowered_normal_sprites_left;
  1: sn_v1_h_sprites_left;
  2: sn_v2_h_notpowered_normal_sprites_left;
  3: sn_v2_h_sprites_left;
  4: sn_v3_h_notpowered_normal_sprites_left;
  5: sn_v3_h_sprites_left;
     align_12_sprites;
}

random_switch (FEAT_TRAINS, SELF, sn_a_sprites_start, 
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: sn_h_sprites_left_check;
  1: sn_h_sprites_left_check;
}

switch (FEAT_TRAINS, SELF, sn_b_sprites_start,
[  set_offset_to(-2),
   ((LOAD_TEMP(4) != sn) * 100) +
   (prev_vehicle_randombits() % 2) +
   (prev_vehicle_cargo_subtype() * 2) ])
{
    0: sn_v1_m_sprites_left;
    1: sn_v1_m_sprites_right;
    2: sn_v2_m_sprites_left;
    3: sn_v2_m_sprites_right;
    4: sn_v3_m_sprites_left;
    5: sn_v3_m_sprites_right;
  100: sn_v1_m_notpowered_sprites_left;
  101: sn_v1_m_notpowered_sprites_right;
  102: sn_v2_m_notpowered_sprites_left;
  103: sn_v2_m_notpowered_sprites_right;
  104: sn_v3_m_notpowered_sprites_left;
  105: sn_v3_m_notpowered_sprites_right;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sn_c_sprites_start,
[ set_offset_to(-4),
  (position_in_consist_from_end == 1) +
  (prev_vehicle_cargo_subtype() * 2) ])
{
  0: sn_v1_h_notpowered_normal_sprites_right;
  1: sn_v1_h_sprites_right;
  2: sn_v2_h_notpowered_normal_sprites_right;
  3: sn_v2_h_sprites_right;
  4: sn_v3_h_notpowered_normal_sprites_right;
  5: sn_v3_h_sprites_right;
     align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sn_sprites_start, 
  position_in_articulated_veh)    
{ 
  0: sn_a_sprites_start;
  2: sn_b_sprites_start;                                        
  4: sn_c_sprites_start;                                        
     dummy_sprites; 
}                                           

long_vehicle_RND(sn, sn_a_sprites_start)

// считаем уже имеющиеся вагоны

switch (FEAT_TRAINS, PARENT, sn_can_attach_wagon1,
  count_veh_id(sn) < 3)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, sn_can_attach_wagon,
  vehicle_type_id == sn)
{
  1: sn_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, sn_articulated_part,
  extra_callback_info1)
{
  1: return dummy4;
  2: return sn_part2;
  3: return dummy4;
  4: return sn_part2;
  5: return dummy4;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// Визуализируем эффекты тяги у sn, только если локомотив - sn
switch (FEAT_TRAINS, SELF, sn_create_effect2, 
  electric_create_effect(4)) 
{ 
  return 1; 
}    

switch (FEAT_TRAINS, PARENT, sn_create_effect1,
  vehicle_type_id == sn)
{
  1: sn_create_effect2;
     return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, sn_create_effect,
  position_in_articulated_veh)
{
  2: sn_create_effect1;
     return disable_create_effect();
}

// Даём тягу, только если локомотив - sn
switch (FEAT_TRAINS, PARENT, sn_power,
  vehicle_type_id == sn)
{
  1: return get_power_in_cb(921);
     return 0;
}

// Допускается эксплуатация с пассажирами только если голова - sn
switch (FEAT_TRAINS, PARENT, sn_cargo_capacity,
  vehicle_type_id == sn)
{
  1: return 296;
     return 0;
}

switch (FEAT_TRAINS, SELF, sn_cargo_subtype_text,
  cargo_subtype)
{
  0: return string(STR_REFIT_FACTORY_6208, string(STR_REFIT_TTD_7C));
  1: return string(STR_REFIT_FACTORY_6208, string(STR_REFIT_TTD_6C));
  2: return string(STR_REFIT_FACTORY_6208, string(STR_REFIT_TTD_59));
     return CB_RESULT_NO_TEXT;
}

emu_running_cost(sn_v1, 93, 80 + 80)

switch (FEAT_TRAINS, PARENT, sn_running_cost_factor,
  vehicle_type_id == sn)
{
  1: sn_v1_running_cost_factor;
     return RC_MU_AS_CAR * 3;
}

item (FEAT_TRAINS, sn, 218) {
  property {
    name: string(STR_NAME_SN);
    climates_available: get_climates_available();
    introduction_date: date(get_loc_year(1954), 1, 1);
    vehicle_life: 10;
    model_life: get_model_life(1954,1956);
    retire_early: get_retire_early(1954,1956);
    reliability_decay: 10;
    cargo_allow_refit: [PASS];
    default_cargo_type: PASS;
    cost_factor: 12 + 10 + 10;
    sprite_id: SPRITE_ID_NEW_TRAIN;
    speed: 120 km/h;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU); 
    track_type: get_dc_track_type_emu();
    ai_special_flag: AI_FLAG_PASSENGER;
    power: 921 hpM;
    running_cost_base: RUNNING_COST_ELECTRIC;
    loading_speed: (24*2*3);
    cargo_capacity: 255;
    weight: 148.2 ton;
    engine_class: ENGINE_CLASS_ELECTRIC;
    tractive_effort_coefficient: get_tec(100.0, 148.2);
    length: 8;
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
  }
  graphics {
    default: sn_sprites;
    purchase: sn_purchase_sprites;
    cargo_age_period: return 60;
    running_cost_factor: sn_running_cost_factor;
    articulated_part: sn_articulated_part;
    can_attach_wagon: sn_can_attach_wagon;
    additional_text: return string(STR_PURCHASE_HINT_ENGINE_MU,
                                   string(STR_PURCHASE_HINT_LOADING_SPEED_3TIC),
                                   string(STR_PURCHASE_HINT_AGING_PERIOD_1_1),
                                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_DC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_62_08)),
                                   string(STR_SECTIONS_MU_S1_3of3),
                                   string(STR_PURCHASE_HINT_FROMTO, 1954,1956),
                                   string(STR_PURCHASE_HINT_FACTORY_RIGA_CW));
    cargo_subtype_text: sn_cargo_subtype_text;
    cargo_capacity: sn_cargo_capacity;
    power: sn_power;
    create_effect: sn_create_effect;
  }
}

long_name_template(sn, STR_LONGNAME_SN)
allow_dcemu(sn)

item (FEAT_TRAINS, sn_part2, 459) {
  property {
    climates_available: NO_CLIMATE;
    sprite_id: SPRITE_ID_NEW_TRAIN;
    misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_MU);
    cargo_capacity: 0;
    length: 8;
    track_type: get_normal_track_type();
    effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_ELECTRIC;
  }
  graphics {
    default: sn_sprites;
    create_effect: sn_create_effect;
  }
}
