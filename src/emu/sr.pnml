 // sr
// 442, 461

#define IMAGEFILE  "src/emu/sr_h.png"
purchase_sprites(sr_v1, 0, 0)
MU_head_middle_sprites(12, sr_h_v1, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/sr_m.png"
EMU_motor2_sprites(12, sr_m_v1, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/sr_h-a1951.png"
purchase_sprites(sr_v2, 0, 0)
MU_head_middle_sprites(12, sr_h_v2, 32, 40)
#undef IMAGEFILE
#define IMAGEFILE  "src/emu/sr_m-a1951.png"
EMU_motor2_sprites(12, sr_m_v2, 32, 40)
#undef IMAGEFILE
purchase_sprites_select(sr, 1951)

switch (FEAT_TRAINS, SELF, sr_h_sprites_left_check,
  (position_in_consist == 0) + 
  ((build_year >= 1951) * 100))
{
    0: sr_h_v1_notpowered_normal_sprites_left;
    1: sr_h_v1_sprites_left;
  100: sr_h_v2_notpowered_normal_sprites_left;
  101: sr_h_v2_sprites_left;
       align_12_sprites;
}

random_switch (FEAT_TRAINS, SELF, sr_a_sprites_start,
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: sr_h_sprites_left_check;
  1: sr_h_sprites_left_check;
}

switch (FEAT_TRAINS, SELF, sr_b_sprites_start,
[  set_offset_to(-2),
   ((LOAD_TEMP(4) != sr) * 10) + 
   ((build_year >= 1951) * 100) +
   (prev_vehicle_randombits() % 2) ])
{
    0: sr_m_v1_sprites_left;
    1: sr_m_v1_sprites_right;
   10: sr_m_v1_notpowered_sprites_left;
   11: sr_m_v1_notpowered_sprites_right;
  100: sr_m_v2_sprites_left;
  101: sr_m_v2_sprites_right;
  110: sr_m_v2_notpowered_sprites_left;
  111: sr_m_v2_notpowered_sprites_right;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sr_c_sprites_start,
[ set_offset_to(-4),
  (position_in_consist_from_end == 1) + 
  ((build_year >= 1951) * 100)])
{
    0: sr_h_v1_notpowered_normal_sprites_right;
    1: sr_h_v1_sprites_right;
  100: sr_h_v2_notpowered_normal_sprites_right;
  101: sr_h_v2_sprites_right;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sr_sprites_start,
  position_in_articulated_veh)
{
  0: sr_a_sprites_start;
  2: sr_b_sprites_start;
  4: sr_c_sprites_start;
     dummy_sprites;
}

long_vehicle_RND(sr, sr_a_sprites_start)

// считаем уже имеющиеся вагоны

switch (FEAT_TRAINS, PARENT, sr_can_attach_wagon1,
  count_veh_id(sr) < 3 * 2)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, sr_can_attach_wagon,
  vehicle_type_id == sr)
{
  1: sr_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, sr_articulated_part,
  extra_callback_info1)
{
  1: return dummy4;
  2: return sr;
  3: return dummy4;
  4: return sr_part2;
  5: return dummy4;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// Визуализируем эффекты тяги у sr, только если локомотив - sr
switch (FEAT_TRAINS, SELF, sr_create_effect2,
  electric_create_effect(4))
{
  return 1;
}

switch (FEAT_TRAINS, PARENT, sr_create_effect1,
  vehicle_type_id == sr)
{
  1: sr_create_effect2;
     return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, sr_create_effect,
  position_in_articulated_veh)
{
  2: sr_create_effect1;
     return disable_create_effect();
}

// Даём тягу, только если локомотив - sr
switch (FEAT_TRAINS, PARENT, sr_power,
  vehicle_type_id == sr)
{
  1: return get_power_in_cb(702);
     return 0;
}

// Допускается эксплуатация с пассажирами только если голова - sr
switch (FEAT_TRAINS, SELF, sr_cargo_capacity2,
  position_in_articulated_veh)
{
  0: return 306;
     return 0;
}

switch (FEAT_TRAINS, PARENT, sr_cargo_capacity,
  vehicle_type_id == sr)
{
  1: sr_cargo_capacity2;
     return 0;
}

emu_running_cost(sr_v1, 63, 53 + 53)

switch (FEAT_TRAINS, PARENT, sr_running_cost_factor,
  vehicle_type_id == sr)
{
  1: sr_v1_running_cost_factor;
     return RC_MU_AS_CAR * 3;
}

engine_speed(sr, 85)

item (FEAT_TRAINS, sr, 442) {
  property {
    name: string(STR_NAME_SR);
    vehicle_dates(1947, 1952, 20, 10, 8, 8 + 7 + 7)
    vehicle_dcemu(702, 139.5, 96.1, 306, 24*2*3)
  }
  graphics {
    default: sr_sprites;
    purchase: sr_purchase_sprites;
    speed: sr_speed;
    cargo_age_period: return 60;
    running_cost_factor: sr_running_cost_factor;
    articulated_part: sr_articulated_part;
    can_attach_wagon: sr_can_attach_wagon;
    cargo_capacity: sr_cargo_capacity;
    power: sr_power;
    create_effect: sr_create_effect;
    purchase_cargo_capacity: return 306/2;
    colour_mapping: any_cc_colour;
    cargo_subtype_text: return string(STR_REFIT_FACTORY);
    purchase_speed: return 85;
    additional_text: return string(STR_PURCHASE_HINT_ENGINE_MU,
                                   string(STR_PURCHASE_HINT_LOADING_SPEED_3TIC),
                                   string(STR_PURCHASE_HINT_AGING_PERIOD_1_1),
                                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_DC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_62_01)),
                                   string(STR_SECTIONS_MU_S1_3of3),
                                   string(STR_PURCHASE_HINT_FROMTO, 1947, 1952),
                                   string(STR_PURCHASE_HINT_FACTORY_RIGA_CW));
  }
}

long_name_template(sr, STR_LONGNAME_SR)
allow_dcemu(sr)

switch (FEAT_TRAINS, SELF, sr_part2_cargo_capacity2,
  position_in_articulated_veh)
{
  4: return 20;
     return 0;
}

switch (FEAT_TRAINS, PARENT, sr_part2_cargo_capacity,
  vehicle_type_id == sr)
{
  1: sr_part2_cargo_capacity2;
     return 0;
}

item (FEAT_TRAINS, sr_part2, 461) {
  property {
    vehicle_no_dates(1947, 1952, 20, 10, 8, 0)
    vehicle_dcemu_c(0, 20, 10)
    cargo_allow_refit: [MAIL];
  }
  graphics {
    default: sr_sprites;
    cargo_age_period: return 60;
    create_effect: sr_create_effect;
    cargo_capacity: sr_part2_cargo_capacity;
    colour_mapping: any_cc_colour;
  }
}
