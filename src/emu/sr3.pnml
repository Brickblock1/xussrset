 // sr3
// 415 (19Fh)

#define IMAGEFILE  "src/emu/sr3.png"
purchase_sprites(sr3, 0, 0)

MU_4r_0_0_sprites(12, sr3_v1, 32, 40)
MU_0_3r_0_sprites(12, sr3_v1, 32, 40)
MU_4r_0_0_sprites(12, sr3_v1u, 32, 576)
#undef IMAGEFILE

#define IMAGEFILE  "src/emu/sr3-gr.png"
MU_4r_0_0_sprites(12, sr3_v2, 32, 40)
MU_0_3r_0_sprites(12, sr3_v2, 32, 40)
MU_4r_0_0_sprites(12, sr3_v2u, 32, 576)
#undef IMAGEFILE

switch (FEAT_TRAINS, SELF, sr3_h_sprites_left_check,
  (position_in_consist == 0) +
  ((date_of_last_service >= LV_GREAT_CHANGE_DATE) * 2) +
  (cargo_subtype * 4))
{
  0: sr3_v1_h_notpowered_normal_sprites_left;
  1: sr3_v1_h_sprites_left;
  2: sr3_v1u_h_notpowered_normal_sprites_left;
  3: sr3_v1u_h_sprites_left;

  4: sr3_v2_h_notpowered_normal_sprites_left;
  5: sr3_v2_h_sprites_left;
  6: sr3_v2u_h_notpowered_normal_sprites_left;
  7: sr3_v2u_h_sprites_left;

     align_12_sprites;
}

random_switch (FEAT_TRAINS, SELF, sr3_a_sprites_start,
  bitmask(TRIGGER_VEHICLE_SERVICE))
{
  1: sr3_h_sprites_left_check;
  1: sr3_h_sprites_left_check;
}

switch (FEAT_TRAINS, SELF, sr3_b_sprites_start,
[  set_offset_to(-2),
   ((LOAD_TEMP(4) != sr3) * 100) +
   (prev_vehicle_randombits() % 2) +
   (prev_vehicle_cargo_subtype() * 2) ])
{
    0: sr3_v1_m_sprites_left;
    1: sr3_v1_m_sprites_right;
    2: sr3_v2_m_sprites_left;
    3: sr3_v2_m_sprites_right;

  100: sr3_v1_m_notpowered_sprites_left;
  101: sr3_v1_m_notpowered_sprites_right;
  102: sr3_v2_m_notpowered_sprites_left;
  103: sr3_v2_m_notpowered_sprites_right;
       align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sr3_c_sprites_start,
[ set_offset_to(-4),
  (position_in_consist_from_end == 1) +
  ((date_of_last_service >= LV_GREAT_CHANGE_DATE) * 2) +
  (prev_vehicle_cargo_subtype() * 4) ])
{
  0: sr3_v1_h_notpowered_normal_sprites_right;
  1: sr3_v1_h_sprites_right;
  2: sr3_v1u_h_notpowered_normal_sprites_right;
  3: sr3_v1u_h_sprites_right;

  4: sr3_v2_h_notpowered_normal_sprites_right;
  5: sr3_v2_h_sprites_right;
  6: sr3_v2u_h_notpowered_normal_sprites_right;
  7: sr3_v2u_h_sprites_right;

     align_12_sprites;
}

switch (FEAT_TRAINS, SELF, sr3_sprites_start,
  position_in_articulated_veh)
{
  0: sr3_a_sprites_start;
  2: sr3_b_sprites_start;
  4: sr3_c_sprites_start;
     dummy_sprites;
}

long_vehicle_RND(sr3, sr3_a_sprites_start)

// считаем уже имеющиеся вагоны
switch (FEAT_TRAINS, PARENT, sr3_can_attach_wagon1,
  count_veh_id(sr3) < 3)
{
  1: return CB_RESULT_ATTACH_ALLOW;
     return string(STR_CAN_ATTACH_NO_MORE);
}

switch (FEAT_TRAINS, SELF, sr3_can_attach_wagon,
  vehicle_type_id == sr3)
{
  1: sr3_can_attach_wagon1;
     return string(STR_CAN_ATTACH_SAME_MU_ONLY);
}

switch (FEAT_TRAINS, SELF, sr3_articulated_part,
  extra_callback_info1)
{
  1: return dummy4;
  2: return sr3_part2;
  3: return dummy4;
  4: return sr3_part2;
  5: return dummy4;
     return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

// Визуализируем эффекты тяги у sr3, только если локомотив - sr3
switch (FEAT_TRAINS, SELF, sr3_create_effect2,
  electric_create_effect(4))
{
  return 1;
}

switch (FEAT_TRAINS, PARENT, sr3_create_effect1,
  vehicle_type_id == sr3)
{
  1: sr3_create_effect2;
     return disable_create_effect();
}

switch (FEAT_TRAINS, SELF, sr3_create_effect,
  position_in_articulated_veh)
{
  2: sr3_create_effect1;
     return disable_create_effect();
}

// Даём тягу, только если локомотив - sr3
switch (FEAT_TRAINS, PARENT, sr3_power,
  vehicle_type_id == sr3)
{
  1: return get_power_in_cb(702);
     return 0;
}

// Допускается эксплуатация с пассажирами только если голова - sr3
switch (FEAT_TRAINS, PARENT, sr3_cargo_capacity,
  vehicle_type_id == sr3)
{
  1: return 321;
     return 0;
}

switch (FEAT_TRAINS, SELF, sr3_cargo_subtype_text,
  cargo_subtype)
{
  0: return string(STR_REFIT_TTD_53);
  1: return string(STR_REFIT_TTD_63);
     return CB_RESULT_NO_TEXT;
}

emu_running_cost(sr3_v1, 63, 52 + 52)

switch (FEAT_TRAINS, PARENT, sr3_running_cost_factor,
  vehicle_type_id == sr3)
{
  1: sr3_v1_running_cost_factor;
     return RC_MU_AS_CAR * 3;
}

engine_speed(sr3, 85)

item (FEAT_TRAINS, sr3, 415) {
  property {
    name: string(STR_NAME_SR3);
    vehicle_dates(1952, 1955, 30, 10, 8, 8 + 7 + 7)
    vehicle_dcemu(702, 139, 96.1, 321, 24*2*3)
  }
  graphics {
    default: sr3_sprites;
    purchase: sr3_purchase_sprites;
    speed: sr3_speed;
    cargo_age_period: return 60;
    running_cost_factor: sr3_running_cost_factor;
    articulated_part: sr3_articulated_part;
    can_attach_wagon: sr3_can_attach_wagon;
    additional_text: return string(STR_PURCHASE_HINT_ENGINE_MU,
                                   string(STR_PURCHASE_HINT_LOADING_SPEED_3TIC),
                                   string(STR_PURCHASE_HINT_AGING_PERIOD_1_1),
                                   string(STR_PURCHASE_HINT_ENGINE_TYPE_EMU_S_DC_WITH_SUBTYPE, string(STR_PURCHASE_HINT_62_05)),
                                   string(STR_SECTIONS_MU_S1_3of3),
                                   string(STR_PURCHASE_HINT_FROMTO, 1952, 1955),
                                   string(STR_PURCHASE_HINT_FACTORY_RIGA_CW));
    cargo_capacity: sr3_cargo_capacity;
    cargo_subtype_text: sr3_cargo_subtype_text;
    power: sr3_power;
    create_effect: sr3_create_effect;
    colour_mapping: any_cc_colour;
    purchase_speed: return 85;
  }
}

long_name_template(sr3, STR_LONGNAME_SR3)
allow_dcemu(sr3)

item (FEAT_TRAINS, sr3_part2, 460) {
  property {
    vehicle_no_dates(1952, 1955, 30, 10, 8, 0)
    vehicle_dcemu_empty()
  }
  graphics {
    default: sr3_sprites;
    create_effect: sr3_create_effect;
    colour_mapping: any_cc_colour;
  }
}
