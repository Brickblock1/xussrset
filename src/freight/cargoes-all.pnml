#define cargo_all_bulklist()                                \
AORE, CLAY, COAL, COKE, CORE, FERT, GRVL, IORE, KAOL, LIME, \
MNO2, NITR, PEAT, PHOS, PORE, POTA, QLME, RCYC, SAND, SCMT, \
SLAG, SULP                                                  \

#define bulk_cargo_check(function)                                                               \
AORE: function; CLAY: function; COAL: function; COKE: function; CORE: function; FERT: function;  \
GRVL: function; IORE: function; KAOL: function; LIME: function; MNO2: function; NITR: function;  \
PEAT: function; PHOS: function; PORE: function; POTA: function; QLME: function; RCYC: function;  \
SAND: function; SCMT: function; SLAG: function; SULP: function;                                  \

#define bulk_cargo_capacity(carrying_capacity, volume)                         \
AORE: calculate_capacity(carrying_capacity, volume, 1280, cargo_unit_weight);  \
CLAY: calculate_capacity(carrying_capacity, volume, 1700, cargo_unit_weight);  \
COAL: calculate_capacity(carrying_capacity, volume, 900, cargo_unit_weight);   \
COKE: calculate_capacity(carrying_capacity, volume, 510, cargo_unit_weight);   \
CORE: calculate_capacity(carrying_capacity, volume, 2590, cargo_unit_weight);  \
FERT: calculate_capacity(carrying_capacity, volume, 1200, cargo_unit_weight);  \
GRVL: calculate_capacity(carrying_capacity, volume, 1800, cargo_unit_weight);  \
IORE: calculate_capacity(carrying_capacity, volume, 2470, cargo_unit_weight);  \
KAOL: calculate_capacity(carrying_capacity, volume, 1550, cargo_unit_weight);  \
LIME: calculate_capacity(carrying_capacity, volume, 1550, cargo_unit_weight);  \
MNO2: calculate_capacity(carrying_capacity, volume, 7430, cargo_unit_weight);  \
NITR: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
PEAT: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
PHOS: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
PORE: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
POTA: calculate_capacity(carrying_capacity, volume, 1280, cargo_unit_weight);  \
QLME: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
RCYC: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
SAND: calculate_capacity(carrying_capacity, volume, 1550, cargo_unit_weight);  \
SCMT: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
SLAG: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
SULP: calculate_capacity(carrying_capacity, volume, 1310, cargo_unit_weight);  \

#define cargo_all_piecelist()                               \
BDMT, BRCK, COPR, IRON, METL, PIPE, STEL, WDPR, WOOD, ZINC  \

#define cargo_all_wide_piecelist()                   \
cargo_all_piecelist(), ENSP, GOOD, MNSP, VEHI, VPTS  \

#define piece_cargo_capacity(carrying_capacity, volume)                        \
BDMT: calculate_capacity(carrying_capacity, volume, 1600, cargo_unit_weight);  \
BRCK: calculate_capacity(carrying_capacity, volume, 1800, cargo_unit_weight);  \
COPR: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
IRON: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
METL: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
PIPE: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
STEL: calculate_capacity(carrying_capacity, volume, 7700, cargo_unit_weight);  \
WDPR: calculate_capacity(carrying_capacity, volume, 900, cargo_unit_weight);   \
WOOD: calculate_capacity(carrying_capacity, volume, 700, cargo_unit_weight);   \
ZINC: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
ENSP: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
GOOD: calculate_capacity(carrying_capacity, volume, 500, cargo_unit_weight);   \
MNSP: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
VPTS: calculate_capacity(carrying_capacity, volume, 1, cargo_unit_weight);     \
VEHI: return 3;   

#define cargo_all_flatbedlist()                   \
cargo_all_bulklist(), cargo_all_wide_piecelist()  \

#define flatbed_capacity(carrying_capacity, area)  \
piece_cargo_capacity(carrying_capacity, area * 2)  \
bulk_cargo_capacity(carrying_capacity, area * 1)   \

#define cargo_all_gondolalist()              \
cargo_all_bulklist(), cargo_all_piecelist()  \

#define cargo_all_grain_hopperlist()    \
GRAI, WHEA, MAIZ, CERE, OLSD            \

#define grain_cargo_check(function)                                              \
GRAI: function; WHEA: function; MAIZ: function; CERE: function; OLSD: function;  \

#define cargo_all_fert_hopperlist()    \
FERT, PHOS                             \

#define cargo_all_hopperlist()                               \
cargo_all_fert_hopperlist(), cargo_all_grain_hopperlist()    \

#define cargo_all_boxcarlist()                               \
BDMT, BEAN, BEER, BOOM, CASS, CERA, CMNT, DYES, ENSP, FICR,  \
FMSP, GLAS, GOOD, JAVA, MNSP, NUTS, PAPR, PLAS, PLST, RCYC,  \
RUBR, SGCN, SGBT, VPTS, WATR, WOOL                           \

#define cargo_all_lvst_boxcarlist()  \
LVST, cargo_all_boxcarlist()         \

#define cargo_all_lvst_grain_boxcarlist()                  \
cargo_all_lvst_boxcarlist(), CERE, GRAI, MAIZ, OLSD, WHEA  \

#define cargo_all_reflist()         \
FOOD, FISH, FRUT, MILK, SGBT, FRVG  \

#define cargo_all_fruit_reflist()  \
FRUT, SGBT                         \

#define cargo_all_milk_reflist()  \
MILK, FOOD                        \

#define cargo_all_grain_boxcarlist()                  \
cargo_all_boxcarlist(), CERE, GRAI, MAIZ, OLSD, WHEA  \

#define cargo_all_petr_tanker()  \
PETR                             \

#define cargo_all_oil_tanker()  \
RFPR, OIL_                      \

#define cargo_all_oil_products_tanker()          \
cargo_all_oil_tanker(), cargo_all_petr_tanker()  \

#define cargo_all_food_tanker()  \
BEER, WATR, COLA, EOIL, FZDR     \

#define cargo_all_cement_tanker()  \
CMNT, BDMT, MNO2, LIME, SASH       \

#define cargo_all_chem_tanker()  \
NITR, PHOS, SULP                 \

#define cargo_all_other_tanker()  \
RUBR, DYES, PLAS, PLST            \

#define cargo_all_milk_tanker()      \
MILK, FOOD, cargo_all_food_tanker()  \

#define cargo_all_nonfood_tanker()                        \
cargo_all_oil_products_tanker(), cargo_all_other_tanker() \

#define cargo_all_tanker()                                                         \
cargo_all_oil_products_tanker(), cargo_all_food_tanker(), cargo_all_other_tanker() \

#define cargo_gen_containerlist()  \
MAIL, cargo_all_boxcarlist()       \

#define gen_container_cargo_check(function)                                                      \
MAIL: function; BDMT: function; BEAN: function; BEER: function; BOOM: function; CASS: function;  \
CERA: function; CMNT: function; DYES: function; ENSP: function; FICR: function; FMSP: function;  \
GLAS: function; GOOD: function; JAVA: function; MNSP: function; NUTS: function; PAPR: function;  \
PLAS: function; PLST: function; RCYC: function; RUBR: function; SGCN: function; SGBT: function;  \
VPTS: function; WATR: function; WOOL: function;                                                  \

#define cargo_ref_containerlist()   \
FOOD, FISH, FRUT, MILK, SGBT, FRVG  \

#define ref_container_cargo_check(function)                                                      \
FOOD: function; FISH: function; FRUT: function; MILK: function; SGBT: function; FRVG: function;  \

#define cargo_tank_containerlist()                                                        \
BEER, COLA, DYES, EOIL, FZDR, NITR, OIL_, PETR, PHOS, PLAS, PLST, RFPR, RUBR, SULP, WATR  \

#define tank_container_cargo_check(function)                                      \
BEER: function; COLA: function; DYES: function; EOIL: function; FZDR: function;   \
NITR: function; OIL_: function; PETR: function; PHOS: function; PLAS: function;   \
PLST: function; RFPR: function; RUBR: function; SULP: function; WATR: function;   \

#define cargo_all_containerlist()                                                 \
cargo_gen_containerlist(), cargo_ref_containerlist(), cargo_tank_containerlist()  \

// paiment for cleaning after cargo
switch (FEAT_TRAINS, SELF, tanker_refit_cost,
  (5 * ((cargo_type_in_veh == PETR) && (getbits(extra_callback_info1, 0, 8) != PETR))) +
  (4 * (((cargo_type_in_veh == RFPR) || (cargo_type_in_veh == OIL_)) && 
       (getbits(extra_callback_info1, 0, 8) != RFPR) && (getbits(extra_callback_info1, 0, 8) != OIL_))) +
  (1 * (((cargo_type_in_veh == WATR) || (cargo_type_in_veh == COLA) || (cargo_type_in_veh == EOIL) || (cargo_type_in_veh == MILK) || (cargo_type_in_veh == BEER) || (cargo_type_in_veh == FZDR) || (cargo_type_in_veh == FOOD)) && 
       (getbits(extra_callback_info1, 0, 8) != WATR) && (getbits(extra_callback_info1, 0, 8) != COLA) && (getbits(extra_callback_info1, 0, 8) != EOIL) && (getbits(extra_callback_info1, 0, 8) != MILK) && (getbits(extra_callback_info1, 0, 8) != BEER) && (getbits(extra_callback_info1, 0, 8) != FZDR) && (getbits(extra_callback_info1, 0, 8) != FOOD))) +
  (2 * (((cargo_type_in_veh == RUBR) || (cargo_type_in_veh == DYES) || (cargo_type_in_veh == PLAS) || (cargo_type_in_veh == PLST)) && 
       (getbits(extra_callback_info1, 0, 8) != RUBR) && (getbits(extra_callback_info1, 0, 8) != DYES) && (getbits(extra_callback_info1, 0, 8) != PLAS) && (getbits(extra_callback_info1, 0, 8) != PLST))) )
{
  1..5: return;
        return 0 | CB_RESULT_AUTOREFIT;
}

// paiment for cleaning for cargo
switch (FEAT_TRAINS, SELF, boxcar_refit_cost,
  (2 * (((cargo_type_in_veh != CERE) && (cargo_type_in_veh != GRAI) && (cargo_type_in_veh != WHEA) && (cargo_type_in_veh != MAIZ) && (cargo_type_in_veh != OLSD) && (cargo_type_in_veh != FZDR) && (cargo_type_in_veh != CTCD)) && 
       (getbits(extra_callback_info1, 0, 8) == CERE) || (getbits(extra_callback_info1, 0, 8) == GRAI) || (getbits(extra_callback_info1, 0, 8) == WHEA) || (getbits(extra_callback_info1, 0, 8) == MAIZ) || (getbits(extra_callback_info1, 0, 8) == OLSD) || (getbits(extra_callback_info1, 0, 8) == TOFF) || (getbits(extra_callback_info1, 0, 8) == CTCD))) )
{
  1..5: return;
        return 0 | CB_RESULT_AUTOREFIT;
}

switch (FEAT_TRAINS, SELF, container_on_13_4012_weight,
  build_year >= 1992)
{
  0: return (21 + LOAD_TEMP(8));
     return (22 + LOAD_TEMP(8));
}

// TODO
// Добавить учёт типа контейнера, пока расчёт по обычным. Учесть рефы и танки

switch (FEAT_TRAINS, SELF, container_weight,
[  STORE_TEMP((cargo_count > 0) * (((random_bits >> 1) & 0x01) * 1 + 4), 8),
   STORE_TEMP((cargo_count > 0) * (((random_bits >> 1) & 0x01) * 1 + 7), 9),
   vehicle_type_id])
{
  flatbed_13_401:    return (21 + LOAD_TEMP(8));
  flatbed_13_4012:   container_on_13_4012_weight;
  flatbed_11_n004:   return (22 + LOAD_TEMP(8));
  flatbed_13_6954:   return (24 + LOAD_TEMP(8));  
  flatbed_13_198_02: return (26 + LOAD_TEMP(8));
                     return 255;
}

// Вместимость платформы на LOAD_TEP(8) контейнера (20 футов)

switch (FEAT_TRAINS, SELF, gen_container_20_cargo_capacity,
  cargo_type_in_veh)
{
  MAIL: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 500, cargo_unit_weight));  
  BDMT: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1600, cargo_unit_weight));  
  BEAN: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  BEER: return LOAD_TEMP(8) * (calculate_capacity(30, 11, 850, cargo_unit_weight));  // на европалетах в бутылках по 1,5 литра исходя из плотности пива 1040
  BOOM: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  CASS: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  CERA: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1200, cargo_unit_weight));  
  CMNT: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1900, cargo_unit_weight));  
  DYES: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  ENSP: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  FICR: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  FMSP: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  GLAS: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1200, cargo_unit_weight));  
  GOOD: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 500, cargo_unit_weight));  
  JAVA: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 430, cargo_unit_weight));  // Кофейные зерна жаренные, roast coffee beans
  MNSP: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  NUTS: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 650, cargo_unit_weight));  // Арахис чищенный (земляной орех), shelled peanuts 
  PAPR: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1201, cargo_unit_weight)); // Бумага обычная, standard paper 
  PLAS: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  PLST: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  RCYC: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  RUBR: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1950, cargo_unit_weight));  
  SGCN: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  SGBT: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  VPTS: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1, cargo_unit_weight));  
  WATR: return LOAD_TEMP(8) * (calculate_capacity(30, 11, 820, cargo_unit_weight));  // на европалетах в бутылках по 1,5 литра исходя из плотности воды 1000  
  WOOL: return LOAD_TEMP(8) * (calculate_capacity(30, 33, 1310, cargo_unit_weight)); // Шерсть, волосы, wool  
        return 0;
}

switch (FEAT_TRAINS, SELF, gen_container_40_cargo_capacity,
  cargo_type_in_veh)
{
  BDMT: return (calculate_capacity(30, 68, 1600, cargo_unit_weight));  
  BEAN: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  BEER: return (calculate_capacity(30, 25, 850, cargo_unit_weight));  // на европалетах в бутылках по 1,5 литра исходя из плотности пива 1040
  BOOM: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  CASS: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  CERA: return (calculate_capacity(30, 68, 1200, cargo_unit_weight));  
  CMNT: return (calculate_capacity(30, 68, 1900, cargo_unit_weight));  
  DYES: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  ENSP: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  FICR: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  FMSP: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  GLAS: return (calculate_capacity(30, 68, 1200, cargo_unit_weight));  
  GOOD: return (calculate_capacity(30, 68, 500, cargo_unit_weight));  
  JAVA: return (calculate_capacity(30, 68, 430, cargo_unit_weight));  // Кофейные зерна жаренные, roast coffee beans
  MNSP: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  NUTS: return (calculate_capacity(30, 68, 650, cargo_unit_weight));  // Арахис чищенный (земляной орех), shelled peanuts 
  PAPR: return (calculate_capacity(30, 68, 1201, cargo_unit_weight)); // Бумага обычная, standard paper 
  PLAS: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  PLST: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  RCYC: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  RUBR: return (calculate_capacity(30, 68, 1950, cargo_unit_weight));  
  SGCN: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  SGBT: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  VPTS: return (calculate_capacity(30, 68, 1, cargo_unit_weight));  
  WATR: return (calculate_capacity(30, 25, 820, cargo_unit_weight));  // на европалетах в бутылках по 1,5 литра исходя из плотности воды 1000  
  WOOL: return (calculate_capacity(30, 68, 1310, cargo_unit_weight)); // Шерсть, волосы, wool  
        return 0;
}

switch (FEAT_TRAINS, SELF, ref_container_20_cargo_capacity,
  cargo_type_in_veh)
{
  FOOD: return LOAD_TEMP(8) * (calculate_capacity(22, 28, 950, cargo_unit_weight));  
  FISH: return LOAD_TEMP(8) * (calculate_capacity(22, 28, 922, cargo_unit_weight));   // Плотность потрошеной рыбы колеблется от 1,05 до 1,08 г/см3. 
                                                                                      // Плотность сазана при 15 °С составляет 0,987, а при 0 °С — 0,922.
  FRUT: return LOAD_TEMP(8) * (calculate_capacity(22, 28, 846, cargo_unit_weight));   // Плотность яблок 846, груш 1034.  
  MILK: return LOAD_TEMP(8) * (calculate_capacity(22, 28, 1027, cargo_unit_weight));  
  SGBT: return LOAD_TEMP(8) * (calculate_capacity(22, 28, 1, cargo_unit_weight));  
  FRVG: return LOAD_TEMP(8) * (calculate_capacity(22, 28, 1034, cargo_unit_weight));  
        return LOAD_TEMP(8) * (calculate_capacity(22, 28, 1000, cargo_unit_weight));  
}

switch (FEAT_TRAINS, SELF, ref_container_40_cargo_capacity,
  cargo_type_in_veh)
{
  FOOD: return (calculate_capacity(28, 59, 950, cargo_unit_weight));  
  FISH: return (calculate_capacity(28, 59, 922, cargo_unit_weight));   // Плотность потрошеной рыбы колеблется от 1,05 до 1,08 г/см3. 
                                                                       // Плотность сазана при 15 °С составляет 0,987, а при 0 °С — 0,922.
  FRUT: return (calculate_capacity(28, 59, 846, cargo_unit_weight));   // Плотность яблок 846, груш 1034.  
  MILK: return (calculate_capacity(28, 59, 1027, cargo_unit_weight));  
  SGBT: return (calculate_capacity(28, 59, 1, cargo_unit_weight));  
  FRVG: return (calculate_capacity(28, 59, 1034, cargo_unit_weight));  
        return (calculate_capacity(28, 59, 1000, cargo_unit_weight));  
}

switch (FEAT_TRAINS, SELF, tank_container_20_cargo_capacity,
  cargo_type_in_veh)
{
  BEER: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1045, cargo_unit_weight));  
  COLA: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1030, cargo_unit_weight));  
  DYES: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1200, cargo_unit_weight));  
  EOIL: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 915, cargo_unit_weight));  
  FZDR: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 950, cargo_unit_weight));  
  MNO2: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 7430, cargo_unit_weight));  
  NITR: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1580, cargo_unit_weight));  
  OIL_: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 940, cargo_unit_weight));  
  PETR: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 800, cargo_unit_weight));  
  PHOS: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1426, cargo_unit_weight));  
  PLAS: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 800, cargo_unit_weight));  
  PLST: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 800, cargo_unit_weight));  
  RFPR: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 850, cargo_unit_weight));  
  RUBR: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1190, cargo_unit_weight));  
  SULP: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 2085, cargo_unit_weight));  
  WATR: return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1000, cargo_unit_weight));  
        return LOAD_TEMP(8) * (calculate_capacity(32, 26, 1000, cargo_unit_weight));  
}

/* 
 TODO 
 Придумать механизм для 60-и 80-и футовых платформ. Результаты, получаемые по расчёту 20 и 40 футового контейнера 
 надо не возвращать, а вписывать во временный регистр, а последним действием складывать результаты (с учётом 
 количества контейнеров). Пока возможны только варианты 1*20, 1*40, 2*20, 3*20, 4*20. Варианты 20+40, 2*40 не возможны.
*/

switch (FEAT_TRAINS, SELF, gen_container2_cargo_capacity,
  (random_bits >> 1) & 0x01)  
{
  1: gen_container_20_cargo_capacity;
     gen_container_40_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, ref_container2_cargo_capacity,
  (random_bits >> 1) & 0x01)  
{
  1: ref_container_20_cargo_capacity;
     ref_container_40_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, container2_cargo_a1972_capacity,
  cargo_type_in_veh)
{
gen_container_cargo_check(gen_container2_cargo_capacity)
  return 0;
} 

switch (FEAT_TRAINS, SELF, container2_cargo_a1988_capacity,
  cargo_type_in_veh)
{
ref_container_cargo_check(ref_container2_cargo_capacity)
gen_container_cargo_check(gen_container2_cargo_capacity)
  return 0;
} 

switch (FEAT_TRAINS, SELF, container2_cargo_a1995_capacity,
  cargo_type_in_veh)
{
tank_container_cargo_check(tank_container_20_cargo_capacity)
ref_container_cargo_check(ref_container2_cargo_capacity)
gen_container_cargo_check(gen_container2_cargo_capacity)
  return 0;
} 

switch (FEAT_TRAINS, SELF, container2_cargo_capacity,
[  STORE_TEMP(2, 8), 
   (date_of_last_service >= date(1972,1,1)) +  
   (date_of_last_service >= date(1988,1,1)) +  
   (date_of_last_service >= date(1995,1,1))])  
{
  1: container2_cargo_a1972_capacity;
  2: container2_cargo_a1988_capacity;
  3: container2_cargo_a1995_capacity;
     return 0;
}
