
// Здесь  каждый груз можно занести в каждом списке, при этом будет своя плотность для данного типа транспортировки
// отбор списка допустимых грузов идёт ранее
// http://tehtab.ru/guide/guidephysics/guidephysicsdensity/densitytable/
// http://thermalinfo.ru/svojstva-zhidkostej/zhidkosti-raznye/plotnost-zhidkostej

/*
  TODO
выделить грузы на палетах

Регистр 0 - грузоподъёмность, т
Регистр 1 - объём, м³
Регистр 2 - площадь, м²
Регистр 3 - паллетомест
Регистр 4 - длина (шаблон)
*/

switch (FEAT_TRAINS, SELF, bulk_cargo_capacity, cargo_type_in_veh)
{
  AORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280, cargo_unit_weight);
  CLAY: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1700, cargo_unit_weight);
  COAL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);  // Уголь антрацит кусковой сухой
  COKE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 510, cargo_unit_weight);
  CORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2590, cargo_unit_weight);  // Медная руда красная  (куприт), copper ore 1940-2590
  FERT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  GRVL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1800, cargo_unit_weight);
  IORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2470, cargo_unit_weight);  // Гематит (красный железняк) дробленый, iron ore - crushed 2100-2900
  KAOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);
  LIME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);
  MNO2: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7430, cargo_unit_weight);
  NITR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Селитра натриевая измельченная, ground sodium nitrate
  PEAT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);   // Торф сырой, moist peat
  PHOS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);   // Суперфосфат, acid phosphate
  PORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 5015, cargo_unit_weight);  // Пирит цельный (кошачье золото, железный колчедан, серный колчедан, камень инков), pyrite (fool's gold) 2400 - 5015
  RCYC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);   // Бытовые отходы, бытовой мусор, garbage, household rubbish
  SALT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Соль пищевая тонкого помола, fine salt
  SAND: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1440, cargo_unit_weight);  // Песок сухой рыхлый, loose sand
  SCMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 3000, cargo_unit_weight);
  SLAG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2110, cargo_unit_weight);  // Шлак топочный цельный, solid slag
  SULP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1310, cargo_unit_weight);  // Сера кусковая, lump sulphur
        return 0;
}
switch (FEAT_TRAINS, SELF, piece_cargo_capacity, cargo_type_in_veh)
{
  ALUM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 2750, cargo_unit_weight);  // Алюминиевая фольга, aluminium foil
  BATT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 100, cargo_unit_weight);
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 1600, cargo_unit_weight);
  BRCK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 1800, cargo_unit_weight);
  COPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 2590, cargo_unit_weight);  // Медная руда красная  (куприт), copper ore
  IRON: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7880, cargo_unit_weight);  // Железо чистое Iron Fe
  METL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7900, cargo_unit_weight);
  PIPE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7700/4, cargo_unit_weight);
  STEL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7700, cargo_unit_weight);
  WDPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 500, cargo_unit_weight);
  WOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 450, cargo_unit_weight);   // Дерево сухое, ель
  ZINC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7130, cargo_unit_weight);  // Цинк чистый Zinc Zn

  POWR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 300, cargo_unit_weight);
  ENSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 300, cargo_unit_weight);
  GOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  MNSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 300, cargo_unit_weight);   // Удобрения минеральные	800-1200
  MPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  VBOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  VPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  VEHI: return LOAD_TEMP(4);
        return 0;
}
switch (FEAT_TRAINS, SELF, box_cargo_capacity, cargo_type_in_veh)
{
  GOLD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 75, cargo_unit_weight);
  VALU: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 75, cargo_unit_weight);
  DIAM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 75, cargo_unit_weight);

  MAIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);

  ACID: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1505/4, cargo_unit_weight);  //  Азотная кислота в таре
  AMMO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1130/4, cargo_unit_weight);  //  Аммония сульфат в таре
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1600, cargo_unit_weight);
  BAKE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 590, cargo_unit_weight); // Мука пшеничная, wheat flour
  BEAN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 580, cargo_unit_weight);  // Бобы касторовые Beans
  BEER: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности пива 1040
  BOOM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  CASS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 720, cargo_unit_weight);  // Свекла, Beets
  CHLO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200/4, cargo_unit_weight);  // Соляная кислота в таре
  CERE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  CERA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight); // Стекло органическое
  CMNT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540, cargo_unit_weight);  // Цементный клинкер, cement clinker
  COLA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1030, cargo_unit_weight);  // в бутылках
  CTCD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 400, cargo_unit_weight);
  COTT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 420, cargo_unit_weight);  // Хлопковая вата, сottonwood
  DYES: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);  // 930-950
  EOIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 600, cargo_unit_weight);  // в бутылках
  ENSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 300, cargo_unit_weight);
  ETHL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1076/4, cargo_unit_weight);  // водный раствор этиленгликоля в таре
  FICR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 420, cargo_unit_weight);  // Хлопковая вата, сottonwood
  FMSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
  FURN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 520, cargo_unit_weight); // Древесная щепа сухая, dry wood chips
  FZDR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 85, cargo_unit_weight);  // в бутылках на палетах
  GLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2500, cargo_unit_weight); // Стекло оконное, window glass
  GOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  GRAI: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 705, cargo_unit_weight); // Рожь, rye
  GLUE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 640, cargo_unit_weight); // Крахмальный клей, порошок, powdered vegetable glue
  JAVA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 430, cargo_unit_weight); // Кофейные зерна жаренные, roast coffee beans
  LVST: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 200, cargo_unit_weight);
  LYE_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1525/4, cargo_unit_weight);   // водный раствор гидроксида натрия в таре
  MAIZ: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 760, cargo_unit_weight); // Зерно кукурузы, maize grain
  MNSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 300, cargo_unit_weight);
  MPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  NUTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 650, cargo_unit_weight);  // Арахис чищенный (земляной орех), shelled peanuts
  OLSD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 770, cargo_unit_weight);
  PAPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1201, cargo_unit_weight); // Бумага обычная, standard paper
  PLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  PLST: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  POWR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
  RCYC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);  // Бытовые отходы, бытовой мусор, garbage, household rubbish
  RSGR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);  // Сахар-сырец тростниковый, raw cane sugar
  RUBR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1950, cargo_unit_weight);
  SALT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Соль пищевая тонкого помола, fine salt
  SGCN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 270, cargo_unit_weight);  // Сахарный тростник, sugarcane
  SGBT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 560, cargo_unit_weight);  // Сахарной свеклы пульпа, wet sugarbeet pulp
  SOAP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 370, cargo_unit_weight);  // Мыльный порошок powdered soap
  SUGR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);  // Сахар-песок, granulated sugar
  SWET: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 430, cargo_unit_weight);
  TATO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 680, cargo_unit_weight);  // Картофель, white potatoes
  TOFF: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 860, cargo_unit_weight);
  TOYS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 40, cargo_unit_weight);
  VBOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 250, cargo_unit_weight);
  VPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);
  WATR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 820/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности воды 1000
  WOOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1310, cargo_unit_weight); // Шерсть, волосы, wool
  WHEA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 780, cargo_unit_weight); // Зерно пшеницы - wheat grain
        return 0;
}
switch (FEAT_TRAINS, SELF, ref_cargo_capacity, cargo_type_in_veh)
{
  FOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);
  FISH: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 922, cargo_unit_weight);   // Плотность потрошеной рыбы колеблется от 1,05 до 1,08 г/см3. Плотность сазана при 15 °С составляет 0,987, а при 0 °С — 0,922.
  FRUT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 846, cargo_unit_weight);   // Плотность яблок 846, груш 1034.
  MILK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 600, cargo_unit_weight);   // В коробках
  SGBT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 560, cargo_unit_weight);   // Сахарной свеклы пульпа, wet sugarbeet pulp
  FRVG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1034, cargo_unit_weight);
        return 0;
}
switch (FEAT_TRAINS, SELF, tank_cargo_capacity, cargo_type_in_veh)
{
  ACID: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1505, cargo_unit_weight);  //  Азотная кислота, HNO3 водный раствор 91%, nitric acid 91%
  AMMO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 880, cargo_unit_weight);   // водный раствор аммиака 33%
  BUBL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 50, cargo_unit_weight);
  BEER: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1045, cargo_unit_weight);
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540, cargo_unit_weight);  // Цементный клинкер, cement clinker
  COLA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1030, cargo_unit_weight);
  CHLO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Соляная кислота 40% водный раствор, hydrochloric acid 40%
  CMNT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540, cargo_unit_weight);  // Цементный клинкер, cement clinker
  DYES: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1400, cargo_unit_weight);
  EOIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 915, cargo_unit_weight);
  ETHL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1076, cargo_unit_weight);  // водный раствор этиленгликоля 60%
  FERT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1505, cargo_unit_weight);  //  Азотная кислота, HNO3 водный раствор 91%, nitric acid 91%
  FOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);
  FUEL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 815, cargo_unit_weight);   // Керосин, Kerosene
  FZDR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 235, cargo_unit_weight);
  LYE_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1525, cargo_unit_weight);   // водный раствор гидроксида натрия 50%;
  LIME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);
  MILK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1027, cargo_unit_weight);  // Молоко, Milk
  MNO2: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7430, cargo_unit_weight);
  NITR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Селитра натриевая измельченная, ground sodium nitrate
  OIL_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 940, cargo_unit_weight);
  PETR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 730, cargo_unit_weight);   // Бензин
  PLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  PLST: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  POTA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280, cargo_unit_weight);  // Калий углекислый (поташ), potash
  QLME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);   // Негашеная известь рыхлая, lump quick lime
  RFPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);
  RUBR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1190, cargo_unit_weight);
  SASH: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1080, cargo_unit_weight);  // Натрия карбонат в гранулах (углекислый натрий, сода кальцинированная) heavy soda ash
  SULP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2085, cargo_unit_weight);
  WATR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1000, cargo_unit_weight);
  URAN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 18950, cargo_unit_weight); // Уран чистый Uranium U
        return 0;
}
switch (FEAT_TRAINS, SELF, hopper_cargo_capacity, cargo_type_in_veh)
{
  AMMO: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1130, cargo_unit_weight);  // Аммония сульфат сернокислый аммоний (сухой) Ammonium Sulphate
  BAKE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 590, cargo_unit_weight);   // Мука пшеничная, wheat flour
  BEER: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1045, cargo_unit_weight);
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540, cargo_unit_weight);  // Цементный клинкер, cement clinker
  CERE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  CMNT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1540, cargo_unit_weight);  // Цементный клинкер, cement clinker
  FERT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  FOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);
  GRAI: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 705, cargo_unit_weight);   // Рожь, rye
  MAIZ: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 760, cargo_unit_weight);   // Зерно кукурузы, maize grain
  OLSD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 770, cargo_unit_weight);
  PEAT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);   // Торф сырой, moist peat
  PHOS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);   // Суперфосфат, acid phosphate
  POTA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280, cargo_unit_weight);  // Калий углекислый (поташ), potash
  QLME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);   // Негашеная известь рыхлая, lump quick lime
  SASH: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1080, cargo_unit_weight);  // Натрия карбонат в гранулах (углекислый натрий, сода кальцинированная) heavy soda ash
  WATR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1000, cargo_unit_weight);
  WHEA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 780, cargo_unit_weight);   // Зерно пшеницы - wheat grain
        return 0;
}

switch (FEAT_TRAINS, SELF, gen_container_cargo_capacity,
[  STORE_TEMP((LOAD_TEMP(5) * 30) + (LOAD_TEMP(6) * 30), 0),
   STORE_TEMP((LOAD_TEMP(5) * 33) + (LOAD_TEMP(6) * 68), 1) ])
{  box_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, ref_container_cargo_capacity,
[  STORE_TEMP((LOAD_TEMP(5) * 22) + (LOAD_TEMP(6) * 28), 0),
   STORE_TEMP((LOAD_TEMP(5) * 28) + (LOAD_TEMP(6) * 59), 1) ])
{  ref_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, tank_container_cargo_capacity,
[  STORE_TEMP((max(LOAD_TEMP(5), LOAD_TEMP(7))) * 32, 0),
   STORE_TEMP((max(LOAD_TEMP(5), LOAD_TEMP(7))) * 26, 1) ])
{  tank_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, container_a1972_cargo_capacity,
  cargo_type_in_veh)
{
gen_container_cargo_check(gen_container_cargo_capacity)
  return 0;
}

switch (FEAT_TRAINS, SELF, container_a1988_cargo_capacity,
  cargo_type_in_veh)
{
ref_container_cargo_check(ref_container_cargo_capacity)
  container_a1972_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, container_a1995_cargo_capacity,
  cargo_type_in_veh)
{
tank_container_cargo_check(tank_container_cargo_capacity)
  container_a1988_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, container_cargo_capacity,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)) +
  (date_of_last_service >= date(1995,1,1)))
{
  1: container_a1972_cargo_capacity;
  2: container_a1988_cargo_capacity;
  3: container_a1995_cargo_capacity;
     return 0;
}

switch (FEAT_TRAINS, SELF, container40_cargo_capacity,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)))
{
  1: container_a1972_cargo_capacity;
  2: container_a1988_cargo_capacity;
     return 0;
}

switch (FEAT_TRAINS, SELF, container_40_cargo_capacity, // only 40
[  STORE_TEMP(0, 5),
   STORE_TEMP(1, 6),
   STORE_TEMP(0, 7)])
{  container40_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, container_2_20_cargo_capacity,
[  STORE_TEMP(2, 5),
   STORE_TEMP(0, 6)])
{  container_cargo_capacity;  }

/*
switch (FEAT_TRAINS, SELF, container_2040_cargo_capacity,
[  STORE_TEMP(1, 5),
   STORE_TEMP(1, 6)])
{  container_cargo_capacity;  }

   TODO
   Отложим правильный код до лучших времён. пока будем всё считать по худшему
*/
switch (FEAT_TRAINS, SELF, container_20and40_cargo_capacity,
[  STORE_TEMP(2, 7),
   ((random_bits >> 1) & 0x01) ] )
{
//  0: container_2040_cargo_capacity;
  container_2_20_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, container_2_20or40_cargo_capacity,
[  STORE_TEMP(0, 5),
   STORE_TEMP(1, 6),
   STORE_TEMP(2, 7),
   ((random_bits >> 1) & 0x01) ] )
{
// 1: container_2_20_cargo_capacity;
   container_cargo_capacity;
}

#define flatbed_capacity()                    \
bulk_cargo_check(bulk_cargo_capacity)         \
piece_wide_cargo_check(piece_cargo_capacity)  \

#define gondola_capacity()                    \
bulk_cargo_check(bulk_cargo_capacity)         \
piece_cargo_check(piece_cargo_capacity)       \

// paiment for cleaning after cargo
switch (FEAT_TRAINS, SELF, tanker_refit_cost,
  (5 * (((cargo_type_in_veh == PETR) || (cargo_type_in_veh == FUEL)) && 
       (getbits(extra_callback_info1, 0, 8) != PETR) && (getbits(extra_callback_info1, 0, 8) != FUEL))) +
  (4 * (((cargo_type_in_veh == RFPR) || (cargo_type_in_veh == OIL_)) &&
       (getbits(extra_callback_info1, 0, 8) != RFPR) && (getbits(extra_callback_info1, 0, 8) != OIL_))) +
  (1 * (((cargo_type_in_veh == WATR) || (cargo_type_in_veh == COLA) || (cargo_type_in_veh == EOIL) || (cargo_type_in_veh == MILK) || (cargo_type_in_veh == BEER) || (cargo_type_in_veh == FZDR) || (cargo_type_in_veh == FOOD)) &&
       (getbits(extra_callback_info1, 0, 8) != WATR) && (getbits(extra_callback_info1, 0, 8) != COLA) && (getbits(extra_callback_info1, 0, 8) != EOIL) && (getbits(extra_callback_info1, 0, 8) != MILK) && (getbits(extra_callback_info1, 0, 8) != BEER) && (getbits(extra_callback_info1, 0, 8) != FZDR) && (getbits(extra_callback_info1, 0, 8) != FOOD))) +
  (2 * (((cargo_type_in_veh == RUBR) || (cargo_type_in_veh == DYES) || (cargo_type_in_veh == PLAS) || (cargo_type_in_veh == PLST)) &&
       (getbits(extra_callback_info1, 0, 8) != RUBR) && (getbits(extra_callback_info1, 0, 8) != DYES) && (getbits(extra_callback_info1, 0, 8) != PLAS) && (getbits(extra_callback_info1, 0, 8) != PLST))) )
{
  1..5: return;
        return 0 | CB_RESULT_AUTOREFIT;
}

// paiment for cleaning for cargo
switch (FEAT_TRAINS, SELF, boxcar_refit_cost,
  ((cargo_type_in_veh != CERE) && (cargo_type_in_veh != GRAI) &&
   (cargo_type_in_veh != WHEA) && (cargo_type_in_veh != MAIZ) &&
   (cargo_type_in_veh != OLSD) && (cargo_type_in_veh != TOFF) &&
   (cargo_type_in_veh != CTCD)) &&
  ((getbits(extra_callback_info1, 0, 8) == CERE) || (getbits(extra_callback_info1, 0, 8) == GRAI) ||
   (getbits(extra_callback_info1, 0, 8) == WHEA) || (getbits(extra_callback_info1, 0, 8) == MAIZ) ||
   (getbits(extra_callback_info1, 0, 8) == OLSD) || (getbits(extra_callback_info1, 0, 8) == TOFF) ||
   (getbits(extra_callback_info1, 0, 8) == CTCD)) )
{
  1: return 1;
     return 0 | CB_RESULT_AUTOREFIT;
}

// WOOD only
switch (FEAT_TRAINS, SELF, wood_refit_cost,
  ((cargo_type_in_veh != WOOD) && (cargo_type_in_veh != WDPR)) ||
  ((getbits(extra_callback_info1, 0, 8) != WOOD) && (getbits(extra_callback_info1, 0, 8) != WDPR)))
{
  1: return 1;
     return 0 | CB_RESULT_AUTOREFIT;
}

// allow autorefit for containers

switch (FEAT_TRAINS, SELF, container20_a1972_refit_cost,
  getbits(extra_callback_info1, 0, 8))
{
gen_container_cargo_check(return (0 | CB_RESULT_AUTOREFIT))
  return 1;
}

switch (FEAT_TRAINS, SELF, container20_a1988_refit_cost,
  getbits(extra_callback_info1, 0, 8))
{
ref_container_cargo_check(return (0 | CB_RESULT_AUTOREFIT))
  container20_a1972_refit_cost;
}

switch (FEAT_TRAINS, SELF, container20_a1995_refit_cost,
  getbits(extra_callback_info1, 0, 8))
{
tank_container_cargo_check(return (0 | CB_RESULT_AUTOREFIT))
  container20_a1988_refit_cost;
}

switch (FEAT_TRAINS, SELF, container_20_refit_cost,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)) +
  (date_of_last_service >= date(1995,1,1)))
{
  1: container20_a1972_refit_cost;
  2: container20_a1988_refit_cost;
  3: container20_a1995_refit_cost;
     return 0;
}

switch (FEAT_TRAINS, SELF, container40_a1972_refit_cost,
  getbits(extra_callback_info1, 0, 8))
{
gen_container_cargo_check(return (0 | CB_RESULT_AUTOREFIT))
  return 1;
}

switch (FEAT_TRAINS, SELF, container40_a1988_refit_cost,
  getbits(extra_callback_info1, 0, 8))
{
ref_container_cargo_check(return (0 | CB_RESULT_AUTOREFIT))
  container40_a1972_refit_cost;
}

switch (FEAT_TRAINS, SELF, container40_a1995_refit_cost,
  getbits(extra_callback_info1, 0, 8))
{
tank_container_cargo_check(return 0)
  container40_a1988_refit_cost;
}

switch (FEAT_TRAINS, SELF, container_40_refit_cost,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)) +
  (date_of_last_service >= date(1995,1,1)))
{
  1: container40_a1972_refit_cost;
  2: container40_a1988_refit_cost;
  3: container40_a1995_refit_cost;
     return 0;
}

switch (FEAT_TRAINS, SELF, container_20and40_refit_cost, 0)
{ container_20_refit_cost; }

switch (FEAT_TRAINS, SELF, container_2_20or40_refit_cost, 0)
{
  container_20_refit_cost;
}

// Защита от выбора груза, контейнеры для которого ещё не появились

switch (FEAT_TRAINS, SELF, container_a1972_bitmask_vehicle_info,
  cargo_type_in_veh)
{
gen_container_cargo_check(return 0)
  return bitmask(FLAG_INADMISSIBLE_CARGO);
}

switch (FEAT_TRAINS, SELF, container_a1988_bitmask_vehicle_info,
  cargo_type_in_veh)
{
ref_container_cargo_check(return 0)
  container_a1972_bitmask_vehicle_info;
}

switch (FEAT_TRAINS, SELF, container_a1995_bitmask_vehicle_info,
  cargo_type_in_veh)
{
tank_container_cargo_check(return 0)
  container_a1988_bitmask_vehicle_info;
}

switch (FEAT_TRAINS, SELF, container_bitmask_vehicle_info2,
  (current_year >= 1972) +
  (current_year >= 1988) +
  (current_year >= 1995))
{
  0: return bitmask(FLAG_INADMISSIBLE_CARGO);
  1: container_a1972_bitmask_vehicle_info;
  2: container_a1988_bitmask_vehicle_info;
     container_a1995_bitmask_vehicle_info;
}

switch (FEAT_TRAINS, SELF, container_bitmask_vehicle_info,
  cargo_capacity)
{
  0: return bitmask(FLAG_INADMISSIBLE_CARGO);
     container_bitmask_vehicle_info2;
}
