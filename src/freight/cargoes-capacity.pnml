
// Здесь  каждый груз можно занести в каждом списке, при этом будет своя плотность для данного типа транспортировки
// отбор списка допустимых грузов идёт ранее
/*
  TODO 
  выделить грузы на палетах
*/

#define flatbed_capacity()               \
bulk_cargo_check(bulk_cargo_capacity)    \
piece_cargo_check(piece_cargo_capacity)  \

switch (FEAT_TRAINS, SELF, bulk_cargo_capacity, cargo_type_in_veh)
{
  AORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280, cargo_unit_weight);  
  CLAY: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1700, cargo_unit_weight);  
  COAL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 900, cargo_unit_weight);   
  COKE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 510, cargo_unit_weight);   
  CORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2590, cargo_unit_weight);  // Медная руда красная  (куприт), copper ore 1940-2590
  FERT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  
  GRVL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1800, cargo_unit_weight);  
  IORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2470, cargo_unit_weight);  // Гематит (красный железняк) дробленый, iron ore - crushed 2100-2900
  KAOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);  
  LIME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);  
  MNO2: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7430, cargo_unit_weight);  
  NITR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Селитра натриевая измельченная, ground sodium nitrate    
  PEAT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);   // Торф сырой, moist peat  
  PHOS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);   // Суперфосфат, acid phosphate  
  PORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 5015, cargo_unit_weight);  // Пирит цельный (кошачье золото, железный колчедан, серный колчедан, камень инков), pyrite (fool's gold) 2400 - 5015  
  POTA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280, cargo_unit_weight);  // Калий углекислый (поташ), potash
  QLME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);   // Негашеная известь рыхлая, lump quick lime 
  RCYC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);   // Бытовые отходы, бытовой мусор, garbage, household rubbish
  SAND: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1440, cargo_unit_weight);  // Песок сухой рыхлый, loose sand
  SCMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);   // Бытовые отходы, бытовой мусор, garbage, household rubbish  
  SLAG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2110, cargo_unit_weight);  // Шлак топочный цельный, solid slag    
  SULP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1310, cargo_unit_weight);  // Сера кусковая, lump sulphur
        return 0;
}
switch (FEAT_TRAINS, SELF, piece_cargo_capacity, cargo_type_in_veh)
{
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1600, cargo_unit_weight);  
  BRCK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1800, cargo_unit_weight);  
  COPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2590, cargo_unit_weight);  // Медная руда красная  (куприт), copper ore   
  IRON: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7880, cargo_unit_weight);  // Железо чистое Iron Fe   
  METL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7900, cargo_unit_weight);     
  PIPE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7700, cargo_unit_weight);     
  STEL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7700, cargo_unit_weight);  
  WDPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 900, cargo_unit_weight);   
  WOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 670, cargo_unit_weight);   // Дерево сухое, береза  
  ZINC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7130, cargo_unit_weight);  // Цинк чистый Zinc Zn   

  ENSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);     
  GOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);   
  MNSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);   // Удобрения минеральные	800-1200  
  VPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);     
  VEHI: return LOAD_TEMP(2) / 3;   
        return 0;
}
switch (FEAT_TRAINS, SELF, box_cargo_capacity, cargo_type_in_veh)
{
  MAIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1600, cargo_unit_weight);  
  BEAN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 580, cargo_unit_weight);  // Бобы касторовые Beans
  BEER: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности пива 1040
  BOOM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  CASS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 720, cargo_unit_weight);  // Свекла, Beets   
  CERA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  
  CMNT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1900, cargo_unit_weight);  
  DYES: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);  // 930-950
  ENSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  FICR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 420, cargo_unit_weight);  // Хлопковая вата, сottonwood
  FMSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  GLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  
  GOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  JAVA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 430, cargo_unit_weight);  // Кофейные зерна жаренные, roast coffee beans
  MNSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  NUTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 650, cargo_unit_weight);  // Арахис чищенный (земляной орех), shelled peanuts 
  PAPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1201, cargo_unit_weight); // Бумага обычная, standard paper 
  PLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);  
  PLST: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);  
  RCYC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);  // Бытовые отходы, бытовой мусор, garbage, household rubbish
  RUBR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1950, cargo_unit_weight);  
  SGCN: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 270, cargo_unit_weight);  // Сахарный тростник, sugarcane
  SGBT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 560, cargo_unit_weight);  // Сахарной свеклы пульпа, wet sugarbeet pulp
  VPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 500, cargo_unit_weight);  
  WATR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 820/3, cargo_unit_weight);  // на европалетах в бутылках по 1,5 литра исходя из плотности воды 1000  
  WOOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1310, cargo_unit_weight); // Шерсть, волосы, wool  
        return 0;
}
switch (FEAT_TRAINS, SELF, ref_cargo_capacity, cargo_type_in_veh)
{
  FOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);  
  FISH: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 922, cargo_unit_weight);   // Плотность потрошеной рыбы колеблется от 1,05 до 1,08 г/см3. Плотность сазана при 15 °С составляет 0,987, а при 0 °С — 0,922.
  FRUT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 846, cargo_unit_weight);   // Плотность яблок 846, груш 1034.  
  MILK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1027, cargo_unit_weight);  
  SGBT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 560, cargo_unit_weight);   // Сахарной свеклы пульпа, wet sugarbeet pulp  
  FRVG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1034, cargo_unit_weight);  
        return 0;
}
switch (FEAT_TRAINS, SELF, tank_cargo_capacity, cargo_type_in_veh)
{
  BEER: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1045, cargo_unit_weight);  
  COLA: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1030, cargo_unit_weight);  
  DYES: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  
  EOIL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 915, cargo_unit_weight);  
  FZDR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 950, cargo_unit_weight);  
  MNO2: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7430, cargo_unit_weight);  
  NITR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1580, cargo_unit_weight);  
  OIL_: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 940, cargo_unit_weight);  
  PETR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);  
  PHOS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1426, cargo_unit_weight);  
  PLAS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);  
  PLST: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);  
  RFPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);  
  RUBR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1190, cargo_unit_weight);  
  SULP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2085, cargo_unit_weight);  
  WATR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1000, cargo_unit_weight);  
        return 0;
}

switch (FEAT_TRAINS, SELF, gen_container_2_20_cargo_capacity,
[  STORE_TEMP(60, 0), 
   STORE_TEMP(66, 1) ])
{  box_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, gen_container_40_cargo_capacity,
[  STORE_TEMP(30, 0), 
   STORE_TEMP(68, 1) ])
{  box_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, gen_container2_cargo_capacity,
  (random_bits >> 1) & 0x01)  
{
  1: gen_container_2_20_cargo_capacity;
     gen_container_40_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, ref_container_2_20_cargo_capacity,
[  STORE_TEMP(60, 0), 
   STORE_TEMP(66, 1) ])
{  ref_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, ref_container_40_cargo_capacity,
[  STORE_TEMP(30, 0), 
   STORE_TEMP(68, 1) ])
{  ref_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, ref_container2_cargo_capacity,
  (random_bits >> 1) & 0x01)  
{
  1: ref_container_2_20_cargo_capacity;
     ref_container_40_cargo_capacity;
}

switch (FEAT_TRAINS, SELF, tank_container2_cargo_capacity,
[  STORE_TEMP(64, 0), 
   STORE_TEMP(52, 1) ])
{  tank_cargo_capacity;  }

switch (FEAT_TRAINS, SELF, container2_cargo_a1972_capacity,
  cargo_type_in_veh)
{
gen_container_cargo_check(gen_container2_cargo_capacity)
  return 0;
} 

switch (FEAT_TRAINS, SELF, container2_cargo_a1988_capacity,
  cargo_type_in_veh)
{
ref_container_cargo_check(ref_container2_cargo_capacity)
gen_container_cargo_check(gen_container2_cargo_capacity)
  return 0;
} 

switch (FEAT_TRAINS, SELF, container2_cargo_a1995_capacity,
  cargo_type_in_veh)
{
tank_container_cargo_check(tank_container2_cargo_capacity)
ref_container_cargo_check(ref_container2_cargo_capacity)
gen_container_cargo_check(gen_container2_cargo_capacity)
  return 0;
} 

switch (FEAT_TRAINS, SELF, container2_cargo_capacity,
[  STORE_TEMP(2, 8), 
   (date_of_last_service >= date(1972,1,1)) +  
   (date_of_last_service >= date(1988,1,1)) +  
   (date_of_last_service >= date(1995,1,1))])  
{
  1: container2_cargo_a1972_capacity;
  2: container2_cargo_a1988_capacity;
  3: container2_cargo_a1995_capacity;
     return 0;
}

