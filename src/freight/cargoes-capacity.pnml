// Здесь  каждый груз можно занести в каждом списке, при этом будет своя плотность для данного типа транспортировки
// отбор списка допустимых грузов идёт ранее
// http://tehtab.ru/guide/guidephysics/guidephysicsdensity/densitytable/
// http://thermalinfo.ru/svojstva-zhidkostej/zhidkosti-raznye/plotnost-zhidkostej

/*
  TODO
выделить грузы на палетах

Регистр 0 - грузоподъёмность, т
Регистр 1 - объём, м³
Регистр 2 - площадь, м²
Регистр 3 - паллетомест
Регистр 4 - длина (шаблон)
*/

switch (FEAT_TRAINS, SELF, bulk_cargo_capacity, cargo_type_in_veh)
{
  AORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1280, cargo_unit_weight);
  CLAY: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1700, cargo_unit_weight);
  COAL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 850, cargo_unit_weight);  // Уголь антрацит кусковой сухой
  COKE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 510, cargo_unit_weight);
  CORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2590, cargo_unit_weight);  // Медная руда красная  (куприт), copper ore 1940-2590
  FERT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);
  GRVL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1800, cargo_unit_weight);
  IORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2470, cargo_unit_weight);  // Гематит (красный железняк) дробленый, iron ore - crushed 2100-2900
  KAOL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);
  LIME: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1550, cargo_unit_weight);
  MNO2: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 7430, cargo_unit_weight);
  NITR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Селитра натриевая измельченная, ground sodium nitrate
  PEAT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 800, cargo_unit_weight);   // Торф сырой, moist peat
  PHOS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 960, cargo_unit_weight);   // Суперфосфат, acid phosphate
  PORE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 5015, cargo_unit_weight);  // Пирит цельный (кошачье золото, железный колчедан, серный колчедан, камень инков), pyrite (fool's gold) 2400 - 5015
  RCYC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 480, cargo_unit_weight);   // Бытовые отходы, бытовой мусор, garbage, household rubbish
  SALT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1200, cargo_unit_weight);  // Соль пищевая тонкого помола, fine salt
  SAND: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1440, cargo_unit_weight);  // Песок сухой рыхлый, loose sand
  SCMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 3000, cargo_unit_weight);
  SLAG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 2110, cargo_unit_weight);  // Шлак топочный цельный, solid slag
  SULP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(1), 1310, cargo_unit_weight);  // Сера кусковая, lump sulphur
        return 0;
}
switch (FEAT_TRAINS, SELF, piece_cargo_capacity, cargo_type_in_veh)
{
  ALUM: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 2750, cargo_unit_weight);  // Алюминиевая фольга, aluminium foil
  BATT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 100, cargo_unit_weight);
  BDMT: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 1600, cargo_unit_weight);
  BRCK: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 1800, cargo_unit_weight);
  COPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 2590, cargo_unit_weight);  // Медная руда красная  (куприт), copper ore
  IRON: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7880, cargo_unit_weight);  // Железо чистое Iron Fe
  METL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7900, cargo_unit_weight);
  PIPE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7700/4, cargo_unit_weight);
  STEL: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7700, cargo_unit_weight);
  WDPR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 500, cargo_unit_weight);
  WOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 450, cargo_unit_weight);   // Дерево сухое, ель
  ZINC: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 7130, cargo_unit_weight);  // Цинк чистый Zinc Zn

  POWR: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 300, cargo_unit_weight);
  ENSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 300, cargo_unit_weight);
  GOOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  MNSP: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 300, cargo_unit_weight);  // Удобрения минеральные        800-1200
  MPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  VBOD: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  VPTS: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  VENG: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);
  TYRE: return calculate_capacity(LOAD_TEMP(0), LOAD_TEMP(2) * 5 / 2, 400, cargo_unit_weight);

  VEHI: return LOAD_TEMP(4);
        return 0;
}

#include "cargoes-capacity-box.pnml"
#include "cargoes-capacity-ref.pnml"
#include "cargoes-capacity-tank.pnml"
#include "cargoes-capacity-hopper.pnml"
#include "cargoes-capacity-cont.pnml"

#define flatbed_capacity()                     \
bulk_cargo_check(bulk_cargo_capacity)          \
piece_wide_cargo_check(piece_cargo_capacity)   \

#define gondola_capacity()                \
bulk_cargo_check(bulk_cargo_capacity)     \
piece_cargo_check(piece_cargo_capacity)   \

//end
