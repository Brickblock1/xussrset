// Определение скорости погрузки бункерной засыпкой. Скорость выгрузки задана в регистре 1
// Для штучного груза считается скорость погрузки равной скорости выгрузки
switch (FEAT_TRAINS, SELF, all_wagons_bulk_station_loading_speed,
[ STORE_TEMP(LOAD_TEMP(0) == 0 ? 255  : LOAD_TEMP(0), 0),
  cargo_type_in_veh])
{
// begin main block
// --- Живность: люди
//   PASS,
//   TOUR,
// --- Живность: неизвестно что
//   YETI,
//   YETY,
// --- Живность: звери
//   LVST,
// --- Крытые: Товары
//   BOOM,
//   GOOD,
// --- Крытые: Материалы
//   CERA,
//   CMNT,
//   GLAS,
//   LYE_,
//   PAPR,
//   SOAP,
// --- Крытые: Сырьё
//   FICR,
//   WOOL,
// --- Крытые: Ценности
//   DIAM,
//   GOLD,
//   MAIL,
//   VALU,
// --- Жидкости: Топливо
//   FUEL,
//   OIL_,
//   PETR,
//   RFPR,
// --- Жидкости: Материалы
//   COAT,
//   DYES,
//   PLAS,
//   PLST,
// --- Жидкости: Химикаты
//   ACID,
//   CHLO,
//   CTAR,
//   NH3_,
//   O2__,
// --- Жидкости: Сырьё
//   BUBL,
//   RUBR,
// --- Жидкости: Еда
//   COLA,
//   EOIL,
//   WATR,
// --- Еда: Продукты
//   BEER,
//   FOOD,
//   FZDR,
// --- Еда: Пищевое сырьё
//   FISH,
//   MILK,
//   RSGR,
//   SALT,
//   SUGR,
//   SWET,
// --- Еда: Растения
//   BEAN,
//   CASS,
//   FRUT,
//   FRVG,
//   JAVA,
//   NUTS,
//   SGBT,
//   SGCN,
// --- Еда: Зерно
  CERE: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  CTCD: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  GRAI: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  MAIZ: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  OLSD: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  TOFF: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  WHEA: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
// --- Сыпучка: Материалы
//   CBLK,
//   FERT,
  RCYC: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
//   SASH,
  SCMT: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
  SCRP: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
  WSTE: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
// --- Сыпучка: Породы
//   COAL,
//   COKE,
//   GRVL,
//   PEAT,
//   SAND,
//   SLAG,
// --- Сыпучка: Глины
  CLAY: return min(calculate_loading_speed(5, 7, 9, 11, 13), LOAD_TEMP(0));
  KAOL: return min(calculate_loading_speed(5, 7, 9, 11, 13), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
//   QLME,
// --- Сыпучка: Руды
//   AORE,
//   CORE,
//   FECR,
//   IORE,
//   MNO2,
//   NITR,
//   PHOS,
//   PORE,
//   POTA,
//   SULP,
// --- Навал
//   BDMT,
//   BRCK,
// --- Навал: Древесины
  BATT: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  TWOD: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  WDPR: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  WOOD: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
// --- Навал: Стали
  ALUM: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  COPR: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  CSTI: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  IRON: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  METL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  PIPE: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  STAL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STCB: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STEL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STSE: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STSH: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STST: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STWR: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  ZINC: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
// --- Штучный груз
  ENSP: return min(10, LOAD_TEMP(0));
  FMSP: return min(10, LOAD_TEMP(0));
  MNSP: return min(10, LOAD_TEMP(0));
  POWR: return min(10, LOAD_TEMP(0));
  TOYS: return min(10, LOAD_TEMP(0));
  TYRE: return min(10, LOAD_TEMP(0));
  VBOD: return min(10, LOAD_TEMP(0));
  VEHI: return min(10, LOAD_TEMP(0));
  VENG: return min(10, LOAD_TEMP(0));
  VPTS: return min(10, LOAD_TEMP(0));
// --- Прочее
//   NWST,
//   URAN,
// end main block
        return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed2,
  cargo_type_in_veh)  // возможность использования люков - неприменимо
{
  cargo_check_piecelist(all_wagons_bulk_station_loading_speed)
  cargo_check_large_boxeslist(all_wagons_bulk_station_loading_speed)
  cargo_check_vehicles(all_wagons_bulk_station_loading_speed)
  cargo_check_clays_bulklist(all_wagons_bulk_station_loading_speed)
  return LOAD_TEMP(1);
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed1,
[ STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: all_wagons_bulk_loading_speed2;
     all_wagons_bulk_station_loading_speed;
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  (LOAD_TEMP(1) == 0) && (LOAD_TEMP(3) == 0)])                          // Глуходонные вагоны, выгрузка сваливанием не допускается, считается по скорости погрузки
{
  1: all_wagons_bulk_station_loading_speed;
     all_wagons_bulk_loading_speed1;
}
