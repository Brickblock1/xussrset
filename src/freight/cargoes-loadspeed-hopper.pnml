// Определение скорости погрузки засыпкой из элеватора. Скорость принимающих устройств неограничена.

switch (FEAT_TRAINS, SELF, all_wagons_hopper_station_loading_speed, cargo_type_in_veh)
{
//                                     <1910 >1910 >1930 >1950 >1990
// begin main block
// --- Живность: люди
//   PASS,
//   TOUR,
// --- Живность: неизвестно что
//   YETI,
//   YETY,
// --- Живность: звери
//   LVST,
// --- Крытые: Товары
//   BOOM,
//   GOOD,
// --- Крытые: Материалы
//   CERA,
  CMNT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   GLAS,
//   LYE_,
//   PAPR,
//   SOAP,
// --- Крытые: Сырьё
//   FICR,
//   WOOL,
// --- Крытые: Ценности
//   DIAM,
//   GOLD,
//   MAIL,
//   VALU,
// --- Жидкости: Топливо
//   FUEL,
//   OIL_,
//   PETR,
//   RFPR,
// --- Жидкости: Материалы
//   COAT,
//   DYES,
//   PLAS,
//   PLST,
// --- Жидкости: Химикаты
//   ACID,
//   CHLO,
//   CTAR,
//   NH3_,
//   O2__,
// --- Жидкости: Сырьё
//   BUBL,
//   RUBR,
// --- Жидкости: Еда
//   COLA,
//   EOIL,
//   WATR,
// --- Еда: Продукты
//   BEER,
//   FOOD,
//   FZDR,
// --- Еда: Пищевое сырьё
//   FISH,
//   MILK,
//   RSGR,
//   SALT,
//   SUGR,
//   SWET,
// --- Еда: Растения
//   BEAN,
//   CASS,
//   FRUT,
//   FRVG,
//   JAVA,
//   NUTS,
//   SGBT,
//   SGCN,
// --- Еда: Зерно
  CERE: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  CTCD: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  GRAI: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  MAIZ: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  OLSD: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  TOFF: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  WHEA: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
// --- Сыпучка: Материалы
//   CBLK,
  FERT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   RCYC,
//   SASH,
//   SCMT,
//   SCRP,
//   WSTE,
// --- Сыпучка: Породы
//   COAL,
//   COKE,
//   GRVL,
  PEAT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   SAND,
//   SLAG,
// --- Сыпучка: Глины
  CLAY: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  KAOL: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  QLME: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// --- Сыпучка: Руды
//   AORE,
//   CORE,
//   FECR,
//   IORE,
//   MNO2,
//   NITR,
  PHOS: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   PORE,
  POTA: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   SULP,
// --- Навал
//   BDMT,
//   BRCK,
// --- Навал: Древесины
//   BATT,
//   TWOD,
//   WDPR,
//   WOOD,
// --- Навал: Стали
//   ALUM,
//   COPR,
//   CSTI,
//   IRON,
//   METL,
//   PIPE,
//   STAL,
//   STCB,
//   STEL,
//   STSE,
//   STSH,
//   STST,
//   STWR,
//   ZINC,
// --- Штучный груз
//   ENSP,
  FMSP: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
//   MNSP,
//   POWR,
//   TOYS,
//   TYRE,
//   VBOD,
//   VEHI,
//   VENG,
//   VPTS,
// --- Прочее
//   NWST,
//   URAN,
// end main block
        return min(calculate_loading_speed(9,  13,  17,  21,  25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_hopper_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: return LOAD_TEMP(1);
     all_wagons_hopper_station_loading_speed;
}
