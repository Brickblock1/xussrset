// Определение скорости погрузки заливкой. Ограничены мощности подающих и принимающих устройств

switch (FEAT_TRAINS, SELF, all_wagons_tanker_station_loading_speed, cargo_type_in_veh)
{
// совсем невязкие грузы
  BUBL: return min(calculate_loading_speed(20, 25, 33, 42, 50), LOAD_TEMP(0));
// Низковязкие грузы
  BEER: return min(calculate_loading_speed(14, 21, 25, 30, 36), LOAD_TEMP(0));
  FZDR: return min(calculate_loading_speed(14, 21, 25, 30, 36), LOAD_TEMP(0));
  COLA: return min(calculate_loading_speed(14, 21, 25, 30, 36), LOAD_TEMP(0));
// обычные грузы
  MILK: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
  PETR: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
  FUEL: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
  WATR: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
// Высоковязкие грузы
  BDMT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  CBLK: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  CMNT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  COAT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));  //DYES
  DYES: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  EOIL: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  FERT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  O2__: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  OIL_: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  RFPR: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  RUBR: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  PLAS: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  PLST: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  POTA: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  QLME: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(0));
  SASH: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
  SULP: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
// Очень вязкие грузы и особоопасные грузы
  ACID: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(0));
  CHLO: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(0));
  NH3_: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(0));
  MNO2: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(0));
  NITR: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(0));
  URAN: return min(calculate_loading_speed(1, 1, 1, 1, 1), LOAD_TEMP(0));
  NWST: return min(calculate_loading_speed(1, 1, 1, 1, 1), LOAD_TEMP(0));

        return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_tanker_station_unloading_speed, cargo_type_in_veh)
{
// совсем невязкие грузы
  BUBL: return min(calculate_loading_speed(20, 25, 33, 42, 50), LOAD_TEMP(1));
// Низковязкие грузы
  BEER: return min(calculate_loading_speed(14, 21, 25, 30, 36), LOAD_TEMP(1));
  FZDR: return min(calculate_loading_speed(14, 21, 25, 30, 36), LOAD_TEMP(1));
  COLA: return min(calculate_loading_speed(14, 21, 25, 30, 36), LOAD_TEMP(1));
// обычные грузы
  MILK: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(1));
  PETR: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(1));
  FUEL: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(1));
  WATR: return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(1));
// Высоковязкие грузы
  BDMT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  CBLK: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  CMNT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  COAT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));  // DYES
  DYES: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  EOIL: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  FERT: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  LIME: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  O2__: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  OIL_: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  RFPR: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  RUBR: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  PLAS: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  PLST: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  POTA: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  QLME: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  SASH: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
  SULP: return min(calculate_loading_speed(6, 8, 12, 14, 15), LOAD_TEMP(1));
// Очень вязкие грузы и особоопасные грузы
  ACID: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(1));
  CHLO: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(1));
  NH3_: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(1));
  MNO2: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(1));
  NITR: return min(calculate_loading_speed(3, 4, 6, 7, 8), LOAD_TEMP(1));
  URAN: return min(calculate_loading_speed(1, 1, 1, 1, 1), LOAD_TEMP(1));
  NWST: return min(calculate_loading_speed(1, 1, 1, 1, 1), LOAD_TEMP(1));

        return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(1));
}

switch (FEAT_TRAINS, SELF, all_wagons_tanker_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: all_wagons_tanker_station_unloading_speed;
     all_wagons_tanker_station_loading_speed;
}
