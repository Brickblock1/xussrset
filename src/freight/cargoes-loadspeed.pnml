/*
Регистр 0  // Ограничение "способа погрузки" (количество тиков на погрузку) (сколько стадий погрузки нарисовано)
Регистр 1  // Ограничение "способа выгрузки" (количество тиков на выгрузку) (сколько стадий выгрузки нарисовано)
Регистр 2  // ограничение "входных" дверей/люков вагон. Количество единиц груза, которое может войти
Регистр 3  // ограничение "выходных" дверей/люков вагон. Количество единиц груза, которое может выйти
TODO разобраться, зачем у хопперов выставлено 4/6 тика на выгрузку
TODO понять корректность модели расчёта скорости погрузки. По сути указанные ограничения вагонов - это ограничения в "кубах",
а грузы идут в тоннах. Грузы имеют в несколько раз различающуюся плотность. По сути нужен "пересчёт" ограничений количества
груза, переданного от вагона, в тонны груза через плотность. У цистерн груз идёт в литрах, расчёт верен.
*/

#include "cargoes-loadspeed-cont.pnml"
#include "cargoes-loadspeed-box.pnml"
#include "cargoes-loadspeed-tank.pnml"

// Определение скорости погрузки бункерной засыпкой. Скорость выгрузки задана в регистре 1
// Для штучного груза считается скорость погрузки равной скорости выгрузки
switch (FEAT_TRAINS, SELF, all_wagons_bulk_station_loading_speed,
[ STORE_TEMP(LOAD_TEMP(0) == 0 ? 255 : LOAD_TEMP(0), 0),
  cargo_type_in_veh])
{
// Еда: Зерно
  CERE: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  CTCD: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  GRAI: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  MAIZ: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  OLSD: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  TOFF: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
  WHEA: return min(calculate_loading_speed(8, 11, 14, 17, 20), LOAD_TEMP(0));
// Сыпучка: Материалы
  SCMT: return min(calculate_loading_speed(9, 14, 19, 24, 29), LOAD_TEMP(0));
// Сыпучка: Глины
  CLAY: return min(calculate_loading_speed(5, 7, 9, 11, 13), LOAD_TEMP(0));
  KAOL: return min(calculate_loading_speed(5, 7, 9, 11, 13), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
  QLME: return min(calculate_loading_speed(7, 10, 13, 16, 19), LOAD_TEMP(0));
// Навал: Древесины
  BATT: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  TWOD: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  WDPR: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  WOOD: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
// Навал: Стали
  COPR: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  CSTI: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  IRON: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  METL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  PIPE: return min(calculate_loading_speed(10, 11, 12, 13, 14), LOAD_TEMP(0));
  STAL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STCB: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STEL: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  STST: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
  ZINC: return min(calculate_loading_speed(6, 8, 10, 12, 14), LOAD_TEMP(0));
// Штучный груз
  ENSP: return min(10, LOAD_TEMP(0));
  FMSP: return min(10, LOAD_TEMP(0));
  MNSP: return min(10, LOAD_TEMP(0));
  POWR: return min(10, LOAD_TEMP(0));
  TOYS: return min(10, LOAD_TEMP(0));
  TYRE: return min(10, LOAD_TEMP(0));
  VBOD: return min(10, LOAD_TEMP(0));
  VEHI: return min(10, LOAD_TEMP(0));
  VENG: return min(10, LOAD_TEMP(0));
  VPTS: return min(10, LOAD_TEMP(0));
// Прочее
        return min(calculate_loading_speed(9, 13, 17, 21, 25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed2,
  cargo_type_in_veh)  // возможность использования люков - неприменимо
{
piece_wide_cargo_check(all_wagons_bulk_station_loading_speed)
clays_cargo_check(all_wagons_bulk_station_loading_speed)
        return LOAD_TEMP(1);
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed1,
[ STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: all_wagons_bulk_loading_speed2;
     all_wagons_bulk_station_loading_speed;
}

switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  (LOAD_TEMP(1) == 0) && (LOAD_TEMP(3) == 0)])                          // Глуходонные вагоны, выгрузка сваливанием не допускается, считается по скорости погрузки
{
  1: all_wagons_bulk_station_loading_speed;
     all_wagons_bulk_loading_speed1;
}

// Определение скорости погрузки засыпкой из элеватора. Скорость принимающих устройств неограничена.

switch (FEAT_TRAINS, SELF, all_wagons_hopper_station_loading_speed, cargo_type_in_veh)
{
//                                     <1910 >1910 >1930 >1950 >1990
// Крытые: Материалы
  CMNT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// Еда: Зерно
  CERE: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  CTCD: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  GRAI: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  MAIZ: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  OLSD: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  TOFF: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
  WHEA: return min(calculate_loading_speed(8,  11,  14,  17,  20), LOAD_TEMP(0));
// Сыпучка: Материалы
  CBLK: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  FERT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// Сыпучка: Породы
  PEAT: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// Сыпучка: Глины
  CLAY: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  KAOL: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  LIME: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  QLME: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// Сыпучка: Руды
  PHOS: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
  POTA: return min(calculate_loading_speed(6,  8,  12,  14,  15), LOAD_TEMP(0));
// Прочее
        return min(calculate_loading_speed(9,  13,  17,  21,  25), LOAD_TEMP(0));
}

switch (FEAT_TRAINS, SELF, all_wagons_hopper_loading_speed,
[ STORE_TEMP((LOAD_TEMP(0) == 0) + LOAD_TEMP(0), 0),                    // интерпритируем 0 как 1
  STORE_TEMP((LOAD_TEMP(1) == 0) + LOAD_TEMP(1), 1),                    // интерпритируем 0 как 1
  STORE_TEMP(min((LOAD_TEMP(2) == 0) * 255 + LOAD_TEMP(2), 255), 2),    // интерпритируем 0 как 255
  STORE_TEMP(min((LOAD_TEMP(3) == 0) * 255 + LOAD_TEMP(3), 255), 3),    // интерпритируем 0 как 255
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(0) + 1, LOAD_TEMP(2)), 0),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  STORE_TEMP(min(cargo_capacity / LOAD_TEMP(1) + 1, LOAD_TEMP(3)), 1),  // переводим тики в 1 груза, берем минимум по объёму и тикам
  vehicle_is_unloading])
{
  1: return LOAD_TEMP(1);
     all_wagons_hopper_station_loading_speed;
}
