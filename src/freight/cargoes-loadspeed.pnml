
// Containers
// LOAD_TEMP(8) содержит 255 (=0) или cargo_capacity / 2 + 1 (=1) 
// Если появятся более короткие вагоны с графикой 1 контейнера, то надо будет для них вернуть 255

switch (FEAT_TRAINS, SELF, container_loading_speed2,
[ STORE_TEMP((random_bits >> 1 & 0x01) * (cargo_capacity / 2 + 1) + (1 - (random_bits >> 1 & 0x01)) * 255, 8),
  cargo_type_in_veh])  
{
  tank_container_cargo_check(return cargo_capacity / 2 + 1)
  return LOAD_TEMP(8);
}

switch (FEAT_TRAINS, SELF, container_loading_speed,
[ STORE_TEMP(cargo_capacity / 2 + 2 - (random_bits >> 1 & 0x01), 8),
  vehicle_type_id])
{
  flatbed_13_9004: LOAD_TEMP(8); // 60 футовые грузить всегда в 2 захода
  flatbed_13_470: LOAD_TEMP(8); // 60 футовые грузить всегда в 2 захода
  container_loading_speed2;
}

// Определение неограниченной скорости погрузки
#define wagon_loading_speed_unlim(name)              \
switch (FEAT_TRAINS, SELF, name##_loading_speed, 0)  \
{ return 255; }                                      \

// Определение симметричной скорости погрузки с ограничением по вагону. скорость погрузки станции не ограничена
#define wagon_loading_speed_sym(name, amount)        \
switch (FEAT_TRAINS, SELF, name##_loading_speed, 0)  \
{ return amount; }                                   \

// Определение несимметричной скорости погрузки с ограничением по вагону. скорость погрузки станции не ограничена
#define wagon_loading_speed(name, amount_l, amount_u)                   \
switch (FEAT_TRAINS, SELF, name##_loading_speed, vehicle_is_unloading)  \
{ 1: return amount_u;                                                   \
     return amount_l; }                                                 \

// Определение несимметричной скорости погрузки с ограничением по вагону c выгрузкой за 2 tic'а. скорость погрузки станции не ограничена
#define wagon_loading_speed_auu(name, amount_l)                         \
switch (FEAT_TRAINS, SELF, name##_loading_speed, vehicle_is_unloading)  \
{ 1: return (cargo_capacity / 2 + 1);                                   \
     return amount_l; }                                                 \

// Определение скорости погрузки бункерной засыпкой. Скорость выгрузки не ограничена
// сюда же относятся штучный груз, погрузка которого не ограничена вагоном
switch (FEAT_TRAINS, SELF, all_wagons_CERE_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return 8; 
  1: return 11;
  2: return 14;
  3: return 17;
     return 20; 
}
switch (FEAT_TRAINS, SELF, all_wagons_WOODWDPR_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return 10;
  1: return 11; 
  2: return 12; 
  3: return 13;
     return 14; 
}
switch (FEAT_TRAINS, SELF, all_wagons_STEL_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return 6;
  1: return 8; 
  2: return 10; 
  3: return 12;
     return 14; 
}
switch (FEAT_TRAINS, SELF, all_wagons_CLAY_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return 5; 
  1: return 7; 
  2: return 9; 
  3: return 11;
     return 13; 
}
switch (FEAT_TRAINS, SELF, all_wagons_LIME_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return 7; 
  1: return 10;
  2: return 13;
  3: return 16;
     return 19; 
}
switch (FEAT_TRAINS, SELF, all_wagons_SCMT_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return 9; 
  1: return 14;
  2: return 19;
  3: return 24;
     return 29; 
}
switch (FEAT_TRAINS, SELF, all_wagons_all_bulk_loading_speed,
  (current_year >= 1910) + 
  (current_year >= 1930) + 
  (current_year >= 1950) + 
  (current_year >= 1990))
{ 
  0: return  9;
  1: return 13;
  2: return 17;
  3: return 21;
     return 25; 
}
switch (FEAT_TRAINS, SELF, all_wagons_bulk_loading_speed, cargo_type_in_veh) 
{ 
  ENSP: return 10;
  MNSP: return 10;
  VPTS: return 10;
  CERE: all_wagons_CERE_loading_speed; 
  GRAI: all_wagons_CERE_loading_speed; 
  WHEA: all_wagons_CERE_loading_speed; 
  MAIZ: all_wagons_CERE_loading_speed; 
  OLSD: all_wagons_CERE_loading_speed; 
  WOOD: all_wagons_WOODWDPR_loading_speed; 
  WDPR: all_wagons_WOODWDPR_loading_speed; 
  COPR: all_wagons_STEL_loading_speed; 
  STEL: all_wagons_STEL_loading_speed; 
  CLAY: all_wagons_CLAY_loading_speed; 
  LIME: all_wagons_LIME_loading_speed; 
  SCMT: all_wagons_SCMT_loading_speed; 
        all_wagons_all_bulk_loading_speed; 
} 

switch (FEAT_TRAINS, SELF, all_wagons_bulk_uu_loading_speed, vehicle_is_unloading) 
{ 1: return 255; 
     all_wagons_bulk_loading_speed; }

switch (FEAT_TRAINS, SELF, all_wagons_bulk_auu_loading_speed2, cargo_type_in_veh) 
{ 
  ENSP: all_wagons_bulk_loading_speed;
  MNSP: all_wagons_bulk_loading_speed;
  VPTS: all_wagons_bulk_loading_speed;
  WOOD: all_wagons_bulk_loading_speed; 
  WDPR: all_wagons_bulk_loading_speed; 
  STEL: all_wagons_bulk_loading_speed; 
  CLAY: all_wagons_bulk_loading_speed; 
  LIME: all_wagons_bulk_loading_speed; 
  SCMT: all_wagons_bulk_loading_speed; 
  COPR: all_wagons_bulk_loading_speed; 
        return (cargo_capacity / 2 + 1); 
} 

switch (FEAT_TRAINS, SELF, all_wagons_bulk_auu_loading_speed, vehicle_is_unloading) 
{ 1: all_wagons_bulk_auu_loading_speed2;
     all_wagons_bulk_loading_speed; } 

