 // flatbed_13_n453

switch (FEAT_TRAINS, SELF, flatbed_13_n453_sprites_start,
  cargo_type_in_veh)
{
  GOOD: flatbed_13_xx_good_sprites;
  WDPR: flatbed_13_xx_wdpr_sprites;
  WOOD: flatbed_13_xx_wood_sprites;
  STEL: flatbed_13_xx_stel_sprites;
        align_8_sprites;
}

short_vehicle_RND(flatbed_13_n453, flatbed_13_xx_stel1_sprites)

random_switch (FEAT_TRAINS, SELF, flatbed_13_n453_random, 0 )
{
  independent: flatbed_13_xx_stel_sprites;
  1: return ttdall_cc + 0x7C;
  1: return ttdall_cc + 0x4B;
  1: return ttdall_cc + 0x7B;
  1: return ttdall_cc + 0x73;
  1: return ttdall_cc + 0x74;
  1: return ttdall_cc + 0x72;
  1: return ttdall_cc + 0x53;
  1: return ttdall_cc + 0x59;
}

switch (FEAT_TRAINS, SELF, flatbed_13_n453_colour_mapping,
  cargo_subtype + (enable_cc_default * 1024 * (cargo_subtype == 0)))
{
  0: flatbed_13_n453_random;
  1: return ttdall_cc + 0x7C;
  2: return ttdall_cc + 0x4B;
  3: return ttdall_cc + 0x7B;
  4: return ttdall_cc + 0x73;
  5: return ttdall_cc + 0x74;
  6: return ttdall_cc + 0x72;
  7: return ttdall_cc + 0x53;
  8: return ttdall_cc + 0x59;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, flatbed_13_n453_cargo_subtype_text,
  cargo_subtype)
{
  0: return string(STR_REFIT_FACTORY);
  1: return string(STR_REFIT_TTD_7C);
  2: return string(STR_REFIT_TTD_4B);
  3: return string(STR_REFIT_TTD_7B);
  4: return string(STR_REFIT_TTD_73);
  5: return string(STR_REFIT_TTD_74);
  6: return string(STR_REFIT_TTD_72);
  7: return string(STR_REFIT_TTD_53);
  8: return string(STR_REFIT_TTD_59);
     return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, flatbed_13_n453_cargo_capacity,
  cargo_type_in_veh)
{
  GOOD: return 64;
  VEHI: return  3;
  ENSP: return 31;
  MNSP: return 62;
  VPTS: return 62;
  AORE: return 46;
  BDMT: return 57;
  BRCK: return 57;
  CLAY: return 61;
  GRVL: return 57;
  LIME: return 50;
  SAND: return 57;
  SULP: return 46;
        return 63;
}

switch (FEAT_TRAINS, SELF, flatbed_13_n453_stel_loading_speed,
  (random_bits / 2) % 16)
{
  0..5: return (cargo_capacity / 2 + 1);   // фермы
        return (cargo_capacity / 3 + 1);   // трубы
}

switch (FEAT_TRAINS, SELF, flatbed_13_n453_loading_speed, 
  cargo_type_in_veh)
{ 
  STEL: flatbed_13_n453_stel_loading_speed;
  GOOD: return (cargo_capacity / 2 + 1);
        all_wagons_bulk_loading_speed; 
}

wagon_running_cost(flatbed_13_n453, 23)
hint_wagon_flat(flatbed_13_n453,
                63, 36,
                STR_PURCHASE_HINT_LOADING_SPEED_5TIC,
                STR_PURCHASE_HINT_AGING_PERIOD_3_1,
                STR_PURCHASE_HINT_WAGON_TYPE_FLATBED_4AXLE,
                1946, 1956,
                STR_PURCHASE_HINT_FACTORY_DNEPRODZERZHINSKY_CW)

item (FEAT_TRAINS, flatbed_13_n453, 510) {
  property {
    name: string(STR_NAME_FLATBED_13_N453);
    vehicle_dates(1946, 1956, 32, 10, 8, 4)
    vehicle_wagon(22, 120)
    vehicle_wagon_cargo(63, 10)
    cargo_allow_refit: [STEL, GOOD, WDPR, WOOD];
  }
  graphics {
    default: flatbed_13_n453_sprites;
    purchase: flatbed_13_xx_purchase_sprites;
    running_cost_factor: flatbed_13_n453_running_cost_factor;
    refit_cost: return 0 | CB_RESULT_AUTOREFIT;
    cargo_subtype_text: flatbed_13_n453_cargo_subtype_text;
    colour_mapping: flatbed_13_n453_colour_mapping;
    cargo_capacity: flatbed_13_n453_cargo_capacity;
    loading_speed: flatbed_13_n453_loading_speed;
    additional_text: flatbed_13_n453_additional_text;
  }
}

long_name_template(flatbed_13_n453, STR_LONGNAME_FLATBED_13_N453)
