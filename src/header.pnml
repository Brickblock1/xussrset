 /// header

grf
{
  grfid: "AKA\08";
  name: string(STR_GRF_NAME);
  desc: string(STR_GRF_DESC);
  url: string(STR_GRF_URL);
  version: REPO_REVISION;
  min_compatible_version: MIN_COMPATIBLE_REVISION;
  param 0
  {
    enable_our_own_tracks
    {
      name: string(STR_PARAM_ENABLE_OUR_OWN_TRACKS_NAME);
      desc: string(STR_PARAM_ENABLE_OUR_OWN_TRACKS_DESC);
      type: bool;
      bit: 4;
      def_value: 1;
    }
    enable_icons
    {
      name: string(STR_PARAM_ENABLE_ICONS_NAME);
      desc: string(STR_PARAM_ENABLE_ICONS_DESC);
      type: bool;
      bit: 6;
      def_value: 1;
    }
    enable_long_names
    {
      name: string(STR_PARAM_ENABLE_LONG_NAMES_NAME);
      desc: string(STR_PARAM_ENABLE_LONG_NAMES_DESC);
      type: bool;
      bit: 7;
      def_value: 1;
    }
    enable_override_cargo
    {
      name: string(STR_PARAM_ENABLE_OVERRIDE_CARGO_NAME);
      desc: string(STR_PARAM_ENABLE_OVERRIDE_CARGO_DESC);
      type: bool;
      bit: 3;
      def_value: 1;
    }
    enable_standard_engine
    {
      name: string(STR_PARAM_ENABLE_STANDARD_ENGINE_NAME);
      desc: string(STR_PARAM_ENABLE_STANDARD_ENGINE_DESC);
      type: bool;
      bit: 0;
      def_value: 0;
    }
    enable_standard_car
    {
      name: string(STR_PARAM_ENABLE_STANDARD_CAR_NAME);
      desc: string(STR_PARAM_ENABLE_STANDARD_CAR_DESC);
      type: bool;
      bit: 1;
      def_value: 0;
    }
    enable_debug_car
    {
      name: string(STR_PARAM_ENABLE_DEBUG_CAR_NAME);
      desc: string(STR_PARAM_ENABLE_DEBUG_CAR_DESC);
      type: bool;
      bit: 2;
      def_value: 0;
    }
    enable_debug_cost
    {
      name: string(STR_PARAM_ENABLE_DEBUG_COST_NAME);
      desc: string(STR_PARAM_ENABLE_DEBUG_COST_DESC);
      type: bool;
      bit: 5;
      def_value: 0;
    }
  }
  param 1
  {
    speed_penalty_percent
    {
      type: int;
      name: string(STR_PARAM_SPEED_PENALTY_PERCENT_NAME);
      desc: string(STR_PARAM_SPEED_PENALTY_PERCENT_DESC);
      min_value: 10;
      max_value: 50;
      def_value: 15;
    }
  }
  param 4
  {
    models_details_level
    {
      type: int;
      name: string(STR_PARAM_IDS_LIST_SIZE_NAME);
      desc: string(STR_PARAM_IDS_LIST_SIZE_DESC);
      min_value: 0;
      max_value: 1;
      def_value: 1;
      names: 
      {
	0: string(STR_PARAM_IDS_LIST_SIZE_WIKI);
	1: string(STR_PARAM_IDS_LIST_SIZE_RAKOV);
	2: string(STR_PARAM_IDS_LIST_SIZE_ALL);
      };
    }
  }
}
