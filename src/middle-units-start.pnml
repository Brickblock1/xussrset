// для локомотивов, требующих 2+ часть, необходимо проверить, что в конце он не одинок
// (ВЛ80С, 2ЭС5К, 3ЭС5К, ВЛ11, 2ЭС4К, 2ЭС6, ВЛ82, ВЛ15 и др)

switch (FEAT_TRAINS, PARENT, q_2ev120_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == _2ev120) &&
   (!(prev_vehicle_type_id() == _2ev120)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, PARENT, q_vl15_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl15) &&
   (!(prev_vehicle_type_id() == vl15)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_2ev120_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_vl82_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl82) &&
   (!(prev_vehicle_type_id() == vl82))])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl15_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_vl82m_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl82m) &&
   (!(prev_vehicle_type_id() == vl82m))])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl82_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_vl11_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl11) &&
   (!(prev_vehicle_type_id() == vl11)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl82m_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_vl11m_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl11m) &&
   (!(prev_vehicle_type_id() == vl11m)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl11_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_vl80s_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl80s) &&
   (!(prev_vehicle_type_id() == vl80s)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl11m_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_vl85_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == vl85) &&
   (!(prev_vehicle_type_id() == vl85)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl80s_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_2es5_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == _2es5) &&
   (!(prev_vehicle_type_id() == _2es5)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_vl85_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_2es5s_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == _2es5s) &&
   (!(prev_vehicle_type_id() == _2es5s)) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_2es5_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_2es6_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == _2es6) &&
   (!((prev_vehicle_type_id() == _2es6) || (prev_vehicle_type_id() == _2es6_m))) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_2es5s_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_2es10_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   (LOAD_TEMP(3) == _2es10) &&
   (!((prev_vehicle_type_id() == _2es10) || (prev_vehicle_type_id() == _2es10_m))) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_2es6_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_2_3es5k_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   ((LOAD_TEMP(3) == _2es5k) || (LOAD_TEMP(3) == _3es5k)) &&
   (!((prev_vehicle_type_id() == _2es5k) || (prev_vehicle_type_id() == _3es5k) || (prev_vehicle_type_id() == _3es5k_m))) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_2es10_start_stop;
}

switch (FEAT_TRAINS, PARENT, q_2_3es4k_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3),
   set_offset_to(num_vehs_in_consist-4),
   ((LOAD_TEMP(3) == _2es4k) || (LOAD_TEMP(3) == _3es4k)) &&
   (!((prev_vehicle_type_id() == _2es4k) || (prev_vehicle_type_id() == _3es4k) || (prev_vehicle_type_id() == _3es4k_m))) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     q_2_3es5k_start_stop;
}

switch (FEAT_TRAINS, PARENT, double_start_stop,
[  set_offset_to(num_vehs_in_consist-2),
   STORE_TEMP (prev_vehicle_type_id(), 3) ])
{
     q_2_3es4k_start_stop;
}

// для средней секции необходимо проверить, что в конце она не одинока, в том числе вагоны МВПС
// кроме того надо проверить, что для голов с беззазорным устройством они не одиноки
switch (FEAT_TRAINS, PARENT, any_start_stop_mid3,
[  set_offset_to(num_vehs_in_consist-2),
   all_mid_section()])
{
  1: return string(STR_START_STOP_MIDDLE_MUST_NOT_BE_LAST);
     double_start_stop;
}

switch (FEAT_TRAINS, PARENT, any_start_stop_mid2,
[  set_offset_to(num_vehs_in_consist-2),
   ((prev_vehicle_type_id() == dpkr2_c) ||
    (prev_vehicle_type_id() == ra2_c) ||
    (prev_vehicle_type_id() == es2g_mn) ||
    (prev_vehicle_type_id() == es2g_c) ||
    (prev_vehicle_type_id() == es2g_cp) ||
    (prev_vehicle_type_id() == er200_m) ||
    (prev_vehicle_type_id() == er200_c) ||
    (prev_vehicle_type_id() == esh2_m1) ||
    (prev_vehicle_type_id() == esh2_m2) ||
    (prev_vehicle_type_id() == esh2_c) ||
    (prev_vehicle_type_id() == ep2d_m) ||
    (prev_vehicle_type_id() == ep2d_c) ||
    (prev_vehicle_type_id() == ep3d_m) ||
    (prev_vehicle_type_id() == ep3d_c) ||
    ((prev_vehicle_type_id() == ed4m_m) && (prev_vehicle_build_year() >= 2010)) ||
    ((prev_vehicle_type_id() == ed4m_c) && (prev_vehicle_build_year() >= 2010))) ])
{
  1: return string(STR_START_STOP_DUAL_END_REQUIRED);
     any_start_stop_mid3;
}

// головы с беззазорным устройством можно проверять по общей сумме, так как при присоединении проверяется чётность предыдущих голов.
switch (FEAT_TRAINS, PARENT, any_start_stop_mid,
  (count_veh_id(dpkr2_h1) +
   count_veh_id(dpkr2_h2) +
   count_veh_id(ra2_h) +
   count_veh_id(es2g_hm) +
   count_veh_id(er200_h) +
   count_veh_id(esh2_h1) +
   count_veh_id(esh2_h2) +
   count_veh_id(ep2d_hm) +
   count_veh_id(ep2d_h) +
   count_veh_id(ep3d_h) +
   count_veh_id(ed4m_h)) % 2)
{
  1: return string(STR_START_STOP_NUMBER_OF_HEAD_CAR_MUST_BE_EVEN);
     any_start_stop_mid2;
}

// Моторные думпкары

switch (FEAT_TRAINS, PARENT, any_start_stop_pwdd4,
[  set_offset_to(num_vehs_in_consist-8),
   prev_vehicle_type_id()])
{
  pe2: any_start_stop_mid;
  return string(STR_START_STOP_POWER_UNIT_REQUIRED);
}

switch (FEAT_TRAINS, PARENT, any_start_stop_pwdd3,
[  set_offset_to(num_vehs_in_consist-6),
   prev_vehicle_type_id()])
{
  pwd_dumpcar: any_start_stop_pwdd4;
          pe2: any_start_stop_mid;
  return string(STR_START_STOP_POWER_UNIT_REQUIRED);
}

switch (FEAT_TRAINS, PARENT, any_start_stop_pwdd2,
[  set_offset_to(num_vehs_in_consist-4),
   prev_vehicle_type_id()])
{
  pwd_dumpcar: any_start_stop_pwdd3;
          pe2: any_start_stop_mid;
  return string(STR_START_STOP_POWER_UNIT_REQUIRED);
}

switch (FEAT_TRAINS, PARENT, any_start_stop_pwdd1,
[  set_offset_to(num_vehs_in_consist-2),
   prev_vehicle_type_id()])
{
  pwd_dumpcar: any_start_stop_pwdd2;
  any_start_stop_mid;
}

switch (FEAT_TRAINS, PARENT, any_start_stop_pwdd,
  (count_veh_id(pwd_dumpcar) > 0) * 2 +
  (count_veh_id(pe2) == 0))
{
  3: return string(STR_START_STOP_POWER_UNIT_REQUIRED);
  2: any_start_stop_pwdd1;
  any_start_stop_mid;
}

// некорректные грузы

switch (FEAT_TRAINS, PARENT, any_start_stop,
  has_inadmissible_cargo())
{
  1: return string(STR_START_STOP_INADMISSIBLE_CARGO);
     any_start_stop_pwdd;
}
