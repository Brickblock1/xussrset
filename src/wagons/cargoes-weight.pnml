/*
  TODO
  сейчас масса обоих контейнеров добавляется сразу, даже если платформа заполнена на половину. подумать над тем, чтобы добавлять частями
*/

switch (FEAT_TRAINS, SELF, container_40_a1972_weight,
  cargo_type_in_veh)
{
  cargo_check_gen_containerlist(return (LOAD_TEMP(7) + (LOAD_TEMP(8) * (cargo_count > 0) * 4)))
  return LOAD_TEMP(7);
}

switch (FEAT_TRAINS, SELF, container_40_a1988_weight,
  cargo_type_in_veh)
{
  cargo_check_ref_containerlist(return (LOAD_TEMP(7) + (LOAD_TEMP(8) * (cargo_count > 0) * 5)))
  container_40_a1972_weight;
}

switch (FEAT_TRAINS, SELF, container_n40_weight,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)))
{
  1: container_40_a1972_weight;
  2: container_40_a1988_weight;
     return LOAD_TEMP(7);
}

switch (FEAT_TRAINS, SELF, container_20_a1972_weight,
  cargo_type_in_veh)
{
  cargo_check_gen_containerlist(return (LOAD_TEMP(7) + (LOAD_TEMP(8) * (cargo_count > 0) * 5 / 2)))
  return LOAD_TEMP(7);
}

switch (FEAT_TRAINS, SELF, container_20_a1988_weight,
  cargo_type_in_veh)
{
  cargo_check_ref_containerlist(return (LOAD_TEMP(7) + (LOAD_TEMP(8) * (cargo_count > 0) * 3)))
  container_20_a1972_weight;
}

switch (FEAT_TRAINS, SELF, container_20_a1995_weight,
  cargo_type_in_veh)
{
  cargo_check_tank_containerlist(return (LOAD_TEMP(7) + (LOAD_TEMP(8) * (cargo_count > 0) * 4)))
  container_20_a1988_weight;
}

switch (FEAT_TRAINS, SELF, container_n20_weight,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)) +
  (date_of_last_service >= date(1995,1,1)))
{
  1: container_20_a1972_weight;
  2: container_20_a1988_weight;
  3: container_20_a1995_weight;
     return LOAD_TEMP(7);
}

switch (FEAT_TRAINS, SELF, container_2040_a1972_weight,
  cargo_type_in_veh)
{
  cargo_check_gen_containerlist(return (LOAD_TEMP(7) + (cargo_count > 0) * 13 / 2))
  return LOAD_TEMP(7);
}

switch (FEAT_TRAINS, SELF, container_2040_a1988_weight,
  cargo_type_in_veh)
{
  cargo_check_ref_containerlist(return (LOAD_TEMP(7) + (cargo_count > 0) * 8))
  container_2040_a1972_weight;
}

switch (FEAT_TRAINS, SELF, container_2040_a1995_weight,
  cargo_type_in_veh)
{
  cargo_check_tank_containerlist(return (LOAD_TEMP(7) + (cargo_count > 0) * 8))  // 2 20-и футовых танк-контейнера
  container_2040_a1988_weight;
}

switch (FEAT_TRAINS, SELF, container_20and40_weight,
  (date_of_last_service >= date(1972,1,1)) +
  (date_of_last_service >= date(1988,1,1)) +
  (date_of_last_service >= date(1995,1,1)))
{
  1: container_2040_a1972_weight;
  2: container_2040_a1988_weight;
  3: container_2040_a1995_weight;
     return LOAD_TEMP(7);
}

switch (FEAT_TRAINS, SELF, container_40_weight,
[  STORE_TEMP(1, 8)])
{  container_n40_weight;  }
/*
Отключено ввиду отсутствия пересчёта вместимости после разгрузки

switch (FEAT_TRAINS, SELF, container_2_40_weight,
[  STORE_TEMP(2, 8)])
{  container_n40_weight;  }

switch (FEAT_TRAINS, SELF, container_20_weight,
[  STORE_TEMP(1, 8)])
{  container_n20_weight;  }
*/
switch (FEAT_TRAINS, SELF, container_2_20_weight,
[  STORE_TEMP(2, 8)])
{  container_n20_weight;  }

switch (FEAT_TRAINS, SELF, container_2_20or40_weight,
  (random_bits >> 1) & 0x01)
{
  0: container_40_weight;
     container_2_20_weight;
}
