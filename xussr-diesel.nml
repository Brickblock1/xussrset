// xussr
// xussr
 /// header
grf
{
grfid: "Meo\B3";
                    name: string(STR_GRF_DIESEL_NAME);
                    desc: string(STR_GRF_DIESEL_DESC);
                     url: string(STR_GRF_URL);
                 version: 1;
  min_compatible_version: 1;
  param 0
{
enable_icons
{
name: string(STR_PARAM_ENABLE_ICONS_NAME);
           desc: string(STR_PARAM_ENABLE_ICONS_DESC);
           type: bool;
            bit: 6;
      def_value: 1;
}
enable_long_names
{
name: string(STR_PARAM_ENABLE_LONG_NAMES_NAME);
           desc: string(STR_PARAM_ENABLE_LONG_NAMES_DESC);
           type: bool;
            bit: 7;
      def_value: 1;
}
enable_new_ratios
{
name: string(STR_PARAM_ENABLE_NEW_RATIOS_NAME);
           desc: string(STR_PARAM_ENABLE_NEW_RATIOS_DESC);
           type: bool;
            bit: 5;
      def_value: 1;
}
}
param 1
{
speed_penalty_percent
{
type: int;
           name: string(STR_PARAM_SPEED_PENALTY_PERCENT_NAME);
           desc: string(STR_PARAM_SPEED_PENALTY_PERCENT_DESC);
      min_value: 0;
      max_value: 50;
      def_value: 15;
}
}
param 2
{
models_default_cargo
{
type: int;
           name: string(STR_PARAM_DEFAULT_CARGO_NAME);
           desc: string(STR_PARAM_DEFAULT_CARGO_DESC);
      min_value: 0;
      max_value: 3;
      def_value: 0;
      names:
{
0: string(STR_PARAM_DEFAULT_CARGO_NONE);
        1: string(STR_PARAM_DEFAULT_CARGO_GOOD);
        2: string(STR_PARAM_DEFAULT_CARGO_PASS);
        3: string(STR_PARAM_DEFAULT_CARGO_MAIL);
}
;
}
}
}
disable_diesel = 0;
 /// check
// version check
if (ttd_platform != PLATFORM_OPENTTD ||
  openttd_version < version_openttd(1, 10, 0))
{
error(ERROR, REQUIRES_OPENTTD, string(STR_MIN_OPENTTD_VERSION));
}
// Check for engine pool
if (!dynamic_engines)
{
error(ERROR, USED_WITH, string(STR_USE_ENGINE_POOL));
}
// Check for rails
if (!grf_future_status("Meo\B1"))
{
error(NOTICE, string(STR_REQUIRES_XUSSR_RAILS));
}
yeti_on = 0;
if (grf_future_status("\56\42\03\03"))
{
yeti_on = 1;
}
/// basecost
// Задаём к-ты к стоимостям
// 15  PR_BUILD_VEHICLE_TRAIN    PR_BUILD_VEHICLE  400000
// 16  PR_BUILD_VEHICLE_WAGON    PR_BUILD_VEHICLE    2000
// ..
// 42  PR_RUNNING_TRAIN_STEAM    PR_RUNNING          5600
// 43  PR_RUNNING_TRAIN_DIESEL   PR_RUNNING          5200
// 44  PR_RUNNING_TRAIN_ELECTRIC PR_RUNNING          4800
basecost
{
PR_BUILD_VEHICLE_TRAIN: 1;
     PR_BUILD_VEHICLE_WAGON: 3;
     PR_RUNNING_TRAIN_STEAM: 0;
    PR_RUNNING_TRAIN_DIESEL: 0;
  PR_RUNNING_TRAIN_ELECTRIC: 0;
}
/// disable_origin
// debug: disable all original trains
// 0..26  engines
// 27..53 vagons
disable_item(FEAT_TRAINS, 0, 26);
 // ж/д
disable_item(FEAT_TRAINS, 54, 56);
 // монорельс
disable_item(FEAT_TRAINS, 84, 88);
 // маглев
disable_item(FEAT_TRAINS, 27, 53);
 // ж/д
disable_item(FEAT_TRAINS, 57, 83);
 // монорельс
disable_item(FEAT_TRAINS, 89, 115);
 // маглев
// cargotable
// Список меток грузов, включая стандартные, тойлэнд, ECS, FIRS
cargotable
{
// begin main block
// --- Bulk cargoes
// ----- Bulk cargoes - Clays
  CLAY,
  LIME,
// ----- Bulk cargoes - Ores
  AORE,
  CORE,
  FECR,
  IORE,
  MNO2,
  PHOS,
  PORE,
  SULP,
// ----- Bulk cargoes - General
  COAL,
  COCO,
  COKE,
  FERT,
  FMSP,
  GRVL,
  PEAT,
  RCYC,
  SALT,
  SAND,
  SLAG,
  SCMT,
  SCRP,
  WSTE,
// --- Piece cargoes
// ----- Piece cargoes - Wood
  BATT,
  TWOD,
  WDPR,
  WOOD,
// ----- Piece cargoes - Steel
  ALUM,
  COPR,
  CSTI,
  IRON,
  METL,
  PIPE,
  STAL,
  STCB,
  STEL,
  STST,
  STSE,
  STSH,
  STWR,
  ZINC,
// ----- Piece cargoes - Special
  BRCK,
// --- Piece cargoes - Large boxes
  ENSP,
  FOCA,
  GOOD,
  MNSP,
  POWR,
  TYRE,
  VENG,
  VPTS,
  VBOD,
// --- Piece cargoes - Vehicles
  VEHI,
// --- Hopper cargos
// ----- Hopper cargos - Fertilizer
  NITR,
// ----- Hopper cargos - Cement
  ALO_,
  BDMT,
  CBLK,
  CMNT,
  KAOL,
  POTA,
  QLME,
  SASH,
// ----- Hopper cargos - Grains
  CERE,
  CTCD,
  GRAI,
  MAIZ,
  OLSD,
  TOFF,
  WHEA,
// --- Liquid cargoes
// ----- Liquid cargoes - Edibles
  BEER,
  COLA,
  EOIL,
  FZDR,
  WATR,
// ----- Liquid cargoes - Oil products
  OIL_,
  PETR,
  RFPR,
// ----- Liquid cargoes - Chemicals
  BUBL,
  COAT,
  DYES,
  NHNO,
  PLAS,
  PLST,
  SOAP,
  RUBR,
// ----- Liquid cargoes - Dangerous & heated
  ACID,
  LYE_,
  CTAR,
// ----- Liquid cargoes - Liquified gases
  C2H4,
  CHLO,
  FUEL,
  H2__,
  N7__,
  NH3_,
  O2__,
// --- Refregirated cargoes
  FISH,
  FOOD,
  FRUT,
  FRVG,
  MILK,
// --- Boxcar cargoes
// ----- Boxcar cargoes - Sacks
  BEAN,
  CASS,
  FICR,
  JAVA,
  NUTS,
  RSGR,
  SGBT,
  SGCN,
  SUGR,
  SWET,
  WOOL,
// ----- Boxcar cargoes - Boxes
  BOOM,
  CERA,
  GLAS,
  PAPR,
  PPAR,
  TOYS,
// ----- Boxcar cargoes - Livestock
  LVST,
// --- Special cargoes
// ----- Special cargoes - Valuables & Mail
  GOLD,
  VALU,
  DIAM,
  MAIL,
// ----- Special cargoes - Passengers
// ------- Special cargoes - Passengers 1 class
  TOUR,
// ------- Special cargoes - Passengers 2 class
  PASS,
// ------- Special cargoes - Passengers 3 class
  YETI,
  YETY,
// ----- Special cargoes - Nuclear
  URAN,
  NWST,
  GEAR
// end main block
}
///
// getbits(extra_callback_info2, 0, 8): The time since the cargo was last picked up, in the time units described above (1 unit = 2.5 days independent of vehicle type)
// getbits(extra_callback_info2, 8, 16): The amount of cargo waiting.
// getbits(extra_callback_info2, 24, 8): The speed of the last vehicle picking the cargo up, in the speed units described above (if no vehicle entered the station yet, the value is 0xFF).
switch (FEAT_CARGOS, SELF, all_ratios,
[ STORE_TEMP(130 * max(0 , 31 - getbits(extra_callback_info2, 0, 8)) / 31, 0),
   STORE_TEMP(LOAD_TEMP(0) +
              (40 * max(-2000, 1000 - getbits(extra_callback_info2, 8, 16)) / 1000), 0),
   STORE_TEMP(LOAD_TEMP(0) +
              (min(2 * max(0, getbits(extra_callback_info2, 24, 8) - 40), 255)) / 4, 0),
   LOAD_TEMP(0)])
{ return; }
if (enable_new_ratios)
{
item(FEAT_CARGOS, cargo_0, 0x00)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1, 0x01)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2, 0x02)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3, 0x03)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_4, 0x04)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_5, 0x05)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_6, 0x06)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_7, 0x07)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_8, 0x08)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_9, 0x09)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_A, 0x0A)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_B, 0x0B)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_C, 0x0C)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_D, 0x0D)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_E, 0x0E)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_F, 0x0F)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_10, 0x10)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_11, 0x11)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_12, 0x12)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_13, 0x13)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_14, 0x14)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_15, 0x15)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_16, 0x16)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_17, 0x17)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_18, 0x18)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_19, 0x19)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1A, 0x1A)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1B, 0x1B)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1C, 0x1C)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1D, 0x1D)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1E, 0x1E)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_1F, 0x1F)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_20, 0x20)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_21, 0x21)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_22, 0x22)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_23, 0x23)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_24, 0x24)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_25, 0x25)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_26, 0x26)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_27, 0x27)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_28, 0x28)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_29, 0x29)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2A, 0x2A)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2B, 0x2B)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2C, 0x2C)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2D, 0x2D)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2E, 0x2E)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_2F, 0x2F)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_30, 0x30)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_31, 0x31)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_32, 0x32)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_33, 0x33)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_34, 0x34)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_35, 0x35)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_36, 0x36)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_37, 0x37)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_38, 0x38)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_39, 0x39)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3A, 0x3A)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3B, 0x3B)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3C, 0x3C)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3D, 0x3D)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3E, 0x3E)
{
graphics
{
station_rating: all_ratios;
}
}
item(FEAT_CARGOS, cargo_3F, 0x3F)
{
graphics
{
station_rating: all_ratios;
}
}
}
/// railtypetable
// Список меток типов рельсов
railtypetable
{
// автономная
  T_R0: [RLA0,RLA1, SAAN,SABN,SACN,SADN,SAEN, RAIL],
  T_R1: [RLA2, SBAN,SBBN,SBCN,SBDN,SBEN, RAIL],
  T_R2: [RLA3,RLA4, SCAN,SCBN,SCCN,SCDN,SCEN, RAIL],
// переменного тока 25 кВ 50 Гц
  T_A0: [ERA0,ERA1, SAAA,SABA,SACA,SADA,SAEA, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_A1: [ERA2, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_A2: [ERA3,ERA4, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// переменного тока 15 кВ 50 Гц
  T_a0: [ERa0,ERa1, ERA0,ERA1, SAAa,SABa,SACa,SADa,SAEa, SAAA,SABA,SACA,SADA,SAEA, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_a1: [ERa2, ERA2, SBAa,SBBa,SBCa,SBDa,SBEa, SAAa,SABa,SACa,SADa,SAEa, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_a2: [ERa3,ERa4, ERA3,ERA4, SCAa,SCBa,SCCa,SCDa,SCEa, SBAa,SBBa,SBCa,SBDa,SBEa, SAAa,SABa,SACa,SADa,SAEa, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// постоянного тока 3 кВ
  T_D0: [ERD0,ERD1, ERA0,ERA1, SAAD,SABD,SACD,SADD,SAED, SAAA,SABA,SACA,SADA,SAEA, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_D1: [ERD2, ERA2, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_D2: [ERD3,ERD4, ERA3,ERA4, SCAD,SCBD,SCCD,SCDD,SCED, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// постоянного тока 1,5 кВ
  T_d0: [ERd0,ERd1, ERD0,ERD1, ERA0,ERA1, SAAd,SABd,SACd,SADd,SAEd, SAAD,SABD,SACD,SADD,SAED, SAAA,SABA,SACA,SADA,SAEA, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_d1: [ERd2, ERD2, ERA2, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
  T_d2: [ERd3,ERd4, ERD3,ERD4, ERA3,ERA4, SCAd,SCBd,SCCd,SCDd,SCEd, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SCAD,SCBD,SCCD,SCDD,SCED, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// многосистемные
// 2S = A + D (3 кВ + 25 кВ)
  T_2S: [ER2S, SEAA,SEBA,SECA,SEDA,SEEA, SDAA,SDBA,SDCA,SDDA,SDEA, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SEAD,SEBD,SECD,SEDD,SEED, SDAD,SDBD,SDCD,SDDD,SDED, SCAD,SCBD,SCCD,SCDD,SCED, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SEAE,SEBE,SECE,SEDE,SEEE, SDAE,SDBE,SDCE,SDDE,SDEE, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// 2D = D + d (1,5 кВ + 3 кВ)
  T_2D: [ER2D, SEAD,SEBD,SECD,SEDD,SEED, SDAD,SDBD,SDCD,SDDD,SDED, SCAD,SCBD,SCCD,SCDD,SCED, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SEAd,SEBd,SECd,SEDd,SEEd, SDAd,SDBd,SDCd,SDDd,SDEd, SCAd,SCBd,SCCd,SCDd,SCEd, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SEAE,SEBE,SECE,SEDE,SEEE, SDAE,SDBE,SDCE,SDDE,SDEE, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// 2s = A + d (TGV-PSE)
  T_2s: [ER2s, SEAA,SEBA,SECA,SEDA,SEEA, SDAA,SDBA,SDCA,SDDA,SDEA, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SEAd,SEBd,SECd,SEDd,SEEd, SDAd,SDBd,SDCd,SDDd,SDEd, SCAd,SCBd,SCCd,SCDd,SCEd, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SEAE,SEBE,SECE,SEDE,SEEE, SDAE,SDBE,SDCE,SDDE,SDEE, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// 3D = A + D + d (ETR500)
  T_3D: [ER3D, SEAA,SEBA,SECA,SEDA,SEEA, SDAA,SDBA,SDCA,SDDA,SDEA, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SEAD,SEBD,SECD,SEDD,SEED, SDAD,SDBD,SDCD,SDDD,SDED, SCAD,SCBD,SCCD,SCDD,SCED, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SEAd,SEBd,SECd,SEDd,SEEd, SDAd,SDBd,SDCd,SDDd,SDEd, SCAd,SCBd,SCCd,SCDd,SCEd, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SEAE,SEBE,SECE,SEDE,SEEE, SDAE,SDBE,SDCE,SDDE,SDEE, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// 3a = A + a + d (TGV-POS)
  T_3a: [ER3a, SEAA,SEBA,SECA,SEDA,SEEA, SDAA,SDBA,SDCA,SDDA,SDEA, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SEAa,SEBa,SECa,SEDa,SEEa, SDAa,SDBa,SDCa,SDDa,SDEa, SCAa,SCBa,SCCa,SCDa,SCEa, SBAa,SBBa,SBCa,SBDa,SBEa, SAAa,SABa,SACa,SADa,SAEa, SEAd,SEBd,SECd,SEDd,SEEd, SDAd,SDBd,SDCd,SDDd,SDEd, SCAd,SCBd,SCCd,SCDd,SCEd, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SEAE,SEBE,SECE,SEDE,SEEE, SDAE,SDBE,SDCE,SDDE,SDEE, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL],
// 4S = A + a + D +d (ETR575)
  T_4S: [ER4S, SEAA,SEBA,SECA,SEDA,SEEA, SDAA,SDBA,SDCA,SDDA,SDEA, SCAA,SCBA,SCCA,SCDA,SCEA, SBAA,SBBA,SBCA,SBDA,SBEA, SAAA,SABA,SACA,SADA,SAEA, SEAa,SEBa,SECa,SEDa,SEEa, SDAa,SDBa,SDCa,SDDa,SDEa, SCAa,SCBa,SCCa,SCDa,SCEa, SBAa,SBBa,SBCa,SBDa,SBEa, SAAa,SABa,SACa,SADa,SAEa, SEAD,SEBD,SECD,SEDD,SEED, SDAD,SDBD,SDCD,SDDD,SDED, SCAD,SCBD,SCCD,SCDD,SCED, SBAD,SBBD,SBCD,SBDD,SBED, SAAD,SABD,SACD,SADD,SAED, SEAd,SEBd,SECd,SEDd,SEEd, SDAd,SDBd,SDCd,SDDd,SDEd, SCAd,SCBd,SCCd,SCDd,SCEd, SBAd,SBBd,SBCd,SBDd,SBEd, SAAd,SABd,SACd,SADd,SAEd, SEAE,SEBE,SECE,SEDE,SEEE, SDAE,SDBE,SDCE,SDDE,SDEE, SCAE,SCBE,SCCE,SCDE,SCEE, SBAE,SBBE,SBCE,SBDE,SBEE, SAAE,SABE,SACE,SADE,SAEE, ELRL]
}
// обычные рельсы
// рельсы для постоянного и переменного тока
// для двусистемных
// Шаблоны для родов тока
// Определение свойств в зависимости от типа пути
// end
 /// definition
// Используем полноразмерные поезда в депо
train_width_32_px = 1;
// Вертикаль поезда в депо
traininfo_y_offset = 3;
// Период, в который поезд считается новым (гарантийным) и не допускает депошного творчества
// Истечение срока
//minimal model life span
retire_early_default = -8;
//extended reliability time span 30-8-8 = 15 years
retire_late_default = 31;
age_erlanger = 8;
delta_age = 1;
// Мощность ПС / скорость, который не имеет мощности (чтобы он смог доехать до других рельсов, так как в игре нельзя послать за ним буксир.
// количество тиков на разгрузку высыпанием
// количество (единиц) груза, проходящих через люк за тик (при возможности перевести на кубатуру)
// количество пассажиров, выходящих через дверь за тик
// константы лет
// RE
// модель
// вычитаем delta_age из года ввода ТС, для прицепных и немоторных вагонов
// вычитаем delta_age из года ввода ТС, для головных вагонов и локомотивов
// максимальная скорость
// рисуем [не] на карте?
// рисуем в депо
// Не построен
// Построен
// ТС по [-]смещению в цепочке [не] скрыто?
// Для получения характеристик предыдущего ПС в цепочке
// для записи смещения в регистр (работа с переменной 0x61)
// Для краткой записи списка климатов ПС
// Для выбора правильного набора спрайтов в случае флага TRAIN_FLAG_FLIP
// или CB_RESULT_REVERSED_VEHICLE
// Порог скорости электровозов
// x км/ч * 0.2778 == value
// 50 км/ч --> 13 (13.89)
// 62 км/ч --> 17 (17.2236)
//threshold of speed
// сокращение для отключения визуальных эффектов тяги и тяги вагонов
// визуальные эффекты для электротяги. высота единая так как едина высота провода
// визуальные эффекты для дизельной тяги
// визуальные эффекты для паровой тяги
// kW -> hp
// поправка для функции мощности (power cb)
// задаваемое в свойстве отличается от возвращаемого функцией
// Получаем оштрафованную величину скорости, 15%
// Скорость у ПС без мощности в голове - NO_SPEED
// Флаг штрафа поезда по скорости
// Флаг второй головы ДРБ1
// Флаг недопустимиого груза
// Флаг недопустимой составности
// Штрафуем ли по скорости
// Проверка 2 головы ДРБ1
// Проверка недопустимого груза
// Проверка некорректного состава
// Вычисляем ТУ по формуле (табличное_значение/масса/9.8)
// ТУ для cb tractive_effort_coefficient
// вместимость по плотности  = 16 / вес единицы груза * объём в м3 * Плотность кг / м3 / 1000 (приведение к тоннам)
// шаблон сравнения
// общий шаблон свойств
// ТЭП70БС + ЭС1 / ЭС2Г
// голова ТЭП70БС 2018 года или новее, и общее количество (ЭС1 * 5) + (ЭС2) <= количество (ТЭП70БС * 6) и нет другого ПС
// end
 /// template
// покупка
template new_purchase_template(x, y)
{
[x, y, 100, 18, -40, -13, CROP]
}
template new_purchase_template_noico(x, y)
{
[x+18, y, 82, 18, -40, -13, CROP]
}
// Шаблон 3 (size 3) **
// обычный
template s3_template(x, y, shift)
{
[x, y, 7, 30, -2, -30, CROP]
  [x+16, y, 11, 27, -4, -22, CROP]
  [x+32, y, 12, 20, 4, -16, CROP]
  [x+64, y, 11, 27, 5, -18, CROP]
  [x+80, y, 7, 30, -2, -22, CROP]
  [x+96, y, 11, 27, -14, -17, CROP]
  [x+112, y, 12, 20, -16, -16, CROP]
  [x+144, y, 11, 27, -5, -23, CROP]
}
template s3_r_template(x, y, shift)
{
[x+80, y, 7, 30, -2, -30, CROP]
  [x+96, y, 11, 27, -4, -22, CROP]
  [x+112, y, 12, 20, 4, -16, CROP]
  [x+144, y, 11, 27, 5, -18, CROP]
  [x, y, 7, 30, -2, -22, CROP]
  [x+16, y, 11, 27, -14, -17, CROP]
  [x+32, y, 12, 20, -16, -16, CROP]
  [x+64, y, 11, 27, -5, -23, CROP]
}
// Шаблон 4 (size 4) **
// обычный
template s4_template(x, y, shift)
{
[x, y, 7, 32, -2, -30, CROP]
  [x+16, y, 13, 28, -6, -22, CROP]
  [x+48, y, 16, 20, 0, -16, CROP]
  [x+80, y, 13, 28, 3, -19, CROP]
  [x+112, y, 7, 32, -2, -24, CROP]
  [x+128, y, 13, 28, -14, -18, CROP]
  [x+160, y, 16, 20, -16, -16, CROP]
  [x+192, y, 13, 28, -5, -23, CROP]
}
template s4_r_template(x, y, shift)
{
[x+112, y, 7, 32, -2, -30, CROP]
  [x+128, y, 13, 28, -6, -22, CROP]
  [x+160, y, 16, 20, 0, -16, CROP]
  [x+192, y, 13, 28, 3, -19, CROP]
  [x, y, 7, 32, -2, -24, CROP]
  [x+16, y, 13, 28, -14, -18, CROP]
  [x+48, y, 16, 20, -16, -16, CROP]
  [x+80, y, 13, 28, -5, -23, CROP]
}
// Шаблон 4 (size 4) **
// увеличенный для промышленных электровозов
template s4e_template(x, y, shift)
{
[x, y, 7, 38, -2 , -30-4, CROP] //   [x,     y,  7, 32, -2,  -30, CROP]
  [x+16, y, 17, 30, -6-2, -22-1, CROP] //   [x+16,  y, 13, 28, -6,  -22, CROP]
  [x+48, y, 24, 20, 0-4, -16 , CROP] //   [x+48,  y, 16, 20,  0,  -16, CROP]
  [x+80, y, 17, 30, 3-2, -19-1, CROP] //   [x+80,  y, 13, 28,  3,  -19, CROP]
  [x+112, y, 7, 38, -2 , -24-4, CROP] //   [x+112, y,  7, 32,  -2, -24, CROP]
  [x+128, y, 17, 30, -14-2, -18-1, CROP] //   [x+128, y, 13, 28, -14, -18, CROP]
  [x+160, y, 24, 20, -16-4, -16 , CROP] //   [x+160, y, 16, 20, -16, -16, CROP]
  [x+192, y, 17, 30, -5-2, -23-1, CROP] //   [x+192, y, 13, 28,  -5, -23, CROP]
}
template s4e_r_template(x, y, shift)
{
[x+112, y, 7, 38, -2 , -30-4, CROP] //   [x+112, y,  7, 32, -2,  -30, CROP]
  [x+128, y, 17, 30, -6-2, -22-1, CROP] //   [x+128, y, 13, 28, -6,  -22, CROP]
  [x+160, y, 24, 20, 0-4, -16 , CROP] //   [x+160, y, 16, 20, 0,   -16, CROP]
  [x+192, y, 17, 30, 3-2, -19-1, CROP] //   [x+192, y, 13, 28, 3,   -19, CROP]
  [x, y, 7, 38, -2 , -24-4, CROP] //   [x,     y,  7, 32, -2,  -24, CROP]
  [x+16, y, 17, 30, -14-2, -18-1, CROP] //   [x+16,  y, 13, 28, -14, -18, CROP]
  [x+48, y, 24, 20, -16-4, -16 , CROP] //   [x+48,  y, 16, 20, -16, -16, CROP]
  [x+80, y, 17, 30, -5-2, -23-1, CROP] //   [x+80,  y, 13, 28, -5,  -23, CROP]
}
// Шаблон 5 (size 5) **
// обычный
template s5_template(x, y, shift)
{
[x, y, 7, 34, -2, -30, CROP]
  [x+16, y, 15, 29, -8, -22, CROP]
  [x+48, y, 20, 20, -4, -16, CROP]
  [x+80, y, 15, 29, 1, -20, CROP]
  [x+112, y, 7, 34, -2, -24, CROP]
  [x+128, y, 15, 29, -14, -19, CROP]
  [x+160, y, 20, 20, -16, -16, CROP]
  [x+192, y, 15, 29, -5, -23, CROP]
}
template s5_r_template(x, y, shift)
{
[x+112, y, 7, 34, -2, -30, CROP]
  [x+128, y, 15, 29, -8, -22, CROP]
  [x+160, y, 20, 20, -4, -16, CROP]
  [x+192, y, 15, 29, 1, -20, CROP]
  [x, y, 7, 34, -2, -24, CROP]
  [x+16, y, 15, 29, -14, -19, CROP]
  [x+48, y, 20, 20, -16, -16, CROP]
  [x+80, y, 15, 29, -5, -23, CROP]
}
// Шаблон 6 (size 6) **
// обычный
template s6_template(x, y, shift)
{
[x, y, 7, 38, -2, -32, CROP]
  [x+16, y, 17, 30, -10, -22, CROP]
  [x+48, y, 24, 20, -8, -16, CROP]
  [x+80, y, 17, 30, -1, -21, CROP]
  [x+112, y, 7, 38, -2, -28, CROP]
  [x+128, y, 17, 30, -14, -20, CROP]
  [x+160, y, 24, 20, -16, -16, CROP]
  [x+192, y, 17, 30, -5, -23, CROP]
}
template s6_r_template(x, y, shift)
{
[x+112, y, 7, 38, -2, -32, CROP]
  [x+128, y, 17, 30, -10, -22, CROP]
  [x+160, y, 24, 20, -8, -16, CROP]
  [x+192, y, 17, 30, -1, -21, CROP]
  [x, y, 7, 38, -2, -28, CROP]
  [x+16, y, 17, 30, -14, -20, CROP]
  [x+48, y, 24, 20, -16, -16, CROP]
  [x+80, y, 17, 30, -5, -23, CROP]
}
// специальный
template s6y_template(x, y, shift)
{
[x, y, 7, 38, -2, -32, CROP]
  [x+15, y, 18, 30, -11, -22, CROP] // синее поле увеличено влево на один вертикальный ряд
  [x+48, y, 24, 20, -8, -16, CROP]
  [x+80, y, 17, 30, -1, -21, CROP]
  [x+112, y, 7, 38, -2, -28, CROP]
  [x+128, y, 17, 30, -14, -20, CROP]
  [x+160, y, 24, 20, -16, -16, CROP]
  [x+192, y, 18, 30, -5, -23, CROP] // синее поле увеличено на один вертикальный ряд вправо.
}
// Шаблон 7 (size 7) **
// обычный
template s7_template(x, y, shift)
{
[x, y, 7, 39, -2, -31, CROP]
  [x+16, y, 19, 31, -12, -22, CROP]
  [x+48, y, 28, 20, -12, -16, CROP]
  [x+96, y, 19, 31, -3, -22, CROP]
  [x+128, y, 7, 39, -2, -29, CROP]
  [x+144, y, 19, 31, -14, -21, CROP]
  [x+176, y, 28, 20, -16, -16, CROP]
  [x+224, y, 19, 31, -5, -23, CROP]
}
template s7_r_template(x, y, shift)
{
[x+128, y, 7, 39, -2, -31, CROP]
  [x+144, y, 19, 31, -12, -22, CROP]
  [x+176, y, 28, 20, -12, -16, CROP]
  [x+224, y, 19, 31, -3, -22, CROP]
  [x, y, 7, 39, -2, -29, CROP]
  [x+16, y, 19, 31, -14, -21, CROP]
  [x+48, y, 28, 20, -16, -16, CROP]
  [x+96, y, 19, 31, -5, -23, CROP]
}
// Шаблон 8 (size 8) **
// обычный
template s8_template(x, y, shift)
{
[x, y, 12, 31, -5, -18, CROP]
  [x+32, y, 22, 23, -14, -13, CROP]
  [x+64, y, 32, 17, -16, -13, CROP]
  [x+112, y, 22, 23, -6, -14, CROP]
  [x+144, y, 12, 31, -5, -18, CROP]
  [x+176, y, 22, 23, -14, -13, CROP]
  [x+208, y, 32, 17, -16, -13, CROP]
  [x+256, y, 22, 23, -6, -14, CROP]
}
template s8_r_template(x, y, shift)
{
[x+144, y, 12, 31, -5, -18, CROP]
  [x+176, y, 22, 23, -14, -13, CROP]
  [x+208, y, 32, 17, -16, -13, CROP]
  [x+256, y, 22, 23, -6, -14, CROP]
  [x, y, 12, 31, -5, -18, CROP]
  [x+32, y, 22, 23, -14, -13, CROP]
  [x+64, y, 32, 17, -16, -13, CROP]
  [x+112, y, 22, 23, -6, -14, CROP]
}
// Шаблон 9 (size 9) **
// обычный
template s9_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s9_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+2, CROP]
  [x+240, y, 42, 43, -14-2, -33+1, CROP]
  [x+288, y, 64, 17, -16-4, -13, CROP]
  [x+368, y, 42, 42, -6-2, -14-1, CROP]
  [x, y, 12, 62, -5, -18-2, CROP]
  [x+32, y, 42, 42, -34+2, -13-1, CROP]
  [x+80, y, 64, 17, -48+4, -13, CROP]
  [x+160, y, 42, 43, -26+2, -34+1, CROP]
}
// специальный для ВЛ11
template s9vl11_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42+1, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240-1, y, 42+1, 43, -14-1, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s9vl11_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+2, CROP]
  [x+240-1, y, 42+1, 43, -14-2-1, -33+1, CROP]
  [x+288, y, 64, 17, -16-4, -13, CROP]
  [x+368, y, 42, 42, -6-2, -14-1, CROP]
  [x, y, 12, 62, -5, -18-2, CROP]
  [x+32, y, 42, 42, -34+2, -13-1, CROP]
  [x+80, y, 64, 17, -48+4, -13, CROP]
  [x+160, y, 42+1, 43, -26+2, -34+1, CROP]
}
// Шаблон 10 (size 10) **
// обычный
template s10_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s10_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+4, CROP]
  [x+240, y, 42, 43, -14-4, -33+2, CROP]
  [x+288, y, 64, 17, -16-8, -13, CROP]
  [x+368, y, 42, 42, -6-4, -14-2, CROP]
  [x, y, 12, 62, -5, -18-4, CROP]
  [x+32, y, 42, 42, -34+4, -13-2, CROP]
  [x+80, y, 64, 17, -48+8, -13, CROP]
  [x+160, y, 42, 43, -26+4, -34+2, CROP]
}
// Шаблон 11 (size 11) **
// обычный
template s11_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s11_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+6, CROP]
  [x+240, y, 42, 43, -14 -6, -33+3, CROP]
  [x+288, y, 64, 17, -16-12, -13, CROP]
  [x+368, y, 42, 42, -6 -6, -14-3, CROP]
  [x, y, 12, 62, -5, -18-6, CROP]
  [x+32, y, 42, 42, -34 +6, -13-3, CROP]
  [x+80, y, 64, 17, -48+12, -13, CROP]
  [x+160, y, 42, 43, -26 +6, -34+3, CROP]
}
// специальный для ЧС2т
template s11chs2t_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42+1, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240-1, y, 42+1, 43, -14-1, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s11chs2t_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+6, CROP]
  [x+240-1, y, 42+1, 43, -14 -6-1, -33+3, CROP]
  [x+288, y, 64, 17, -16-12, -13, CROP]
  [x+368, y, 42, 42, -6 -6, -14-3, CROP]
  [x, y, 12, 62, -5, -18-6, CROP]
  [x+32, y, 42, 42, -34 +6, -13-3, CROP]
  [x+80, y, 64, 17, -48+12, -13, CROP]
  [x+160, y, 42+1, 43, -26 +6, -34+3, CROP]
}
// Шаблон 12 (size 12) **
// обычный
template s12_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s12_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+8, CROP]
  [x+240, y, 42, 43, -14 -8, -33+4, CROP]
  [x+288, y, 64, 17, -16-16, -13, CROP]
  [x+368, y, 42, 42, -6 -8, -14-4, CROP]
  [x, y, 12, 62, -5, -18-8, CROP]
  [x+32, y, 42, 42, -34 +8, -13-4, CROP]
  [x+80, y, 64, 17, -48+16, -13, CROP]
  [x+160, y, 42, 43, -26 +8, -34+4, CROP]
}
// специальный для ЧС4т
template s12chs4t_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42+1, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240-1, y, 42+1, 43, -14-1, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s12chs4t_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+8, CROP]
  [x+240-1, y, 42+1, 43, -14 -8-1, -33+4, CROP]
  [x+288, y, 64, 17, -16-16, -13, CROP]
  [x+368, y, 42, 42, -6 -8, -14-4, CROP]
  [x, y, 12, 62, -5, -18-8, CROP]
  [x+32, y, 42, 42, -34 +8, -13-4, CROP]
  [x+80, y, 64, 17, -48+16, -13, CROP]
  [x+160, y, 42+1, 43, -26 +8, -34+4, CROP]
}
// Шаблон 13 (size 13) **
// обычный
template s13_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s13_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+10, CROP]
  [x+240, y, 42, 43, -14-10, -33 +5, CROP]
  [x+288, y, 64, 17, -16-20, -13, CROP]
  [x+368, y, 42, 42, -6-10, -14 -5, CROP]
  [x, y, 12, 62, -5, -18-10, CROP]
  [x+32, y, 42, 42, -34+10, -13 -5, CROP]
  [x+80, y, 64, 17, -48+20, -13, CROP]
  [x+160, y, 42, 43, -26+10, -34 +5, CROP]
}
// специальный для ED4M
template s13anim_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP | ANIM]
  [x+32, y, 42, 42, -34, -13, CROP | ANIM]
  [x+80, y, 64, 17, -48, -13, CROP | ANIM]
  [x+160, y, 42, 43, -26, -34, CROP | ANIM]
  [x+208, y, 12, 62, -5, -49, CROP | ANIM]
  [x+240, y, 42, 43, -14, -33, CROP | ANIM]
  [x+288, y, 64, 17, -16, -13, CROP | ANIM]
  [x+368, y, 42, 42, -6, -14, CROP | ANIM]
}
template s13anim_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+10, CROP | ANIM]
  [x+240, y, 42, 43, -14-10, -33 +5, CROP | ANIM]
  [x+288, y, 64, 17, -16-20, -13, CROP | ANIM]
  [x+368, y, 42, 42, -6-10, -14 -5, CROP | ANIM]
  [x, y, 12, 62, -5, -18-10, CROP | ANIM]
  [x+32, y, 42, 42, -34+10, -13 -5, CROP | ANIM]
  [x+80, y, 64, 17, -48+20, -13, CROP | ANIM]
  [x+160, y, 42, 43, -26+10, -34 +5, CROP | ANIM]
}
// Шаблон 14 (size 14) **
// обычный
template s14_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s14_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+12, CROP]
  [x+240, y, 42, 43, -14-12, -33 +6, CROP]
  [x+288, y, 64, 17, -16-24, -13, CROP]
  [x+368, y, 42, 42, -6-12, -14 -6, CROP]
  [x, y, 12, 62, -5, -18-12, CROP]
  [x+32, y, 42, 42, -34+12, -13 -6, CROP]
  [x+80, y, 64, 17, -48+24, -13, CROP]
  [x+160, y, 42, 43, -26+12, -34 +6, CROP]
}
// Шаблон 15 (size 15) **
// обычный
template s15_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s15_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+14, CROP]
  [x+240, y, 42, 43, -14-14, -33 +7, CROP]
  [x+288, y, 64, 17, -16-28, -13, CROP]
  [x+368, y, 42, 42, -6-14, -14 -7, CROP]
  [x, y, 12, 62, -5, -18-14, CROP]
  [x+32, y, 42, 42, -34+14, -13 -7, CROP]
  [x+80, y, 64, 17, -48+28, -13, CROP]
  [x+160, y, 42, 43, -26+14, -34 +7, CROP]
}
// специальный для АЧ2
template s15ach2_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42+1, 43, -26, -34, CROP] // длиннее
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240-1, y, 42+1, 43, -14-1, -33, CROP] // длиннее
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s15ach2_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+14, CROP]
  [x+240-1, y, 42+1, 43, -14-14-1, -33 +7, CROP] // длиннее
  [x+288, y, 64, 17, -16-28, -13, CROP]
  [x+368, y, 42, 42, -6-14, -14 -7, CROP]
  [x, y, 12, 62, -5, -18-14, CROP]
  [x+32, y, 42, 42, -34+14, -13 -7, CROP]
  [x+80, y, 64, 17, -48+28, -13, CROP]
  [x+160, y, 42+1, 43, -26+14, -34 +7, CROP] // длиннее
}
// Шаблон 16 (size 16) **
// обычный
template s16_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 64, 17, -48, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 64, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s16_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+16, CROP]
  [x+240, y, 42, 43, -14-16, -33 +8, CROP]
  [x+288, y, 64, 17, -16-32, -13, CROP]
  [x+368, y, 42, 42, -6-16, -14 -8, CROP]
  [x, y, 12, 62, -5, -18-16, CROP]
  [x+32, y, 42, 42, -34+16, -13 -8, CROP]
  [x+80, y, 64, 17, -48+32, -13, CROP]
  [x+160, y, 42, 43, -26+16, -34 +8, CROP]
}
// Шаблон 17 (size 17) **
// обычный
template s17_template(x, y, shift)
{
[x, y, 12, 62, -5, -18, CROP]
  [x+32, y, 42, 42, -34, -13, CROP]
  [x+80, y, 68, 17, -52, -13, CROP]
  [x+160, y, 42, 43, -26, -34, CROP]
  [x+208, y, 12, 62, -5, -49, CROP]
  [x+240, y, 42, 43, -14, -33, CROP]
  [x+288, y, 68, 17, -16, -13, CROP]
  [x+368, y, 42, 42, -6, -14, CROP]
}
template s17_r_template(x, y, shift)
{
[x+208, y, 12, 62, -5, -49+18, CROP]
  [x+240, y, 42, 43, -14-18, -33 +9, CROP]
  [x+288, y, 68, 17, -16-36, -13, CROP]
  [x+368, y, 42, 42, -6-18, -14 -9, CROP]
  [x, y, 12, 62, -5, -18-18, CROP]
  [x+32, y, 42, 42, -34+18, -13 -9, CROP]
  [x+80, y, 68, 17, -52+36, -13, CROP]
  [x+160, y, 42, 43, -26+18, -34 +9, CROP]
}
/// code definition
// change sprites block name for templates
// выбор графики паровоза с тендером
// Отображение кабины предсерийного локомотива
// Выбор вагона МВПС по году
// Выбор кабины локомотива по году
// Выбор ориентации кабины случайным образом
// Выбор ориентации эффекта для кабины, ориентированной случайным образом
// Выбор ориентации кабины секции для СМЕ без возможности сборки
// Выбор ориентации кабины секции для СМЕ (схема без альтернатив в СМЕ)
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой)
// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и средней секцией)
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и средней секцией)
// Выбор ориентации кабины секции для СМЕ (схема с 2 альтернативами и средней секцией)
// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и 2-я средними секциями)
// Выбор ориентации кабины секции для СМЕ (схема без альтернатив и 3-я средними секциями)
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и 2-я средними секциями)
// Выбор ориентации кабины секции для СМЕ (схема с 1 альтернативой и 3-я средними секциями)
// Выбор ориентации кабины секции для СМЕ (схема с 3 альтернативами и 2-я средними секциями)
// Выбор ориентации бустера
// Выбор ориентации двойного бустера без альтернатив
// не выпускать новые четвёрки без средней секции
// не выпускать новые тройники без средней секции
// не выпускать новые двойки с средней секцией
// эффекты. Искрение (симметричная секция).
// эффекты. Искрение (правая и левая ориентации секции).
// эффекты. Искрение (правая и левая ориентации секции).
//          Искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой
// эффекты. Искрение (правая и левая секции). Левая секция искрит только на малой скорости
// эффекты. Искрение (правая и левая секции). На первой секции искрит только 2-ой пантограф,
//          на второй искрят по-очереди (псевдослучайно) на малой скорости оба, на большой только 2-ой
// эффекты. Дым (правая и левая ориентации).
// эффекты. Дым (симметрично).
// эффекты. Двойной дым симметрия по ДП (правая и левая ориентации).
// эффекты. Двойной дым (правая и левая ориентации).
// эффекты. Белый дым (симметрично). Предполагается, что дым выпускает только первая часть
// тендер
// Если рисуем на карте и следующий в цепочке вагон скрыт, то отдаём пустышку
// пляски с 0x9C и 0x9A для паровозов, чтобы колёса крутились в зависимости от положения, а не от времени.
// Регистр 5 и 6 занимаем под ЭМВПС
// long vehicle template
// проработать удаление is_hidden_at(1). Заменить на is_hidden_at(0)
// special vehicle template (отличия в имени вызываемого метода _sprites_start_sp)
// special vehicle template (отличия в имени вызываемого метода _direction_template)
// train default cargo type template
// train default cargo type template
// train availability template
// Special cargo support
// невидимый вагон размером num для ARV Call-back
switch (FEAT_TRAINS, SELF, articulated_part_dummy1, extra_callback_info1)
{
1: return dummy1;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy2, extra_callback_info1)
{
1: return dummy2;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy3, extra_callback_info1)
{
1: return dummy3;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy4, extra_callback_info1)
{
1: return dummy4;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy5, extra_callback_info1)
{
1: return dummy5;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy6, extra_callback_info1)
{
1: return dummy6;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy7, extra_callback_info1)
{
1: return dummy7;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, articulated_part_dummy8, extra_callback_info1)
{
1: return dummy8;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
// end
 /// code definition - properties
// TODO выявлена проблема. шаблоны свойств не учитывают pre (получается только графика и строки). расширить шаблоны на поддержку pre
// Общее изменение по году постройки
// Общее изменение по рефиту
// Общее изменение по рефиту предыдущего ПС
// Определение пенальти на скорость (схема без СМЕ)
// Определение пенальти на скорость (схема без альтернатив в СМЕ)
// Определение пенальти на скорость (схема без альтернатив в СМЕ) для случая с изменениями в сме (имя и ид различаются)
// Определение пенальти на скорость (схема без альтернатив в СМЕ с модернизацией СМЕ)
// Определение пенальти на скорость (схема c 1 альтернативой в СМЕ)
// Определение пенальти на скорость (схема c 2 альтернативами в СМЕ)
// Определение пенальти на скорость (схема c 3 альтернативами в СМЕ)
// Определение пенальти на скорость (схема c 4 альтернативами в СМЕ)
// Определение пенальти на скорость (схема c 5 альтернативами в СМЕ)
// Определение пенальти на скорость (схема c 6 альтернативами в СМЕ)
// Определение пенальти на скорость (схема несовместимости СМЕ с заданного года)
// запрет на последнюю секцию
// Определение скорости без вариантов
// Определение скорости с изменением по году постройки
// Определение скорости с 2-я изменениями по году постройки
// Определение скорости с 3-я изменениями по году постройки
// Определение скорости с 4-я изменениями по году постройки
// Определение скорости с изменением по году постройки и в заданном году
// Определение скорости с изменением в заданный год
// Определение скорости с изменением в 2 заданных года
// Определение скорости с изменением в 3 заданных года
// Определение скорости со снижением для старых
// Определение скорости со снижением для старых и изменением скорости по году постройки
// Определение скорости со снижением для старых и с предсерийной моделью
// Определение скорости со снижением для старых и с предсерийной моделью без снижения
// Определение скорости с загрузкой
// Определение скорости в зависимости от типа пути
// Определение старения груза с изменением по году постройки
// Определение массы с изменением по году постройки
// Определение массы с изменением по 2-м годам постройки
// Определение массы с изменением по 3-м годам постройки
// Определение массы с изменением по 4-м годам постройки
// Определение цены с изменением по году постройки
// Определение цены с изменением по 2-м годам постройки
// Определение цены с изменением по 3-м годам постройки
// Определение цены с изменением по 4-м годам постройки
// Определение мощности с изменением по году постройки
// Определение мощности с изменением по 2-м годам постройки
// Определение мощности с изменением по 3-м годам постройки
// Определение мощности с изменением по 4-м годам постройки
// Определение мощности с изменением по году
// Определение мощности МВПС
// Определение мощности в зависимости от типа пути
// Определение ТЕ с изменением по году постройки
// Определение ТЕ с изменением по 2-м годам постройки
// Определение ТЕ с изменением по 3-м годам постройки
// Определение ТЕ с изменением по 4-м годам постройки
// Определение цены рефита при ливреи
// Определение длины с изменением по году постройки
// Определение длины с изменением по 2-м годам постройки
// Двухсекционный ПС
// Трёхсекционный ПС
// Определение вместимости только для головной части ARV
// Определение вместимости с изменением по году постройки
// Определение вместимости с изменением по году постройки
// Определение вместимости МВПС
// Определение эффектов МВПС
// emu_s support
// end
  /// code definition - RC
// определение расхода топлива
// расход определяется граничным на разгоне, торможении, подъёме, спуске.
// в оставшемся случае расходуется часть, пропорциональная доли массы от общей доли в массе
// (общая масса на долю мощности в общей мощности)
//      return (rc_max * (((LOAD_TEMP(6) /* total weight */ ) * power / LOAD_TEMP(5)) /* total power */ / weight));
// передеать так, что если в гору скорость свыше 90%, то значит мощи хватает и считать обычным образом.
// ввиду отсутсвия переменной для общего веса убрана составляющая веса из формулы. Вернуть при появлении веса.
/*
  каждый критерий должен последовательно быть добавлен в сумму с учётом ситуации и коэф, а затем возвращено итоговое
  значение (сейчас последовательно рбатоает самый высокий коэф)

  Концепция определения стоимости обслуживания ПС.
  Локомотив:
  - при ТО - работы по ТО
  - детали на ТО - зависят от износа, поэтому считаются в основном в движении на высоких и низких скоростях
  - при движении - расход топлива в движении
  - при стоянке - расход в стоянке
  - при движении - расходы на персонал бригады
  - при стоянке - расходы на персонал осмотровой бригады
  - расход годовой за тех осмотр

  Вагон:
  - при ТО - работы по ТО
  - детали на ТО - зависят от износа, поэтому считаются в основном в движении на высоких и низких скоростях
  - при движении с грузом - стоимость обогрева / охлаждения
  - при работе бригады (почтовый вагон, пассажирский вагон дальнего следования) - расходы на персонал
  - расход годовой за тех осмотр / сертификацию


  При построении моделми необходимо учитывать, что RC не пересчитывается постоянно, а кэшируется.
  поэтому точность расчёта будет невелироваться запоздалостью реакции. Поэтому делать сильно разброснные результаты
  расчёта не имеет смысла.
*/
// TODO не учтена текущая скорость, учтён лишь расход разгона. Текущая скорость учтена только в износе
// TODO не учтено, что только головной локомотив имеет сопроотивление воздуха
switch (FEAT_TRAINS, SELF, all_running_cost_power, // расход топлива считается от разгона
  STORE_TEMP(LOAD_TEMP(10) +
             vehicle_is_powered * LOAD_TEMP(0) *
                ((LOAD_TEMP(11) < (LOAD_TEMP(12) * 9/10)) * 70 + 100) / 100 /
                (18 * (LOAD_TEMP(11) < 2) + 1), 10))
{
return min(32767, LOAD_TEMP(10));
}
switch (FEAT_TRAINS, SELF, all_running_cost_usage, // износ по скорости считается линейным в процентах от максимальной скорости ПС
  STORE_TEMP(LOAD_TEMP(10) +
             LOAD_TEMP(2) * (LOAD_TEMP(11) + 1) / (LOAD_TEMP(6) * 5 / 18 + 1) *
             (LOAD_TEMP(7) + cargo_count * cargo_unit_weight / 16) / LOAD_TEMP(8), 10))
{ all_running_cost_power; }
switch (FEAT_TRAINS, PARENT, all_running_cost_factor_unused,
[ STORE_TEMP(current_speed, 11),
   STORE_TEMP(current_max_speed, 12),
   vehicle_is_in_depot + (2 * vehicle_is_broken) + (4 * vehicle_is_crashed) ])
{
1: return min(32767, 1/20 * LOAD_TEMP(2) + LOAD_TEMP(10));
 // ПС в депо не используется
  2..3: return min(32767, vehicle_is_potentially_powered * 5 * LOAD_TEMP(4) + LOAD_TEMP(10));
 // ПС сломано в пути - дорогое ТО
  4..7: return min(32767, 5 * LOAD_TEMP(2) + 2000 + LOAD_TEMP(10));
 // ПС разрушено
        all_running_cost_usage;
}
switch (FEAT_TRAINS, SELF, all_running_cost_factor_lic, // В регистре 10 собираем стоимость на данный тик
  STORE_TEMP( // оплата бригады идёт всегда
// TODO Учесть СМЕ нормально - если штраф, то бригада в каждой секции??
// TODO что делать с ПС не под током - куда исчезает команда?
  (LOAD_TEMP(1) * (1 - (((hasbit(bitmask_consist_info, 0)) == 0) && (position_in_consist > 0)) * (vehicle_is_powered))) +
  (LOAD_TEMP(3) * (cargo_count > 0)) + // оплата сопровождения зависит от наличия груза
  (LOAD_TEMP(5) * (current_day_of_year < 1)) + // оплата лицензий и налогов - раз в год, 1 января.
  (LOAD_TEMP(4) * ((current_date > date_of_last_service) &&
                   (current_date < date_of_last_service + 2))), 10)) // Оплата ТО - на выходе из депо
{ all_running_cost_factor_unused; }
switch (FEAT_TRAINS, PARENT, all_running_cost_factor_new,
  age_in_days) // в момент постройки RC - совокупный. Смысл - показать при покупке потолок расхода
{
0: return LOAD_TEMP(0) + LOAD_TEMP(1) + LOAD_TEMP(2) + LOAD_TEMP(3) + LOAD_TEMP(4) + LOAD_TEMP(5);
     all_running_cost_factor_lic;
}
switch (FEAT_TRAINS, SELF, all_running_cost_factor,
  position_in_articulated_veh) // Расчёт ведётся только для головного элемента ARV
{
0: all_running_cost_factor_new;
     return 0;
}
// Определение стоимости обслуживания МВПС
// end
  /// code definition - group properties
// Group name CB
// A group CBs
// A group does not changes props
// A group does not changes props as average
// A group changes props once
// A group change props once as average
// A group change props 2 times
// A group change props 2 times as average
// A group change props 3 times
// A group change props 3 times as average
// A group change props 4 times
// A group change props 4 times as average
// A group change props 5 times
// A group change props 5 times as average
// A group change props 6 times
// A group change props 7 times
// A group change props 7 times as average
// -
 /// code definition - mu
// Шаблон расчёта конфигурации ЭМВПС
// Шаблон расчёта конфигурации ЭМВПС с 2-я типами головных вагонов
// Шаблон расчёта конфигурации ЭМВПС 2-х битный с 4-я вариантами головного вагона
// 0 - П
// 1 - ПТ
// 2 - М
// 3 - МТ
// Простой Шаблон расчёта ориентации ЭМВПС
// TODO неправильно жёстко зашивать тип головного вагона _h, он должен передаваться в параметрах
// Шаблон расчёта ориентации ЭМВПС
// Шаблон расчёта ориентации ЭМВПС с 2-я типами головных вагонов
// Шаблон расчёта ориентации ЭМВПС 2-х битный с 4-я вариантами головного вагона
// 0 - П
// 1 - ПТ
// 2 - М
// 3 - МТ
// шаблон ориентации прицепного вагона
// шаблон ориентации моторного вагона
// шаблон эффектов для моторного вагона
// шаблон присоединения вагона. Общие варианты
// шаблон присоединения вагона. Дополнительные варианты
// 4-12 вагонов + варианты 2-4 с моторной головой
// головной односторонний несимметричный с графикой от другого ПС
// головной односторонний несимметричный
// головной односторонний несимметричный с 2-я типами головных вагонов
// головной односторонний несимметричный с промежуточной головой
// головной односторонний несимметричный с промежуточной головой с 2-я типами головных вагонов
// головной односторонний несимметричный с промежуточной головой
// (Промежуточные головы в пути отличаются от вида в депо)
// головной односторонний несимметричный с промежуточной головой с 2-я типами головных вагонов
// (Промежуточные головы в пути отличаются от вида в депо)
// прицепной моторный постоянного тока, эксплуатация не под током
// прицепной моторный
// прицепной моторный с графикой от другого ПС
// прицепной
// end
 /// code definition
// шаблон выбора по году
// шаблон выбора по году с предсерийным
// Описание вагона
// Описание вагона без окончания срока доступности
// Описание вагона без окончания срока доступности c 2 производителями
// Описание вагона c 2 производителями
// Описание вагона c 3 производителями
// Описание вагона c примечанием
// Описание вагона со специальным типом (передаётся как строка, а не как ссылка) c примечанием
// Описание вагона с отличающейся скоростью разгрузки
// Описание вагона с отличающейся скоростью разгрузки и 2 производителями
// Описание вагона с отличающейся скоростью разгрузки без окончания срока доступности
// Описание вагона с отличающейся скоростью разгрузки c примечанием
// Описание вагона-платформы
// Описание вагона-платформы c 2 производителями
// Описание вагона-платформы c 3 производителями
// Описание вагона-платформы без окончания срока доступности
// Описание вагона-платформы без окончания срока доступности c 2 производителями
// Описание почтового-вагона
// Описание почтового-вагона без окончания срока доступности
// Описание почтового-вагона с примечанием
// Описание почтового-вагона без окончания срока доступности с примечанием
// Описание почтового-вагона с производством в течение года
// Описание почтового-вагона с подтипом
// Описание почтового-вагона c 2 производителями
// Описание пассажирского вагона с подтипом
// Описание пассажирского вагона
// Описание пассажирского вагона без окончания срока доступности
// Описание пассажирского вагона с производством в течение года
// Описание пассажирского вагона с подтипом
// Описание пассажирского вагона с производством в течение года с подтипом
// Описание пассажирского вагона c примечанием
// Описание пассажирского вагона c примечанием без окончания срока доступности
// Описание пассажирского вагона с 2 производителями
// Описание локомотива
// Описание локомотива с производством в течение года
// Описание локомотива с производством в течение года и с 2 производителями
// Описание локомотива без окончания срока доступности
// Описание локомотива c подтипом
// Описание локомотива c подтипом без окончания срока доступности
// Описание локомотива c подтипом и производством в течение года
// Описание локомотива c подтипом, с производством в течение года и 2 производителями
// Описание локомотива c подтипом и с 2 производителями
// Описание локомотива c подтипом и с 3 производителями
// Описание локомотива c подтипом и с 4 производителями
// Описание локомотива c подтипом и с 5 производителями
// Описание локомотива с 2 производителями
// Описание локомотива с 3 производителями
// Описание локомотива с 4 производителями
// Описание локомотива с 5 производителями
// Описание локомотива c вариантом в СМЕ
// Описание локомотива c 2 вариантами в СМЕ
// Описание локомотива c 3 вариантами в СМЕ
// Описание локомотива c 4 вариантами в СМЕ
// Описание локомотива c вариантом в СМЕ без окончания срока доступности
// Описание локомотива c 2 вариантами в СМЕ без окончания срока доступности
// Описание локомотива c 3 вариантами в СМЕ без окончания срока доступности
// Описание локомотива c 4 вариантами в СМЕ без окончания срока доступности
// Описание локомотива c вариантом в СМЕ с производством в течение года
// Описание локомотива c 2 вариантами в СМЕ с производством в течение года
// Описание локомотива c 3 вариантами в СМЕ с производством в течение года
// Описание локомотива c 4 вариантами в СМЕ с производством в течение года
// Описание локомотива c подтипом и вариантом в СМЕ
// Описание локомотива c подтипом и 2 вариантами в СМЕ
// Описание локомотива c подтипом и 3 вариантами в СМЕ
// Описание локомотива c подтипом и 4 вариантами в СМЕ
// Описание локомотива c примечанием
// Описание локомотива без окончания срока доступности c примечанием
// Описание локомотива c подтипом c примечанием
// Описание локомотива c подтипом без окончания срока доступности c примечанием
// Описание локомотива c вариантом в СМЕ c примечанием
// Описание локомотива с 2 производителями с примичанием
// Описание локомотива с 3 производителями с примичанием
// Описание локомотива с 4 производителями с примичанием
// Описание локомотива с 5 производителями с примичанием
// Описание локомотива с 2 производителями с примичанием и с производством в течение года
// Описание МВПС
// Описание МВПС с производством в течение года
// Описание МВПС без окончания срока доступности
// Описание МВПС c 2 производителями
// Описание МВПС с подтипом
// Описание МВПС с подтипом c 3 производителями
// Описание МВПС с подтипом с производством в течение года
// Описание МВПС с подтипом без окончания срока доступности
// Описание МВПС с подтипом без окончания срока доступности и 1 вариантом в СМЕ
// Описание МВПС с подтипом без окончания срока доступности c 4 производителями
// Описание МВПС с моделью
// Описание МВПС с моделью с производством в течение года
// Описание МВПС с моделью без окончания срока доступности
// Описание МВПС с моделью с исполнением без окончания срока доступности
// Описание МВПС c примечанием
// Описание МВПС без окончания срока доступности c примечанием
// Описание МВПС с моделью c примечанием
// Описание МВПС с подтипом с примичанием
// Описание МВПС с подтипом без окончания срока доступности с примичанием
// Описание МВПС c примечанием и 1 вариантом в СМЕ
// Описание МВПС c 2 производителями и примичанием
// Вычисление количества тиков
// Изменяемые названия предприятий
// end
 /// recolour
// Шаблон задания спрайтов перекрашивания на базе CC
// C6-CD, 8 элементов
ttdall_cc = reserve_sprites(215);
replace(ttdall_cc)
{
// 0x00 Transperent
  recolour_sprite
{
0xC6: 0x00;
 0xC7: 0x00;
 0xC8: 0x00;
 0xC9: 0x00;
 0xCA: 0x00;
 0xCB: 0x00;
 0xCC: 0x00;
 0xCD: 0x00;
}
// 0x01 Grey
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x01;
 0xC9: 0x01;
 0xCA: 0x02;
 0xCB: 0x03;
 0xCC: 0x04;
 0xCD: 0x05;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x01;
 0xC9: 0x02;
 0xCA: 0x03;
 0xCB: 0x04;
 0xCC: 0x05;
 0xCD: 0x06;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x02;
 0xC9: 0x03;
 0xCA: 0x04;
 0xCB: 0x05;
 0xCC: 0x06;
 0xCD: 0x07;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x04;
 0xCA: 0x05;
 0xCB: 0x06;
 0xCC: 0x07;
 0xCD: 0x08;
}
recolour_sprite
{
0xC6: 0x02;
 0xC7: 0x03;
 0xC8: 0x04;
 0xC9: 0x05;
 0xCA: 0x06;
 0xCB: 0x07;
 0xCC: 0x08;
 0xCD: 0x09;
}
recolour_sprite
{
0xC6: 0x03;
 0xC7: 0x04;
 0xC8: 0x05;
 0xC9: 0x06;
 0xCA: 0x07;
 0xCB: 0x08;
 0xCC: 0x09;
 0xCD: 0x0A;
}
recolour_sprite
{
0xC6: 0x04;
 0xC7: 0x05;
 0xC8: 0x06;
 0xC9: 0x07;
 0xCA: 0x08;
 0xCB: 0x09;
 0xCC: 0x0A;
 0xCD: 0x0B;
}
recolour_sprite
{
0xC6: 0x05;
 0xC7: 0x06;
 0xC8: 0x07;
 0xC9: 0x08;
 0xCA: 0x09;
 0xCB: 0x0A;
 0xCC: 0x0B;
 0xCD: 0x0C;
}
recolour_sprite
{
0xC6: 0x06;
 0xC7: 0x07;
 0xC8: 0x08;
 0xC9: 0x09;
 0xCA: 0x0A;
 0xCB: 0x0B;
 0xCC: 0x0C;
 0xCD: 0x0D;
}
recolour_sprite
{
0xC6: 0x07;
 0xC7: 0x08;
 0xC8: 0x09;
 0xC9: 0x0A;
 0xCA: 0x0B;
 0xCB: 0x0C;
 0xCC: 0x0D;
 0xCD: 0x0E;
}
recolour_sprite
{
0xC6: 0x08;
 0xC7: 0x09;
 0xC8: 0x0A;
 0xC9: 0x0B;
 0xCA: 0x0C;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x09;
 0xC7: 0x0A;
 0xC8: 0x0B;
 0xC9: 0x0C;
 0xCA: 0x0D;
 0xCB: 0x0E;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x0A;
 0xC7: 0x0B;
 0xC8: 0x0C;
 0xC9: 0x0D;
 0xCA: 0x0E;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x0B;
 0xC7: 0x0C;
 0xC8: 0x0D;
 0xC9: 0x0E;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x0C;
 0xC7: 0x0D;
 0xC8: 0x0E;
 0xC9: 0x0F;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x10 grey metallic
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x10;
 0xCA: 0x11;
 0xCB: 0x12;
 0xCC: 0x13;
 0xCD: 0x14;
}
recolour_sprite
{
0xC6: 0x02;
 0xC7: 0x03;
 0xC8: 0x10;
 0xC9: 0x11;
 0xCA: 0x12;
 0xCB: 0x13;
 0xCC: 0x14;
 0xCD: 0x15;
}
recolour_sprite
{
0xC6: 0x03;
 0xC7: 0x10;
 0xC8: 0x11;
 0xC9: 0x12;
 0xCA: 0x13;
 0xCB: 0x14;
 0xCC: 0x15;
 0xCD: 0x16;
}
recolour_sprite
{
0xC6: 0x10;
 0xC7: 0x11;
 0xC8: 0x12;
 0xC9: 0x13;
 0xCA: 0x14;
 0xCB: 0x15;
 0xCC: 0x16;
 0xCD: 0x17;
}
recolour_sprite
{
0xC6: 0x11;
 0xC7: 0x12;
 0xC8: 0x13;
 0xC9: 0x14;
 0xCA: 0x15;
 0xCB: 0x16;
 0xCC: 0x17;
 0xCD: 0x0D;
}
recolour_sprite
{
0xC6: 0x12;
 0xC7: 0x13;
 0xC8: 0x14;
 0xC9: 0x15;
 0xCA: 0x16;
 0xCB: 0x17;
 0xCC: 0x0D;
 0xCD: 0x0E;
}
recolour_sprite
{
0xC6: 0x13;
 0xC7: 0x14;
 0xC8: 0x15;
 0xC9: 0x16;
 0xCA: 0x17;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x14;
 0xC7: 0x15;
 0xC8: 0x16;
 0xC9: 0x17;
 0xCA: 0x0D;
 0xCB: 0x0E;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x18 Olive brown
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x69;
 0xC9: 0x18;
 0xCA: 0x1A;
 0xCB: 0x1B;
 0xCC: 0x1C;
 0xCD: 0x1D;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x18;
 0xC9: 0x19;
 0xCA: 0x1A;
 0xCB: 0x1B;
 0xCC: 0x1C;
 0xCD: 0x1D;
}
recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x18;
 0xC8: 0x19;
 0xC9: 0x1A;
 0xCA: 0x1B;
 0xCB: 0x1C;
 0xCC: 0x1D;
 0xCD: 0x1E;
}
recolour_sprite
{
0xC6: 0x18;
 0xC7: 0x19;
 0xC8: 0x1A;
 0xC9: 0x1B;
 0xCA: 0x1C;
 0xCB: 0x1D;
 0xCC: 0x1E;
 0xCD: 0x1F;
}
recolour_sprite
{
0xC6: 0x19;
 0xC7: 0x1A;
 0xC8: 0x1B;
 0xC9: 0x1C;
 0xCA: 0x1D;
 0xCB: 0x1E;
 0xCC: 0x1F;
 0xCD: 0x27;
}
recolour_sprite
{
0xC6: 0x1A;
 0xC7: 0x1B;
 0xC8: 0x1C;
 0xC9: 0x1D;
 0xCA: 0x1E;
 0xCB: 0x1F;
 0xCC: 0x27;
 0xCD: 0xA9;
}
recolour_sprite
{
0xC6: 0x1B;
 0xC7: 0x1C;
 0xC8: 0x1D;
 0xC9: 0x1E;
 0xCA: 0x1F;
 0xCB: 0x27;
 0xCC: 0xA9;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x1C;
 0xC7: 0x1D;
 0xC8: 0x1E;
 0xC9: 0x1F;
 0xCA: 0x27;
 0xCB: 0xA9;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x20 Beige
  recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x6A;
 0xC9: 0x20;
 0xCA: 0x21;
 0xCB: 0x22;
 0xCC: 0x23;
 0xCD: 0x24;
}
recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x6A;
 0xC8: 0x20;
 0xC9: 0x21;
 0xCA: 0x22;
 0xCB: 0x23;
 0xCC: 0x24;
 0xCD: 0x25;
}
recolour_sprite
{
0xC6: 0x6A;
 0xC7: 0x20;
 0xC8: 0x21;
 0xC9: 0x22;
 0xCA: 0x23;
 0xCB: 0x24;
 0xCC: 0x25;
 0xCD: 0x26;
}
recolour_sprite
{
0xC6: 0x20;
 0xC7: 0x21;
 0xC8: 0x22;
 0xC9: 0x23;
 0xCA: 0x24;
 0xCB: 0x25;
 0xCC: 0x26;
 0xCD: 0x27;
}
recolour_sprite
{
0xC6: 0x21;
 0xC7: 0x22;
 0xC8: 0x23;
 0xC9: 0x24;
 0xCA: 0x25;
 0xCB: 0x26;
 0xCC: 0x27;
 0xCD: 0x45;
}
recolour_sprite
{
0xC6: 0x22;
 0xC7: 0x23;
 0xC8: 0x24;
 0xC9: 0x25;
 0xCA: 0x26;
 0xCB: 0x27;
 0xCC: 0x45;
 0xCD: 0xA9;
}
recolour_sprite
{
0xC6: 0x23;
 0xC7: 0x24;
 0xC8: 0x25;
 0xC9: 0x26;
 0xCA: 0x27;
 0xCB: 0x45;
 0xCC: 0xA9;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x24;
 0xC7: 0x25;
 0xC8: 0x26;
 0xC9: 0x27;
 0xCA: 0x45;
 0xCB: 0xA9;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x28 Satin
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x46;
 0xC9: 0x28;
 0xCA: 0x29;
 0xCB: 0x2A;
 0xCC: 0x2B;
 0xCD: 0x2C;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0x28;
 0xC9: 0x29;
 0xCA: 0x2A;
 0xCB: 0x2B;
 0xCC: 0x2C;
 0xCD: 0x2D;
}
recolour_sprite
{
0xC6: 0x46;
 0xC7: 0x28;
 0xC8: 0x29;
 0xC9: 0x2A;
 0xCA: 0x2B;
 0xCB: 0x2C;
 0xCC: 0x2D;
 0xCD: 0x2E;
}
recolour_sprite
{
0xC6: 0x28;
 0xC7: 0x29;
 0xC8: 0x2A;
 0xC9: 0x2B;
 0xCA: 0x2C;
 0xCB: 0x2D;
 0xCC: 0x2E;
 0xCD: 0x2F;
}
recolour_sprite
{
0xC6: 0x29;
 0xC7: 0x2A;
 0xC8: 0x2B;
 0xC9: 0x2C;
 0xCA: 0x2D;
 0xCB: 0x2E;
 0xCC: 0x2F;
 0xCD: 0x30;
}
recolour_sprite
{
0xC6: 0x2A;
 0xC7: 0x2B;
 0xC8: 0x2C;
 0xC9: 0x2D;
 0xCA: 0x2E;
 0xCB: 0x2F;
 0xCC: 0x30;
 0xCD: 0x31;
}
recolour_sprite
{
0xC6: 0x2B;
 0xC7: 0x2C;
 0xC8: 0x2D;
 0xC9: 0x2E;
 0xCA: 0x2F;
 0xCB: 0x30;
 0xCC: 0x31;
 0xCD: 0xA8;
}
recolour_sprite
{
0xC6: 0x2C;
 0xC7: 0x2D;
 0xC8: 0x2E;
 0xC9: 0x2F;
 0xCA: 0x30;
 0xCB: 0x31;
 0xCC: 0xA8;
 0xCD: 0xA9;
}
recolour_sprite
{
0xC6: 0x2D;
 0xC7: 0x2E;
 0xC8: 0x2F;
 0xC9: 0x30;
 0xCA: 0x31;
 0xCB: 0xA8;
 0xCC: 0xA9;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x2E;
 0xC7: 0x2F;
 0xC8: 0x30;
 0xC9: 0x31;
 0xCA: 0xA8;
 0xCB: 0xA9;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x32 Light yellow
  recolour_sprite
{
0xC6: 0x40;
 0xC7: 0x41;
 0xC8: 0x42;
 0xC9: 0x32;
 0xCA: 0x33;
 0xCB: 0x34;
 0xCC: 0x45;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x41;
 0xC7: 0x42;
 0xC8: 0x32;
 0xC9: 0x33;
 0xCA: 0x34;
 0xCB: 0x45;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x42;
 0xC7: 0x32;
 0xC8: 0x33;
 0xC9: 0x34;
 0xCA: 0x45;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x35 Brown
  recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x3C;
 0xC9: 0x35;
 0xCA: 0x36;
 0xCB: 0x37;
 0xCC: 0x38;
 0xCD: 0x39;
}
recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x3C;
 0xC8: 0x35;
 0xC9: 0x36;
 0xCA: 0x37;
 0xCB: 0x38;
 0xCC: 0x39;
 0xCD: 0x3A;
}
recolour_sprite
{
0xC6: 0x3C;
 0xC7: 0x35;
 0xC8: 0x36;
 0xC9: 0x37;
 0xCA: 0x38;
 0xCB: 0x39;
 0xCC: 0x3A;
 0xCD: 0x3B;
}
recolour_sprite
{
0xC6: 0x35;
 0xC7: 0x36;
 0xC8: 0x37;
 0xC9: 0x38;
 0xCA: 0x39;
 0xCB: 0x3A;
 0xCC: 0x3B;
 0xCD: 0x26;
}
recolour_sprite
{
0xC6: 0x36;
 0xC7: 0x37;
 0xC8: 0x38;
 0xC9: 0x39;
 0xCA: 0x3A;
 0xCB: 0x3B;
 0xCC: 0x26;
 0xCD: 0x27;
}
recolour_sprite
{
0xC6: 0x37;
 0xC7: 0x38;
 0xC8: 0x39;
 0xC9: 0x3A;
 0xCA: 0x3B;
 0xCB: 0x26;
 0xCC: 0x27;
 0xCD: 0x45;
}
recolour_sprite
{
0xC6: 0x38;
 0xC7: 0x39;
 0xC8: 0x3A;
 0xC9: 0x3B;
 0xCA: 0x26;
 0xCB: 0x27;
 0xCC: 0x45;
 0xCD: 0x0F;
}
// 0x3C Yellow
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x69;
 0xC9: 0x3C;
 0xCA: 0x3D;
 0xCB: 0x3E;
 0xCC: 0x3F;
 0xCD: 0x40;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x3C;
 0xC9: 0x3D;
 0xCA: 0x3E;
 0xCB: 0x3F;
 0xCC: 0x40;
 0xCD: 0x41;
}
recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x3C;
 0xC8: 0x3D;
 0xC9: 0x3E;
 0xCA: 0x3F;
 0xCB: 0x40;
 0xCC: 0x41;
 0xCD: 0x42;
}
recolour_sprite
{
0xC6: 0x3C;
 0xC7: 0x3D;
 0xC8: 0x3E;
 0xC9: 0x3F;
 0xCA: 0x40;
 0xCB: 0x41;
 0xCC: 0x42;
 0xCD: 0x43;
}
recolour_sprite
{
0xC6: 0x3D;
 0xC7: 0x3E;
 0xC8: 0x3F;
 0xC9: 0x40;
 0xCA: 0x41;
 0xCB: 0x42;
 0xCC: 0x43;
 0xCD: 0x33;
}
recolour_sprite
{
0xC6: 0x3E;
 0xC7: 0x3F;
 0xC8: 0x40;
 0xC9: 0x41;
 0xCA: 0x42;
 0xCB: 0x43;
 0xCC: 0x33;
 0xCD: 0x34;
}
recolour_sprite
{
0xC6: 0x3F;
 0xC7: 0x40;
 0xC8: 0x41;
 0xC9: 0x42;
 0xCA: 0x43;
 0xCB: 0x33;
 0xCC: 0x34;
 0xCD: 0x45;
}
recolour_sprite
{
0xC6: 0x40;
 0xC7: 0x41;
 0xC8: 0x42;
 0xC9: 0x43;
 0xCA: 0x33;
 0xCB: 0x34;
 0xCC: 0x45;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x42;
 0xC7: 0x43;
 0xC8: 0x33;
 0xC9: 0x44;
 0xCA: 0x45;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x43;
 0xC7: 0x33;
 0xC8: 0x44;
 0xC9: 0x45;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x46 Red
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x01;
 0xC9: 0x46;
 0xCA: 0x47;
 0xCB: 0x48;
 0xCC: 0x49;
 0xCD: 0x4A;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x46;
 0xC9: 0x47;
 0xCA: 0x48;
 0xCB: 0x49;
 0xCC: 0x4A;
 0xCD: 0x4B;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0x47;
 0xC9: 0x48;
 0xCA: 0x49;
 0xCB: 0x4A;
 0xCC: 0x4B;
 0xCD: 0x4C;
}
recolour_sprite
{
0xC6: 0x46;
 0xC7: 0x47;
 0xC8: 0x48;
 0xC9: 0x49;
 0xCA: 0x4A;
 0xCB: 0x4B;
 0xCC: 0x4C;
 0xCD: 0x4D;
}
recolour_sprite
{
0xC6: 0x47;
 0xC7: 0x48;
 0xC8: 0x49;
 0xC9: 0x4A;
 0xCA: 0x4B;
 0xCB: 0x4C;
 0xCC: 0x4D;
 0xCD: 0x4E;
}
recolour_sprite
{
0xC6: 0x48;
 0xC7: 0x49;
 0xC8: 0x4A;
 0xC9: 0x4B;
 0xCA: 0x4C;
 0xCB: 0x4D;
 0xCC: 0x4E;
 0xCD: 0x4F;
}
recolour_sprite
{
0xC6: 0x49;
 0xC7: 0x4A;
 0xC8: 0x4B;
 0xC9: 0x4C;
 0xCA: 0x4D;
 0xCB: 0x4E;
 0xCC: 0x4F;
 0xCD: 0x78;
}
recolour_sprite
{
0xC6: 0x4A;
 0xC7: 0x4B;
 0xC8: 0x4C;
 0xC9: 0x4D;
 0xCA: 0x4E;
 0xCB: 0x4F;
 0xCC: 0x78;
 0xCD: 0x79;
}
recolour_sprite
{
0xC6: 0x4B;
 0xC7: 0x4C;
 0xC8: 0x4D;
 0xC9: 0x4E;
 0xCA: 0x4E;
 0xCB: 0x78;
 0xCC: 0x79;
 0xCD: 0xA8;
}
recolour_sprite
{
0xC6: 0x4C;
 0xC7: 0x4D;
 0xC8: 0x4E;
 0xC9: 0x4F;
 0xCA: 0x78;
 0xCB: 0x79;
 0xCC: 0xA8;
 0xCD: 0xA9;
}
// 0x50 Grass green
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x68;
 0xC9: 0x50;
 0xCA: 0x51;
 0xCB: 0x52;
 0xCC: 0x53;
 0xCD: 0x54;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x50;
 0xC9: 0x51;
 0xCA: 0x52;
 0xCB: 0x53;
 0xCC: 0x54;
 0xCD: 0x55;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x50;
 0xC8: 0x51;
 0xC9: 0x52;
 0xCA: 0x53;
 0xCB: 0x54;
 0xCC: 0x55;
 0xCD: 0x56;
}
recolour_sprite
{
0xC6: 0x50;
 0xC7: 0x51;
 0xC8: 0x52;
 0xC9: 0x53;
 0xCA: 0x54;
 0xCB: 0x55;
 0xCC: 0x56;
 0xCD: 0x57;
}
recolour_sprite
{
0xC6: 0x51;
 0xC7: 0x52;
 0xC8: 0x53;
 0xC9: 0x54;
 0xCA: 0x55;
 0xCB: 0x56;
 0xCC: 0x57;
 0xCD: 0xD0;
}
recolour_sprite
{
0xC6: 0x52;
 0xC7: 0x53;
 0xC8: 0x54;
 0xC9: 0x55;
 0xCA: 0x56;
 0xCB: 0x57;
 0xCC: 0xD0;
 0xCD: 0xD1;
}
recolour_sprite
{
0xC6: 0x53;
 0xC7: 0x54;
 0xC8: 0x55;
 0xC9: 0x56;
 0xCA: 0x57;
 0xCB: 0xD0;
 0xCC: 0xD1;
 0xCD: 0x67;
}
recolour_sprite
{
0xC6: 0x54;
 0xC7: 0x55;
 0xC8: 0x56;
 0xC9: 0x57;
 0xCA: 0xD0;
 0xCB: 0xD1;
 0xCC: 0x67;
 0xCD: 0x0E;
}
// 0x58 Fern green
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x68;
 0xC9: 0x58;
 0xCA: 0x59;
 0xCB: 0x5A;
 0xCC: 0x5B;
 0xCD: 0x5C;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x58;
 0xC9: 0x59;
 0xCA: 0x5A;
 0xCB: 0x5B;
 0xCC: 0x5C;
 0xCD: 0x5D;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x58;
 0xC8: 0x59;
 0xC9: 0x5A;
 0xCA: 0x5B;
 0xCB: 0x5C;
 0xCC: 0x5D;
 0xCD: 0x5E;
}
recolour_sprite
{
0xC6: 0x58;
 0xC7: 0x59;
 0xC8: 0x5A;
 0xC9: 0x5B;
 0xCA: 0x5C;
 0xCB: 0x5D;
 0xCC: 0x5E;
 0xCD: 0x5F;
}
recolour_sprite
{
0xC6: 0x59;
 0xC7: 0x5A;
 0xC8: 0x5B;
 0xC9: 0x5C;
 0xCA: 0x5D;
 0xCB: 0x5E;
 0xCC: 0x5F;
 0xCD: 0x67;
}
recolour_sprite
{
0xC6: 0x5A;
 0xC7: 0x5B;
 0xC8: 0x5C;
 0xC9: 0x5D;
 0xCA: 0x5E;
 0xCB: 0x5F;
 0xCC: 0x67;
 0xCD: 0x0D;
}
recolour_sprite
{
0xC6: 0x5B;
 0xC7: 0x5C;
 0xC8: 0x5D;
 0xC9: 0x5E;
 0xCA: 0x5F;
 0xCB: 0x67;
 0xCC: 0x0D;
 0xCD: 0x0E;
}
recolour_sprite
{
0xC6: 0x5C;
 0xC7: 0x5D;
 0xC8: 0x5E;
 0xC9: 0x5F;
 0xCA: 0x67;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
}
// 0x60 Reseda green
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x18;
 0xC9: 0x60;
 0xCA: 0x61;
 0xCB: 0x62;
 0xCC: 0x63;
 0xCD: 0x64;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x18;
 0xC8: 0x60;
 0xC9: 0x61;
 0xCA: 0x62;
 0xCB: 0x63;
 0xCC: 0x64;
 0xCD: 0x65;
}
recolour_sprite
{
0xC6: 0x18;
 0xC7: 0x60;
 0xC8: 0x61;
 0xC9: 0x62;
 0xCA: 0x63;
 0xCB: 0x64;
 0xCC: 0x65;
 0xCD: 0x66;
}
recolour_sprite
{
0xC6: 0x60;
 0xC7: 0x61;
 0xC8: 0x62;
 0xC9: 0x63;
 0xCA: 0x64;
 0xCB: 0x65;
 0xCC: 0x66;
 0xCD: 0x67;
}
recolour_sprite
{
0xC6: 0x61;
 0xC7: 0x62;
 0xC8: 0x63;
 0xC9: 0x64;
 0xCA: 0x65;
 0xCB: 0x66;
 0xCC: 0x67;
 0xCD: 0x0D;
}
recolour_sprite
{
0xC6: 0x62;
 0xC7: 0x63;
 0xC8: 0x64;
 0xC9: 0x65;
 0xCA: 0x66;
 0xCB: 0x67;
 0xCC: 0x0D;
 0xCD: 0x0E;
}
recolour_sprite
{
0xC6: 0x63;
 0xC7: 0x64;
 0xC8: 0x65;
 0xC9: 0x66;
 0xCA: 0x67;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x64;
 0xC7: 0x65;
 0xC8: 0x66;
 0xC9: 0x67;
 0xCA: 0x0D;
 0xCB: 0x0E;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x68 Clay brown
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x01;
 0xC9: 0x68;
 0xCA: 0x69;
 0xCB: 0x6A;
 0xCC: 0x6B;
 0xCD: 0x6C;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x68;
 0xC9: 0x69;
 0xCA: 0x6A;
 0xCB: 0x6B;
 0xCC: 0x6C;
 0xCD: 0x6D;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x69;
 0xC9: 0x6A;
 0xCA: 0x6B;
 0xCB: 0x6C;
 0xCC: 0x6D;
 0xCD: 0x6E;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x6A;
 0xC9: 0x6B;
 0xCA: 0x6C;
 0xCB: 0x6D;
 0xCC: 0x6E;
 0xCD: 0x6F;
}
recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x6A;
 0xC8: 0x6B;
 0xC9: 0x6C;
 0xCA: 0x6D;
 0xCB: 0x6E;
 0xCC: 0x6F;
 0xCD: 0x25;
}
recolour_sprite
{
0xC6: 0x6A;
 0xC7: 0x6B;
 0xC8: 0x6C;
 0xC9: 0x6D;
 0xCA: 0x6E;
 0xCB: 0x6F;
 0xCC: 0x25;
 0xCD: 0x26;
}
recolour_sprite
{
0xC6: 0x6B;
 0xC7: 0x6C;
 0xC8: 0x6D;
 0xC9: 0x6E;
 0xCA: 0x6F;
 0xCB: 0x25;
 0xCC: 0x26;
 0xCD: 0x27;
}
recolour_sprite
{
0xC6: 0x6C;
 0xC7: 0x6D;
 0xC8: 0x6E;
 0xC9: 0x6F;
 0xCA: 0x25;
 0xCB: 0x26;
 0xCC: 0x27;
 0xCD: 0x45;
}
// 0x70 Orange brown
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x69;
 0xC9: 0x70;
 0xCA: 0x71;
 0xCB: 0x72;
 0xCC: 0x73;
 0xCD: 0x74;
}
recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x70;
 0xC9: 0x71;
 0xCA: 0x72;
 0xCB: 0x73;
 0xCC: 0x74;
 0xCD: 0x75;
}
recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x70;
 0xC8: 0x71;
 0xC9: 0x72;
 0xCA: 0x73;
 0xCB: 0x74;
 0xCC: 0x75;
 0xCD: 0x76;
}
recolour_sprite
{
0xC6: 0x70;
 0xC7: 0x71;
 0xC8: 0x72;
 0xC9: 0x73;
 0xCA: 0x74;
 0xCB: 0x75;
 0xCC: 0x76;
 0xCD: 0x77;
}
recolour_sprite
{
0xC6: 0x71;
 0xC7: 0x72;
 0xC8: 0x73;
 0xC9: 0x74;
 0xCA: 0x75;
 0xCB: 0x76;
 0xCC: 0x77;
 0xCD: 0x78;
}
recolour_sprite
{
0xC6: 0x72;
 0xC7: 0x73;
 0xC8: 0x74;
 0xC9: 0x75;
 0xCA: 0x76;
 0xCB: 0x77;
 0xCC: 0x78;
 0xCD: 0x79;
}
recolour_sprite
{
0xC6: 0x73;
 0xC7: 0x74;
 0xC8: 0x75;
 0xC9: 0x76;
 0xCA: 0x77;
 0xCB: 0x78;
 0xCC: 0x79;
 0xCD: 0xA8;
}
recolour_sprite
{
0xC6: 0x74;
 0xC7: 0x75;
 0xC8: 0x76;
 0xC9: 0x77;
 0xCA: 0x78;
 0xCB: 0x79;
 0xCC: 0xA8;
 0xCD: 0xA9;
}
recolour_sprite
{
0xC6: 0x75;
 0xC7: 0x76;
 0xC8: 0x77;
 0xC9: 0x78;
 0xCA: 0x79;
 0xCB: 0xA8;
 0xCC: 0xA9;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x76;
 0xC7: 0x77;
 0xC8: 0x78;
 0xC9: 0x79;
 0xCA: 0xA8;
 0xCB: 0xA9;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x7A Oxide red
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0x47;
 0xC9: 0x7A;
 0xCA: 0x7A;
 0xCB: 0x7B;
 0xCC: 0x7C;
 0xCD: 0x7D;
}
recolour_sprite
{
0xC6: 0x46;
 0xC7: 0x47;
 0xC8: 0x7A;
 0xC9: 0x7B;
 0xCA: 0x7C;
 0xCB: 0x7D;
 0xCC: 0x7E;
 0xCD: 0x7F;
}
recolour_sprite
{
0xC6: 0x47;
 0xC7: 0x7A;
 0xC8: 0x7B;
 0xC9: 0x7C;
 0xCA: 0x7D;
 0xCB: 0x7E;
 0xCC: 0x7F;
 0xCD: 0x4F;
}
recolour_sprite
{
0xC6: 0x7A;
 0xC7: 0x7B;
 0xC8: 0x7C;
 0xC9: 0x7D;
 0xCA: 0x7E;
 0xCB: 0x7F;
 0xCC: 0x4F;
 0xCD: 0x78;
}
recolour_sprite
{
0xC6: 0x7B;
 0xC7: 0x7C;
 0xC8: 0x7D;
 0xC9: 0x7E;
 0xCA: 0x7F;
 0xCB: 0x4F;
 0xCC: 0x78;
 0xCD: 0x79;
}
recolour_sprite
{
0xC6: 0x7C;
 0xC7: 0x7D;
 0xC8: 0x7E;
 0xC9: 0x7F;
 0xCA: 0x4F;
 0xCB: 0x78;
 0xCC: 0x79;
 0xCD: 0x27;
}
// 0x80 Distant blue
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x02;
 0xC9: 0x80;
 0xCA: 0x81;
 0xCB: 0x82;
 0xCC: 0x83;
 0xCD: 0x84;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x80;
 0xC9: 0x81;
 0xCA: 0x82;
 0xCB: 0x83;
 0xCC: 0x84;
 0xCD: 0x85;
}
recolour_sprite
{
0xC6: 0x02;
 0xC7: 0x80;
 0xC8: 0x81;
 0xC9: 0x82;
 0xCA: 0x83;
 0xCB: 0x84;
 0xCC: 0x85;
 0xCD: 0x86;
}
recolour_sprite
{
0xC6: 0x80;
 0xC7: 0x81;
 0xC8: 0x82;
 0xC9: 0x83;
 0xCA: 0x84;
 0xCB: 0x85;
 0xCC: 0x86;
 0xCD: 0x87;
}
recolour_sprite
{
0xC6: 0x81;
 0xC7: 0x82;
 0xC8: 0x83;
 0xC9: 0x84;
 0xCA: 0x85;
 0xCB: 0x86;
 0xCC: 0x87;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x82;
 0xC7: 0x83;
 0xC8: 0x84;
 0xC9: 0x85;
 0xCA: 0x86;
 0xCB: 0x87;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x83;
 0xC7: 0x84;
 0xC8: 0x85;
 0xC9: 0x86;
 0xCA: 0x87;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x84;
 0xC7: 0x85;
 0xC8: 0x86;
 0xC9: 0x87;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x88 Violet
  recolour_sprite
{
0xC6: 0x02;
 0xC7: 0xC6;
 0xC8: 0x90;
 0xC9: 0x88;
 0xCA: 0x89;
 0xCB: 0x8A;
 0xCC: 0x8B;
 0xCD: 0x8C;
}
recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x88;
 0xC9: 0x89;
 0xCA: 0x8A;
 0xCB: 0x8B;
 0xCC: 0x8C;
 0xCD: 0x8D;
}
recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x88;
 0xC8: 0x89;
 0xC9: 0x8A;
 0xCA: 0x8B;
 0xCB: 0x8C;
 0xCC: 0x8D;
 0xCD: 0x8E;
}
recolour_sprite
{
0xC6: 0x88;
 0xC7: 0x89;
 0xC8: 0x8A;
 0xC9: 0x8B;
 0xCA: 0x8C;
 0xCB: 0x8D;
 0xCC: 0x8E;
 0xCD: 0x8F;
}
recolour_sprite
{
0xC6: 0x89;
 0xC7: 0x8A;
 0xC8: 0x8B;
 0xC9: 0x8C;
 0xCA: 0x8D;
 0xCB: 0x8E;
 0xCC: 0x8F;
 0xCD: 0xB0;
}
recolour_sprite
{
0xC6: 0x8A;
 0xC7: 0x8B;
 0xC8: 0x8C;
 0xC9: 0x8D;
 0xCA: 0x8E;
 0xCB: 0x8F;
 0xCC: 0xB0;
 0xCD: 0xB1;
}
recolour_sprite
{
0xC6: 0x8B;
 0xC7: 0x8C;
 0xC8: 0x8D;
 0xC9: 0x8E;
 0xCA: 0x8F;
 0xCB: 0xB0;
 0xCC: 0xB1;
 0xCD: 0x0E;
}
recolour_sprite
{
0xC6: 0x8C;
 0xC7: 0x8D;
 0xC8: 0x8E;
 0xC9: 0x8F;
 0xCA: 0xB0;
 0xCB: 0xB1;
 0xCC: 0x0E;
 0xCD: 0x0F;
}
// 0x90 Blue
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0xC6;
 0xC9: 0x90;
 0xCA: 0x91;
 0xCB: 0x92;
 0xCC: 0x93;
 0xCD: 0x94;
}
recolour_sprite
{
0xC6: 0x02;
 0xC7: 0xC6;
 0xC8: 0x90;
 0xC9: 0x91;
 0xCA: 0x92;
 0xCB: 0x93;
 0xCC: 0x94;
 0xCD: 0x95;
}
recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x91;
 0xC9: 0x92;
 0xCA: 0x93;
 0xCB: 0x94;
 0xCC: 0x95;
 0xCD: 0x96;
}
recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x91;
 0xC8: 0x92;
 0xC9: 0x93;
 0xCA: 0x94;
 0xCB: 0x95;
 0xCC: 0x96;
 0xCD: 0x97;
}
recolour_sprite
{
0xC6: 0x91;
 0xC7: 0x92;
 0xC8: 0x93;
 0xC9: 0x94;
 0xCA: 0x95;
 0xCB: 0x96;
 0xCC: 0x97;
 0xCD: 0x98;
}
recolour_sprite
{
0xC6: 0x92;
 0xC7: 0x93;
 0xC8: 0x94;
 0xC9: 0x95;
 0xCA: 0x96;
 0xCB: 0x97;
 0xCC: 0x98;
 0xCD: 0x99;
}
recolour_sprite
{
0xC6: 0x93;
 0xC7: 0x94;
 0xC8: 0x95;
 0xC9: 0x96;
 0xCA: 0x97;
 0xCB: 0x98;
 0xCC: 0x99;
 0xCD: 0xA1;
}
recolour_sprite
{
0xC6: 0x94;
 0xC7: 0x95;
 0xC8: 0x96;
 0xC9: 0x97;
 0xCA: 0x98;
 0xCB: 0x99;
 0xCC: 0xA1;
 0xCD: 0xD2;
}
recolour_sprite
{
0xC6: 0x95;
 0xC7: 0x96;
 0xC8: 0x97;
 0xC9: 0x98;
 0xCA: 0x99;
 0xCB: 0xA1;
 0xCC: 0xD2;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x96;
 0xC7: 0x97;
 0xC8: 0x98;
 0xC9: 0x99;
 0xCA: 0xA1;
 0xCB: 0xD2;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0x9A Azure blue
  recolour_sprite
{
0xC6: 0x02;
 0xC7: 0x80;
 0xC8: 0x81;
 0xC9: 0x9A;
 0xCA: 0x9B;
 0xCB: 0x9C;
 0xCC: 0x9D;
 0xCD: 0x9E;
}
recolour_sprite
{
0xC6: 0x80;
 0xC7: 0x81;
 0xC8: 0x9A;
 0xC9: 0x9B;
 0xCA: 0x9C;
 0xCB: 0x9D;
 0xCC: 0x9E;
 0xCD: 0x9F;
}
recolour_sprite
{
0xC6: 0x81;
 0xC7: 0x9A;
 0xC8: 0x9B;
 0xC9: 0x9C;
 0xCA: 0x9D;
 0xCB: 0x9E;
 0xCC: 0x9F;
 0xCD: 0xA0;
}
recolour_sprite
{
0xC6: 0x9A;
 0xC7: 0x9B;
 0xC8: 0x9C;
 0xC9: 0x9D;
 0xCA: 0x9E;
 0xCB: 0x9F;
 0xCC: 0xA0;
 0xCD: 0xA1;
}
recolour_sprite
{
0xC6: 0x9B;
 0xC7: 0x9C;
 0xC8: 0x9D;
 0xC9: 0x9E;
 0xCA: 0x9F;
 0xCB: 0xA0;
 0xCC: 0xA1;
 0xCD: 0xD2;
}
recolour_sprite
{
0xC6: 0x9C;
 0xC7: 0x9D;
 0xC8: 0x9E;
 0xC9: 0x9F;
 0xCA: 0xA0;
 0xCB: 0xA1;
 0xCC: 0xD2;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x9D;
 0xC7: 0x9E;
 0xC8: 0x9F;
 0xC9: 0xA0;
 0xCA: 0xA1;
 0xCB: 0xD2;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x9E;
 0xC7: 0x9F;
 0xC8: 0xA0;
 0xC9: 0xA1;
 0xCA: 0xD2;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0xA2 Salmon range
  recolour_sprite
{
0xC6: 0x48;
 0xC7: 0x49;
 0xC8: 0x4A;
 0xC9: 0xA2;
 0xCA: 0xA3;
 0xCB: 0xA4;
 0xCC: 0xA5;
 0xCD: 0xA6;
}
recolour_sprite
{
0xC6: 0x49;
 0xC7: 0x4A;
 0xC8: 0xA2;
 0xC9: 0xA3;
 0xCA: 0xA4;
 0xCB: 0xA5;
 0xCC: 0xA6;
 0xCD: 0xA7;
}
recolour_sprite
{
0xC6: 0x4A;
 0xC7: 0xA2;
 0xC8: 0xA3;
 0xC9: 0xA4;
 0xCA: 0xA5;
 0xCB: 0xA6;
 0xCC: 0xA7;
 0xCD: 0xA8;
}
recolour_sprite
{
0xC6: 0xA2;
 0xC7: 0xA3;
 0xC8: 0xA4;
 0xC9: 0xA5;
 0xCA: 0xA6;
 0xCB: 0xA7;
 0xCC: 0xA8;
 0xCD: 0xA9;
}
recolour_sprite
{
0xC6: 0xA3;
 0xC7: 0xA4;
 0xC8: 0xA5;
 0xC9: 0xA6;
 0xCA: 0xA7;
 0xCB: 0xA8;
 0xCC: 0xA9;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0xA4;
 0xC7: 0xA5;
 0xC8: 0xA6;
 0xC9: 0xA7;
 0xCA: 0xA8;
 0xCB: 0xA9;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0xA5;
 0xC7: 0xA6;
 0xC8: 0xA7;
 0xC9: 0xA8;
 0xCA: 0xA9;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0xA6;
 0xC7: 0xA7;
 0xC8: 0xA8;
 0xC9: 0xA9;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0xAA Pastel violet
  recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x88;
 0xC9: 0xAA;
 0xCA: 0xAB;
 0xCB: 0xAC;
 0xCC: 0xAD;
 0xCD: 0xAE;
}
recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x88;
 0xC8: 0xAA;
 0xC9: 0xAB;
 0xCA: 0xAC;
 0xCB: 0xAD;
 0xCC: 0xAE;
 0xCD: 0xAF;
}
recolour_sprite
{
0xC6: 0x88;
 0xC7: 0xAA;
 0xC8: 0xAB;
 0xC9: 0xAC;
 0xCA: 0xAD;
 0xCB: 0xAE;
 0xCC: 0xAF;
 0xCD: 0xB0;
}
recolour_sprite
{
0xC6: 0xAA;
 0xC7: 0xAB;
 0xC8: 0xAC;
 0xC9: 0xAD;
 0xCA: 0xAE;
 0xCB: 0xAF;
 0xCC: 0xB0;
 0xCD: 0xB1;
}
recolour_sprite
{
0xC6: 0xAB;
 0xC7: 0xAC;
 0xC8: 0xAD;
 0xC9: 0xAE;
 0xCA: 0xAF;
 0xCB: 0xB0;
 0xCC: 0xB1;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0xAC;
 0xC7: 0xAD;
 0xC8: 0xAE;
 0xC9: 0xAF;
 0xCA: 0xB0;
 0xCB: 0xB1;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0xAD;
 0xC7: 0xAE;
 0xC8: 0xAF;
 0xC9: 0xB0;
 0xCA: 0xB1;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0xAE;
 0xC7: 0xAF;
 0xC8: 0xB0;
 0xC9: 0xB1;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0xB2 Red-orange
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x46;
 0xC9: 0xB2;
 0xCA: 0xB3;
 0xCB: 0xB4;
 0xCC: 0xB5;
 0xCD: 0xB6;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0xB2;
 0xC9: 0xB3;
 0xCA: 0xB4;
 0xCB: 0xB5;
 0xCC: 0xB6;
 0xCD: 0xB7;
}
recolour_sprite
{
0xC6: 0x46;
 0xC7: 0xB2;
 0xC8: 0xB3;
 0xC9: 0xB4;
 0xCA: 0xB5;
 0xCB: 0xB6;
 0xCC: 0xB7;
 0xCD: 0xA4;
}
recolour_sprite
{
0xC6: 0xB2;
 0xC7: 0xB3;
 0xC8: 0xB4;
 0xC9: 0xB5;
 0xCA: 0xB6;
 0xCB: 0xB7;
 0xCC: 0xA4;
 0xCD: 0xA5;
}
recolour_sprite
{
0xC6: 0xB3;
 0xC7: 0xB4;
 0xC8: 0xB5;
 0xC9: 0xB6;
 0xCA: 0xB7;
 0xCB: 0xA4;
 0xCC: 0xA5;
 0xCD: 0xA6;
}
recolour_sprite
{
0xC6: 0xB4;
 0xC7: 0xB5;
 0xC8: 0xB6;
 0xC9: 0xB7;
 0xCA: 0xA4;
 0xCB: 0xA5;
 0xCC: 0xA6;
 0xCD: 0xA7;
}
recolour_sprite
{
0xC6: 0xB5;
 0xC7: 0xB6;
 0xC8: 0xB7;
 0xC9: 0xB8;
 0xCA: 0xB9;
 0xCB: 0xBA;
 0xCC: 0xBB;
 0xCD: 0xBC;
}
recolour_sprite
{
0xC6: 0xB6;
 0xC7: 0xB7;
 0xC8: 0xB8;
 0xC9: 0xB9;
 0xCA: 0xBA;
 0xCB: 0xBB;
 0xCC: 0xBC;
 0xCD: 0xBD;
}
recolour_sprite
{
0xC6: 0xB7;
 0xC7: 0xB8;
 0xC8: 0xB9;
 0xC9: 0xBA;
 0xCA: 0xBB;
 0xCB: 0xBC;
 0xCC: 0xBD;
 0xCD: 0xBE;
}
recolour_sprite
{
0xC6: 0xB8;
 0xC7: 0xB9;
 0xC8: 0xBA;
 0xC9: 0xBB;
 0xCA: 0xBC;
 0xCB: 0xBD;
 0xCC: 0xBE;
 0xCD: 0xBF;
}
recolour_sprite
{
0xC6: 0xB9;
 0xC7: 0xBA;
 0xC8: 0xBB;
 0xC9: 0xBC;
 0xCA: 0xBD;
 0xCB: 0xBE;
 0xCC: 0xBF;
 0xCD: 0x34;
}
recolour_sprite
{
0xC6: 0xBA;
 0xC7: 0xBB;
 0xC8: 0xBC;
 0xC9: 0xBD;
 0xCA: 0xBE;
 0xCB: 0xBF;
 0xCC: 0x34;
 0xCD: 0x45;
}
recolour_sprite
{
0xC6: 0xBB;
 0xC7: 0xBC;
 0xC8: 0xBD;
 0xC9: 0xBE;
 0xCA: 0xBF;
 0xCB: 0x34;
 0xCC: 0x45;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0xBC;
 0xC7: 0xBD;
 0xC8: 0xBE;
 0xC9: 0xBF;
 0xCA: 0x34;
 0xCB: 0x45;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0xC0 Melon yellow
  recolour_sprite
{
0xC6: 0x3E;
 0xC7: 0x3F;
 0xC8: 0x40;
 0xC9: 0xC0;
 0xCA: 0xC1;
 0xCB: 0xC2;
 0xCC: 0xC3;
 0xCD: 0xC4;
}
recolour_sprite
{
0xC6: 0x3F;
 0xC7: 0x40;
 0xC8: 0xC0;
 0xC9: 0xC1;
 0xCA: 0xC2;
 0xCB: 0xC3;
 0xCC: 0xC4;
 0xCD: 0xC5;
}
recolour_sprite
{
0xC6: 0x40;
 0xC7: 0xC0;
 0xC8: 0xC1;
 0xC9: 0xC2;
 0xCA: 0xC3;
 0xCB: 0xC4;
 0xCC: 0xC5;
 0xCD: 0x27;
}
recolour_sprite
{
0xC6: 0xC0;
 0xC7: 0xC1;
 0xC8: 0xC2;
 0xC9: 0xC3;
 0xCA: 0xC4;
 0xCB: 0xC5;
 0xCC: 0x27;
 0xCD: 0x45;
}
recolour_sprite
{
0xC6: 0xC1;
 0xC7: 0xC2;
 0xC8: 0xC3;
 0xC9: 0xC4;
 0xCA: 0xC5;
 0xCB: 0x27;
 0xCC: 0x45;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0xC2;
 0xC7: 0xC3;
 0xC8: 0xC4;
 0xC9: 0xC5;
 0xCA: 0x27;
 0xCB: 0x45;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0xC6  Company colours
    recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x01;
 0xC8: 0x02;
 0xC9: 0xC6;
 0xCA: 0xC7;
 0xCB: 0xC8;
 0xCC: 0xC9;
 0xCD: 0xCA;
}
// NOT RECOMMENDED
    recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0xC6;
 0xC9: 0xC7;
 0xCA: 0xC8;
 0xCB: 0xC9;
 0xCC: 0xCA;
 0xCD: 0xCB;
}
recolour_sprite
{
0xC6: 0x02;
 0xC7: 0xC6;
 0xC8: 0xC7;
 0xC9: 0xC8;
 0xCA: 0xC9;
 0xCB: 0xCA;
 0xCC: 0xCB;
 0xCD: 0xCC;
}
recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0xC7;
 0xC8: 0xC8;
 0xC9: 0xC9;
 0xCA: 0xCA;
 0xCB: 0xCB;
 0xCC: 0xCC;
 0xCD: 0xCD;
}
recolour_sprite
{
0xC6: 0xC7;
 0xC7: 0xC8;
 0xC8: 0xC9;
 0xC9: 0xCA;
 0xCA: 0xCB;
 0xCB: 0xCC;
 0xCC: 0xCD;
 0xCD: 0x98;
}
recolour_sprite
{
0xC6: 0xC8;
 0xC7: 0xC9;
 0xC8: 0xCA;
 0xC9: 0xCB;
 0xCA: 0xCC;
 0xCB: 0xCD;
 0xCC: 0x98;
 0xCD: 0x99;
}
recolour_sprite
{
0xC6: 0xC9;
 0xC7: 0xCA;
 0xC8: 0xCB;
 0xC9: 0xCC;
 0xCA: 0xCD;
 0xCB: 0x98;
 0xCC: 0x99;
 0xCD: 0xA1;
}
recolour_sprite
{
0xC6: 0xCA;
 0xC7: 0xCB;
 0xC8: 0xCC;
 0xC9: 0xCD;
 0xCA: 0x98;
 0xCB: 0x99;
 0xCC: 0xA1;
 0xCD: 0xD2;
}
// 0xCE Yellow green
  recolour_sprite
{
0xC6: 0x53;
 0xC7: 0x54;
 0xC8: 0x55;
 0xC9: 0xCE;
 0xCA: 0xCF;
 0xCB: 0xD0;
 0xCC: 0xD1;
 0xCD: 0x67;
}
recolour_sprite
{
0xC6: 0x54;
 0xC7: 0x55;
 0xC8: 0xCE;
 0xC9: 0xCF;
 0xCA: 0xD0;
 0xCB: 0xD1;
 0xCC: 0x67;
 0xCD: 0x0E;
}
recolour_sprite
{
0xC6: 0x55;
 0xC7: 0xCE;
 0xC8: 0xCF;
 0xC9: 0xD0;
 0xCA: 0xD1;
 0xCB: 0x67;
 0xCC: 0x0E;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0xCE;
 0xC7: 0xCF;
 0xC8: 0xD0;
 0xC9: 0xD1;
 0xCA: 0x67;
 0xCB: 0x0E;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
// 0xD2
  recolour_sprite
{
0xC6: 0xD5;
 0xC7: 0xD4;
 0xC8: 0xD3;
 0xC9: 0xD2;
 0xCA: 0x0F;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0xD6;
 0xC7: 0xD5;
 0xC8: 0xD4;
 0xC9: 0xD3;
 0xCA: 0xD2;
 0xCB: 0x0F;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x9E;
 0xC7: 0xD6;
 0xC8: 0xD5;
 0xC9: 0xD4;
 0xCA: 0xD3;
 0xCB: 0xD2;
 0xCC: 0x0F;
 0xCD: 0x0F;
}
// NOT RECOMMENDED
  recolour_sprite
{
0xC6: 0x9D;
 0xC7: 0x9E;
 0xC8: 0xD6;
 0xC9: 0xD5;
 0xCA: 0xD4;
 0xCB: 0xD3;
 0xCC: 0xD2;
 0xCD: 0x0F;
}
recolour_sprite
{
0xC6: 0x9C;
 0xC7: 0x9D;
 0xC8: 0x9E;
 0xC9: 0xD6;
 0xCA: 0xD5;
 0xCB: 0xD4;
 0xCC: 0xD3;
 0xCD: 0xD2;
}
}
dir_cc = reserve_sprites(16);
replace(dir_cc)
{
recolour_sprite
{
0xEF: 0x0A;
 0xF0: 0x0A;
 0xF1: 0x4A;
 0xF2: 0x4A;
 0xF3: 0x0A;
 0xF4: 0x0A;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0x0B;
 0xF1: 0x4B;
 0xF2: 0x4B;
 0xF3: 0x0B;
 0xF4: 0x0B;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0x0B;
 0xF1: 0x4B;
 0xF2: 0x4B;
 0xF3: 0x0B;
 0xF4: 0x0B;
}
recolour_sprite
{
0xEF: 0x09;
 0xF0: 0x09;
 0xF1: 0x49;
 0xF2: 0x49;
 0xF3: 0x09;
 0xF4: 0x09;
}
recolour_sprite
{
0xEF: 0x0A;
 0xF0: 0x0A;
 0xF1: 0x4A;
 0xF2: 0x4A;
 0xF3: 0x0A;
 0xF4: 0x0A;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0x0B;
 0xF1: 0x4B;
 0xF2: 0x4B;
 0xF3: 0x0B;
 0xF4: 0x0B;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0x0B;
 0xF1: 0x4B;
 0xF2: 0x4B;
 0xF3: 0x0B;
 0xF4: 0x0B;
}
recolour_sprite
{
0xEF: 0x09;
 0xF0: 0x09;
 0xF1: 0x49;
 0xF2: 0x49;
 0xF3: 0x09;
 0xF4: 0x09;
}
recolour_sprite
{
0xEF: 0x0A;
 0xF0: 0xB4;
 0xF1: 0x4A;
 0xF2: 0x33;
 0xF3: 0x0A;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0xB4;
 0xF1: 0x4B;
 0xF2: 0x33;
 0xF3: 0x0B;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0xB4;
 0xF1: 0x4B;
 0xF2: 0x33;
 0xF3: 0x0B;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x09;
 0xF0: 0xB4;
 0xF1: 0x49;
 0xF2: 0x33;
 0xF3: 0x09;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x0A;
 0xF0: 0xB4;
 0xF1: 0x4A;
 0xF2: 0x33;
 0xF3: 0x0A;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0xB4;
 0xF1: 0x4B;
 0xF2: 0x33;
 0xF3: 0x0B;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x0B;
 0xF0: 0xB4;
 0xF1: 0x4B;
 0xF2: 0x33;
 0xF3: 0x0B;
 0xF4: 0x44;
}
recolour_sprite
{
0xEF: 0x09;
 0xF0: 0xB4;
 0xF1: 0x49;
 0xF2: 0x33;
 0xF3: 0x09;
 0xF4: 0x44;
}
}
vl11_cc = reserve_sprites(8);
replace(vl11_cc)
{
recolour_sprite
{
0x51: 0x51;
 0x52: 0x52;
 0x53: 0x53;
 0x54: 0x54;
 0x55: 0x55;
 0x56: 0x56;
 0x18: 0x18;
 0x58: 0x58;
 0x59: 0x59;
 0x5A: 0x5A;
 0x5B: 0x5B;
 0x3F: 0x3F;
 0x40: 0x40;
 0xC0: 0xC0;
 0xB9: 0xB9;
 0xBA: 0xBA;
 0xBB: 0xBB;
}
recolour_sprite
{
0x51: 0x51;
 0x52: 0x52;
 0x53: 0x53;
 0x54: 0x54;
 0x55: 0x55;
 0x56: 0x56;
 0x18: 0x51;
 0x58: 0x52;
 0x59: 0x53;
 0x5A: 0x54;
 0x5B: 0x55;
 0x3F: 0x3F;
 0x40: 0x40;
 0xC0: 0xC0;
 0xB9: 0xB9;
 0xBA: 0xBA;
 0xBB: 0xBB;
}
recolour_sprite
{
0x51: 0x18;
 0x52: 0x58;
 0x53: 0x59;
 0x54: 0x5A;
 0x55: 0x5B;
 0x56: 0x5C;
 0x18: 0x18;
 0x58: 0x58;
 0x59: 0x59;
 0x5A: 0x5A;
 0x5B: 0x5B;
 0x3F: 0x3F;
 0x40: 0x40;
 0xC0: 0xC0;
 0xB9: 0xB9;
 0xBA: 0xBA;
 0xBB: 0xBB;
}
recolour_sprite
{
0x51: 0x9B;
 0x52: 0x9C;
 0x53: 0x9D;
 0x54: 0x9E;
 0x55: 0x9F;
 0x56: 0xA0;
 0x18: 0x9B;
 0x58: 0x9C;
 0x59: 0x9D;
 0x5A: 0x9E;
 0x5B: 0x9F;
 0x3F: 0x3F;
 0x40: 0x40;
 0xC0: 0xC0;
 0xB9: 0xB9;
 0xBA: 0xBA;
 0xBB: 0xBB;
}
recolour_sprite
{
0x51: 0x9B;
 0x52: 0x9C;
 0x53: 0x9D;
 0x54: 0x9E;
 0x55: 0x9F;
 0x56: 0xA0;
 0x18: 0x9B;
 0x58: 0x9C;
 0x59: 0x9D;
 0x5A: 0x9E;
 0x5B: 0x9F;
 0x3F: 0xA2;
 0x40: 0xA3;
 0xC0: 0xA4;
 0xB9: 0xB5;
 0xBA: 0xB6;
 0xBB: 0xB7;
}
recolour_sprite
{
0x51: 0x60;
 0x52: 0x61;
 0x53: 0x62;
 0x54: 0x63;
 0x55: 0x64;
 0x56: 0x65;
 0x18: 0x60;
 0x58: 0x61;
 0x59: 0x62;
 0x5A: 0x63;
 0x5B: 0x64;
 0x3F: 0x3F;
 0x40: 0x40;
 0xC0: 0xC0;
 0xB9: 0xB9;
 0xBA: 0xBA;
 0xBB: 0xBB;
}
recolour_sprite
{
0x51: 0x60;
 0x52: 0x61;
 0x53: 0x62;
 0x54: 0x63;
 0x55: 0x64;
 0x56: 0x65;
 0x18: 0x60;
 0x58: 0x61;
 0x59: 0x62;
 0x5A: 0x63;
 0x5B: 0x64;
 0x3F: 0xA2;
 0x40: 0xA3;
 0xC0: 0xA4;
 0xB9: 0xB5;
 0xBA: 0xB6;
 0xBB: 0xB7;
}
recolour_sprite
{
0x51: 0x92;
 0x52: 0x93;
 0x53: 0x94;
 0x54: 0x95;
 0x55: 0x96;
 0x56: 0x97;
 0x18: 0x92;
 0x58: 0x93;
 0x59: 0x94;
 0x5A: 0x95;
 0x5B: 0x96;
 0x3F: 0xA2;
 0x40: 0xA3;
 0xC0: 0xA4;
 0xB9: 0xB5;
 0xBA: 0xB6;
 0xBB: 0xB7;
}
}
tgm23_cc = reserve_sprites(8);
replace(tgm23_cc)
{
recolour_sprite
{
0xC6: 0xB2;
 0xC7: 0xB3;
 0xC8: 0xB4;
 0xC9: 0xB5;
 0xCA: 0xB6;
 0xCB: 0xB7;
 0xCC: 0xA4;
 0xCD: 0xA5;
 0x50: 0xB2;
 0x51: 0xB3;
 0x52: 0xB4;
 0x53: 0xB5;
 0x54: 0xB6;
 0x55: 0xB7;
 0x56: 0xA4;
 0x57: 0xA5;
 0xB2: 0x3F;
 0xB3: 0x40;
 0xB4: 0x41;
 0xB5: 0x42;
 0xB6: 0x43;
 0xB7: 0x33;
 0xA4: 0x34;
 0xA5: 0x45;
}
// B6=  B5, B5, 42, // красный
 recolour_sprite
{
0xC6: 0x46;
 0xC7: 0xB2;
 0xC8: 0xB3;
 0xC9: 0xB4;
 0xCA: 0xB5;
 0xCB: 0xB6;
 0xCC: 0xB7;
 0xCD: 0xA4;
 0x50: 0x07;
 0x51: 0x08;
 0x52: 0x09;
 0x53: 0x0A;
 0x54: 0x0B;
 0x55: 0x0C;
 0x56: 0x0D;
 0x57: 0x0E;
 0xB2: 0x3F;
 0xB3: 0x40;
 0xB4: 0x41;
 0xB5: 0x42;
 0xB6: 0x43;
 0xB7: 0x33;
 0xA4: 0x34;
 0xA5: 0x45;
}
// B4=  B4, 0A, 42, // бордовый
 recolour_sprite
{
0xC6: 0x60;
 0xC7: 0x61;
 0xC8: 0x62;
 0xC9: 0x63;
 0xCA: 0x64;
 0xCB: 0x65;
 0xCC: 0x66;
 0xCD: 0x67;
 0x50: 0x60;
 0x51: 0x61;
 0x52: 0x62;
 0x53: 0x63;
 0x54: 0x64;
 0x55: 0x65;
 0x56: 0x66;
 0x57: 0x67;
 0xB2: 0x60;
 0xB3: 0x61;
 0xB4: 0x62;
 0xB5: 0x63;
 0xB6: 0x64;
 0xB7: 0x65;
 0xA4: 0x66;
 0xA5: 0x67;
}
// 63=  63, 63, 63, // RAL 6020
 recolour_sprite
{
0xC6: 0x51;
 0xC7: 0x52;
 0xC8: 0x53;
 0xC9: 0x54;
 0xCA: 0x55;
 0xCB: 0x56;
 0xCC: 0x57;
 0xCD: 0xD0;
 0x50: 0x51;
 0x51: 0x52;
 0x52: 0x53;
 0x53: 0x54;
 0x54: 0x55;
 0x55: 0x56;
 0x56: 0x57;
 0x57: 0xD0;
 0xB2: 0x3F;
 0xB3: 0x40;
 0xB4: 0x41;
 0xB5: 0x42;
 0xB6: 0x43;
 0xB7: 0x33;
 0xA4: 0x34;
 0xA5: 0x45;
}
// 53=  54, 54, 42, // зелёный
 recolour_sprite
{
0xC6: 0x2E;
 0xC7: 0x2F;
 0xC8: 0x30;
 0xC9: 0x31;
 0xCA: 0xA8;
 0xCB: 0xA9;
 0xCC: 0x0F;
 0xCD: 0x0F;
 0x50: 0x2E;
 0x51: 0x2F;
 0x52: 0x30;
 0x53: 0x31;
 0x54: 0xA8;
 0x55: 0xA9;
 0x56: 0x0F;
 0x57: 0x0F;
 0xB2: 0x2E;
 0xB3: 0x2F;
 0xB4: 0x30;
 0xB5: 0x31;
 0xB6: 0xA8;
 0xB7: 0xA9;
 0xA4: 0x0F;
 0xA5: 0x0F;
}
// 31=  31, 31, 31, // розовый
 recolour_sprite
{
0xC6: 0x91;
 0xC7: 0x92;
 0xC8: 0x93;
 0xC9: 0x94;
 0xCA: 0x95;
 0xCB: 0x96;
 0xCC: 0x97;
 0xCD: 0x98;
 0x50: 0x07;
 0x51: 0x08;
 0x52: 0x09;
 0x53: 0x0A;
 0x54: 0x0B;
 0x55: 0x0C;
 0x56: 0x0D;
 0x57: 0x0E;
 0xB2: 0x3F;
 0xB3: 0x40;
 0xB4: 0x41;
 0xB5: 0x42;
 0xB6: 0x43;
 0xB7: 0x33;
 0xA4: 0x34;
 0xA5: 0x45;
}
// 93=  94, 0A, 42, // синий
 recolour_sprite
{
0xC6: 0x92;
 0xC7: 0x93;
 0xC8: 0x94;
 0xC9: 0x95;
 0xCA: 0x96;
 0xCB: 0x97;
 0xCC: 0x98;
 0xCD: 0x99;
 0x50: 0x92;
 0x51: 0x93;
 0x52: 0x94;
 0x53: 0x95;
 0x54: 0x96;
 0x55: 0x97;
 0x56: 0x98;
 0x57: 0x99;
 0xB2: 0x92;
 0xB3: 0x93;
 0xB4: 0x94;
 0xB5: 0x95;
 0xB6: 0x96;
 0xB7: 0x97;
 0xA4: 0x98;
 0xA5: 0x99;
}
// 96=  95, 95, 95, // голубой
 recolour_sprite
{
0xC6: 0x40;
 0xC7: 0x41;
 0xC8: 0x42;
 0xC9: 0x43;
 0xCA: 0x33;
 0xCB: 0x34;
 0xCC: 0x45;
 0xCD: 0x0F;
 0x50: 0x40;
 0x51: 0x41;
 0x52: 0x42;
 0x53: 0x43;
 0x54: 0x33;
 0x55: 0x34;
 0x56: 0x45;
 0x57: 0x0F;
 0xB2: 0x40;
 0xB3: 0x41;
 0xB4: 0x42;
 0xB5: 0x43;
 0xB6: 0x33;
 0xB7: 0x34;
 0xA4: 0x45;
 0xA5: 0x0F;
}
// 42=  43, 43, 43, // жёлтый
}
ttd_cc2 = reserve_sprites(75);
replace(ttd_cc2)
{
// pos 00h
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x04;
 0xCA: 0x05;
 0xCB: 0x06;
 0xCC: 0x07;
 0xCD: 0x08;
 0x50: 0x07;
 0x51: 0x08;
 0x52: 0x09;
 0x53: 0x0A;
 0x54: 0x0B;
 0x55: 0x0C;
 0x56: 0x0D;
 0x57: 0x0E;
}
// 04 0A  // не используется
 recolour_sprite
{
0xC6: 0x03;
 0xC7: 0x04;
 0xC8: 0x05;
 0xC9: 0x06;
 0xCA: 0x07;
 0xCB: 0x08;
 0xCC: 0x09;
 0xCD: 0x0A;
 0x50: 0x03;
 0x51: 0x04;
 0x52: 0x05;
 0x53: 0x06;
 0x54: 0x07;
 0x55: 0x08;
 0x56: 0x09;
 0x57: 0x0A;
}
// 06 06  // не используется
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x10;
 0xCA: 0x11;
 0xCB: 0x12;
 0xCC: 0x13;
 0xCD: 0x14;
 0x50: 0x23;
 0x51: 0x24;
 0x52: 0x25;
 0x53: 0x26;
 0x54: 0x27;
 0x55: 0x45;
 0x56: 0xA9;
 0x57: 0x0F;
}
// 10 26  // не используется
 recolour_sprite
{
0xC6: 0x50;
 0xC7: 0x51;
 0xC8: 0x52;
 0xC9: 0x53;
 0xCA: 0x54;
 0xCB: 0x55;
 0xCC: 0x56;
 0xCD: 0x57;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 53 04  // не используется
 recolour_sprite
{
0xC6: 0x18;
 0xC7: 0x60;
 0xC8: 0x61;
 0xC9: 0x62;
 0xCA: 0x63;
 0xCB: 0x64;
 0xCC: 0x65;
 0xCD: 0x66;
 0x50: 0x23;
 0x51: 0x24;
 0x52: 0x25;
 0x53: 0x26;
 0x54: 0x27;
 0x55: 0x45;
 0x56: 0xA9;
 0x57: 0x0F;
}
// 62 26  // не используется
 recolour_sprite
{
0xC6: 0x60;
 0xC7: 0x61;
 0xC8: 0x62;
 0xC9: 0x63;
 0xCA: 0x64;
 0xCB: 0x65;
 0xCC: 0x66;
 0xCD: 0x67;
 0x50: 0x60;
 0x51: 0x61;
 0x52: 0x62;
 0x53: 0x63;
 0x54: 0x64;
 0x55: 0x65;
 0x56: 0x66;
 0x57: 0x67;
}
// 63 63  // не используется
 recolour_sprite
{
0xC6: 0x61;
 0xC7: 0x62;
 0xC8: 0x63;
 0xC9: 0x64;
 0xCA: 0x65;
 0xCB: 0x66;
 0xCC: 0x67;
 0xCD: 0x0D;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 64 04  // не используется
 recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x91;
 0xC8: 0x92;
 0xC9: 0x93;
 0xCA: 0x94;
 0xCB: 0x95;
 0xCC: 0x96;
 0xCD: 0x97;
 0x50: 0x12;
 0x51: 0x13;
 0x52: 0x14;
 0x53: 0x15;
 0x54: 0x16;
 0x55: 0x17;
 0x56: 0x0D;
 0x57: 0x0E;
}
// 93 15  // не используется
 recolour_sprite
{
0xC6: 0x93;
 0xC7: 0x94;
 0xC8: 0x95;
 0xC9: 0x96;
 0xCA: 0x97;
 0xCB: 0x98;
 0xCC: 0x99;
 0xCD: 0xD3;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 96 04  // не используется
 recolour_sprite
{
0xC6: 0x80;
 0xC7: 0x9A;
 0xC8: 0x9B;
 0xC9: 0x9C;
 0xCA: 0x9D;
 0xCB: 0x9E;
 0xCC: 0x9F;
 0xCD: 0xA0;
 0x50: 0x80;
 0x51: 0x9A;
 0x52: 0x9B;
 0x53: 0x9C;
 0x54: 0x9D;
 0x55: 0x9E;
 0x56: 0x9F;
 0x57: 0xA0;
}
// 9C 9C  // не используется
 recolour_sprite
{
0xC6: 0x9A;
 0xC7: 0x9B;
 0xC8: 0x9C;
 0xC9: 0x9D;
 0xCA: 0x9E;
 0xCB: 0x9F;
 0xCC: 0xA0;
 0xCD: 0xA1;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x10;
 0x54: 0x11;
 0x55: 0x12;
 0x56: 0x13;
 0x57: 0x14;
}
// 9D 10  // не используется
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0xB2;
 0xC9: 0xB3;
 0xCA: 0xB4;
 0xCB: 0xB5;
 0xCC: 0xB6;
 0xCD: 0xB7;
 0x50: 0x23;
 0x51: 0x24;
 0x52: 0x25;
 0x53: 0x26;
 0x54: 0x27;
 0x55: 0x45;
 0x56: 0xA9;
 0x57: 0x0F;
}
// B3 26  // не используется
 recolour_sprite
{
0xC6: 0xB6;
 0xC7: 0xB7;
 0xC8: 0xB8;
 0xC9: 0xB9;
 0xCA: 0xBA;
 0xCB: 0xBB;
 0xCC: 0xBC;
 0xCD: 0xBD;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// B9 04  // не используется
 recolour_sprite
{
0xC6: 0xBA;
 0xC7: 0xBB;
 0xC8: 0xBC;
 0xC9: 0xBD;
 0xCA: 0xBE;
 0xCB: 0xBF;
 0xCC: 0x34;
 0xCD: 0x45;
 0x50: 0x04;
 0x51: 0x05;
 0x52: 0x06;
 0x53: 0x07;
 0x54: 0x08;
 0x55: 0x09;
 0x56: 0x0A;
 0x57: 0x0B;
}
// BD 07  // не используется
 recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x69;
 0xC8: 0x18;
 0xC9: 0x19;
 0xCA: 0x1A;
 0xCB: 0x1B;
 0xCC: 0x1C;
 0xCD: 0x1D;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x18;
 0x53: 0x19;
 0x54: 0x1A;
 0x55: 0x1B;
 0x56: 0x1C;
 0x57: 0x1D;
}
// 19 19  // не используется
 recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x58;
 0xC8: 0x59;
 0xC9: 0x5A;
 0xCA: 0x5B;
 0xCB: 0x5C;
 0xCC: 0x5D;
 0xCD: 0x5E;
 0x50: 0x68;
 0x51: 0x58;
 0x52: 0x59;
 0x53: 0x5A;
 0x54: 0x5B;
 0x55: 0x5C;
 0x56: 0x5D;
 0x57: 0x5E;
}
// 5A 5A  // не используется
// pos 10h
 recolour_sprite
{
0xC6: 0x06;
 0xC7: 0x07;
 0xC8: 0x08;
 0xC9: 0x09;
 0xCA: 0x0A;
 0xCB: 0x0B;
 0xCC: 0x0C;
 0xCD: 0x0D;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 09 22 // не используется
 recolour_sprite
{
0xC6: 0x06;
 0xC7: 0x07;
 0xC8: 0x08;
 0xC9: 0x09;
 0xCA: 0x0A;
 0xCB: 0x0B;
 0xCC: 0x0C;
 0xCD: 0x0D;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 09 6B // не используется
 recolour_sprite
{
0xC6: 0x08;
 0xC7: 0x09;
 0xC8: 0x0A;
 0xC9: 0x0B;
 0xCA: 0x0C;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 0B 22 // не используется
 recolour_sprite
{
0xC6: 0x08;
 0xC7: 0x09;
 0xC8: 0x0A;
 0xC9: 0x0B;
 0xCA: 0x0C;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 0B 6B // не используется
 recolour_sprite
{
0xC6: 0x06;
 0xC7: 0x07;
 0xC8: 0x08;
 0xC9: 0x09;
 0xCA: 0x0A;
 0xCB: 0x0B;
 0xCC: 0x0C;
 0xCD: 0x0D;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 09 04 // не используется
 recolour_sprite
{
0xC6: 0x08;
 0xC7: 0x09;
 0xC8: 0x0A;
 0xC9: 0x0B;
 0xCA: 0x0C;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 0B 04 // не используется
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0x47;
 0xC9: 0x48;
 0xCA: 0x49;
 0xCB: 0x4A;
 0xCC: 0x4B;
 0xCD: 0x4C;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 48 22 // не используется
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0x47;
 0xC9: 0x48;
 0xCA: 0x49;
 0xCB: 0x4A;
 0xCC: 0x4B;
 0xCD: 0x4C;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 48 6B // не используется
 recolour_sprite
{
0xC6: 0x46;
 0xC7: 0x47;
 0xC8: 0x48;
 0xC9: 0x49;
 0xCA: 0x4A;
 0xCB: 0x4B;
 0xCC: 0x4C;
 0xCD: 0x4D;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 49 22 // не используется
 recolour_sprite
{
0xC6: 0x46;
 0xC7: 0x47;
 0xC8: 0x48;
 0xC9: 0x49;
 0xCA: 0x4A;
 0xCB: 0x4B;
 0xCC: 0x4C;
 0xCD: 0x4D;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 49 6B // не используется
 recolour_sprite
{
0xC6: 0x47;
 0xC7: 0x48;
 0xC8: 0x49;
 0xC9: 0x4A;
 0xCA: 0x4B;
 0xCB: 0x4C;
 0xCC: 0x4D;
 0xCD: 0x4E;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 4A 22 // не используется
 recolour_sprite
{
0xC6: 0x47;
 0xC7: 0x48;
 0xC8: 0x49;
 0xC9: 0x4A;
 0xCA: 0x4B;
 0xCB: 0x4C;
 0xCC: 0x4D;
 0xCD: 0x4E;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 4A 6B // не используется
 recolour_sprite
{
0xC6: 0x23;
 0xC7: 0x24;
 0xC8: 0x25;
 0xC9: 0x26;
 0xCA: 0x27;
 0xCB: 0x45;
 0xCC: 0xA9;
 0xCD: 0x0F;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 26 22 // не используется
 recolour_sprite
{
0xC6: 0x23;
 0xC7: 0x24;
 0xC8: 0x25;
 0xC9: 0x26;
 0xCA: 0x27;
 0xCB: 0x45;
 0xCC: 0xA9;
 0xCD: 0x0F;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 26 6B // не используется
 recolour_sprite
{
0xC6: 0x36;
 0xC7: 0x37;
 0xC8: 0x38;
 0xC9: 0x39;
 0xCA: 0x3A;
 0xCB: 0x3B;
 0xCC: 0x26;
 0xCD: 0x27;
 0x50: 0x6A;
 0x51: 0x20;
 0x52: 0x21;
 0x53: 0x22;
 0x54: 0x23;
 0x55: 0x24;
 0x56: 0x25;
 0x57: 0x26;
}
// 39 22 // не используется
 recolour_sprite
{
0xC6: 0x36;
 0xC7: 0x37;
 0xC8: 0x38;
 0xC9: 0x39;
 0xCA: 0x3A;
 0xCB: 0x3B;
 0xCC: 0x26;
 0xCD: 0x27;
 0x50: 0x68;
 0x51: 0x69;
 0x52: 0x6A;
 0x53: 0x6B;
 0x54: 0x6C;
 0x55: 0x6D;
 0x56: 0x6E;
 0x57: 0x6F;
}
// 39 6B // не используется
// pos 20h танк контейнеры
 recolour_sprite
{
0xC6: 0x3E;
 0xC7: 0x3F;
 0xC8: 0x40;
 0xC9: 0x41;
 0xCA: 0x42;
 0xCB: 0x43;
 0xCC: 0x33;
 0xCD: 0x34;
 0x50: 0x3E;
 0x51: 0x3F;
 0x52: 0x40;
 0x53: 0x41;
 0x54: 0x42;
 0x55: 0x43;
 0x56: 0x33;
 0x57: 0x34;
}
// 41 41
 recolour_sprite
{
0xC6: 0x3E;
 0xC7: 0x3F;
 0xC8: 0x40;
 0xC9: 0x41;
 0xCA: 0x42;
 0xCB: 0x43;
 0xCC: 0x33;
 0xCD: 0x34;
 0x50: 0xC6;
 0x51: 0x90;
 0x52: 0x91;
 0x53: 0x92;
 0x54: 0x93;
 0x55: 0x94;
 0x56: 0x95;
 0x57: 0x96;
}
// 41 92
 recolour_sprite
{
0xC6: 0x3E;
 0xC7: 0x3F;
 0xC8: 0x40;
 0xC9: 0x41;
 0xCA: 0x42;
 0xCB: 0x43;
 0xCC: 0x33;
 0xCD: 0x34;
 0x50: 0x81;
 0x51: 0x9A;
 0x52: 0x9B;
 0x53: 0x9C;
 0x54: 0x9D;
 0x55: 0x9E;
 0x56: 0x9F;
 0x57: 0xA0;
}
// 41 9С
 recolour_sprite
{
0xC6: 0x3E;
 0xC7: 0x3F;
 0xC8: 0x40;
 0xC9: 0x41;
 0xCA: 0x42;
 0xCB: 0x43;
 0xCC: 0x33;
 0xCD: 0x34;
 0x50: 0xB3;
 0x51: 0xB4;
 0x52: 0xB5;
 0x53: 0xB6;
 0x54: 0xB7;
 0x55: 0xA4;
 0x56: 0xA5;
 0x57: 0xA6;
}
// 41 B5
 recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x91;
 0xC9: 0x92;
 0xCA: 0x93;
 0xCB: 0x94;
 0xCC: 0x95;
 0xCD: 0x96;
 0x50: 0x3E;
 0x51: 0x3F;
 0x52: 0x40;
 0x53: 0x41;
 0x54: 0x42;
 0x55: 0x43;
 0x56: 0x33;
 0x57: 0x34;
}
// 92 41
 recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x91;
 0xC9: 0x92;
 0xCA: 0x93;
 0xCB: 0x94;
 0xCC: 0x95;
 0xCD: 0x96;
 0x50: 0xC6;
 0x51: 0x90;
 0x52: 0x91;
 0x53: 0x92;
 0x54: 0x93;
 0x55: 0x94;
 0x56: 0x95;
 0x57: 0x96;
}
// 92 92
 recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x91;
 0xC9: 0x92;
 0xCA: 0x93;
 0xCB: 0x94;
 0xCC: 0x95;
 0xCD: 0x96;
 0x50: 0x81;
 0x51: 0x9A;
 0x52: 0x9B;
 0x53: 0x9C;
 0x54: 0x9D;
 0x55: 0x9E;
 0x56: 0x9F;
 0x57: 0xA0;
}
// 92 9С
 recolour_sprite
{
0xC6: 0xC6;
 0xC7: 0x90;
 0xC8: 0x91;
 0xC9: 0x92;
 0xCA: 0x93;
 0xCB: 0x94;
 0xCC: 0x95;
 0xCD: 0x96;
 0x50: 0xB2;
 0x51: 0xB3;
 0x52: 0xB4;
 0x53: 0xB5;
 0x54: 0xB6;
 0x55: 0xB7;
 0x56: 0xA4;
 0x57: 0xA5;
}
// 92 B5
//pos 28h танк контейнеры
 recolour_sprite
{
0xC6: 0x81;
 0xC7: 0x9A;
 0xC8: 0x9B;
 0xC9: 0x9C;
 0xCA: 0x9D;
 0xCB: 0x9E;
 0xCC: 0x9F;
 0xCD: 0xA0;
 0x50: 0x3E;
 0x51: 0x3F;
 0x52: 0x40;
 0x53: 0x41;
 0x54: 0x42;
 0x55: 0x43;
 0x56: 0x33;
 0x57: 0x34;
}
// 9С 41
 recolour_sprite
{
0xC6: 0x81;
 0xC7: 0x9A;
 0xC8: 0x9B;
 0xC9: 0x9C;
 0xCA: 0x9D;
 0xCB: 0x9E;
 0xCC: 0x9F;
 0xCD: 0xA0;
 0x50: 0xC6;
 0x51: 0x90;
 0x52: 0x91;
 0x53: 0x92;
 0x54: 0x93;
 0x55: 0x94;
 0x56: 0x95;
 0x57: 0x96;
}
// 9С 92
 recolour_sprite
{
0xC6: 0x81;
 0xC7: 0x9A;
 0xC8: 0x9B;
 0xC9: 0x9C;
 0xCA: 0x9D;
 0xCB: 0x9E;
 0xCC: 0x9F;
 0xCD: 0xA0;
 0x50: 0x81;
 0x51: 0x9A;
 0x52: 0x9B;
 0x53: 0x9C;
 0x54: 0x9D;
 0x55: 0x9E;
 0x56: 0x9F;
 0x57: 0xA0;
}
// 9С 9С
 recolour_sprite
{
0xC6: 0x81;
 0xC7: 0x9A;
 0xC8: 0x9B;
 0xC9: 0x9C;
 0xCA: 0x9D;
 0xCB: 0x9E;
 0xCC: 0x9F;
 0xCD: 0xA0;
 0x50: 0xB2;
 0x51: 0xB3;
 0x52: 0xB4;
 0x53: 0xB5;
 0x54: 0xB6;
 0x55: 0xB7;
 0x56: 0xA4;
 0x57: 0xA5;
}
// 9С B5
 recolour_sprite
{
0xC6: 0xB2;
 0xC7: 0xB3;
 0xC8: 0xB4;
 0xC9: 0xB5;
 0xCA: 0xB6;
 0xCB: 0xB7;
 0xCC: 0xA4;
 0xCD: 0xA5;
 0x50: 0x3E;
 0x51: 0x3F;
 0x52: 0x40;
 0x53: 0x41;
 0x54: 0x42;
 0x55: 0x43;
 0x56: 0x33;
 0x57: 0x34;
}
// B5 41
 recolour_sprite
{
0xC6: 0xB2;
 0xC7: 0xB3;
 0xC8: 0xB4;
 0xC9: 0xB5;
 0xCA: 0xB6;
 0xCB: 0xB7;
 0xCC: 0xA4;
 0xCD: 0xA5;
 0x50: 0xC6;
 0x51: 0x90;
 0x52: 0x91;
 0x53: 0x92;
 0x54: 0x93;
 0x55: 0x94;
 0x56: 0x95;
 0x57: 0x96;
}
// B5 92
 recolour_sprite
{
0xC6: 0xB2;
 0xC7: 0xB3;
 0xC8: 0xB4;
 0xC9: 0xB5;
 0xCA: 0xB6;
 0xCB: 0xB7;
 0xCC: 0xA4;
 0xCD: 0xA5;
 0x50: 0x81;
 0x51: 0x9A;
 0x52: 0x9B;
 0x53: 0x9C;
 0x54: 0x9D;
 0x55: 0x9E;
 0x56: 0x9F;
 0x57: 0xA0;
}
// B5 9С
 recolour_sprite
{
0xC6: 0xB2;
 0xC7: 0xB3;
 0xC8: 0xB4;
 0xC9: 0xB5;
 0xCA: 0xB6;
 0xCB: 0xB7;
 0xCC: 0xA4;
 0xCD: 0xA5;
 0x50: 0xB2;
 0x51: 0xB3;
 0x52: 0xB4;
 0x53: 0xB5;
 0x54: 0xB6;
 0x55: 0xB7;
 0x56: 0xA4;
 0x57: 0xA5;
}
// B5 B5
//pos 30h Ящики в крытом вагоне
 recolour_sprite
{
0xC6: 0x22;
 0xC7: 0x23;
 0xC8: 0x24;
 0xC9: 0x25;
 0xCA: 0x26;
 0xCB: 0x27;
 0xCC: 0x45;
 0xCD: 0xA9;
 0x50: 0x3C;
 0x51: 0x3D;
 0x52: 0x3E;
 0x53: 0x3F;
 0x54: 0x40;
 0x55: 0x41;
 0x56: 0x42;
 0x57: 0x43;
}
// 25 3F
 recolour_sprite
{
0xC6: 0x3C;
 0xC7: 0x3D;
 0xC8: 0x3E;
 0xC9: 0x3F;
 0xCA: 0x40;
 0xCB: 0x41;
 0xCC: 0x42;
 0xCD: 0x43;
 0x50: 0x22;
 0x51: 0x23;
 0x52: 0x24;
 0x53: 0x25;
 0x54: 0x26;
 0x55: 0x27;
 0x56: 0x45;
 0x57: 0xA9;
}
// 3F 25
 recolour_sprite
{
0xC6: 0x6B;
 0xC7: 0x6C;
 0xC8: 0x6D;
 0xC9: 0x6E;
 0xCA: 0x6F;
 0xCB: 0x25;
 0xCC: 0x26;
 0xCD: 0x27;
 0x50: 0x22;
 0x51: 0x23;
 0x52: 0x24;
 0x53: 0x25;
 0x54: 0x26;
 0x55: 0x27;
 0x56: 0x45;
 0x57: 0xA9;
}
// 6E 25
 recolour_sprite
{
0xC6: 0x22;
 0xC7: 0x23;
 0xC8: 0x24;
 0xC9: 0x25;
 0xCA: 0x26;
 0xCB: 0x27;
 0xCC: 0x45;
 0xCD: 0xA9;
 0x50: 0x6B;
 0x51: 0x6C;
 0x52: 0x6D;
 0x53: 0x6E;
 0x54: 0x6F;
 0x55: 0x25;
 0x56: 0x26;
 0x57: 0x27;
}
// 25 6E
 recolour_sprite
{
0xC6: 0x3C;
 0xC7: 0x3D;
 0xC8: 0x3E;
 0xC9: 0x3F;
 0xCA: 0x40;
 0xCB: 0x41;
 0xCC: 0x42;
 0xCD: 0x43;
 0x50: 0x6B;
 0x51: 0x6C;
 0x52: 0x6D;
 0x53: 0x6E;
 0x54: 0x6F;
 0x55: 0x25;
 0x56: 0x26;
 0x57: 0x27;
}
// 3F 6E
 recolour_sprite
{
0xC6: 0x6B;
 0xC7: 0x6C;
 0xC8: 0x6D;
 0xC9: 0x6E;
 0xCA: 0x6F;
 0xCB: 0x25;
 0xCC: 0x26;
 0xCD: 0x27;
 0x50: 0x3C;
 0x51: 0x3D;
 0x52: 0x3E;
 0x53: 0x3F;
 0x54: 0x40;
 0x55: 0x41;
 0x56: 0x42;
 0x57: 0x43;
}
// 6E 3F
//pos 36h
 recolour_sprite
{
0xC6: 0x23;
 0xC7: 0x24;
 0xC8: 0x25;
 0xC9: 0x26;
 0xCA: 0x27;
 0xCB: 0x45;
 0xCC: 0xA9;
 0xCD: 0x0F;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 26 04 // не используется
 recolour_sprite
{
0xC6: 0x36;
 0xC7: 0x37;
 0xC8: 0x38;
 0xC9: 0x39;
 0xCA: 0x3A;
 0xCB: 0x3B;
 0xCC: 0x26;
 0xCD: 0x27;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 39 04 // не используется
//pos 38h Паровоз П36
 recolour_sprite
{
0xC6: 0x50;
 0xC7: 0x51;
 0xC8: 0x52;
 0xC9: 0x53;
 0xCA: 0x54;
 0xCB: 0x55;
 0xCC: 0x56;
 0xCD: 0x57;
 0x50: 0x19;
 0x51: 0x1A;
 0x52: 0x1B;
 0x53: 0x1C;
 0x54: 0x1D;
 0x55: 0x1E;
 0x56: 0x1F;
 0x57: 0x27;
}
// 53 1С
 recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x18;
 0xC8: 0x60;
 0xC9: 0x61;
 0xCA: 0x62;
 0xCB: 0x63;
 0xCC: 0x64;
 0xCD: 0x65;
 0x50: 0x47;
 0x51: 0x7A;
 0x52: 0x7B;
 0x53: 0x7C;
 0x54: 0x7D;
 0x55: 0x7E;
 0x56: 0x7F;
 0x57: 0x4F;
}
// 61 7C
 recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x91;
 0xC8: 0x92;
 0xC9: 0x93;
 0xCA: 0x94;
 0xCB: 0x95;
 0xCC: 0x96;
 0xCD: 0x97;
 0x50: 0x47;
 0x51: 0x7A;
 0x52: 0x7B;
 0x53: 0x7C;
 0x54: 0x7D;
 0x55: 0x7E;
 0x56: 0x7F;
 0x57: 0x4F;
}
// 93 7С
//pos 3Bh Вагоны 13-9744 и 13-198-02
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x04;
 0xCA: 0x05;
 0xCB: 0x06;
 0xCC: 0x07;
 0xCD: 0x08;
 0x50: 0x91;
 0x51: 0x92;
 0x52: 0x93;
 0x53: 0x94;
 0x54: 0x95;
 0x55: 0x96;
 0x56: 0x97;
 0x57: 0x98;
}
// 04 94
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x04;
 0xCA: 0x05;
 0xCB: 0x06;
 0xCC: 0x07;
 0xCD: 0x08;
 0x50: 0x81;
 0x51: 0x9A;
 0x52: 0x9B;
 0x53: 0x9C;
 0x54: 0x9D;
 0x55: 0x9E;
 0x56: 0x9F;
 0x57: 0xA0;
}
// 04 9С
 recolour_sprite
{
0xC6: 0x91;
 0xC7: 0x92;
 0xC8: 0x93;
 0xC9: 0x94;
 0xCA: 0x95;
 0xCB: 0x96;
 0xCC: 0x97;
 0xCD: 0x98;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x03;
 0x53: 0x04;
 0x54: 0x05;
 0x55: 0x06;
 0x56: 0x07;
 0x57: 0x08;
}
// 94 04
 recolour_sprite
{
0xC6: 0x91;
 0xC7: 0x92;
 0xC8: 0x93;
 0xC9: 0x94;
 0xCA: 0x95;
 0xCB: 0x96;
 0xCC: 0x97;
 0xCD: 0x98;
 0x50: 0x91;
 0x51: 0x92;
 0x52: 0x93;
 0x53: 0x94;
 0x54: 0x95;
 0x55: 0x96;
 0x56: 0x97;
 0x57: 0x98;
}
// 94 94
 recolour_sprite
{
0xC6: 0xB6;
 0xC7: 0xB7;
 0xC8: 0xB8;
 0xC9: 0xB9;
 0xCA: 0xBA;
 0xCB: 0xBB;
 0xCC: 0xBC;
 0xCD: 0xBD;
 0x50: 0xB6;
 0x51: 0xB7;
 0x52: 0xB8;
 0x53: 0xB9;
 0x54: 0xBA;
 0x55: 0xBB;
 0x56: 0xBC;
 0x57: 0xBD;
}
// В9 В9
//pos 40h Вагон ТК-8
 recolour_sprite
{
0xC6: 0x49;
 0xC7: 0x4A;
 0xC8: 0x4B;
 0xC9: 0x4C;
 0xCA: 0x4D;
 0xCB: 0x4E;
 0xCC: 0x4F;
 0xCD: 0x78;
 0x50: 0x9C;
 0x51: 0x9D;
 0x52: 0x9E;
 0x53: 0x9F;
 0x54: 0xA0;
 0x55: 0xA1;
 0x56: 0xD2;
 0x57: 0x0F;
}
// 4C 9F
//pos 41h ТЭ33А
 recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x91;
 0xC8: 0x92;
 0xC9: 0x93;
 0xCA: 0x94;
 0xCB: 0x95;
 0xCC: 0x96;
 0xCD: 0x97;
 0x50: 0xB3;
 0x51: 0xB4;
 0x52: 0xB5;
 0x53: 0xB6;
 0x54: 0xB7;
 0x55: 0xA4;
 0x56: 0xA5;
 0x57: 0xA6;
}
// 93 B6
 recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x91;
 0xC8: 0x92;
 0xC9: 0x93;
 0xCA: 0x94;
 0xCB: 0x95;
 0xCC: 0x96;
 0xCD: 0x97;
 0x50: 0x40;
 0x51: 0xC0;
 0x52: 0xC1;
 0x53: 0xC2;
 0x54: 0xC3;
 0x55: 0xC4;
 0x56: 0xC5;
 0x57: 0x27;
}
// 93 C2
 recolour_sprite
{
0xC6: 0x51;
 0xC7: 0x52;
 0xC8: 0x53;
 0xC9: 0x54;
 0xCA: 0x55;
 0xCB: 0x56;
 0xCC: 0x57;
 0xCD: 0xD0;
 0x50: 0xB2;
 0x51: 0xB3;
 0x52: 0xB4;
 0x53: 0xB5;
 0x54: 0xB6;
 0x55: 0xB7;
 0x56: 0xA4;
 0x57: 0xA5;
}
// 54 B5
 recolour_sprite
{
0xC6: 0x90;
 0xC7: 0x91;
 0xC8: 0x92;
 0xC9: 0x93;
 0xCA: 0x94;
 0xCB: 0x95;
 0xCC: 0x96;
 0xCD: 0x97;
 0x50: 0x3E;
 0x51: 0x3F;
 0x52: 0x40;
 0x53: 0x41;
 0x54: 0x42;
 0x55: 0x43;
 0x56: 0x33;
 0x57: 0x34;
}
// 93 41
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0xC6;
 0xC9: 0xC7;
 0xCA: 0xC8;
 0xCB: 0xC9;
 0xCC: 0xCA;
 0xCD: 0xCB;
 0x50: 0xC8;
 0x51: 0xC9;
 0x52: 0xCA;
 0x53: 0xCB;
 0x54: 0xCC;
 0x55: 0xCD;
 0x56: 0x98;
 0x57: 0x99;
}
// C7 CB
//pos 46h ЧМЭ3
 recolour_sprite
{
0xC6: 0x50;
 0xC7: 0x51;
 0xC8: 0x52;
 0xC9: 0x53;
 0xCA: 0x54;
 0xCB: 0x55;
 0xCC: 0x56;
 0xCD: 0x57;
 0x50: 0x03;
 0x51: 0x04;
 0x52: 0x05;
 0x53: 0x06;
 0x54: 0x07;
 0x55: 0x08;
 0x56: 0x09;
 0x57: 0x0A;
}
// 53 06
 recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x18;
 0xC8: 0x60;
 0xC9: 0x61;
 0xCA: 0x62;
 0xCB: 0x63;
 0xCC: 0x64;
 0xCD: 0x65;
 0x50: 0x03;
 0x51: 0x04;
 0x52: 0x05;
 0x53: 0x06;
 0x54: 0x07;
 0x55: 0x08;
 0x56: 0x09;
 0x57: 0x0A;
}
// 61 06
 recolour_sprite
{
0xC6: 0x91;
 0xC7: 0x92;
 0xC8: 0x93;
 0xC9: 0x94;
 0xCA: 0x95;
 0xCB: 0x96;
 0xCC: 0x97;
 0xCD: 0x98;
 0x50: 0x03;
 0x51: 0x04;
 0x52: 0x05;
 0x53: 0x06;
 0x54: 0x07;
 0x55: 0x08;
 0x56: 0x09;
 0x57: 0x0A;
}
// 94 06
 recolour_sprite
{
0xC6: 0x50;
 0xC7: 0x51;
 0xC8: 0x52;
 0xC9: 0x53;
 0xCA: 0x54;
 0xCB: 0x55;
 0xCC: 0x56;
 0xCD: 0x57;
 0x50: 0x50;
 0x51: 0x51;
 0x52: 0x52;
 0x53: 0x53;
 0x54: 0x54;
 0x55: 0x55;
 0x56: 0x56;
 0x57: 0x57;
}
// 53 53
 recolour_sprite
{
0xC6: 0x68;
 0xC7: 0x18;
 0xC8: 0x60;
 0xC9: 0x61;
 0xCA: 0x62;
 0xCB: 0x63;
 0xCC: 0x64;
 0xCD: 0x65;
 0x50: 0x68;
 0x51: 0x18;
 0x52: 0x60;
 0x53: 0x61;
 0x54: 0x62;
 0x55: 0x63;
 0x56: 0x64;
 0x57: 0x65;
}
// 61 61
}
cargoes_cc2 = reserve_sprites(23);
replace(cargoes_cc2)
{
recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x03;
 0xC9: 0x04;
 0xCA: 0x05;
 0xCB: 0x06;
 0xCC: 0x07;
 0xCD: 0x08;
 0x50: 0x68;
 0x51: 0x10;
 0x52: 0x11;
 0x53: 0x12;
 0x54: 0x13;
 0x55: 0x14;
 0x56: 0x15;
 0x57: 0x16;
}
// COAL
 recolour_sprite
{
0xC6: 0x7B;
 0xC7: 0x3E;
 0xC8: 0x4A;
 0xC9: 0x4B;
 0xCA: 0x4C;
 0xCB: 0x7E;
 0xCC: 0x75;
 0xCD: 0x77;
 0x50: 0x49;
 0x51: 0x7C;
 0x52: 0x7D;
 0x53: 0x3F;
 0x54: 0x74;
 0x55: 0x4D;
 0x56: 0x76;
 0x57: 0x78;
}
// AORE
 recolour_sprite
{
0xC6: 0x59;
 0xC7: 0x5B;
 0xC8: 0x63;
 0xC9: 0x1D;
 0xCA: 0x65;
 0xCB: 0x1E;
 0xCC: 0x1F;
 0xCD: 0x67;
 0x50: 0x04;
 0x51: 0x05;
 0x52: 0x06;
 0x53: 0x07;
 0x54: 0x08;
 0x55: 0x09;
 0x56: 0x0A;
 0x57: 0x0B;
}
// CORE
 recolour_sprite
{
0xC6: 0x69;
 0xC7: 0x70;
 0xC8: 0x71;
 0xC9: 0x72;
 0xCA: 0x6C;
 0xCB: 0x6D;
 0xCC: 0x6E;
 0xCD: 0x6F;
 0x50: 0x3C;
 0x51: 0x35;
 0x52: 0x36;
 0x53: 0x37;
 0x54: 0x38;
 0x55: 0x39;
 0x56: 0x3A;
 0x57: 0x3B;
}
// FERT
 recolour_sprite
{
0xC6: 0x03;
 0xC7: 0x04;
 0xC8: 0x05;
 0xC9: 0x06;
 0xCA: 0x07;
 0xCB: 0x08;
 0xCC: 0x09;
 0xCD: 0x0A;
 0x50: 0x36;
 0x51: 0x22;
 0x52: 0x23;
 0x53: 0x6F;
 0x54: 0x24;
 0x55: 0x3A;
 0x56: 0x25;
 0x57: 0x26;
}
// GRVL
 recolour_sprite
{
0xC6: 0x02;
 0xC7: 0x03;
 0xC8: 0x04;
 0xC9: 0x05;
 0xCA: 0x06;
 0xCB: 0x07;
 0xCC: 0x08;
 0xCD: 0x09;
 0x50: 0x47;
 0x51: 0x48;
 0x52: 0x49;
 0x53: 0x7C;
 0x54: 0x7D;
 0x55: 0x7E;
 0x56: 0x7F;
 0x57: 0x30;
}
// IORE
 recolour_sprite
{
0xC6: 0x08;
 0xC7: 0x09;
 0xC8: 0x0A;
 0xC9: 0x0B;
 0xCA: 0x0C;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
 0x50: 0x12;
 0x51: 0x13;
 0x52: 0x14;
 0x53: 0x15;
 0x54: 0x16;
 0x55: 0x17;
 0x56: 0x87;
 0x57: 0xA9;
}
// LIME
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x02;
 0xC8: 0x02;
 0xC9: 0x03;
 0xCA: 0x04;
 0xCB: 0x05;
 0xCC: 0x06;
 0xCD: 0x06;
 0x50: 0x01;
 0x51: 0x02;
 0x52: 0x02;
 0x53: 0x03;
 0x54: 0x04;
 0x55: 0x05;
 0x56: 0x06;
 0x57: 0x06;
}
// MNO2
 recolour_sprite
{
0xC6: 0x3C;
 0xC7: 0x35;
 0xC8: 0x3D;
 0xC9: 0x3E;
 0xCA: 0x3F;
 0xCB: 0x40;
 0xCC: 0x41;
 0xCD: 0x42;
 0x50: 0x47;
 0x51: 0x48;
 0x52: 0x49;
 0x53: 0x4A;
 0x54: 0x4B;
 0x55: 0x4C;
 0x56: 0x4D;
 0x57: 0x4E;
}
// PORE
 recolour_sprite
{
0xC6: 0x23;
 0xC7: 0x3A;
 0xC8: 0x25;
 0xC9: 0x26;
 0xCA: 0x3B;
 0xCB: 0x26;
 0xCC: 0x3B;
 0xCD: 0x27;
 0x50: 0x39;
 0x51: 0x3A;
 0x52: 0x79;
 0x53: 0xC4;
 0x54: 0xC5;
 0x55: 0x27;
 0x56: 0x44;
 0x57: 0xA9;
}
// SAND
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x03;
 0xC8: 0x10;
 0xC9: 0x11;
 0xCA: 0x12;
 0xCB: 0x13;
 0xCC: 0x14;
 0xCD: 0x15;
 0x50: 0x70;
 0x51: 0x71;
 0x52: 0x72;
 0x53: 0x23;
 0x54: 0x40;
 0x55: 0xC1;
 0x56: 0x76;
 0x57: 0x77;
}
// SCMT
 recolour_sprite
{
0xC6: 0x41;
 0xC7: 0x42;
 0xC8: 0xC4;
 0xC9: 0xC5;
 0xCA: 0x27;
 0xCB: 0x44;
 0xCC: 0x45;
 0xCD: 0xA9;
 0x50: 0x1A;
 0x51: 0x2B;
 0x52: 0x38;
 0x53: 0x39;
 0x54: 0x1D;
 0x55: 0x5E;
 0x56: 0x5F;
 0x57: 0x1F;
}
// SULP
 recolour_sprite
{
0xC6: 0x6B;
 0xC7: 0x22;
 0xC8: 0x23;
 0xC9: 0x6E;
 0xCA: 0x24;
 0xCB: 0x3A;
 0xCC: 0x24;
 0xCD: 0x3A;
 0x50: 0x6B;
 0x51: 0x22;
 0x52: 0x23;
 0x53: 0x6E;
 0x54: 0x24;
 0x55: 0x3A;
 0x56: 0x24;
 0x57: 0x3A;
}
// CLAY
 recolour_sprite
{
0xC6: 0x03;
 0xC7: 0x04;
 0xC8: 0x05;
 0xC9: 0x07;
 0xCA: 0x09;
 0xCB: 0x0A;
 0xCC: 0x87;
 0xCD: 0x0C;
 0x50: 0x11;
 0x51: 0x12;
 0x52: 0x13;
 0x53: 0x14;
 0x54: 0x15;
 0x55: 0x16;
 0x56: 0x17;
 0x57: 0x0F;
}
// FECR
 recolour_sprite
{
0xC6: 0x70;
 0xC7: 0x71;
 0xC8: 0x72;
 0xC9: 0x73;
 0xCA: 0x74;
 0xCB: 0x75;
 0xCC: 0x76;
 0xCD: 0x77;
 0x50: 0x47;
 0x51: 0x48;
 0x52: 0x49;
 0x53: 0x3D;
 0x54: 0x3E;
 0x55: 0x3F;
 0x56: 0x40;
 0x57: 0x41;
}
// PHOS
 recolour_sprite
{
0xC6: 0x59;
 0xC7: 0x5B;
 0xC8: 0x63;
 0xC9: 0x57;
 0xCA: 0x50;
 0xCB: 0x5E;
 0xCC: 0xD0;
 0xCD: 0x57;
 0x50: 0x54;
 0x51: 0x55;
 0x52: 0x56;
 0x53: 0x57;
 0x54: 0x58;
 0x55: 0x59;
 0x56: 0x5A;
 0x57: 0x5B;
}
// URAN
 recolour_sprite
{
0xC6: 0x4F;
 0xC7: 0x34;
 0xC8: 0x12;
 0xC9: 0x0A;
 0xCA: 0x2C;
 0xCB: 0x01;
 0xCC: 0x30;
 0xCD: 0x9A;
 0x50: 0x38;
 0x51: 0xB0;
 0x52: 0x50;
 0x53: 0x99;
 0x54: 0x32;
 0x55: 0x8F;
 0x56: 0xD0;
 0x57: 0x63;
}
// RCYC
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x46;
 0xC8: 0x69;
 0xC9: 0x04;
 0xCA: 0x47;
 0xCB: 0x6C;
 0xCC: 0x6D;
 0xCD: 0x73;
 0x50: 0x68;
 0x51: 0x70;
 0x52: 0x71;
 0x53: 0x68;
 0x54: 0x03;
 0x55: 0x04;
 0x56: 0x05;
 0x57: 0x06;
}
// PEAT
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x03;
 0xC8: 0x46;
 0xC9: 0x10;
 0xCA: 0x03;
 0xCB: 0x04;
 0xCC: 0x05;
 0xCD: 0x06;
 0x50: 0x46;
 0x51: 0x47;
 0x52: 0x48;
 0x53: 0x23;
 0x54: 0x41;
 0x55: 0x35;
 0x56: 0x6C;
 0x57: 0x77;
}
// SLAG
 recolour_sprite
{
0xC6: 0x05;
 0xC7: 0x06;
 0xC8: 0x07;
 0xC9: 0x08;
 0xCA: 0x09;
 0xCB: 0x0A;
 0xCC: 0x0B;
 0xCD: 0x0C;
 0x50: 0x39;
 0x51: 0x25;
 0x52: 0x26;
 0x53: 0x6F;
 0x54: 0x15;
 0x55: 0x3B;
 0x56: 0x26;
 0x57: 0x27;
}
// KAOL
 recolour_sprite
{
0xC6: 0x09;
 0xC7: 0x0A;
 0xC8: 0x0A;
 0xC9: 0x0B;
 0xCA: 0x0C;
 0xCB: 0x0D;
 0xCC: 0x0E;
 0xCD: 0x0F;
 0x50: 0x67;
 0x51: 0x14;
 0x52: 0x15;
 0x53: 0x16;
 0x54: 0x15;
 0x55: 0x16;
 0x56: 0x17;
 0x57: 0x0E;
}
// SALT
 recolour_sprite
{
0xC6: 0x01;
 0xC7: 0x68;
 0xC8: 0x02;
 0xC9: 0x03;
 0xCA: 0x04;
 0xCB: 0x05;
 0xCC: 0x06;
 0xCD: 0x07;
 0x50: 0x08;
 0x51: 0x68;
 0x52: 0x10;
 0x53: 0x11;
 0x54: 0x12;
 0x55: 0x13;
 0x56: 0x14;
 0x57: 0x15;
}
// COKE
 recolour_sprite
{
0xC6: 0x46;
 0xC7: 0x35;
 0xC8: 0x19;
 0xC9: 0x1A;
 0xCA: 0x1B;
 0xCB: 0x1C;
 0xCC: 0x1D;
 0xCD: 0x1E;
 0x50: 0x69;
 0x51: 0x18;
 0x52: 0x19;
 0x53: 0x1A;
 0x54: 0x59;
 0x55: 0x5A;
 0x56: 0x1C;
 0x57: 0x1E;
}
// COCO
}
// CC
switch (FEAT_TRAINS, SELF, any_cc_colour, 0)
{
return ttdall_cc + 0xC9;
}
/// code definition - lv
// номера E0h- FFh зарезервированы для рефитов
// Выбор ливреи без вариантов
// Выбор ливреи по году постройки
// Выбор ливреи по году обслуживания
// Выбор ливреи по году постройки и обслуживания
// Выбор ливреи с прототипом
// Выбор ливреи с альтернативами
// Выбор ливреи с 1 рефитом
// Выбор ливреи с несколькими рефитами
// end
 /// code definition - lv-new
switch (FEAT_TRAINS, SELF, FP_cargo_subtype_text2, cargo_subtype)
{
34: return string(STR_REFIT_LV_RZD_PID);
    return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, FP_cargo_subtype_text,
  (build_year >= 2009) || (current_year >= 2009))
{
1: FP_cargo_subtype_text2;
     return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RAL6020, 0)
{
return string(STR_REFIT_TTD_59);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RAL6002, 0)
{
return string(STR_REFIT_TTD_53);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_AMMENDORF_EXHIBITION, 0)
{
return string(STR_REFIT_WAGGONBAU_AMMENDORF_EXHIBITION);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_OCTOBER_RAILWAY, (build_year >= 1851) || (current_year >= 1851))
{
1: return string(STR_REFIT_LV_OCTOBER_RAILWAY_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_OCTOBER_RAILWAY, (build_year >= 1851) || (current_year >= 1851))
{
1: return string(STR_REFIT_LV_OCTOBER_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_OCTOBER_RAILWAY, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_OCTOBER_RAILWAY;
 general_cargo_subtype_text_long_LV_OCTOBER_RAILWAY;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SOUTHERN_RAILWAY, (build_year >= 1869) || (current_year >= 1869))
{
1: return string(STR_REFIT_LV_SOUTHERN_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SVERDLOVSK_RAILWAY, (build_year >= 1878) || (current_year >= 1878))
{
1: return string(STR_REFIT_LV_SVERDLOVSK_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SZD, (build_year >= 1918) || (current_year >= 1918))
{
1: return string(STR_REFIT_LV_SZD);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_NORTHERN_KAVKAZ_RAILWAY, (build_year >= 1922) || (current_year >= 1922))
{
1: return string(STR_REFIT_LV_NORTHERN_KAVKAZ_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_MOSCOW_RAILWAY, (build_year >= 1959) || (current_year >= 1959))
{
1: return string(STR_REFIT_LV_MOSCOW_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_GORKOV_RAILWAY, (build_year >= 1961) || (current_year >= 1961))
{
1: return string(STR_REFIT_LV_GORKOV_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_WEST_SIBERIAN_RAILWAY, (build_year >= 1961) || (current_year >= 1961))
{
1: return string(STR_REFIT_LV_WEST_SIBERIAN_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BALTIC_RAILWAY, (build_year >= 1963) || (current_year >= 1963))
{
1: return string(STR_REFIT_LV_BALTIC_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BALTIC_RAILWAY_ESTONIA, (build_year >= 1963) || (current_year >= 1963))
{
1: return string(STR_REFIT_LV_BALTIC_RAILWAY_ESTONIA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BALTIC_RAILWAY_RIGA, (build_year >= 1963) || (current_year >= 1963))
{
1: return string(STR_REFIT_LV_BALTIC_RAILWAY_RIGA);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new_long(LV_RAILWAY_MOLDOVA          , LV_CALEA_FERATA_MOLDOVA_LONG     , 1992)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_LATVIJAS_EKSPRESIS_B2008, (build_year >= 1993) || (current_year >= 1993))
{
1: return string(STR_REFIT_LV_LATVIJAS_EKSPRESIS_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_LATVIJAS_EKSPRESIS_B2008, (build_year >= 1993) || (current_year >= 1993))
{
1: return string(STR_REFIT_LV_LATVIJAS_EKSPRESIS_B2008);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LATVIJAS_EKSPRESIS_B2008, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_LATVIJAS_EKSPRESIS_B2008;
 general_cargo_subtype_text_long_LV_LATVIJAS_EKSPRESIS_B2008;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LATVIJAS_EKSPRESIS_A2008, (build_year >= 1993) || (current_year >= 1993))
{
1: return string(STR_REFIT_LV_LATVIJAS_EKSPRESIS_A2008);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_LG, (build_year >= 1996) || (current_year >= 1996))
{
1: return string(STR_REFIT_LV_LG_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_LG, (build_year >= 1996) || (current_year >= 1996))
{
1: return string(STR_REFIT_LV_LG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LG, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_LG;
 general_cargo_subtype_text_long_LV_LG;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_LDZ, (build_year >= 1996) || (current_year >= 1996))
{
1: return string(STR_REFIT_LV_LDZ_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_LDZ, (build_year >= 1996) || (current_year >= 1996))
{
1: return string(STR_REFIT_LV_LDZ);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LDZ, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_LDZ;
 general_cargo_subtype_text_long_LV_LDZ;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_BELARUSSIAN_RAILWAY, (build_year >= 1998) || (current_year >= 1998))
{
1: return string(STR_REFIT_LV_BELARUSSIAN_RAILWAY_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_BELARUSSIAN_RAILWAY, (build_year >= 1998) || (current_year >= 1998))
{
1: return string(STR_REFIT_LV_BELARUSSIAN_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_BELARUSSIAN_RAILWAY;
 general_cargo_subtype_text_long_LV_BELARUSSIAN_RAILWAY;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY_DRB, (build_year >= 1998) || (current_year >= 1998))
{
1: return string(STR_REFIT_LV_BELARUSSIAN_RAILWAY_DRB);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_UKRAINIAN_RAILWAY, (build_year >= 1999) || (current_year >= 1999))
{
1: return string(STR_REFIT_LV_UKRAINIAN_RAILWAY_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_UKRAINIAN_RAILWAY, (build_year >= 1999) || (current_year >= 1999))
{
1: return string(STR_REFIT_LV_UKRAINIAN_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_UKRAINIAN_RAILWAY, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_UKRAINIAN_RAILWAY;
 general_cargo_subtype_text_long_LV_UKRAINIAN_RAILWAY;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_KALININGRAD_RAILWAY, (build_year >= 2003) || (current_year >= 2003))
{
1: return string(STR_REFIT_LV_KALININGRAD_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_NORTHERN_RAILWAY, (build_year >= 2003) || (current_year >= 2003))
{
1: return string(STR_REFIT_LV_NORTHERN_RAILWAY_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_NORTHERN_RAILWAY, (build_year >= 2003) || (current_year >= 2003))
{
1: return string(STR_REFIT_LV_NORTHERN_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_NORTHERN_RAILWAY, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_NORTHERN_RAILWAY;
 general_cargo_subtype_text_long_LV_NORTHERN_RAILWAY;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_UZBEKISTAN_TEMIR_YOLLARI, (build_year >= 2004) || (current_year >= 2004))
{
1: return string(STR_REFIT_LV_UZBEKISTAN_TEMIR_YOLLARI_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_UZBEKISTAN_TEMIR_YOLLARI, (build_year >= 2004) || (current_year >= 2004))
{
1: return string(STR_REFIT_LV_UZBEKISTAN_TEMIR_YOLLARI);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_UZBEKISTAN_TEMIR_YOLLARI, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_UZBEKISTAN_TEMIR_YOLLARI;
 general_cargo_subtype_text_long_LV_UZBEKISTAN_TEMIR_YOLLARI;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_KAZAKHSTAN_TEMIR_ZHOLY, (build_year >= 2004) || (current_year >= 2004))
{
1: return string(STR_REFIT_LV_KAZAKHSTAN_TEMIR_ZHOLY_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_KAZAKHSTAN_TEMIR_ZHOLY, (build_year >= 2004) || (current_year >= 2004))
{
1: return string(STR_REFIT_LV_KAZAKHSTAN_TEMIR_ZHOLY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_KAZAKHSTAN_TEMIR_ZHOLY, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_KAZAKHSTAN_TEMIR_ZHOLY;
 general_cargo_subtype_text_long_LV_KAZAKHSTAN_TEMIR_ZHOLY;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RZD_PID, (build_year >= 2009) || (current_year >= 2009))
{
1: return string(STR_REFIT_LV_RZD_PID);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_CRIMEAN_RAILWAY, (build_year >= 2014) || (current_year >= 2014))
{
1: return string(STR_REFIT_LV_CRIMEAN_RAILWAY);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_RED_ARROW_OLD, (build_year >= 1931) || (current_year >= 1931))
{
1: return string(STR_REFIT_LV_RED_ARROW_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_RED_ARROW_OLD, (build_year >= 1931) || (current_year >= 1931))
{
1: return string(STR_REFIT_LV_RED_ARROW_OLD);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RED_ARROW_OLD, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_RED_ARROW_OLD;
 general_cargo_subtype_text_long_LV_RED_ARROW_OLD;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_BLUE_EXPRESS, (build_year >= 1947) || (current_year >= 1947))
{
1: return string(STR_REFIT_LV_BLUE_EXPRESS_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_BLUE_EXPRESS, (build_year >= 1947) || (current_year >= 1947))
{
1: return string(STR_REFIT_LV_BLUE_EXPRESS);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BLUE_EXPRESS, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_BLUE_EXPRESS;
 general_cargo_subtype_text_long_LV_BLUE_EXPRESS;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_EAST, (build_year >= 1954) || (current_year >= 1954))
{
1: return string(STR_REFIT_LV_EAST_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_EAST, (build_year >= 1954) || (current_year >= 1954))
{
1: return string(STR_REFIT_LV_EAST);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_EAST, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_EAST;
 general_cargo_subtype_text_long_LV_EAST;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_RED_ARROW, (build_year >= 1954) || (current_year >= 1954))
{
1: return string(STR_REFIT_LV_RED_ARROW_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_RED_ARROW, (build_year >= 1954) || (current_year >= 1954))
{
1: return string(STR_REFIT_LV_RED_ARROW);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RED_ARROW, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_RED_ARROW;
 general_cargo_subtype_text_long_LV_RED_ARROW;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_ARCTIC, (build_year >= 1962) || (current_year >= 1962))
{
1: return string(STR_REFIT_LV_ARCTIC);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_BELARUSSIA, (build_year >= 1962) || (current_year >= 1962))
{
1: return string(STR_REFIT_LV_BELARUSSIA_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_BELARUSSIA, (build_year >= 1962) || (current_year >= 1962))
{
1: return string(STR_REFIT_LV_BELARUSSIA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BELARUSSIA, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_BELARUSSIA;
 general_cargo_subtype_text_long_LV_BELARUSSIA;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_UKRAINA, (build_year >= 1962) || (current_year >= 1962))
{
1: return string(STR_REFIT_LV_UKRAINA_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_UKRAINA, (build_year >= 1962) || (current_year >= 1962))
{
1: return string(STR_REFIT_LV_UKRAINA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_UKRAINA, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_UKRAINA;
 general_cargo_subtype_text_long_LV_UKRAINA;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_AURORA, (build_year >= 1963) || (current_year >= 1963))
{
1: return string(STR_REFIT_LV_AURORA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_KAVKAZ, (build_year >= 1963) || (current_year >= 1963))
{
1: return string(STR_REFIT_LV_KAVKAZ);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_AMBER, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_AMBER_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_AMBER, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_AMBER);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_AMBER, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_AMBER;
 general_cargo_subtype_text_long_LV_AMBER;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_BAIKAL, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_BAIKAL);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_RUSSIA, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_RUSSIA_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_RUSSIA, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_RUSSIA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RUSSIA, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_RUSSIA;
 general_cargo_subtype_text_long_LV_RUSSIA;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RITSA, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_RITSA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SOCHI, (build_year >= 1964) || (current_year >= 1964))
{
1: return string(STR_REFIT_LV_SOCHI);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_KUBAN, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_KUBAN);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_LETUVA, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_LETUVA_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_LETUVA, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_LETUVA);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LETUVA, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_LETUVA;
 general_cargo_subtype_text_long_LV_LETUVA;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SIBERIAN, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_SIBERIAN);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_SOUTHERN_URALS, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_SOUTHERN_URALS_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_SOUTHERN_URALS, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_SOUTHERN_URALS);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SOUTHERN_URALS, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_SOUTHERN_URALS;
 general_cargo_subtype_text_long_LV_SOUTHERN_URALS;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_URAL, (build_year >= 1965) || (current_year >= 1965))
{
1: return string(STR_REFIT_LV_URAL);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new_long(LV_SEAGULL            , LV_SEAGULL_LONG            , 1966)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_TIKHIY_DON, (build_year >= 1966) || (current_year >= 1966))
{
1: return string(STR_REFIT_LV_TIKHIY_DON_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_TIKHIY_DON, (build_year >= 1966) || (current_year >= 1966))
{
1: return string(STR_REFIT_LV_TIKHIY_DON);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_TIKHIY_DON, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_TIKHIY_DON;
 general_cargo_subtype_text_long_LV_TIKHIY_DON;
}
// livery_subtemplate_new_long(LV_YOUTH              , LV_YOUTH_LONG              , 1966)
// livery_subtemplate_new(LV_ALTAI                                                , 1967)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_KAMA, (build_year >= 1967) || (current_year >= 1967))
{
1: return string(STR_REFIT_LV_KAMA);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new(LV_ENISEI                                               , 1968)
// livery_subtemplate_new(LV_REPIN                                                , 1974)
// livery_subtemplate_new(LV_VOLGA                                                , 1976)
// livery_subtemplate_new_long(LV_LDZ_STAR           , LV_LDZ_STAR_LONG           , 1978)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_TATARSTAN, (build_year >= 1980) || (current_year >= 1980))
{
1: return string(STR_REFIT_LV_TATARSTAN);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new(LV_YAROSLAVL                                            , 1980)
// livery_subtemplate_new(LV_OCEAN                                                , 1983)
// livery_subtemplate_new_long(LV_SMENA              , LV_SMENA_LONG              , 1983)
// livery_subtemplate_new(LV_SNCF_ATLANTIQUE                                      , 1991)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RUSS, (build_year >= 1991) || (current_year >= 1991))
{
1: return string(STR_REFIT_LV_RUSS);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new(LV_NEMAN                                                , 1992)
// livery_subtemplate_new(LV_THALYS                                               , 1996)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_NEVSKY_EXPRESS, (build_year >= 1998) || (current_year >= 1998))
{
1: return string(STR_REFIT_LV_NEVSKY_EXPRESS);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_NIKHOLAS_EXPRESS, (build_year >= 2000) || (current_year >= 2000))
{
1: return string(STR_REFIT_LV_NIKHOLAS_EXPRESS);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new(LV_RUSICH                                               , 2001)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_EXPRESS_MSK_SPB, (build_year >= 2003) || (current_year >= 2003))
{
1: return string(STR_REFIT_LV_EXPRESS_MSK_SPB);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new(LV_POMORE                                               , 2003)
// livery_subtemplate_new(LV_SAYAN                                                , 2003)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_SMOLENSK, (build_year >= 2003) || (current_year >= 2003))
{
1: return string(STR_REFIT_LV_SMOLENSK);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new_long(LV_THUNDERBIRD        , LV_THUNDERBIRD_LONG        , 2003)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LEO_TOLSTOY, (build_year >= 2004) || (current_year >= 2004))
{
1: return string(STR_REFIT_LV_LEO_TOLSTOY);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new_long(LV_SEVERNAYA_PALMIRA  , LV_SEVERNAYA_PALMIRA_LONG  , 2004)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_VORONEZH, (build_year >= 2004) || (current_year >= 2004))
{
1: return string(STR_REFIT_LV_VORONEZH);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new_long(LV_2CAPITALS          , LV_2CAPITALS_LONG          , 2005)
// livery_subtemplate_new(LV_LADOGA                                               , 2005)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_UZ_CAPITAL_EXPRESS, (build_year >= 2005) || (current_year >= 2005))
{
1: return string(STR_REFIT_LV_UZ_CAPITAL_EXPRESS_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_UZ_CAPITAL_EXPRESS, (build_year >= 2005) || (current_year >= 2005))
{
1: return string(STR_REFIT_LV_UZ_CAPITAL_EXPRESS);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_UZ_CAPITAL_EXPRESS, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_UZ_CAPITAL_EXPRESS;
 general_cargo_subtype_text_long_LV_UZ_CAPITAL_EXPRESS;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RYBINSK, (build_year >= 2005) || (current_year >= 2005))
{
1: return string(STR_REFIT_LV_RYBINSK);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_POST_RUS, (build_year >= 2005) || (current_year >= 2005))
{
1: return string(STR_REFIT_LV_POST_RUS);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_UZ_ARENA_2000, (build_year >= 2008) || (current_year >= 2008))
{
1: return string(STR_REFIT_LV_UZ_ARENA_2000);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_ALEXANDER_NEVSKY, (build_year >= 2009) || (current_year >= 2009))
{
1: return string(STR_REFIT_LV_ALEXANDER_NEVSKY);
 return string(STR_REFIT_FACTORY);
}
// livery_subtemplate_new(LV_SNCF_CARMILLON                                       , 2011)
// livery_subtemplate_new(LV_OUIGO                                                , 2013)
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_long_LV_CPSC, (build_year >= 2015) || (current_year >= 2015))
{
1: return string(STR_REFIT_LV_CPSC_LONG);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_short_LV_CPSC, (build_year >= 2015) || (current_year >= 2015))
{
1: return string(STR_REFIT_LV_CPSC);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_CPSC, enable_long_names)
{
0: general_cargo_subtype_text_short_LV_CPSC;
 general_cargo_subtype_text_long_LV_CPSC;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_RITSA_SOCHI, ((build_year >= 1987) || (date_of_last_service >= date(1987,1,1))))
{
0: general_cargo_subtype_text_LV_RITSA;
     general_cargo_subtype_text_LV_SOCHI;
}
switch (FEAT_TRAINS, SELF, general_cargo_subtype_text_LV_LATVIJAS_EKSPRESIS, ((build_year >= 2008) || (date_of_last_service >= date(2008,1,1))))
{
0: general_cargo_subtype_text_LV_LATVIJAS_EKSPRESIS_B2008;
     general_cargo_subtype_text_LV_LATVIJAS_EKSPRESIS_A2008;
}
// Выбор ливреи с альтернативами
// TODO Разработать шаблон, который устанавливает для ливреи с завода название, отличное от "заводская ливрея" (и для всех неиспользуемых id).
// Например, если с завода выходит РЖД ливрея, чтобы она называлась РЖД, а не заводская. А ливрея "заводская" в списке не фигурировала.
/*
STR_REFIT_LV_AZERBAIJAN_RAILWAYS
STR_REFIT_LV_BALTIC_RAILWAY
STR_REFIT_LV_BALTIC_RAILWAY_ESTONIA
STR_REFIT_LV_BALTIC_RAILWAY_RIGA
STR_REFIT_LV_BELARUSSIAN_RAILWAY
STR_REFIT_LV_BELARUSSIAN_RAILWAY_LONG
STR_REFIT_LV_CALEA_FERATA_MOLDOVA
STR_REFIT_LV_CALEA_FERATA_MOLDOVA_LONG
STR_REFIT_LV_CRIMEAN_RAILWAY
STR_REFIT_LV_GORKOV_RAILWAY
STR_REFIT_LV_KALININGRAD_RAILWAY
STR_REFIT_LV_KAZAKHSTAN_TEMIR_ZHOLY
STR_REFIT_LV_KAZAKHSTAN_TEMIR_ZHOLY_LONG
STR_REFIT_LV_LATVIJAS_EKSPRESIS_B2008
STR_REFIT_LV_LATVIJAS_EKSPRESIS_A2008
STR_REFIT_LV_LATVIJAS_EKSPRESIS_LONG
STR_REFIT_LV_LDZ
STR_REFIT_LV_LDZ_LONG
STR_REFIT_LV_LG
STR_REFIT_LV_LG_LONG
STR_REFIT_LV_MOSCOW_RAILWAY
STR_REFIT_LV_NORTHERN_KAVKAZ_RAILWAY
STR_REFIT_LV_NORTHERN_RAILWAY
STR_REFIT_LV_NORTHERN_RAILWAY_LONG
STR_REFIT_LV_OCTOBER_RAILWAY
STR_REFIT_LV_OCTOBER_RAILWAY_LONG
STR_REFIT_LV_OUIGO
STR_REFIT_LV_RZD_PID
STR_REFIT_LV_SOUTHERN_RAILWAY
STR_REFIT_LV_SVERDLOVSK_RAILWAY
STR_REFIT_LV_SZD
STR_REFIT_LV_TAJIK_RAILWAYS
STR_REFIT_LV_THALYS
STR_REFIT_LV_UKRAINIAN_RAILWAY
STR_REFIT_LV_UKRAINIAN_RAILWAY_LONG
STR_REFIT_LV_UZBEKISTAN_TEMIR_YOLLARI
STR_REFIT_LV_UZBEKISTAN_TEMIR_YOLLARI_LONG
STR_REFIT_LV_WEST_SIBERIAN_RAILWAY

STR_REFIT_LV_2CAPITALS
STR_REFIT_LV_2CAPITALS_LONG
STR_REFIT_LV_ALEXANDER_NEVSKY
STR_REFIT_LV_ALTAI
STR_REFIT_LV_AMBER
STR_REFIT_LV_AMBER_LONG
STR_REFIT_LV_ARCTIC
STR_REFIT_LV_AURORA
STR_REFIT_LV_BAIKAL
STR_REFIT_LV_BALTIC
STR_REFIT_LV_BELARUSSIA
STR_REFIT_LV_BELARUSSIAN_RAILWAY_DRB
STR_REFIT_LV_BELARUSSIA_LONG
STR_REFIT_LV_BLUE_EXPRESS
STR_REFIT_LV_BLUE_EXPRESS_LONG
STR_REFIT_LV_CPSC
STR_REFIT_LV_CPSC_LONG
STR_REFIT_LV_EAST
STR_REFIT_LV_EAST_LONG
STR_REFIT_LV_ENISEI
STR_REFIT_LV_EXPRESS_MSK_SPB
STR_REFIT_LV_KAMA
STR_REFIT_LV_KAVKAZ
STR_REFIT_LV_KUBAN
STR_REFIT_LV_LADOGA
STR_REFIT_LV_LDZ_STAR
STR_REFIT_LV_LDZ_STAR_LONG
STR_REFIT_LV_LEO_TOLSTOY
STR_REFIT_LV_LETUVA
STR_REFIT_LV_LETUVA_LONG
STR_REFIT_LV_NEMAN
STR_REFIT_LV_NEVSKY_EXPRESS
STR_REFIT_LV_NIKHOLAS_EXPRESS
STR_REFIT_LV_OCEAN
STR_REFIT_LV_POMORE
STR_REFIT_LV_POST_RUS
STR_REFIT_LV_RED_ARROW
STR_REFIT_LV_RED_ARROW_OLD
STR_REFIT_LV_RED_ARROW_LONG
STR_REFIT_LV_REPIN
STR_REFIT_LV_RITSA
STR_REFIT_LV_RUSICH
STR_REFIT_LV_RUSS
STR_REFIT_LV_RUSSIA
STR_REFIT_LV_RUSSIAN_TROIKA
STR_REFIT_LV_RUSSIAN_TROIKA_LONG
STR_REFIT_LV_RUSSIA_LONG
STR_REFIT_LV_RYBINSK
STR_REFIT_LV_SAYAN
STR_REFIT_LV_SEAGULL
STR_REFIT_LV_SEAGULL_LONG
STR_REFIT_LV_SEVERNAYA_PALMIRA
STR_REFIT_LV_SEVERNAYA_PALMIRA_LONG
STR_REFIT_LV_SIBERIAN
STR_REFIT_LV_SLAVIC_EXPRESS
STR_REFIT_LV_SLAVIC_EXPRESS_LONG
STR_REFIT_LV_SMENA
STR_REFIT_LV_SMENA_LONG
STR_REFIT_LV_SMOLENSK
STR_REFIT_LV_SNCF_ATLANTIQUE
STR_REFIT_LV_SNCF_CARMILLON
STR_REFIT_LV_SOCHI
STR_REFIT_LV_SOUTHERN_URALS
STR_REFIT_LV_SOUTHERN_URALS_LONG
STR_REFIT_LV_TATARSTAN
STR_REFIT_LV_THUNDERBIRD
STR_REFIT_LV_THUNDERBIRD_LONG
STR_REFIT_LV_TIKHIY_DON
STR_REFIT_LV_TIKHIY_DON_LONG
STR_REFIT_LV_UKRAINA
STR_REFIT_LV_UKRAINA_LONG
STR_REFIT_LV_URAL
STR_REFIT_LV_UZ_ARENA_2000
STR_REFIT_LV_UZ_CAPITAL_EXPRESS
STR_REFIT_LV_UZ_CAPITAL_EXPRESS_LONG
STR_REFIT_LV_VOLGA
STR_REFIT_LV_VORONEZH
STR_REFIT_LV_YAROSLAVL
STR_REFIT_LV_YOUTH
STR_REFIT_LV_YOUTH_LONG

*/
// end
 /// action
// --- ограничение скорости по окончанию установленного срока службы ---
// ограничиваем скорость через 25 лет работы 120 --> 110
switch (FEAT_TRAINS, SELF, speed_after25_120to110,
  age_in_days >= (25*365+5))
{
1: return 110;
  return 120;
}
// ограничиваем скорость через 25 лет работы 120 --> 100
switch (FEAT_TRAINS, SELF, speed_after25_120to100,
  age_in_days >= (25*365+5))
{
1: return 100;
  return 120;
}
// ограничиваем скорость через 30 лет работы 130 --> 110
switch (FEAT_TRAINS, SELF, speed_after30_130to110,
  age_in_days >= (30*365+8))
{
1: return 110;
  return 130;
}
// ограничиваем скорость через 30 лет работы 130 --> 100
switch (FEAT_TRAINS, SELF, speed_after30_130to100,
  age_in_days >= (30*365+8))
{
1: return 100;
  return 130;
}
// ограничиваем скорость через 40 лет работы 130 --> 110
switch (FEAT_TRAINS, SELF, speed_after40_130to110,
  age_in_days >= (40*365+10))
{
1: return 110;
  return 130;
}
// end
// модельки
 /// dummy
spriteset (dummy_sprites, "src/dummy/empty.png")
{
[0, 0, 1, 1, 0, 0, CROP]
}
spriteset (dummy_sprites_big, "src/dummy/flag.png")
{
[0, 0, 20, 20, -10, -13, CROP]
}
spriteset (icon_sprites_15ac , "src/dummy/15ac.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_15ac_15dc , "src/dummy/15ac_15dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_15dc , "src/dummy/15dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_aac_15dc , "src/dummy/aac_15dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_aac_3dc , "src/dummy/aac_dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_aac_ddc , "src/dummy/aac_ddc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_25ac , "src/dummy/ac.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_25ac_15dc , "src/dummy/ac_15dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_25ac_3dc , "src/dummy/ac_dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_25ac_ddc , "src/dummy/ac_ddc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_3dc , "src/dummy/dc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
spriteset (icon_sprites_ddc , "src/dummy/ddc.png")
{
[0, 0, 10, 16, -10, -12, CROP]
}
// Шаблон для dummy, задаём разный length
// Определение dummy
item (FEAT_TRAINS, dummy1, 116)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 1;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy2, 117)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 2;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy3, 118)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 3;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy4, 119)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 4;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy5, 120)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 5;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy6, 121)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 6;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy7, 122)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 7;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
item (FEAT_TRAINS, dummy8, 123)
{
property
{
climates_available: NO_CLIMATE;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT);
 model_life: VEHICLE_NEVER_EXPIRES;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
 track_type: (60 < 100 ? T_R0 : 60 < 140 ? T_R1 : T_R2);
 length: 8;
 running_cost_factor: 0;
 cost_factor: 0;
}
graphics
{
default: dummy_sprites;
}
}
/// align
spriteset (align_3_sprites, "src/align/s3.png")
{
s3_template(0, 0, 0)
}
spriteset (align_4_sprites, "src/align/s4.png")
{
s4_template(0, 0, 0)
}
spriteset (align_5_sprites, "src/align/s5.png")
{
s5_template(0, 0, 0)
}
spriteset (align_6_sprites, "src/align/s6.png")
{
s6_template(0, 0, 0)
}
spriteset (align_7_sprites, "src/align/s7.png")
{
s7_template(0, 0, 0)
}
spriteset (align_8_sprites, "src/align/s8.png")
{
s8_template(0, 0, 0)
}
spriteset (align_9_sprites, "src/align/s9.png")
{
s9_template(0, 0, 0)
}
spriteset (align_10_sprites, "src/align/s10.png")
{
s10_template(0, 0, 0)
}
spriteset (align_11_sprites, "src/align/s11.png")
{
s11_template(0, 0, 0)
}
spriteset (align_12_sprites, "src/align/s12.png")
{
s12_template(0, 0, 0)
}
spriteset (align_13_sprites, "src/align/s13.png")
{
s13_template(0, 0, 0)
}
spriteset (align_14_sprites, "src/align/s14.png")
{
s14_template(0, 0, 0)
}
spriteset (align_15_sprites, "src/align/s15.png")
{
s15_template(0, 0, 0)
}
spriteset (align_16_sprites, "src/align/s16.png")
{
s16_template(0, 0, 0)
}
spriteset (align_17_sprites, "src/align/s17.png")
{
s17_template(0, 0, 0)
}
// #define IMAGEFILE "src/align/templates/cargowagon.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/cargowagon0.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/cargowagon1.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/cargowagon2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/cargowagon2m.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/cargowagon3.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/cargowagon4.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/diesel-middle.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/diesel.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/diesel2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/electric1-1_sim.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/electric1-2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/electric1-2_sim.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/electric2-2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/electric2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/electric2x2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/emu_head_motor1.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/emu_motor1.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/emu_motor1_middle.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/emu_motor1_nd.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/emu_motor2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/icons.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_car.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_car_nd.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head_middle.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head_middle_sp.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head_middle_sp2.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head_single.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head_single_middle.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/mu_head_single_sim.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/steamer.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/wagon-boxcar.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/wagon-boxcarroof.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/wagon-flatbed.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/wagon-tanker.png" #undef IMAGEFILE
// #define IMAGEFILE "src/align/templates/wagon.png" #undef IMAGEFILE
// end
 /// graphics definition
// Определение спрайта меню покупки
// Паровоз без фонарей
// Паровоз с 1 фонарём
// Паровоз
// Тендер
// Бустер
// 1-о секционный тепловоз несимметричный
// 2-х секционный тепловоз или 1-о секционный тепловоз несимметричный без фонарей сзади
// 2-х секционный тепловоз без прожектора или 1-о секционный тепловоз несимметричный без фонарей сзади
// 1-осекционный электровоз с 1 пантографом симметричный
// 1-осекционный электровоз с 2 пантографами симметричный
// 1-осекционный электровоз с 2 пантографами несимметричный
// Формат имени - фонари (d - выключены, lb - буферные, lmb - все, lm - верхний), пантографы (down, 1, 2, all). Варианты, которые не первые, не требуют рандомизации
// 1-осекционный электровоз с 2 пантографами несимметричный, поднят только второй, гашением габаритов при эксплуатации после моторного думпкара
// Так как vehicle_is_powered и vehicle_is_not_powered не определён для частей ARV кроме первой, для правой
// секции проверка наличия мощости идёт через var 61 (FE бит 6)
// 2-хсекционный электровоз с 2 пантографами
// 2-хсекционный электровоз с 1 пантографом
// Бустер с 1 пантографом
// 2-хсекционный электровоз с 3 пантографами и дизелем
// Вагоны пассажирские. 2 вида (погрузка/в пути) и отдельный вид последнего вагона
// Вагоны пассажирские 14 шаблона унифицированные. открытые двери и фонари последнего вагона унифицированы
spriteset (doors_sprites_left, "src/coach/doors.png")
{
s14_template(32, 40, 0)
}
spriteset (doors_sprites_right, "src/coach/doors.png")
{
s14_r_template(32, 40, 0)
}
spriteset (doors_dummy_sprites, "src/coach/doors.png") // TODO Разобраться, почему не использовать просто dummy_sprites, ведь подложкой являются не двери, а задние стенки
{
s14_template(32, 107, 0)
}
spriteset (backlights_sprites_left, "src/coach/doors.png")
{
s14_template(32, 174, 0)
}
spriteset (backlights_sprites_right, "src/coach/doors.png")
{
s14_r_template(32, 174, 0)
}
spritegroup doors_sprites_asm_left_front
{
loading: [doors_sprites_left];
   loaded: [doors_dummy_sprites];
}
spritegroup doors_sprites_asm_right_front
{
loading: [doors_sprites_right];
   loaded: [doors_dummy_sprites];
}
switch (FEAT_TRAINS, SELF, doors_sprites_asm_front, random_bits & 1)
{
0: doors_sprites_asm_left_front;
     doors_sprites_asm_right_front;
}
switch (FEAT_TRAINS, SELF, doors_sprites_front,
  STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100))
{ doors_sprites_asm_front; }
switch (FEAT_TRAINS, SELF, backlights_sprites_asm_front, random_bits & 1)
{
0: backlights_sprites_left;
     backlights_sprites_right;
}
switch (FEAT_TRAINS, SELF, backlights_sprites_asm_front2, position_in_consist_from_end == 1)
{
1: backlights_sprites_asm_front;
     doors_dummy_sprites;
}
switch (FEAT_TRAINS, SELF, backlights_sprites_front,
  STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100))
{ backlights_sprites_asm_front2; }
// Полувагоны, платформы.
// шаблон пустого вагона
// шаблон груза, 2 вида загруженности
// шаблон груза, 1 вид загруженности
// шаблон цистерны
// шаблон рамы
// шаблон 2-х слойного вагона.
// шаблон 2-х слойного симметричного вагона с фонарями.
// шаблон 2-х слойного крытого вагона.
// шаблон 2-х слойного вагона рефсекции.
// Рефсекция обращается только целиком, bitmask(TRIGGER_VEHICLE_SERVICE) не является частью шаблона
// шаблон дизеля
// шаблон 2-х слойного крытого вагона с отдельным слоем "покраски" (крыши).
// шаблон груза
// end
 /// graphics definition - mu ver 2
// Для всех ЭМВПС если голова неверная, то тяги нет по определению - проверка неверной головы не предполагается
// головной односторонний несимметричный
// головной односторонний несимметричный c различной графикой на постоянном
// и переменном токе
// головной односторонний несимметричный с промежуточной головой
// головной односторонний несимметричный с промежуточной головой
// (Промежуточные головы в пути отличаются от вида в депо)
// головной односторонний несимметричный с промежуточной головой
// c различной графикой на постоянном и переменном токе
// (Промежуточные головы в пути отличаются от вида в депо)
// головной односторонний несимметричный с промежуточной головой
// c различной графикой на постоянном и переменном токе, На переменке оба пантографа
// (Промежуточные головы в пути отличаются от вида в депо)
// головной двухсторонний несимметричный
// головной двухсторонний несимметричный с промежуточной головой
// прицепной мотоный
// прицепной мотоный без дверей
// прицепной мотоный (с эксплуатацией не под током)
// прицепной мотоный c двумя пантографами, работает один
// прицепной немоторный
// прицепной немоторный без дверей
// end
 /// graphics definition - containers
// шаблон 2 контейнера по 2 варианта
// шаблон 2 контейнера по 3 варианта
// шаблон 2 контейнера по 4 варианта
// шаблон 2 контейнера по 5 вариантов
// шаблон 2 контейнера 20+40 по 2 варианта
// шаблон 2 контейнера60 по 3 варианта
// шаблон 2 контейнера60 по 4 варианта
// end
// присоединения
// Список средних секций
// некорректные составы (собранные из разных сетов)
switch (FEAT_TRAINS, PARENT, wrong_consist_start_stop,
  (hasbit(bitmask_consist_info, 3)))
{
1: return string(STR_START_STOP_WRONG_CONSIST);
     return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, PARENT, any_start_stop_mid,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m))])
{
1: return string(STR_START_STOP_MIDDLE_MUST_NOT_BE_LAST);
     wrong_consist_start_stop;
}
// некорректные грузы
switch (FEAT_TRAINS, PARENT, any_start_stop,
  (hasbit(bitmask_consist_info, 2)))
{
1: return string(STR_START_STOP_INADMISSIBLE_CARGO);
     return any_start_stop_mid;
}
switch (FEAT_TRAINS, PARENT, double_can_attach_wagon,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   STORE_TEMP (var[0x61, 0, 0xFFFF, 0xC6], 3) ])
{ return CB_RESULT_ATTACH_ALLOW; }
// Специальная проверка для управления присоединением 3ТЭ10М, 3ТЭ10У, 4ТЭ10С, 3М62У и других со средней секцией
switch (FEAT_TRAINS, PARENT, _4te10s_buster_required,
[ STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) ])
{
1: double_can_attach_wagon;
     return string(STR_CAN_ATTACH_MISS_MIDDLE_UNIT);
}
switch (FEAT_TRAINS, PARENT, other_can_attach_wagon,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ( ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)) +
     ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) * 2)) ])
{
1: return string(STR_CAN_ATTACH_NO_AFTER_MIDDLE_UNIT);
  2: _4te10s_buster_required;
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3te10m_can_attach_wagon_m,
[ STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   STORE_TEMP (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)), 3),
   STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) &&
   (!LOAD_TEMP(3)) ])
{
0: return string(STR_CAN_ATTACH_NO_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3te10m_can_attach_wagon_h,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)) && (var[0x61, 0, 0xFFFF, 0xC6] != _3te10m_m) && (var[0x61, 0, 0xFFFF, 0xC6] != _3te10u_m) ])
{
1: return string(STR_CAN_ATTACH_NO_AFTER_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3te10u_can_attach_wagon_m,
[ STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   STORE_TEMP (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)), 3),
   STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) &&
   (!LOAD_TEMP(3)) ])
{
0: return string(STR_CAN_ATTACH_NO_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3te10u_can_attach_wagon_h,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)) && (var[0x61, 0, 0xFFFF, 0xC6] != _3te10u_m) && (var[0x61, 0, 0xFFFF, 0xC6] != _3te10m_m) ])
{
1: return string(STR_CAN_ATTACH_NO_AFTER_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_4te10s_can_attach_wagon_m,
[ STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   STORE_TEMP (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)), 3),
   STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m)) &&
   (!LOAD_TEMP(3)) ])
{
0: return string(STR_CAN_ATTACH_NO_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, _4te10s_buster_required_0,
[ STORE_TEMP(var[0x61, 0, 0xFFFF, 0xC6], 4),
   STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   (LOAD_TEMP(4) == _4te10s_m) ||
   ((LOAD_TEMP(4) == _4te10s) && (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m)) ||
   ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m)) ||
   ((LOAD_TEMP(4) != _4te10s) && (LOAD_TEMP(4) != _4te10s_m)) ||
   ((LOAD_TEMP(4) != _4te10s_m)) ])
{
1: double_can_attach_wagon;
     return string(STR_CAN_ATTACH_MISS_MIDDLE_UNIT);
}
switch (FEAT_TRAINS, PARENT, m_4te10s_can_attach_wagon_h,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)) && (var[0x61, 0, 0xFFFF, 0xC6] != _4te10s_m) ])
{
1: return string(STR_CAN_ATTACH_NO_AFTER_MIDDLE_UNIT);
     return _4te10s_buster_required_0;
}
switch (FEAT_TRAINS, PARENT, m_3m62u_can_attach_wagon_m,
[ STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   STORE_TEMP (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)), 3),
   STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) ||
    (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) &&
   (!LOAD_TEMP(3)) ])
{
0: return string(STR_CAN_ATTACH_NO_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3m62u_can_attach_wagon_h,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)) && (var[0x61, 0, 0xFFFF, 0xC6] != _3m62u_m) ])
{
1: return string(STR_CAN_ATTACH_NO_AFTER_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3te25k2m_can_attach_wagon_m,
[ STORE_TEMP(num_vehs_in_consist-4, 0x10F),
   STORE_TEMP (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)), 3),
   STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) &&
   (!LOAD_TEMP(3)) ])
{
0: return string(STR_CAN_ATTACH_NO_MIDDLE_UNIT);
     double_can_attach_wagon;
}
switch (FEAT_TRAINS, PARENT, m_3te25k2m_can_attach_wagon_h,
[ STORE_TEMP(num_vehs_in_consist-2, 0x10F),
   ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m)) && (var[0x61, 0, 0xFFFF, 0xC6] != _3te25k2m_m) ])
{
1: return string(STR_CAN_ATTACH_NO_AFTER_MIDDLE_UNIT);
     double_can_attach_wagon;
}
// choose the block to use
switch (FEAT_TRAINS, SELF, any_can_attach_wagon,
[ STORE_TEMP(vehicle_type_id, 5),
   vehicle_type_id])
{
_2te10m: m_3te10m_can_attach_wagon_h;
    _3te10m: m_3te10m_can_attach_wagon_h;
  _3te10m_m: m_3te10m_can_attach_wagon_m;
    _2te10u: m_3te10u_can_attach_wagon_h;
    _3te10u: m_3te10u_can_attach_wagon_h;
  _3te10u_m: m_3te10u_can_attach_wagon_m;
    _2te10s: m_4te10s_can_attach_wagon_h;
    _4te10s: m_4te10s_can_attach_wagon_h;
  _4te10s_m: m_4te10s_can_attach_wagon_m;
    _2m62u: m_3m62u_can_attach_wagon_h;
    _3m62u: m_3m62u_can_attach_wagon_h;
  _3m62u_m: m_3m62u_can_attach_wagon_m;
    _3te25k2m: m_3te25k2m_can_attach_wagon_h;
  _3te25k2m_m: m_3te25k2m_can_attach_wagon_m;
               other_can_attach_wagon;
}
// тепловозы
// 2te10
spriteset (_2te10_purchase_graphics_ico, "src/diesel/2te10.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10_purchase_graphics_noico, "src/diesel/2te10.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10_purchase_sprites, enable_icons)
{
1: _2te10_purchase_graphics_ico;
 _2te10_purchase_graphics_noico;
}
spriteset (_2te10_v1_notpowered_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te10_v1_loading_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te10_v1_traveling_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te10_v1_normal_sprites_left
{
loading: _2te10_v1_loading_sprites_left;
 loaded: _2te10_v1_traveling_sprites_left;
}
spriteset (_2te10_v1_sprites_right, "src/diesel/2te10.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10_v1_normal_sprites_left;
 _2te10_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10_v1_sprites_left2;
 1: _2te10_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10_v1_sprites_left1;
 128: _2te10_v1_sprites_left1;
}
spriteset (_2te10_v2_notpowered_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 241, 0)
}
spriteset (_2te10_v2_loading_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (_2te10_v2_traveling_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup _2te10_v2_normal_sprites_left
{
loading: _2te10_v2_loading_sprites_left;
 loaded: _2te10_v2_traveling_sprites_left;
}
spriteset (_2te10_v2_sprites_right, "src/diesel/2te10.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10_v2_normal_sprites_left;
 _2te10_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10_v2_sprites_left2;
 1: _2te10_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10_v2_sprites_left1;
 128: _2te10_v2_sprites_left1;
}
spriteset (_2te10_v3_notpowered_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 442, 0)
}
spriteset (_2te10_v3_loading_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 442 +67, 0)
}
spriteset (_2te10_v3_traveling_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 442 +134, 0)
}
spritegroup _2te10_v3_normal_sprites_left
{
loading: _2te10_v3_loading_sprites_left;
 loaded: _2te10_v3_traveling_sprites_left;
}
spriteset (_2te10_v3_sprites_right, "src/diesel/2te10.png")
{
s11_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10_v3_normal_sprites_left;
 _2te10_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10_v3_sprites_left2;
 1: _2te10_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10_v3_sprites_left1;
 128: _2te10_v3_sprites_left1;
}
spriteset (_2te10_aGREAT_CHANGE_YEAR_notpowered_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 643, 0)
}
spriteset (_2te10_aGREAT_CHANGE_YEAR_loading_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 643 +67, 0)
}
spriteset (_2te10_aGREAT_CHANGE_YEAR_traveling_sprites_left, "src/diesel/2te10.png")
{
s11_template(32, 643 +134, 0)
}
spritegroup _2te10_aGREAT_CHANGE_YEAR_normal_sprites_left
{
loading: _2te10_aGREAT_CHANGE_YEAR_loading_sprites_left;
 loaded: _2te10_aGREAT_CHANGE_YEAR_traveling_sprites_left;
}
spriteset (_2te10_aGREAT_CHANGE_YEAR_sprites_right, "src/diesel/2te10.png")
{
s11_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2te10_aGREAT_CHANGE_YEAR_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10_aGREAT_CHANGE_YEAR_normal_sprites_left;
 _2te10_aGREAT_CHANGE_YEAR_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10_aGREAT_CHANGE_YEAR_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10_aGREAT_CHANGE_YEAR_sprites_left2;
 1: _2te10_aGREAT_CHANGE_YEAR_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10_aGREAT_CHANGE_YEAR_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10_aGREAT_CHANGE_YEAR_sprites_left1;
 128: _2te10_aGREAT_CHANGE_YEAR_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10_bGREAT_CHANGE_YEAR_sprites_left,
  cargo_subtype)
{
0: _2te10_v1_sprites_left;
  1: _2te10_v2_sprites_left;
  2: _2te10_v3_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10_sprites_left,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10_bGREAT_CHANGE_YEAR_sprites_left;
     _2te10_aGREAT_CHANGE_YEAR_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te10_bGREAT_CHANGE_YEAR_sprites_right,
  cargo_subtype)
{
0: _2te10_v1_sprites_right;
  1: _2te10_v2_sprites_right;
  2: _2te10_v3_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10_sprites_right,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10_bGREAT_CHANGE_YEAR_sprites_right;
     _2te10_aGREAT_CHANGE_YEAR_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10_sprites_start, position_in_articulated_veh)
{
0: _2te10_sprites_left;
 2: _2te10_sprites_right;
 4: _2te10_sprites_left;
 6: _2te10_sprites_right;
 8: _2te10_sprites_left;
 10: _2te10_sprites_right;
 12: _2te10_sprites_left;
 _2te10_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10_bGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_63);
 2: return string(STR_REFIT_TTD_96);
 return string(STR_REFIT_TTD_93);
}
switch (FEAT_TRAINS, SELF, _2te10_cargo_subtype_text, ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10_bGREAT_CHANGE_YEAR_cargo_subtype_text;
 return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, SELF, _2te10_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10_create_effect_sprites_start, position_in_articulated_veh)
{
0: _2te10_create_effect_sprites_left;
 2: _2te10_create_effect_sprites_right;
 4: _2te10_create_effect_sprites_left;
 6: _2te10_create_effect_sprites_right;
 8: _2te10_create_effect_sprites_left;
 10: _2te10_create_effect_sprites_right;
 12: _2te10_create_effect_sprites_left;
 _2te10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, _2te10_articulated_part, extra_callback_info1)
{
1: return dummy3;
 2: return _2te10;
 3: return dummy3;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, _2te10_running_cost_factor,
[ STORE_TEMP(2 * 278, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(2 * 98, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2 * 68, 4), // ТО
   STORE_TEMP(2 * 5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(2 * 129, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 2 * 488
switch (FEAT_TRAINS, SELF, _2te10_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1963 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10_additional_text, current_year <= 1963)
{
1: _2te10_additional_text_hidden;
 _2te10_additional_text_shown;
}
item (FEAT_TRAINS, _2te10, 149)
{
property
{
name: string(STR_NAME_2TE10);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1960 - delta_age, 1, 1);
 model_life: 1963 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1960 -1963 -2 < retire_early_default ? 1963 -1960 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1960 -1963 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1960 -1963 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 2 * 50 > 255 ? 255 : 2 * 50;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2 * 2300 * 0.9865);
 weight: (2 * 129) ton;
 tractive_effort_coefficient: (((2 * 375.1))/((2 * 129))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10_additional_text;
        articulated_part: _2te10_articulated_part;
    bitmask_vehicle_info: _2te10_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10_create_effect_sprites_start;
                 default: _2te10_sprites;
                purchase: _2te10_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10_running_cost_factor;
                   speed: _2te10_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10)
{
property
{
name: string(STR_LONGNAME_2TE10);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10l
spriteset (_2te10l_v1_purchase_graphics_ico, "src/diesel/2te10l-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10l_v1_purchase_graphics_noico, "src/diesel/2te10l-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v1_purchase_sprites, enable_icons)
{
1: _2te10l_v1_purchase_graphics_ico;
 _2te10l_v1_purchase_graphics_noico;
}
spriteset (_2te10l_v1_notpowered_sprites_left, "src/diesel/2te10l-pre.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10l_v1_loading_sprites_left, "src/diesel/2te10l-pre.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10l_v1_traveling_sprites_left, "src/diesel/2te10l-pre.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10l_v1_normal_sprites_left
{
loading: _2te10l_v1_loading_sprites_left;
 loaded: _2te10l_v1_traveling_sprites_left;
}
spriteset (_2te10l_v1_sprites_right, "src/diesel/2te10l-pre.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10l_v1_normal_sprites_left;
 _2te10l_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10l_v1_sprites_left2;
 1: _2te10l_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10l_v1_sprites_left1;
 128: _2te10l_v1_sprites_left1;
}
spriteset (_2te10l_v2_purchase_graphics_ico, "src/diesel/2te10l.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10l_v2_purchase_graphics_noico, "src/diesel/2te10l.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v2_purchase_sprites, enable_icons)
{
1: _2te10l_v2_purchase_graphics_ico;
 _2te10l_v2_purchase_graphics_noico;
}
spriteset (_2te10l_v3_purchase_graphics_ico, "src/diesel/2te10l.png")
{
new_purchase_template(100, 0)
}
spriteset (_2te10l_v3_purchase_graphics_noico, "src/diesel/2te10l.png")
{
new_purchase_template_noico(100, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v3_purchase_sprites, enable_icons)
{
1: _2te10l_v3_purchase_graphics_ico;
 _2te10l_v3_purchase_graphics_noico;
}
spriteset (_2te10l_v2_notpowered_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10l_v2_loading_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10l_v2_traveling_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10l_v2_normal_sprites_left
{
loading: _2te10l_v2_loading_sprites_left;
 loaded: _2te10l_v2_traveling_sprites_left;
}
spriteset (_2te10l_v2_sprites_right, "src/diesel/2te10l.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10l_v2_normal_sprites_left;
 _2te10l_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10l_v2_sprites_left2;
 1: _2te10l_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10l_v2_sprites_left1;
 128: _2te10l_v2_sprites_left1;
}
spriteset (_2te10l_v3_notpowered_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 241, 0)
}
spriteset (_2te10l_v3_loading_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2te10l_v3_traveling_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2te10l_v3_normal_sprites_left
{
loading: _2te10l_v3_loading_sprites_left;
 loaded: _2te10l_v3_traveling_sprites_left;
}
spriteset (_2te10l_v3_sprites_right, "src/diesel/2te10l.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10l_v3_normal_sprites_left;
 _2te10l_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10l_v3_sprites_left2;
 1: _2te10l_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10l_v3_sprites_left1;
 128: _2te10l_v3_sprites_left1;
}
spriteset (_2te10l_v4_notpowered_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 442, 0)
}
spriteset (_2te10l_v4_loading_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2te10l_v4_traveling_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2te10l_v4_normal_sprites_left
{
loading: _2te10l_v4_loading_sprites_left;
 loaded: _2te10l_v4_traveling_sprites_left;
}
spriteset (_2te10l_v4_sprites_right, "src/diesel/2te10l.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10l_v4_normal_sprites_left;
 _2te10l_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10l_v4_sprites_left2;
 1: _2te10l_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10l_v4_sprites_left1;
 128: _2te10l_v4_sprites_left1;
}
spriteset (_2te10l_v5_notpowered_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 643, 0)
}
spriteset (_2te10l_v5_loading_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2te10l_v5_traveling_sprites_left, "src/diesel/2te10l.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2te10l_v5_normal_sprites_left
{
loading: _2te10l_v5_loading_sprites_left;
 loaded: _2te10l_v5_traveling_sprites_left;
}
spriteset (_2te10l_v5_sprites_right, "src/diesel/2te10l.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2te10l_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10l_v5_normal_sprites_left;
 _2te10l_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10l_v5_sprites_left2;
 1: _2te10l_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10l_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10l_v5_sprites_left1;
 128: _2te10l_v5_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, _2te10l_purchase_sprites, (current_year >= 1963) + (current_year >= 1972))
{
0: _2te10l_v1_purchase_sprites;
 1: _2te10l_v2_purchase_sprites;
 _2te10l_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_left_base,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_v2_sprites_left;
     _2te10l_v4_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_left_green,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_v3_sprites_left;
     _2te10l_v4_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_left_alt,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_v3_sprites_left;
     _2te10l_v5_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_sprites_left,
  cargo_subtype)
{
0: _2te10l_sprites_left_base;
            1: _2te10l_sprites_left_alt;
   15: _2te10l_sprites_left_green;
               align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_right_base,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_v2_sprites_right;
     _2te10l_v4_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_right_green,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_v3_sprites_right;
     _2te10l_v4_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_right_alt,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_v3_sprites_right;
     _2te10l_v5_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_sprites_right,
  cargo_subtype)
{
0: _2te10l_sprites_right_base;
            1: _2te10l_sprites_right_alt;
   15: _2te10l_sprites_right_green;
               align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_left, build_year < 1963)
{
1: _2te10l_v1_sprites_left;
 _2te10l_a1963_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_right, build_year < 1963)
{
1: _2te10l_v1_sprites_right;
 _2te10l_a1963_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) || (position_in_consist == 0) ])
{
1: _2te10l_sprites_left;
 _2te10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10l) + 1) % 2))
{
1: _2te10l_sprites_2l;
 _2te10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_old;
 _2te10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_16;
 _2te10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_14;
 _2te10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_12;
 _2te10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_10;
 _2te10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_8;
 _2te10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_6;
 _2te10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_sprites_4;
 _2te10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10l_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10l_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10l), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10l_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10l_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10l_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_bGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_aGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_cargo_subtype_text, ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: _2te10l_a1963_bGREAT_CHANGE_YEAR_cargo_subtype_text;
 _2te10l_a1963_aGREAT_CHANGE_YEAR_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te10l_cargo_subtype_text, build_year < 1963)
{
1: return string(STR_REFIT_PREPRODUCTION);
 _2te10l_a1963_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) || (position_in_consist == 0) ])
{
1: _2te10l_create_effect_sprites_left;
 _2te10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10l) + 1) % 2))
{
1: _2te10l_create_effect_sprites_2l;
 _2te10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_old;
 _2te10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_16;
 _2te10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_14;
 _2te10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_12;
 _2te10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_10;
 _2te10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_8;
 _2te10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_6;
 _2te10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10l_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10l) ])
{
1: _2te10l_create_effect_sprites_4;
 _2te10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10l_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10l_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10l), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10l_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10l), 0), STORE_TEMP(vehicle_type_id == _2te10l, 1) ])
{ _2te10l_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10l_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10l_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10l_running_cost_factor,
[ STORE_TEMP(272, 0), // Моторы
   STORE_TEMP(38, 1), // Бригада
   STORE_TEMP(96, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(67, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(128, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 478
switch (FEAT_TRAINS, SELF, _2te10l_b1963_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1961 << 16), 0x101), STORE_TEMP(1962 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10l_b1963_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10l_b1963_additional_text, current_year <= 1962)
{
1: _2te10l_b1963_additional_text_hidden;
 _2te10l_b1963_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1963 << 16), 0x101), STORE_TEMP(1977 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10l_a1963_additional_text, current_year <= 1977)
{
1: _2te10l_a1963_additional_text_hidden;
 _2te10l_a1963_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, _2te10l_additional_text, current_year >= 1963)
{
0: _2te10l_b1963_additional_text;
 _2te10l_a1963_additional_text;
}
item (FEAT_TRAINS, _2te10l, 154)
{
property
{
name: string(STR_NAME_2TE10L);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1961 - delta_age, 1, 1);
 model_life: 1977 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1961 -1977 -2 < retire_early_default ? 1977 -1961 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1961 -1977 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1961 -1977 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2310 * 0.9865);
 weight: (128) ton;
 tractive_effort_coefficient: (((375.1))/((128))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10l_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10l_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10l_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10l_create_effect_sprites_start;
                 default: _2te10l_sprites;
                purchase: _2te10l_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10l_running_cost_factor;
                   speed: _2te10l_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10l)
{
property
{
name: string(STR_LONGNAME_2TE10L);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10l)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10l)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10l)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10l)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10l)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10mk
spriteset (_2te10mk_purchase_graphics_ico, "src/diesel/2te10mk.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10mk_purchase_graphics_noico, "src/diesel/2te10mk.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10mk_purchase_sprites, enable_icons)
{
1: _2te10mk_purchase_graphics_ico;
 _2te10mk_purchase_graphics_noico;
}
spriteset (_2te10mk_v1_notpowered_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10mk_v1_loading_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10mk_v1_traveling_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10mk_v1_normal_sprites_left
{
loading: _2te10mk_v1_loading_sprites_left;
 loaded: _2te10mk_v1_traveling_sprites_left;
}
spriteset (_2te10mk_v1_sprites_right, "src/diesel/2te10mk.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10mk_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10mk_v1_normal_sprites_left;
 _2te10mk_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10mk_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10mk_v1_sprites_left2;
 1: _2te10mk_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10mk_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10mk_v1_sprites_left1;
 128: _2te10mk_v1_sprites_left1;
}
spriteset (_2te10mk_v2_notpowered_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 241, 0)
}
spriteset (_2te10mk_v2_loading_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2te10mk_v2_traveling_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2te10mk_v2_normal_sprites_left
{
loading: _2te10mk_v2_loading_sprites_left;
 loaded: _2te10mk_v2_traveling_sprites_left;
}
spriteset (_2te10mk_v2_sprites_right, "src/diesel/2te10mk.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10mk_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10mk_v2_normal_sprites_left;
 _2te10mk_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10mk_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10mk_v2_sprites_left2;
 1: _2te10mk_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10mk_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10mk_v2_sprites_left1;
 128: _2te10mk_v2_sprites_left1;
}
spriteset (_2te10mk_v3_notpowered_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 442, 0)
}
spriteset (_2te10mk_v3_loading_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2te10mk_v3_traveling_sprites_left, "src/diesel/2te10mk.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2te10mk_v3_normal_sprites_left
{
loading: _2te10mk_v3_loading_sprites_left;
 loaded: _2te10mk_v3_traveling_sprites_left;
}
spriteset (_2te10mk_v3_sprites_right, "src/diesel/2te10mk.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10mk_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10mk_v3_normal_sprites_left;
 _2te10mk_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10mk_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10mk_v3_sprites_left2;
 1: _2te10mk_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10mk_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10mk_v3_sprites_left1;
 128: _2te10mk_v3_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_left,
  cargo_subtype)
{
0: _2te10mk_v1_sprites_left;
  1: _2te10mk_v2_sprites_left;
  2: _2te10mk_v3_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_right,
  cargo_subtype)
{
0: _2te10mk_v1_sprites_right;
  1: _2te10mk_v2_sprites_right;
  2: _2te10mk_v3_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) || (position_in_consist == 0) ])
{
1: _2te10mk_sprites_left;
 _2te10mk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10mk) + 1) % 2))
{
1: _2te10mk_sprites_2l;
 _2te10mk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_old;
 _2te10mk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_16;
 _2te10mk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_14;
 _2te10mk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_12;
 _2te10mk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_10;
 _2te10mk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_8;
 _2te10mk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_6;
 _2te10mk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_sprites_4;
 _2te10mk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10mk_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10mk_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10mk), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10mk_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10mk_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10mk_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10mk_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) || (position_in_consist == 0) ])
{
1: _2te10mk_create_effect_sprites_left;
 _2te10mk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10mk) + 1) % 2))
{
1: _2te10mk_create_effect_sprites_2l;
 _2te10mk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_old;
 _2te10mk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_16;
 _2te10mk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_14;
 _2te10mk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_12;
 _2te10mk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_10;
 _2te10mk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_8;
 _2te10mk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_6;
 _2te10mk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10mk_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10mk) ])
{
1: _2te10mk_create_effect_sprites_4;
 _2te10mk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10mk_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10mk_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10mk), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10mk_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10mk), 0), STORE_TEMP(vehicle_type_id == _2te10mk, 1) ])
{ _2te10mk_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10mk_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10mk_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10mk_running_cost_factor,
[ STORE_TEMP(276, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(97, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(68, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 484
switch (FEAT_TRAINS, SELF, _2te10mk_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1997 << 16), 0x101), STORE_TEMP(2001 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10mk_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10mk_additional_text, current_year <= 2001)
{
1: _2te10mk_additional_text_hidden;
 _2te10mk_additional_text_shown;
}
item (FEAT_TRAINS, _2te10mk, 156)
{
property
{
name: string(STR_NAME_2TE10MK);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1997 - delta_age, 1, 1);
 model_life: 2001 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1997 -2001 -2 < retire_early_default ? 2001 -1997 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1997 -2001 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1997 -2001 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2290 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10m;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10mk_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10mk_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10mk_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10mk_create_effect_sprites_start;
                 default: _2te10mk_sprites;
                purchase: _2te10mk_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10mk_running_cost_factor;
                   speed: _2te10mk_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10mk)
{
property
{
name: string(STR_LONGNAME_2TE10MK);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10mk)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10mk)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10mk)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10mk)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10mk)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10ut
spriteset (_2te10ut_purchase_graphics_ico, "src/diesel/2te10ut.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10ut_purchase_graphics_noico, "src/diesel/2te10ut.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10ut_purchase_sprites, enable_icons)
{
1: _2te10ut_purchase_graphics_ico;
 _2te10ut_purchase_graphics_noico;
}
spriteset (_2te10ut_v1_notpowered_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10ut_v1_loading_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10ut_v1_traveling_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10ut_v1_normal_sprites_left
{
loading: _2te10ut_v1_loading_sprites_left;
 loaded: _2te10ut_v1_traveling_sprites_left;
}
spriteset (_2te10ut_v1_sprites_right, "src/diesel/2te10ut.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10ut_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10ut_v1_normal_sprites_left;
 _2te10ut_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10ut_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10ut_v1_sprites_left2;
 1: _2te10ut_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10ut_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10ut_v1_sprites_left1;
 128: _2te10ut_v1_sprites_left1;
}
spriteset (_2te10ut_v2_notpowered_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 241, 0)
}
spriteset (_2te10ut_v2_loading_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2te10ut_v2_traveling_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2te10ut_v2_normal_sprites_left
{
loading: _2te10ut_v2_loading_sprites_left;
 loaded: _2te10ut_v2_traveling_sprites_left;
}
spriteset (_2te10ut_v2_sprites_right, "src/diesel/2te10ut.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10ut_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10ut_v2_normal_sprites_left;
 _2te10ut_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10ut_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10ut_v2_sprites_left2;
 1: _2te10ut_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10ut_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10ut_v2_sprites_left1;
 128: _2te10ut_v2_sprites_left1;
}
spriteset (_2te10ut_v3_notpowered_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 442, 0)
}
spriteset (_2te10ut_v3_loading_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2te10ut_v3_traveling_sprites_left, "src/diesel/2te10ut.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2te10ut_v3_normal_sprites_left
{
loading: _2te10ut_v3_loading_sprites_left;
 loaded: _2te10ut_v3_traveling_sprites_left;
}
spriteset (_2te10ut_v3_sprites_right, "src/diesel/2te10ut.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10ut_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10ut_v3_normal_sprites_left;
 _2te10ut_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10ut_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10ut_v3_sprites_left2;
 1: _2te10ut_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10ut_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10ut_v3_sprites_left1;
 128: _2te10ut_v3_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_left,
  cargo_subtype)
{
0: _2te10ut_v1_sprites_left;
  1: _2te10ut_v2_sprites_left;
  2: _2te10ut_v3_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_right,
  cargo_subtype)
{
0: _2te10ut_v1_sprites_right;
  1: _2te10ut_v2_sprites_right;
  2: _2te10ut_v3_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) || (position_in_consist == 0) ])
{
1: _2te10ut_sprites_left;
 _2te10ut_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10ut) + 1) % 2))
{
1: _2te10ut_sprites_2l;
 _2te10ut_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_old;
 _2te10ut_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_16;
 _2te10ut_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_14;
 _2te10ut_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_12;
 _2te10ut_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_10;
 _2te10ut_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_8;
 _2te10ut_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_6;
 _2te10ut_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_sprites_4;
 _2te10ut_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10ut_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10ut_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10ut), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10ut_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10ut_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10ut_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10ut_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_96);
 2: return string(STR_REFIT_TTD_B5);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) || (position_in_consist == 0) ])
{
1: _2te10ut_create_effect_sprites_left;
 _2te10ut_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10ut) + 1) % 2))
{
1: _2te10ut_create_effect_sprites_2l;
 _2te10ut_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_old;
 _2te10ut_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_16;
 _2te10ut_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_14;
 _2te10ut_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_12;
 _2te10ut_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_10;
 _2te10ut_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_8;
 _2te10ut_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_6;
 _2te10ut_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10ut_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10ut) ])
{
1: _2te10ut_create_effect_sprites_4;
 _2te10ut_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10ut_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10ut_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10ut), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10ut_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10ut), 0), STORE_TEMP(vehicle_type_id == _2te10ut, 1) ])
{ _2te10ut_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10ut_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10ut_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10ut_running_cost_factor,
[ STORE_TEMP(279, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(98, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(68, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 489
switch (FEAT_TRAINS, SELF, _2te10ut_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1989 << 16), 0x101), STORE_TEMP(1997 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10ut_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10ut_additional_text, current_year <= 1997)
{
1: _2te10ut_additional_text_hidden;
 _2te10ut_additional_text_shown;
}
item (FEAT_TRAINS, _2te10ut, 158)
{
property
{
name: string(STR_NAME_2TE10UT);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1989 - delta_age, 1, 1);
 model_life: 1997 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1989 -1997 -2 < retire_early_default ? 1997 -1989 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1989 -1997 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1989 -1997 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2280 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((333.0))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10ut_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10ut_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10ut_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10ut_create_effect_sprites_start;
                 default: _2te10ut_sprites;
                purchase: _2te10ut_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _2te10ut_running_cost_factor;
                   speed: _2te10ut_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10ut)
{
property
{
name: string(STR_LONGNAME_2TE10UT);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10ut)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10ut)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10ut)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10ut)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10ut)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10utk
spriteset (_2te10utk_purchase_graphics_ico, "src/diesel/2te10utk.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10utk_purchase_graphics_noico, "src/diesel/2te10utk.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_purchase_sprites, enable_icons)
{
1: _2te10utk_purchase_graphics_ico;
 _2te10utk_purchase_graphics_noico;
}
spriteset (_2te10utk_v1_notpowered_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10utk_v1_loading_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10utk_v1_traveling_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10utk_v1_normal_sprites_left
{
loading: _2te10utk_v1_loading_sprites_left;
 loaded: _2te10utk_v1_traveling_sprites_left;
}
spriteset (_2te10utk_v1_sprites_right, "src/diesel/2te10utk.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10utk_v1_normal_sprites_left;
 _2te10utk_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10utk_v1_sprites_left2;
 1: _2te10utk_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10utk_v1_sprites_left1;
 128: _2te10utk_v1_sprites_left1;
}
spriteset (_2te10utk_v2_notpowered_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 241, 0)
}
spriteset (_2te10utk_v2_loading_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2te10utk_v2_traveling_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2te10utk_v2_normal_sprites_left
{
loading: _2te10utk_v2_loading_sprites_left;
 loaded: _2te10utk_v2_traveling_sprites_left;
}
spriteset (_2te10utk_v2_sprites_right, "src/diesel/2te10utk.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10utk_v2_normal_sprites_left;
 _2te10utk_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10utk_v2_sprites_left2;
 1: _2te10utk_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10utk_v2_sprites_left1;
 128: _2te10utk_v2_sprites_left1;
}
spriteset (_2te10utk_v3_notpowered_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 442, 0)
}
spriteset (_2te10utk_v3_loading_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2te10utk_v3_traveling_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2te10utk_v3_normal_sprites_left
{
loading: _2te10utk_v3_loading_sprites_left;
 loaded: _2te10utk_v3_traveling_sprites_left;
}
spriteset (_2te10utk_v3_sprites_right, "src/diesel/2te10utk.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10utk_v3_normal_sprites_left;
 _2te10utk_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10utk_v3_sprites_left2;
 1: _2te10utk_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10utk_v3_sprites_left1;
 128: _2te10utk_v3_sprites_left1;
}
spriteset (_2te10utk_v4_notpowered_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 643, 0)
}
spriteset (_2te10utk_v4_loading_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2te10utk_v4_traveling_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2te10utk_v4_normal_sprites_left
{
loading: _2te10utk_v4_loading_sprites_left;
 loaded: _2te10utk_v4_traveling_sprites_left;
}
spriteset (_2te10utk_v4_sprites_right, "src/diesel/2te10utk.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10utk_v4_normal_sprites_left;
 _2te10utk_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10utk_v4_sprites_left2;
 1: _2te10utk_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10utk_v4_sprites_left1;
 128: _2te10utk_v4_sprites_left1;
}
spriteset (_2te10utk_v5_notpowered_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 844, 0)
}
spriteset (_2te10utk_v5_loading_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (_2te10utk_v5_traveling_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup _2te10utk_v5_normal_sprites_left
{
loading: _2te10utk_v5_loading_sprites_left;
 loaded: _2te10utk_v5_traveling_sprites_left;
}
spriteset (_2te10utk_v5_sprites_right, "src/diesel/2te10utk.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10utk_v5_normal_sprites_left;
 _2te10utk_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10utk_v5_sprites_left2;
 1: _2te10utk_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10utk_v5_sprites_left1;
 128: _2te10utk_v5_sprites_left1;
}
spriteset (_2te10utk_v6_notpowered_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 1045, 0)
}
spriteset (_2te10utk_v6_loading_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 1045 +67, 0)
}
spriteset (_2te10utk_v6_traveling_sprites_left, "src/diesel/2te10utk.png")
{
s10_template(32, 1045 +134, 0)
}
spritegroup _2te10utk_v6_normal_sprites_left
{
loading: _2te10utk_v6_loading_sprites_left;
 loaded: _2te10utk_v6_traveling_sprites_left;
}
spriteset (_2te10utk_v6_sprites_right, "src/diesel/2te10utk.png")
{
s10_r_template(32, 1045, 0)
}
switch (FEAT_TRAINS, SELF, _2te10utk_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10utk_v6_normal_sprites_left;
 _2te10utk_v6_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10utk_v6_sprites_left2;
 1: _2te10utk_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10utk_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10utk_v6_sprites_left1;
 128: _2te10utk_v6_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_left,
  cargo_subtype)
{
0: _2te10utk_v1_sprites_left;
           1: _2te10utk_v2_sprites_left;
           2: _2te10utk_v3_sprites_left;
           3: _2te10utk_v5_sprites_left;
           4: _2te10utk_v6_sprites_left;
  15: _2te10utk_v4_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_right,
  cargo_subtype)
{
0: _2te10utk_v1_sprites_right;
           1: _2te10utk_v2_sprites_right;
           2: _2te10utk_v3_sprites_right;
           3: _2te10utk_v5_sprites_right;
           4: _2te10utk_v6_sprites_right;
  15: _2te10utk_v4_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) || (position_in_consist == 0) ])
{
1: _2te10utk_sprites_left;
 _2te10utk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10utk) + 1) % 2))
{
1: _2te10utk_sprites_2l;
 _2te10utk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_old;
 _2te10utk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_16;
 _2te10utk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_14;
 _2te10utk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_12;
 _2te10utk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_10;
 _2te10utk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_8;
 _2te10utk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_6;
 _2te10utk_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_sprites_4;
 _2te10utk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10utk_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10utk_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10utk), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10utk_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10utk_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10utk_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10utk_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2te10utk_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 2: return string(STR_REFIT_TTD_49);
 3: return string(STR_REFIT_TTD_B5);
 4: return string(STR_REFIT_TTD_96);
 _2te10utk_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) || (position_in_consist == 0) ])
{
1: _2te10utk_create_effect_sprites_left;
 _2te10utk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10utk) + 1) % 2))
{
1: _2te10utk_create_effect_sprites_2l;
 _2te10utk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_old;
 _2te10utk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_16;
 _2te10utk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_14;
 _2te10utk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_12;
 _2te10utk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_10;
 _2te10utk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_8;
 _2te10utk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_6;
 _2te10utk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10utk_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10utk) ])
{
1: _2te10utk_create_effect_sprites_4;
 _2te10utk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10utk_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10utk_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10utk), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10utk_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10utk), 0), STORE_TEMP(vehicle_type_id == _2te10utk, 1) ])
{ _2te10utk_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10utk_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10utk_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10utk_running_cost_factor,
[ STORE_TEMP(279, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(98, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(69, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 490
switch (FEAT_TRAINS, SELF, _2te10utk_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1998 << 16), 0x101), STORE_TEMP(2007 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10utk_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10utk_additional_text, current_year <= 2007)
{
1: _2te10utk_additional_text_hidden;
 _2te10utk_additional_text_shown;
}
item (FEAT_TRAINS, _2te10utk, 157)
{
property
{
name: string(STR_NAME_2TE10UTK);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1998 - delta_age, 1, 1);
 model_life: 2007 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1998 -2007 -2 < retire_early_default ? 2007 -1998 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1998 -2007 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1998 -2007 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2290 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((333.0))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10ut;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10utk_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10utk_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10utk_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10utk_create_effect_sprites_start;
                 default: _2te10utk_sprites;
                purchase: _2te10utk_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _2te10utk_running_cost_factor;
                   speed: _2te10utk_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10utk)
{
property
{
name: string(STR_LONGNAME_2TE10UTK);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10utk)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10utk)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10utk)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10utk)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10utk)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10v
spriteset (_2te10v_v1_purchase_graphics_ico, "src/diesel/2te10v.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10v_v1_purchase_graphics_noico, "src/diesel/2te10v.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10v_v1_purchase_sprites, enable_icons)
{
1: _2te10v_v1_purchase_graphics_ico;
 _2te10v_v1_purchase_graphics_noico;
}
spriteset (_2te10v_b1978_notpowered_sprites_left, "src/diesel/2te10v.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10v_b1978_loading_sprites_left, "src/diesel/2te10v.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10v_b1978_traveling_sprites_left, "src/diesel/2te10v.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10v_b1978_normal_sprites_left
{
loading: _2te10v_b1978_loading_sprites_left;
 loaded: _2te10v_b1978_traveling_sprites_left;
}
spriteset (_2te10v_b1978_sprites_right, "src/diesel/2te10v.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10v_b1978_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10v_b1978_normal_sprites_left;
 _2te10v_b1978_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10v_b1978_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10v_b1978_sprites_left2;
 1: _2te10v_b1978_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10v_b1978_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10v_b1978_sprites_left1;
 128: _2te10v_b1978_sprites_left1;
}
spriteset (_2te10v_v2_purchase_graphics_ico, "src/diesel/2te10v-a1978.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10v_v2_purchase_graphics_noico, "src/diesel/2te10v-a1978.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10v_v2_purchase_sprites, enable_icons)
{
1: _2te10v_v2_purchase_graphics_ico;
 _2te10v_v2_purchase_graphics_noico;
}
spriteset (_2te10v_a1978_notpowered_sprites_left, "src/diesel/2te10v-a1978.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10v_a1978_loading_sprites_left, "src/diesel/2te10v-a1978.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10v_a1978_traveling_sprites_left, "src/diesel/2te10v-a1978.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10v_a1978_normal_sprites_left
{
loading: _2te10v_a1978_loading_sprites_left;
 loaded: _2te10v_a1978_traveling_sprites_left;
}
spriteset (_2te10v_a1978_sprites_right, "src/diesel/2te10v-a1978.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10v_a1978_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10v_a1978_normal_sprites_left;
 _2te10v_a1978_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10v_a1978_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10v_a1978_sprites_left2;
 1: _2te10v_a1978_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10v_a1978_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10v_a1978_sprites_left1;
 128: _2te10v_a1978_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, _2te10v_purchase_sprites, current_year >= 1978)
{
0: _2te10v_v1_purchase_sprites;
 _2te10v_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_left, build_year >= 1978)
{
0: _2te10v_b1978_sprites_left;
 _2te10v_a1978_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_right, build_year >= 1978)
{
0: _2te10v_b1978_sprites_right;
 _2te10v_a1978_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) || (position_in_consist == 0) ])
{
1: _2te10v_sprites_left;
 _2te10v_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10v) + 1) % 2))
{
1: _2te10v_sprites_2l;
 _2te10v_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_old;
 _2te10v_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_16;
 _2te10v_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_14;
 _2te10v_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_12;
 _2te10v_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_10;
 _2te10v_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_8;
 _2te10v_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_6;
 _2te10v_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_sprites_4;
 _2te10v_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10v_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10v_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10v), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10v_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10v_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10v_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) || (position_in_consist == 0) ])
{
1: _2te10v_create_effect_sprites_left;
 _2te10v_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10v) + 1) % 2))
{
1: _2te10v_create_effect_sprites_2l;
 _2te10v_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_old;
 _2te10v_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_16;
 _2te10v_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_14;
 _2te10v_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_12;
 _2te10v_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_10;
 _2te10v_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_8;
 _2te10v_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_6;
 _2te10v_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10v_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10v) ])
{
1: _2te10v_create_effect_sprites_4;
 _2te10v_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10v_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10v_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10v), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10v_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10v), 0), STORE_TEMP(vehicle_type_id == _2te10v, 1) ])
{ _2te10v_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10v_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10v_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10v_running_cost_factor,
[ STORE_TEMP(276, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(97, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(68, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 485
switch (FEAT_TRAINS, SELF, _2te10v_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1975 << 16), 0x101), STORE_TEMP(1981 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10v_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10v_additional_text, current_year <= 1981)
{
1: _2te10v_additional_text_hidden;
 _2te10v_additional_text_shown;
}
item (FEAT_TRAINS, _2te10v, 155)
{
property
{
name: string(STR_NAME_2TE10V);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1975 - delta_age, 1, 1);
 model_life: 1981 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1975 -1981 -2 < retire_early_default ? 1981 -1975 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1975 -1981 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1975 -1981 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2310 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10v_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10v_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te10v_create_effect_sprites_start;
                 default: _2te10v_sprites;
                purchase: _2te10v_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10v_running_cost_factor;
                   speed: _2te10v_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10v)
{
property
{
name: string(STR_LONGNAME_2TE10V);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10v)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10v)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10v)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10v)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10v)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te40
spriteset (_2te40_purchase_graphics_ico, "src/diesel/2te40.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te40_purchase_graphics_noico, "src/diesel/2te40.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te40_purchase_sprites, enable_icons)
{
1: _2te40_purchase_graphics_ico;
 _2te40_purchase_graphics_noico;
}
spriteset (_2te40_notpowered_sprites_left, "src/diesel/2te40.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te40_loading_sprites_left, "src/diesel/2te40.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te40_traveling_sprites_left, "src/diesel/2te40.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te40_normal_sprites_left
{
loading: _2te40_loading_sprites_left;
 loaded: _2te40_traveling_sprites_left;
}
spriteset (_2te40_sprites_right, "src/diesel/2te40.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te40_normal_sprites_left;
 _2te40_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te40_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te40_sprites_left2;
 1: _2te40_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te40_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te40_sprites_left1;
 128: _2te40_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) || (position_in_consist == 0) ])
{
1: _2te40_sprites_left;
 _2te40_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te40) + 1) % 2))
{
1: _2te40_sprites_2l;
 _2te40_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_old;
 _2te40_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_16;
 _2te40_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_14;
 _2te40_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_12;
 _2te40_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_10;
 _2te40_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_8;
 _2te40_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_6;
 _2te40_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_sprites_4;
 _2te40_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te40_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te40_sprites_parent, [ STORE_TEMP(count_veh_id(_2te40), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te40_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te40_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te40_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) || (position_in_consist == 0) ])
{
1: _2te40_create_effect_sprites_left;
 _2te40_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te40) + 1) % 2))
{
1: _2te40_create_effect_sprites_2l;
 _2te40_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_old;
 _2te40_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_16;
 _2te40_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_14;
 _2te40_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_12;
 _2te40_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_10;
 _2te40_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_8;
 _2te40_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_6;
 _2te40_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te40_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te40) ])
{
1: _2te40_create_effect_sprites_4;
 _2te40_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te40_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te40_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te40), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te40_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te40), 0), STORE_TEMP(vehicle_type_id == _2te40, 1) ])
{ _2te40_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te40_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te40_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te40_running_cost_factor,
[ STORE_TEMP(271, 0), // Моторы
   STORE_TEMP(38, 1), // Бригада
   STORE_TEMP(95, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(67, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(110, 6), // Скорость
   STORE_TEMP(141, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 476
switch (FEAT_TRAINS, SELF, _2te40_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1964 << 16), 0x101), STORE_TEMP(1968 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te40_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te40_additional_text, current_year <= 1968)
{
1: _2te40_additional_text_hidden;
 _2te40_additional_text_shown;
}
item (FEAT_TRAINS, _2te40, 645)
{
property
{
name: string(STR_NAME_2TE40);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1964 - delta_age, 1, 1);
 model_life: 1968 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1964 -1968 -2 < retire_early_default ? 1968 -1964 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1964 -1968 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1964 -1968 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2310 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((370.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te40_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: _2te40_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te40_create_effect_sprites_start;
                 default: _2te40_sprites;
                purchase: _2te40_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te40_running_cost_factor;
                   speed: _2te40_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te40)
{
property
{
name: string(STR_LONGNAME_2TE40);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te40)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te40)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te40)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te40)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te40)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te116
spriteset (_2te116_v1_purchase_graphics_ico, "src/diesel/2te116.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v1_purchase_graphics_noico, "src/diesel/2te116.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v1_purchase_sprites, enable_icons)
{
1: _2te116_v1_purchase_graphics_ico;
 _2te116_v1_purchase_graphics_noico;
}
spriteset (_2te116_v1_notpowered_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_v1_loading_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_v1_traveling_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_v1_normal_sprites_left
{
loading: _2te116_v1_loading_sprites_left;
 loaded: _2te116_v1_traveling_sprites_left;
}
spriteset (_2te116_v1_sprites_right, "src/diesel/2te116.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v1_normal_sprites_left;
 _2te116_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v1_sprites_left2;
 1: _2te116_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v1_sprites_left1;
 128: _2te116_v1_sprites_left1;
}
spriteset (_2te116_v2_notpowered_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 241, 0)
}
spriteset (_2te116_v2_loading_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (_2te116_v2_traveling_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup _2te116_v2_normal_sprites_left
{
loading: _2te116_v2_loading_sprites_left;
 loaded: _2te116_v2_traveling_sprites_left;
}
spriteset (_2te116_v2_sprites_right, "src/diesel/2te116.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v2_normal_sprites_left;
 _2te116_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v2_sprites_left2;
 1: _2te116_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v2_sprites_left1;
 128: _2te116_v2_sprites_left1;
}
spriteset (_2te116_v3_notpowered_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 442, 0)
}
spriteset (_2te116_v3_loading_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 442 +67, 0)
}
spriteset (_2te116_v3_traveling_sprites_left, "src/diesel/2te116.png")
{
s11_template(32, 442 +134, 0)
}
spritegroup _2te116_v3_normal_sprites_left
{
loading: _2te116_v3_loading_sprites_left;
 loaded: _2te116_v3_traveling_sprites_left;
}
spriteset (_2te116_v3_sprites_right, "src/diesel/2te116.png")
{
s11_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v3_normal_sprites_left;
 _2te116_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v3_sprites_left2;
 1: _2te116_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v3_sprites_left1;
 128: _2te116_v3_sprites_left1;
}
spriteset (_2te116_v2_purchase_graphics_ico, "src/diesel/2te116-a1973.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v2_purchase_graphics_noico, "src/diesel/2te116-a1973.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v2_purchase_sprites, enable_icons)
{
1: _2te116_v2_purchase_graphics_ico;
 _2te116_v2_purchase_graphics_noico;
}
spriteset (_2te116_a1973_notpowered_sprites_left, "src/diesel/2te116-a1973.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_a1973_loading_sprites_left, "src/diesel/2te116-a1973.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_a1973_traveling_sprites_left, "src/diesel/2te116-a1973.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_a1973_normal_sprites_left
{
loading: _2te116_a1973_loading_sprites_left;
 loaded: _2te116_a1973_traveling_sprites_left;
}
spriteset (_2te116_a1973_sprites_right, "src/diesel/2te116-a1973.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_a1973_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_a1973_normal_sprites_left;
 _2te116_a1973_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1973_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_a1973_sprites_left2;
 1: _2te116_a1973_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1973_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_a1973_sprites_left1;
 128: _2te116_a1973_sprites_left1;
}
spriteset (_2te116_v3_purchase_graphics_ico, "src/diesel/2te116-a1977.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v3_purchase_graphics_noico, "src/diesel/2te116-a1977.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v3_purchase_sprites, enable_icons)
{
1: _2te116_v3_purchase_graphics_ico;
 _2te116_v3_purchase_graphics_noico;
}
spriteset (_2te116_a1977_notpowered_sprites_left, "src/diesel/2te116-a1977.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_a1977_loading_sprites_left, "src/diesel/2te116-a1977.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_a1977_traveling_sprites_left, "src/diesel/2te116-a1977.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_a1977_normal_sprites_left
{
loading: _2te116_a1977_loading_sprites_left;
 loaded: _2te116_a1977_traveling_sprites_left;
}
spriteset (_2te116_a1977_sprites_right, "src/diesel/2te116-a1977.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_a1977_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_a1977_normal_sprites_left;
 _2te116_a1977_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1977_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_a1977_sprites_left2;
 1: _2te116_a1977_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1977_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_a1977_sprites_left1;
 128: _2te116_a1977_sprites_left1;
}
spriteset (_2te116_v4_purchase_graphics_ico, "src/diesel/2te116-a1979.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v4_purchase_graphics_noico, "src/diesel/2te116-a1979.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v4_purchase_sprites, enable_icons)
{
1: _2te116_v4_purchase_graphics_ico;
 _2te116_v4_purchase_graphics_noico;
}
spriteset (_2te116_a1979_notpowered_sprites_left, "src/diesel/2te116-a1979.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_a1979_loading_sprites_left, "src/diesel/2te116-a1979.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_a1979_traveling_sprites_left, "src/diesel/2te116-a1979.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_a1979_normal_sprites_left
{
loading: _2te116_a1979_loading_sprites_left;
 loaded: _2te116_a1979_traveling_sprites_left;
}
spriteset (_2te116_a1979_sprites_right, "src/diesel/2te116-a1979.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_a1979_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_a1979_normal_sprites_left;
 _2te116_a1979_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1979_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_a1979_sprites_left2;
 1: _2te116_a1979_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1979_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_a1979_sprites_left1;
 128: _2te116_a1979_sprites_left1;
}
spriteset (_2te116_v5_purchase_graphics_ico, "src/diesel/2te116-a1982.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v5_purchase_graphics_noico, "src/diesel/2te116-a1982.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v5_purchase_sprites, enable_icons)
{
1: _2te116_v5_purchase_graphics_ico;
 _2te116_v5_purchase_graphics_noico;
}
spriteset (_2te116_a1982_notpowered_sprites_left, "src/diesel/2te116-a1982.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_a1982_loading_sprites_left, "src/diesel/2te116-a1982.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_a1982_traveling_sprites_left, "src/diesel/2te116-a1982.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_a1982_normal_sprites_left
{
loading: _2te116_a1982_loading_sprites_left;
 loaded: _2te116_a1982_traveling_sprites_left;
}
spriteset (_2te116_a1982_sprites_right, "src/diesel/2te116-a1982.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_a1982_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_a1982_normal_sprites_left;
 _2te116_a1982_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1982_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_a1982_sprites_left2;
 1: _2te116_a1982_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1982_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_a1982_sprites_left1;
 128: _2te116_a1982_sprites_left1;
}
spriteset (_2te116_v6_purchase_graphics_ico, "src/diesel/2te116-a1984.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v6_purchase_graphics_noico, "src/diesel/2te116-a1984.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v6_purchase_sprites, enable_icons)
{
1: _2te116_v6_purchase_graphics_ico;
 _2te116_v6_purchase_graphics_noico;
}
spriteset (_2te116_a1984_notpowered_sprites_left, "src/diesel/2te116-a1984.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_a1984_loading_sprites_left, "src/diesel/2te116-a1984.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_a1984_traveling_sprites_left, "src/diesel/2te116-a1984.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_a1984_normal_sprites_left
{
loading: _2te116_a1984_loading_sprites_left;
 loaded: _2te116_a1984_traveling_sprites_left;
}
spriteset (_2te116_a1984_sprites_right, "src/diesel/2te116-a1984.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_a1984_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_a1984_normal_sprites_left;
 _2te116_a1984_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1984_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_a1984_sprites_left2;
 1: _2te116_a1984_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_a1984_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_a1984_sprites_left1;
 128: _2te116_a1984_sprites_left1;
}
spriteset (_2te116_v7_purchase_graphics_ico, "src/diesel/2te116-a1991.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116_v7_purchase_graphics_noico, "src/diesel/2te116-a1991.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v7_purchase_sprites, enable_icons)
{
1: _2te116_v7_purchase_graphics_ico;
 _2te116_v7_purchase_graphics_noico;
}
spriteset (_2te116_v9_notpowered_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116_v9_loading_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116_v9_traveling_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116_v9_normal_sprites_left
{
loading: _2te116_v9_loading_sprites_left;
 loaded: _2te116_v9_traveling_sprites_left;
}
spriteset (_2te116_v9_sprites_right, "src/diesel/2te116-a1991.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v9_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v9_normal_sprites_left;
 _2te116_v9_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v9_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v9_sprites_left2;
 1: _2te116_v9_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v9_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v9_sprites_left1;
 128: _2te116_v9_sprites_left1;
}
spriteset (_2te116_v10_notpowered_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 241, 0)
}
spriteset (_2te116_v10_loading_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (_2te116_v10_traveling_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup _2te116_v10_normal_sprites_left
{
loading: _2te116_v10_loading_sprites_left;
 loaded: _2te116_v10_traveling_sprites_left;
}
spriteset (_2te116_v10_sprites_right, "src/diesel/2te116-a1991.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v10_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v10_normal_sprites_left;
 _2te116_v10_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v10_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v10_sprites_left2;
 1: _2te116_v10_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v10_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v10_sprites_left1;
 128: _2te116_v10_sprites_left1;
}
spriteset (_2te116_v11_notpowered_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 442, 0)
}
spriteset (_2te116_v11_loading_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 442 +67, 0)
}
spriteset (_2te116_v11_traveling_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 442 +134, 0)
}
spritegroup _2te116_v11_normal_sprites_left
{
loading: _2te116_v11_loading_sprites_left;
 loaded: _2te116_v11_traveling_sprites_left;
}
spriteset (_2te116_v11_sprites_right, "src/diesel/2te116-a1991.png")
{
s11_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v11_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v11_normal_sprites_left;
 _2te116_v11_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v11_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v11_sprites_left2;
 1: _2te116_v11_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v11_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v11_sprites_left1;
 128: _2te116_v11_sprites_left1;
}
spriteset (_2te116_v12_notpowered_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 643, 0)
}
spriteset (_2te116_v12_loading_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 643 +67, 0)
}
spriteset (_2te116_v12_traveling_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 643 +134, 0)
}
spritegroup _2te116_v12_normal_sprites_left
{
loading: _2te116_v12_loading_sprites_left;
 loaded: _2te116_v12_traveling_sprites_left;
}
spriteset (_2te116_v12_sprites_right, "src/diesel/2te116-a1991.png")
{
s11_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v12_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v12_normal_sprites_left;
 _2te116_v12_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v12_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v12_sprites_left2;
 1: _2te116_v12_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v12_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v12_sprites_left1;
 128: _2te116_v12_sprites_left1;
}
spriteset (_2te116_v13_notpowered_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 844, 0)
}
spriteset (_2te116_v13_loading_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 844 +67, 0)
}
spriteset (_2te116_v13_traveling_sprites_left, "src/diesel/2te116-a1991.png")
{
s11_template(32, 844 +134, 0)
}
spritegroup _2te116_v13_normal_sprites_left
{
loading: _2te116_v13_loading_sprites_left;
 loaded: _2te116_v13_traveling_sprites_left;
}
spriteset (_2te116_v13_sprites_right, "src/diesel/2te116-a1991.png")
{
s11_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, _2te116_v13_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116_v13_normal_sprites_left;
 _2te116_v13_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v13_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116_v13_sprites_left2;
 1: _2te116_v13_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116_v13_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116_v13_sprites_left1;
 128: _2te116_v13_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, _2te116_purchase_sprites, (current_year >= 1973) + (current_year >= 1977) + (current_year >= 1979) + (current_year >= 1982) + (current_year >= 1984) + (current_year >= 1991))
{
0: _2te116_v1_purchase_sprites;
 1: _2te116_v2_purchase_sprites;
 2: _2te116_v3_purchase_sprites;
 3: _2te116_v4_purchase_sprites;
 4: _2te116_v5_purchase_sprites;
 5: _2te116_v6_purchase_sprites;
 _2te116_v7_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_b1973_sprites_left,
  cargo_subtype)
{
0: _2te116_v1_sprites_left;
  1: _2te116_v2_sprites_left;
  2: _2te116_v3_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_aUSSREND_sprites_left,
  cargo_subtype)
{
0: _2te116_v9_sprites_left;
  1: _2te116_v10_sprites_left;
  2: _2te116_v11_sprites_left;
  3: _2te116_v12_sprites_left;
  4: _2te116_v13_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_aGAMEEND_sprites_left,
  cargo_subtype)
{
0: _2te116_v1_sprites_left;
  1: _2te116_v2_sprites_left;
  2: _2te116_v3_sprites_left;
  3: _2te116_a1973_sprites_left;
  4: _2te116_a1977_sprites_left;
  5: _2te116_a1979_sprites_left;
  6: _2te116_a1982_sprites_left;
  7: _2te116_a1984_sprites_left;
  8: _2te116_v9_sprites_left;
  9: _2te116_v10_sprites_left;
 10: _2te116_v11_sprites_left;
 11: _2te116_v12_sprites_left;
 12: _2te116_v13_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_b1973_sprites_right,
  cargo_subtype)
{
0: _2te116_v1_sprites_right;
  1: _2te116_v2_sprites_right;
  2: _2te116_v3_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_aUSSREND_sprites_right,
  cargo_subtype)
{
0: _2te116_v9_sprites_right;
  1: _2te116_v10_sprites_right;
  2: _2te116_v11_sprites_right;
  3: _2te116_v12_sprites_right;
  4: _2te116_v13_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_aGAMEEND_sprites_right,
  cargo_subtype)
{
0: _2te116_v1_sprites_right;
  1: _2te116_v2_sprites_right;
  2: _2te116_v3_sprites_right;
  3: _2te116_a1973_sprites_right;
  4: _2te116_a1977_sprites_right;
  5: _2te116_a1979_sprites_right;
  6: _2te116_a1982_sprites_right;
  7: _2te116_a1984_sprites_right;
  8: _2te116_v9_sprites_right;
  9: _2te116_v10_sprites_right;
 10: _2te116_v11_sprites_right;
 11: _2te116_v12_sprites_right;
 12: _2te116_v13_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_left, (build_year >= 1973) + (build_year >= 1977) + (build_year >= 1979) + (build_year >= 1982) + (build_year >= 1984) + (build_year >= 1991) + (build_year >= 2050))
{
0: _2te116_b1973_sprites_left;
 1: _2te116_a1973_sprites_left;
 2: _2te116_a1977_sprites_left;
 3: _2te116_a1979_sprites_left;
 4: _2te116_a1982_sprites_left;
 5: _2te116_a1984_sprites_left;
 6: _2te116_aUSSREND_sprites_left;
 _2te116_aGAMEEND_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_right, (build_year >= 1973) + (build_year >= 1977) + (build_year >= 1979) + (build_year >= 1982) + (build_year >= 1984) + (build_year >= 1991) + (build_year >= 2050))
{
0: _2te116_b1973_sprites_right;
 1: _2te116_a1973_sprites_right;
 2: _2te116_a1977_sprites_right;
 3: _2te116_a1979_sprites_right;
 4: _2te116_a1982_sprites_right;
 5: _2te116_a1984_sprites_right;
 6: _2te116_aUSSREND_sprites_right;
 _2te116_aGAMEEND_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) || (position_in_consist == 0) ])
{
1: _2te116_sprites_left;
 _2te116_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te116) + 1) % 2))
{
1: _2te116_sprites_2l;
 _2te116_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_old;
 _2te116_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_16;
 _2te116_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_14;
 _2te116_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_12;
 _2te116_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_10;
 _2te116_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_8;
 _2te116_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_6;
 _2te116_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_sprites_4;
 _2te116_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te116_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te116_sprites_parent, [ STORE_TEMP(count_veh_id(_2te116), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te116_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te116_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te116_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te116_aGAMEEND_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_GAMEEND_SP, 1971, string(STR_REFIT_TTD_B5));
  1: return string(STR_REFIT_GAMEEND_SP, 1971, string(STR_REFIT_TTD_63));
  2: return string(STR_REFIT_GAMEEND_SP, 1971, string(STR_REFIT_TTD_93));
  3: return string(STR_REFIT_GAMEEND, 1973);
  4: return string(STR_REFIT_GAMEEND, 1977);
  5: return string(STR_REFIT_GAMEEND, 1979);
  6: return string(STR_REFIT_GAMEEND, 1982);
  7: return string(STR_REFIT_GAMEEND, 1984);
  8: return string(STR_REFIT_GAMEEND_SP, 1991, string(STR_REFIT_TTD_63));
  9: return string(STR_REFIT_GAMEEND_SP, 1991, string(STR_REFIT_TTD_B5));
 10: return string(STR_REFIT_GAMEEND_SP, 1991, string(STR_REFIT_TTD_93));
 11: return string(STR_REFIT_GAMEEND_SP, 1991, string(STR_REFIT_TTD_B6));
 12: return string(STR_REFIT_GAMEEND_SP, 1991, string(STR_REFIT_TTD_96));
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, _2te116_b1973_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_63);
 2: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_TTD_B5);
}
switch (FEAT_TRAINS, SELF, _2te116_a1973_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_TTD_63);
 return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, SELF, _2te116_aUSSREND_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_TTD_93);
 3: return string(STR_REFIT_TTD_B6);
 4: return string(STR_REFIT_TTD_96);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te116_cargo_subtype_text, (build_year >= 1973) + (build_year >= 1991) + (build_year >= 2050))
{
0: _2te116_b1973_cargo_subtype_text;
 1: _2te116_a1973_cargo_subtype_text;
 2: _2te116_aUSSREND_cargo_subtype_text;
 _2te116_aGAMEEND_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) || (position_in_consist == 0) ])
{
1: _2te116_create_effect_sprites_left;
 _2te116_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te116) + 1) % 2))
{
1: _2te116_create_effect_sprites_2l;
 _2te116_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_old;
 _2te116_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_16;
 _2te116_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_14;
 _2te116_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_12;
 _2te116_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_10;
 _2te116_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_8;
 _2te116_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_6;
 _2te116_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116) ])
{
1: _2te116_create_effect_sprites_4;
 _2te116_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te116_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te116), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te116_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te116), 0), STORE_TEMP(vehicle_type_id == _2te116, 1) ])
{ _2te116_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te116_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te116_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te116_power, build_year >= 1991)
{
1: return int (2329 * 0.9865);
 return int (2314 * 0.9865);
}
switch (FEAT_TRAINS, SELF, _2te116_running_cost_factor,
[ STORE_TEMP(276 + 5 * (build_year >= 1991), 0), // Моторы
   STORE_TEMP(39 + 1 * (build_year >= 1991), 1), // Бригада
   STORE_TEMP(97 + 2 * (build_year >= 1991), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(68 + 1 * (build_year >= 1991), 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 485-494
switch (FEAT_TRAINS, SELF, _2te116_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1971 << 16), 0x101), STORE_TEMP(2007 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te116_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te116_additional_text, current_year <= 2007)
{
1: _2te116_additional_text_hidden;
 _2te116_additional_text_shown;
}
item (FEAT_TRAINS, _2te116, 171)
{
property
{
name: string(STR_NAME_2TE116);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1971 - delta_age, 1, 1);
 model_life: 2007 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1971 -2007 -2 < retire_early_default ? 2007 -1971 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1971 -2007 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1971 -2007 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2314 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: _2te116_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: _2te116_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te116_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te116_create_effect_sprites_start;
                 default: _2te116_sprites;
                   power: _2te116_power;
                purchase: _2te116_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te116_running_cost_factor;
                   speed: _2te116_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te116)
{
property
{
name: string(STR_LONGNAME_2TE116);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te116)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te116)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te116)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te116)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te116)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te116u
spriteset (_2te116u_v1_purchase_graphics_ico, "src/diesel/2te116u.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116u_v1_purchase_graphics_noico, "src/diesel/2te116u.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116u_v1_purchase_sprites, enable_icons)
{
1: _2te116u_v1_purchase_graphics_ico;
 _2te116u_v1_purchase_graphics_noico;
}
spriteset (_2te116u_b2009_notpowered_sprites_left, "src/diesel/2te116u.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116u_b2009_loading_sprites_left, "src/diesel/2te116u.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116u_b2009_traveling_sprites_left, "src/diesel/2te116u.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116u_b2009_normal_sprites_left
{
loading: _2te116u_b2009_loading_sprites_left;
 loaded: _2te116u_b2009_traveling_sprites_left;
}
spriteset (_2te116u_b2009_sprites_right, "src/diesel/2te116u.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116u_b2009_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116u_b2009_normal_sprites_left;
 _2te116u_b2009_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116u_b2009_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116u_b2009_sprites_left2;
 1: _2te116u_b2009_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116u_b2009_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116u_b2009_sprites_left1;
 128: _2te116u_b2009_sprites_left1;
}
spriteset (_2te116u_v2_purchase_graphics_ico, "src/diesel/2te116u-a2009.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te116u_v2_purchase_graphics_noico, "src/diesel/2te116u-a2009.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te116u_v2_purchase_sprites, enable_icons)
{
1: _2te116u_v2_purchase_graphics_ico;
 _2te116u_v2_purchase_graphics_noico;
}
spriteset (_2te116u_v3_purchase_graphics_ico, "src/diesel/2te116u-a2009.png")
{
new_purchase_template(110, 0)
}
spriteset (_2te116u_v3_purchase_graphics_noico, "src/diesel/2te116u-a2009.png")
{
new_purchase_template_noico(110, 0)
}
switch (FEAT_TRAINS, SELF, _2te116u_v3_purchase_sprites, enable_icons)
{
1: _2te116u_v3_purchase_graphics_ico;
 _2te116u_v3_purchase_graphics_noico;
}
spriteset (_2te116u_v2_notpowered_sprites_left, "src/diesel/2te116u-a2009.png")
{
s11_template(32, 40, 0)
}
spriteset (_2te116u_v2_loading_sprites_left, "src/diesel/2te116u-a2009.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2te116u_v2_traveling_sprites_left, "src/diesel/2te116u-a2009.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2te116u_v2_normal_sprites_left
{
loading: _2te116u_v2_loading_sprites_left;
 loaded: _2te116u_v2_traveling_sprites_left;
}
spriteset (_2te116u_v2_sprites_right, "src/diesel/2te116u-a2009.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te116u_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116u_v2_normal_sprites_left;
 _2te116u_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116u_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116u_v2_sprites_left2;
 1: _2te116u_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116u_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116u_v2_sprites_left1;
 128: _2te116u_v2_sprites_left1;
}
spriteset (_2te116u_a2011_notpowered_sprites_left, "src/diesel/2te116u-a2009.png")
{
s11_template(32, 241, 0)
}
spriteset (_2te116u_a2011_loading_sprites_left, "src/diesel/2te116u-a2009.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (_2te116u_a2011_traveling_sprites_left, "src/diesel/2te116u-a2009.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup _2te116u_a2011_normal_sprites_left
{
loading: _2te116u_a2011_loading_sprites_left;
 loaded: _2te116u_a2011_traveling_sprites_left;
}
spriteset (_2te116u_a2011_sprites_right, "src/diesel/2te116u-a2009.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te116u_a2011_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te116u_a2011_normal_sprites_left;
 _2te116u_a2011_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te116u_a2011_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te116u_a2011_sprites_left2;
 1: _2te116u_a2011_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te116u_a2011_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te116u_a2011_sprites_left1;
 128: _2te116u_a2011_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, _2te116u_purchase_sprites, (current_year >= 2009) + (current_year >= 2011))
{
0: _2te116u_v1_purchase_sprites;
 1: _2te116u_v2_purchase_sprites;
 _2te116u_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116u_a2009_sprites_left,
  cargo_subtype)
{
0: _2te116u_v2_sprites_left;
           1: _2te116u_v2_sprites_left;
 // ускоренный
        0xE0: _2te116u_v2_sprites_left;
 // ускоренный
  34: _2te116u_a2011_sprites_left;
  align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116u_a2009_sprites_right,
  cargo_subtype)
{
0: _2te116u_v2_sprites_right;
           1: _2te116u_v2_sprites_right;
 // ускоренный
        0xE0: _2te116u_v2_sprites_right;
 // ускоренный
  34: _2te116u_a2011_sprites_right;
  align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_left, (build_year >= 2009) + (build_year >= 2011))
{
0: _2te116u_b2009_sprites_left;
 1: _2te116u_a2009_sprites_left;
 _2te116u_a2011_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_right, (build_year >= 2009) + (build_year >= 2011))
{
0: _2te116u_b2009_sprites_right;
 1: _2te116u_a2009_sprites_right;
 _2te116u_a2011_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) || (position_in_consist == 0) ])
{
1: _2te116u_sprites_left;
 _2te116u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te116u) + 1) % 2))
{
1: _2te116u_sprites_2l;
 _2te116u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_old;
 _2te116u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_16;
 _2te116u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_14;
 _2te116u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_12;
 _2te116u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_10;
 _2te116u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_8;
 _2te116u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_6;
 _2te116u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_sprites_4;
 _2te116u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te116u_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te116u_sprites_parent, [ STORE_TEMP(count_veh_id(_2te116u), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te116u_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te116u_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te116u_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te116u_tractive_effort_coefficient,
  cargo_subtype >= 0xE0)
{
0: return int(256*(403.0)/(138)/9.8);
     return int(256*(337.0)/(138)/9.8);
}
switch (FEAT_TRAINS, SELF, _2te116u_100_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te116u_120_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _2te116u_speed,
  cargo_subtype >= 0xE0)
{
1: _2te116u_120_speed;
     _2te116u_100_speed;
}
switch (FEAT_TRAINS, SELF, _2te116u_b2009_cargo_subtype_text, cargo_subtype)
{
0xE0: return string(STR_REFIT_FACTORY_GENERAL_TYPE_SP, string(STR_REFIT_WITH_INCREASED_SPEED), string(STR_EMPTY));
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2te116u_a2009_base_cargo_subtype_text, cargo_subtype)
{
34: general_cargo_subtype_text_LV_RZD_PID;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2te116u_a2009_cargo_subtype_text, cargo_subtype)
{
0xE0: return string(STR_REFIT_FACTORY_GENERAL_TYPE_SP, string(STR_REFIT_WITH_INCREASED_SPEED), string(STR_EMPTY));
 _2te116u_a2009_base_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te116u_a2011_cargo_subtype_text, cargo_subtype)
{
0xE0: return string(STR_REFIT_FACTORY_GENERAL_TYPE_SP, string(STR_REFIT_WITH_INCREASED_SPEED), string(STR_EMPTY));
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2te116u_cargo_subtype_text, (build_year >= 2009) + (build_year >= 2011))
{
0: _2te116u_b2009_cargo_subtype_text;
 1: _2te116u_a2009_cargo_subtype_text;
 _2te116u_a2011_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) || (position_in_consist == 0) ])
{
1: _2te116u_create_effect_sprites_left;
 _2te116u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te116u) + 1) % 2))
{
1: _2te116u_create_effect_sprites_2l;
 _2te116u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_old;
 _2te116u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_16;
 _2te116u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_14;
 _2te116u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_12;
 _2te116u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_10;
 _2te116u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_8;
 _2te116u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_6;
 _2te116u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te116u_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te116u) ])
{
1: _2te116u_create_effect_sprites_4;
 _2te116u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te116u_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te116u), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te116u_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te116u), 0), STORE_TEMP(vehicle_type_id == _2te116u, 1) ])
{ _2te116u_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te116u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te116u_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te116u_refit_cost, ((extra_callback_info1 & 0xFF00) >= (0xE0 << 8)) + ((cargo_subtype >= 0xE0) * 2))
{
1: return 1;
 2: return 2;
 return 0 | CB_RESULT_AUTOREFIT;
}
switch (FEAT_TRAINS, SELF, _2te116u_running_cost_factor,
[ STORE_TEMP(346, 0), // Моторы
   STORE_TEMP(49, 1), // Бригада
   STORE_TEMP(121, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(85, 4), // ТО
   STORE_TEMP(6, 5), // Сертификация
   STORE_TEMP(100 + 20 * (cargo_subtype == 1), 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 607
switch (FEAT_TRAINS, SELF, _2te116u_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (2007 << 16), 0x101), STORE_TEMP(2016 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 120), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, _2te116u_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN)))))))| (string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 120) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te116u_additional_text, current_year <= 2016)
{
1: _2te116u_additional_text_hidden;
 _2te116u_additional_text_shown;
}
item (FEAT_TRAINS, _2te116u, 172)
{
property
{
name: string(STR_NAME_2TE116U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2007 - delta_age, 1, 1);
 model_life: 2016 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2007 -2016 -2 < retire_early_default ? 2016 -2007 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2007 -2016 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2007 -2016 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 65 > 255 ? 255 : 65;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2774 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((403.0))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te116;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te116u_additional_text;
               articulated_part: articulated_part_dummy3;
           bitmask_vehicle_info: _2te116u_bitmask_vehicle_info;
               can_attach_wagon: any_can_attach_wagon;
                 cargo_capacity: return 0;
             cargo_subtype_text: _2te116u_cargo_subtype_text;
                 colour_mapping: any_cc_colour;
                  create_effect: _2te116u_create_effect_sprites_start;
                        default: _2te116u_sprites;
                       purchase: _2te116u_purchase_sprites;
                 purchase_speed: return 100;
                     refit_cost: _2te116u_refit_cost;
            running_cost_factor: _2te116u_running_cost_factor;
                          speed: _2te116u_speed;
                     start_stop: any_start_stop;
    tractive_effort_coefficient: _2te116u_tractive_effort_coefficient;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te116u)
{
property
{
name: string(STR_LONGNAME_2TE116U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te116u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te116u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te116u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te116u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te116u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te121
spriteset (_2te121_purchase_graphics_ico, "src/diesel/2te121-a1983.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te121_purchase_graphics_noico, "src/diesel/2te121-a1983.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te121_purchase_sprites, enable_icons)
{
1: _2te121_purchase_graphics_ico;
 _2te121_purchase_graphics_noico;
}
spriteset (_2te121_notpowered_sprites_left, "src/diesel/2te121-a1983.png")
{
s12_template(32, 40, 0)
}
spriteset (_2te121_loading_sprites_left, "src/diesel/2te121-a1983.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (_2te121_traveling_sprites_left, "src/diesel/2te121-a1983.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup _2te121_normal_sprites_left
{
loading: _2te121_loading_sprites_left;
 loaded: _2te121_traveling_sprites_left;
}
spriteset (_2te121_sprites_right, "src/diesel/2te121-a1983.png")
{
s12_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te121_normal_sprites_left;
 _2te121_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te121_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te121_sprites_left2;
 1: _2te121_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te121_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te121_sprites_left1;
 128: _2te121_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) || (position_in_consist == 0) ])
{
1: _2te121_sprites_left;
 _2te121_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te121) + 1) % 2))
{
1: _2te121_sprites_2l;
 _2te121_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_old;
 _2te121_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_16;
 _2te121_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_14;
 _2te121_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_12;
 _2te121_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_10;
 _2te121_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_8;
 _2te121_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_6;
 _2te121_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_sprites_4;
 _2te121_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te121_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te121_sprites_parent, [ STORE_TEMP(count_veh_id(_2te121), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te121_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te121_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te121_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te121_colour_mapping,
  cargo_subtype)
{
0: return ttdall_cc + 0x63;
  1: return ttdall_cc + 0xB5;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, _2te121_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) || (position_in_consist == 0) ])
{
1: _2te121_create_effect_sprites_left;
 _2te121_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te121) + 1) % 2))
{
1: _2te121_create_effect_sprites_2l;
 _2te121_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_old;
 _2te121_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_16;
 _2te121_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_14;
 _2te121_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_12;
 _2te121_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_10;
 _2te121_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_8;
 _2te121_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_6;
 _2te121_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te121_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te121) ])
{
1: _2te121_create_effect_sprites_4;
 _2te121_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te121_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te121_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te121), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te121_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te121), 0), STORE_TEMP(vehicle_type_id == _2te121, 1) ])
{ _2te121_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te121_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te121_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te121_running_cost_factor,
[ STORE_TEMP(371, 0), // Моторы
   STORE_TEMP(52, 1), // Бригада
   STORE_TEMP(130, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(91, 4), // ТО
   STORE_TEMP(7, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(150, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 651
switch (FEAT_TRAINS, SELF, _2te121_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1977 << 16), 0x101), STORE_TEMP(1992 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te121_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te121_additional_text, current_year <= 1992)
{
1: _2te121_additional_text_hidden;
 _2te121_additional_text_shown;
}
item (FEAT_TRAINS, _2te121, 587)
{
property
{
name: string(STR_NAME_2TE121);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1977 - delta_age, 1, 1);
 model_life: 1992 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1977 -1992 -2 < retire_early_default ? 1992 -1977 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1977 -1992 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1977 -1992 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 67 > 255 ? 255 : 67;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2995 * 0.9865);
 weight: (150) ton;
 tractive_effort_coefficient: (((445.0))/((150))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: _2te121_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: _2te121_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te121_cargo_subtype_text;
          colour_mapping: _2te121_colour_mapping;
           create_effect: _2te121_create_effect_sprites_start;
                 default: _2te121_sprites;
                purchase: _2te121_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te121_running_cost_factor;
                   speed: _2te121_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te121)
{
property
{
name: string(STR_LONGNAME_2TE121);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te121)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te121)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te121)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te121)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te121)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te25a
spriteset (_2te25a_v1_purchase_graphics_ico, "src/diesel/2te25a.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te25a_v1_purchase_graphics_noico, "src/diesel/2te25a.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te25a_v1_purchase_sprites, enable_icons)
{
1: _2te25a_v1_purchase_graphics_ico;
 _2te25a_v1_purchase_graphics_noico;
}
spriteset (_2te25a_b2010_notpowered_sprites_left, "src/diesel/2te25a.png")
{
s12_template(32, 40, 0)
}
spriteset (_2te25a_b2010_loading_sprites_left, "src/diesel/2te25a.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (_2te25a_b2010_traveling_sprites_left, "src/diesel/2te25a.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup _2te25a_b2010_normal_sprites_left
{
loading: _2te25a_b2010_loading_sprites_left;
 loaded: _2te25a_b2010_traveling_sprites_left;
}
spriteset (_2te25a_b2010_sprites_right, "src/diesel/2te25a.png")
{
s12_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te25a_b2010_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te25a_b2010_normal_sprites_left;
 _2te25a_b2010_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te25a_b2010_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te25a_b2010_sprites_left2;
 1: _2te25a_b2010_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te25a_b2010_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te25a_b2010_sprites_left1;
 128: _2te25a_b2010_sprites_left1;
}
spriteset (_2te25a_v2_purchase_graphics_ico, "src/diesel/2te25a-a2009.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te25a_v2_purchase_graphics_noico, "src/diesel/2te25a-a2009.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te25a_v2_purchase_sprites, enable_icons)
{
1: _2te25a_v2_purchase_graphics_ico;
 _2te25a_v2_purchase_graphics_noico;
}
spriteset (_2te25a_a2010_notpowered_sprites_left, "src/diesel/2te25a-a2009.png")
{
s12_template(32, 40, 0)
}
spriteset (_2te25a_a2010_loading_sprites_left, "src/diesel/2te25a-a2009.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (_2te25a_a2010_traveling_sprites_left, "src/diesel/2te25a-a2009.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup _2te25a_a2010_normal_sprites_left
{
loading: _2te25a_a2010_loading_sprites_left;
 loaded: _2te25a_a2010_traveling_sprites_left;
}
spriteset (_2te25a_a2010_sprites_right, "src/diesel/2te25a-a2009.png")
{
s12_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te25a_a2010_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te25a_a2010_normal_sprites_left;
 _2te25a_a2010_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te25a_a2010_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te25a_a2010_sprites_left2;
 1: _2te25a_a2010_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te25a_a2010_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te25a_a2010_sprites_left1;
 128: _2te25a_a2010_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, _2te25a_purchase_sprites, current_year >= 2010)
{
0: _2te25a_v1_purchase_sprites;
 _2te25a_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_left, build_year >= 2010)
{
0: _2te25a_b2010_sprites_left;
 _2te25a_a2010_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_right, build_year >= 2010)
{
0: _2te25a_b2010_sprites_right;
 _2te25a_a2010_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) || (position_in_consist == 0) ])
{
1: _2te25a_sprites_left;
 _2te25a_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te25a) + 1) % 2))
{
1: _2te25a_sprites_2l;
 _2te25a_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_old;
 _2te25a_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_16;
 _2te25a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_14;
 _2te25a_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_12;
 _2te25a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_10;
 _2te25a_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_8;
 _2te25a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_6;
 _2te25a_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_sprites_4;
 _2te25a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te25a_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te25a_sprites_parent, [ STORE_TEMP(count_veh_id(_2te25a), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te25a_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te25a_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te25a_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) || (position_in_consist == 0) ])
{
1: _2te25a_create_effect_sprites_left;
 _2te25a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te25a) + 1) % 2))
{
1: _2te25a_create_effect_sprites_2l;
 _2te25a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_old;
 _2te25a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_16;
 _2te25a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_14;
 _2te25a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_12;
 _2te25a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_10;
 _2te25a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_8;
 _2te25a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_6;
 _2te25a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25a_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25a) ])
{
1: _2te25a_create_effect_sprites_4;
 _2te25a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25a_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _2te25a_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te25a), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te25a_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te25a), 0), STORE_TEMP(vehicle_type_id == _2te25a, 1) ])
{ _2te25a_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te25a_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te25a_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te25a_running_cost_factor,
[ STORE_TEMP(439, 0), // Моторы
   STORE_TEMP(62, 1), // Бригада
   STORE_TEMP(154, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(108, 4), // ТО
   STORE_TEMP(8, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(144, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 771
switch (FEAT_TRAINS, SELF, _2te25a_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (2006 << 16), 0x101), STORE_TEMP(2016 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te25a_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te25a_additional_text, current_year <= 2016)
{
1: _2te25a_additional_text_hidden;
 _2te25a_additional_text_shown;
}
item (FEAT_TRAINS, _2te25a, 280)
{
property
{
name: string(STR_NAME_2TE25A);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2006 - delta_age, 1, 1);
 model_life: 2016 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2006 -2016 -2 < retire_early_default ? 2016 -2006 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2006 -2016 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2006 -2016 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 109 > 255 ? 255 : 109;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2855 * 0.9865);
 weight: (144) ton;
 tractive_effort_coefficient: (((441.5))/((144))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: _2te25a_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: _2te25a_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te25a_create_effect_sprites_start;
                 default: _2te25a_sprites;
                purchase: _2te25a_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _2te25a_running_cost_factor;
                   speed: _2te25a_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te25a)
{
property
{
name: string(STR_LONGNAME_2TE25A);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te25a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te25a)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te25a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te25a)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te25a)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te25km
spriteset (_2te25km_purchase_graphics_ico, "src/diesel/2te25km.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te25km_purchase_graphics_noico, "src/diesel/2te25km.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te25km_purchase_sprites, enable_icons)
{
1: _2te25km_purchase_graphics_ico;
 _2te25km_purchase_graphics_noico;
}
spriteset (_2te25km_v1_notpowered_sprites_left, "src/diesel/2te25km.png")
{
s12_template(32, 40, 0)
}
spriteset (_2te25km_v1_loading_sprites_left, "src/diesel/2te25km.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (_2te25km_v1_traveling_sprites_left, "src/diesel/2te25km.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup _2te25km_v1_normal_sprites_left
{
loading: _2te25km_v1_loading_sprites_left;
 loaded: _2te25km_v1_traveling_sprites_left;
}
spriteset (_2te25km_v1_sprites_right, "src/diesel/2te25km.png")
{
s12_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te25km_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te25km_v1_normal_sprites_left;
 _2te25km_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te25km_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te25km_v1_sprites_left2;
 1: _2te25km_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te25km_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te25km_v1_sprites_left1;
 128: _2te25km_v1_sprites_left1;
}
spriteset (_2te25km_v2_notpowered_sprites_left, "src/diesel/2te25km.png")
{
s12_template(32, 241, 0)
}
spriteset (_2te25km_v2_loading_sprites_left, "src/diesel/2te25km.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (_2te25km_v2_traveling_sprites_left, "src/diesel/2te25km.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup _2te25km_v2_normal_sprites_left
{
loading: _2te25km_v2_loading_sprites_left;
 loaded: _2te25km_v2_traveling_sprites_left;
}
spriteset (_2te25km_v2_sprites_right, "src/diesel/2te25km.png")
{
s12_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te25km_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te25km_v2_normal_sprites_left;
 _2te25km_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te25km_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te25km_v2_sprites_left2;
 1: _2te25km_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te25km_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te25km_v2_sprites_left1;
 128: _2te25km_v2_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_left,
  cargo_subtype)
{
0: _2te25km_v1_sprites_left;
  1: _2te25km_v2_sprites_left;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_right,
  cargo_subtype)
{
0: _2te25km_v1_sprites_right;
  1: _2te25km_v2_sprites_right;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) || (position_in_consist == 0) ])
{
1: _2te25km_sprites_left;
 _2te25km_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te25km) + 1) % 2))
{
1: _2te25km_sprites_2l;
 _2te25km_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_old;
 _2te25km_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_16;
 _2te25km_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_14;
 _2te25km_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_12;
 _2te25km_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_10;
 _2te25km_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_8;
 _2te25km_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_6;
 _2te25km_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_sprites_4;
 _2te25km_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te25km_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te25km_sprites_parent, [ STORE_TEMP(count_veh_id(_2te25km), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te25km_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te25km_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te25km_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) || (position_in_consist == 0) ])
{
1: _2te25km_create_effect_sprites_left;
 _2te25km_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te25km) + 1) % 2))
{
1: _2te25km_create_effect_sprites_2l;
 _2te25km_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_old;
 _2te25km_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_16;
 _2te25km_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_14;
 _2te25km_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_12;
 _2te25km_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_10;
 _2te25km_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_8;
 _2te25km_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_6;
 _2te25km_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te25km_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te25km) ])
{
1: _2te25km_create_effect_sprites_4;
 _2te25km_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te25km_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _2te25km_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te25km), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te25km_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te25km), 0), STORE_TEMP(vehicle_type_id == _2te25km, 1) ])
{ _2te25km_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te25km_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te25km_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te25km_running_cost_factor,
[ STORE_TEMP(451, 0), // Моторы
   STORE_TEMP(63, 1), // Бригада
   STORE_TEMP(158, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(111, 4), // ТО
   STORE_TEMP(8, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(144, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 791
switch (FEAT_TRAINS, SELF, _2te25km_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_SUEK);
 return string(STR_REFIT_LV_RZD_PID);
}
switch (FEAT_TRAINS, SELF, _2te25km_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2014 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te25km_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te25km_additional_text, current_year <= 2023)
{
1: _2te25km_additional_text_hidden;
 _2te25km_additional_text_shown;
}
item (FEAT_TRAINS, _2te25km, 484)
{
property
{
name: string(STR_NAME_2TE25KM);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2014 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2014 -2050 -2 < retire_early_default ? 2050 -2014 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2014 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2014 -2050 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 84 > 255 ? 255 : 84;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2986 * 0.9865);
 weight: (144) ton;
 tractive_effort_coefficient: (((419.4))/((144))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te25a;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te25km_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: _2te25km_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te25km_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te25km_create_effect_sprites_start;
                 default: _2te25km_sprites;
                purchase: _2te25km_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _2te25km_running_cost_factor;
                   speed: _2te25km_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te25km)
{
property
{
name: string(STR_LONGNAME_2TE25KM);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te25km)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te25km)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te25km)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te25km)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te25km)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3te25k2m
spriteset (_3te25k2m_purchase_graphics_ico, "src/diesel/3te25k2m.png")
{
new_purchase_template(0, 0)
}
spriteset (_3te25k2m_purchase_graphics_noico, "src/diesel/3te25k2m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _3te25k2m_purchase_sprites, enable_icons)
{
1: _3te25k2m_purchase_graphics_ico;
 _3te25k2m_purchase_graphics_noico;
}
spriteset (_3te25k2m_notpowered_sprites_left, "src/diesel/3te25k2m.png")
{
s12_template(32, 40, 0)
}
spriteset (_3te25k2m_loading_sprites_left, "src/diesel/3te25k2m.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (_3te25k2m_traveling_sprites_left, "src/diesel/3te25k2m.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup _3te25k2m_normal_sprites_left
{
loading: _3te25k2m_loading_sprites_left;
 loaded: _3te25k2m_traveling_sprites_left;
}
spriteset (_3te25k2m_sprites_right, "src/diesel/3te25k2m.png")
{
s12_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _3te25k2m_normal_sprites_left;
 _3te25k2m_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _3te25k2m_sprites_left2;
 1: _3te25k2m_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _3te25k2m_sprites_left1;
 128: _3te25k2m_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) || (position_in_consist == 0) ])
{
1: _3te25k2m_sprites_left;
 _3te25k2m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_3te25k2m) - count_veh_id(_3te25k2m_m) + 1) % 2))
{
1: _3te25k2m_sprites_2l;
 _3te25k2m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_old;
 2: _3te25k2m_sprites_2l;
 _3te25k2m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_16;
 2: _3te25k2m_sprites_right;
 _3te25k2m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_14;
 2: _3te25k2m_sprites_2l;
 _3te25k2m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_12;
 2: _3te25k2m_sprites_right;
 _3te25k2m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_10;
 2: _3te25k2m_sprites_2l;
 _3te25k2m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_8;
 2: _3te25k2m_sprites_right;
 _3te25k2m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_6;
 2: _3te25k2m_sprites_2l;
 _3te25k2m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_2, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_sprites_4;
 2: _3te25k2m_sprites_right;
 _3te25k2m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) ])
{
1: _3te25k2m_sprites_left;
 _3te25k2m_sprites_2;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) ])
{
1: _3te25k2m_sprites_right;
 _3te25k2m_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _3te25k2m_sprites_start; }
switch (FEAT_TRAINS, PARENT, _3te25k2m_sprites_parent, [ STORE_TEMP(count_veh_id(_3te25k2m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _3te25k2m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _3te25k2m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _3te25k2m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3te25k2m) - count_veh_id(_3te25k2m_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3te25k2m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3te25k2m) + count_veh_id(_3te25k2m_m), 0), STORE_TEMP((vehicle_type_id == _3te25k2m) || (vehicle_type_id == _3te25k2m_m), 1) ])
{ _3te25k2m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3te25k2m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3te25k2m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) || (position_in_consist == 0) ])
{
1: _3te25k2m_create_effect_sprites_left;
 _3te25k2m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_3te25k2m) - count_veh_id(_3te25k2m_m) + 1) % 2))
{
1: _3te25k2m_create_effect_sprites_2l;
 _3te25k2m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_old;
 2: _3te25k2m_create_effect_sprites_2l;
 _3te25k2m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_16;
 2: _3te25k2m_create_effect_sprites_right;
 _3te25k2m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_14;
 2: _3te25k2m_create_effect_sprites_2l;
 _3te25k2m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_12;
 2: _3te25k2m_create_effect_sprites_right;
 _3te25k2m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_10;
 2: _3te25k2m_create_effect_sprites_2l;
 _3te25k2m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_8;
 2: _3te25k2m_create_effect_sprites_right;
 _3te25k2m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_6;
 2: _3te25k2m_create_effect_sprites_2l;
 _3te25k2m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_2, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) * 2) ])
{
1: _3te25k2m_create_effect_sprites_4;
 2: _3te25k2m_create_effect_sprites_right;
 _3te25k2m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) ])
{
1: _3te25k2m_create_effect_sprites_left;
 _3te25k2m_create_effect_sprites_2;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3te25k2m_m) ])
{
1: _3te25k2m_create_effect_sprites_right;
 _3te25k2m_create_effect_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _3te25k2m_running_cost_factor,
[ STORE_TEMP(451, 0), // Моторы
   STORE_TEMP(63, 1), // Бригада
   STORE_TEMP(158, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(111, 4), // ТО
   STORE_TEMP(8, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(147, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 791
switch (FEAT_TRAINS, SELF, _3te25k2m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2018 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3te25k2m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3te25k2m_additional_text, current_year <= 2023)
{
1: _3te25k2m_additional_text_hidden;
 _3te25k2m_additional_text_shown;
}
item (FEAT_TRAINS, _3te25k2m, 669)
{
property
{
name: string(STR_NAME_3TE25K2M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2018 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2018 -2050 -2 < retire_early_default ? 2050 -2018 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2018 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2018 -2050 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 81 > 255 ? 255 : 81;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (3401 * 0.9865);
 weight: (147) ton;
 tractive_effort_coefficient: (((428.1))/((147))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te25a;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3te25k2m_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: _3te25k2m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _3te25k2m_create_effect_sprites_start;
                 default: _3te25k2m_sprites;
                purchase: _3te25k2m_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _3te25k2m_running_cost_factor;
                   speed: _3te25k2m_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3te25k2m)
{
property
{
name: string(STR_LONGNAME_3TE25K2M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3te25k2m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3te25k2m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3te25k2m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3te25k2m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3te25k2m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3te25k2m_m
spriteset (_3te25k2m_m_purchase_graphics_ico, "src/diesel/3te25k2m_m.png")
{
new_purchase_template(0, 0)
}
spriteset (_3te25k2m_m_purchase_graphics_noico, "src/diesel/3te25k2m_m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_purchase_sprites, enable_icons)
{
1: _3te25k2m_m_purchase_graphics_ico;
 _3te25k2m_m_purchase_graphics_noico;
}
spriteset (_3te25k2m_m_sprites_left_g, "src/diesel/3te25k2m_m.png")
{
s12_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te25k2m_m_sprites_left_g; }
spriteset (_3te25k2m_m_sprites_right_g, "src/diesel/3te25k2m_m.png")
{
s12_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te25k2m_m_sprites_right_g; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3te25k2m_m_sprites_left;
 _3te25k2m_m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_start_mark, getbits(extra_callback_info1, 8, 8))
{
0: _3te25k2m_m_sprites_start;
 1: dummy_sprites_big;
 return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_start_after, [ STORE_TEMP(2, 0x10F), var[0x61, 0, 0xFFFF, 0xC6] != _3te25k2m])
{
1: _3te25k2m_m_sprites_start_mark;
 _3te25k2m_m_sprites_start;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_start_before, [ STORE_TEMP(-2, 0x10F), var[0x61, 0, 0xFFFF, 0xC6] != _3te25k2m])
{
1: _3te25k2m_m_sprites_start_mark;
 _3te25k2m_m_sprites_start_after;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_start_sp, position_in_consist_from_end == 1)
{
1: _3te25k2m_m_sprites_start_mark;
 _3te25k2m_m_sprites_start_before;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _3te25k2m_m_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, _3te25k2m_m_sprites_parent, [ STORE_TEMP(count_veh_id(_3te25k2m_m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _3te25k2m_m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _3te25k2m_m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3te25k2m_m_create_effect_sprites_left;
 _3te25k2m_m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3te25k2m_m) - count_veh_id(_3te25k2m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3te25k2m_m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3te25k2m_m) + count_veh_id(_3te25k2m), 0), STORE_TEMP((vehicle_type_id == _3te25k2m_m) || (vehicle_type_id == _3te25k2m), 1) ])
{ _3te25k2m_m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3te25k2m_m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_bitmask_vehicle_info_advanced3, [ STORE_TEMP(count_veh_id(_3te25k2m), 3), STORE_TEMP(-2, 0x10F), (LOAD_TEMP(3) - count_veh_id(_3te25k2m)) > 0])
{
0: return bitmask(3);
 _3te25k2m_m_bitmask_vehicle_info;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_bitmask_vehicle_info_advanced2, [ STORE_TEMP(count_veh_id(_3te25k2m), 3), STORE_TEMP(3, 0x10F), (count_veh_id(_3te25k2m) - LOAD_TEMP(3)) > 0])
{
0: return bitmask(3);
 _3te25k2m_m_bitmask_vehicle_info_advanced3;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_bitmask_vehicle_info_advanced, position_in_consist_from_end == 1)
{
1: return bitmask(3);
 _3te25k2m_m_bitmask_vehicle_info_advanced2;
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_running_cost_factor,
[ STORE_TEMP(451, 0), // Моторы
   STORE_TEMP(0, 1), // Бригада
   STORE_TEMP(158, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(111, 4), // ТО
   STORE_TEMP(8, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(147, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
switch (FEAT_TRAINS, SELF, _3te25k2m_m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_NAME_3TE25K2M) | (string(STR_PURCHASE_HINT_FROM) << 16), 0x101), STORE_TEMP(2018 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_NAME_3TE25K2M) | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3te25k2m_m_additional_text, current_year <= 2023)
{
1: _3te25k2m_m_additional_text_hidden;
 _3te25k2m_m_additional_text_shown;
}
item (FEAT_TRAINS, _3te25k2m_m, 670)
{
property
{
name: string(STR_NAME_3TE25K2M_M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2018 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2018 -2050 -2 < retire_early_default ? 2050 -2018 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2018 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2018 -2050 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 73 > 255 ? 255 : 73;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (3401 * 0.9865);
 weight: (147) ton;
 tractive_effort_coefficient: (((428.1))/((147))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te25a;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3te25k2m_m_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: _3te25k2m_m_bitmask_vehicle_info_advanced;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _3te25k2m_m_create_effect_sprites_start;
                 default: _3te25k2m_m_sprites;
                purchase: _3te25k2m_m_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _3te25k2m_m_running_cost_factor;
                   speed: _3te25k2m_m_speed;
              start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3te25k2m_m)
{
property
{
name: string(STR_LONGNAME_3TE25K2M_M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3te25k2m_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3te25k2m_m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3te25k2m_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3te25k2m_m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3te25k2m_m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te70
spriteset (_2te70_purchase_graphics_ico, "src/diesel/2te70.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te70_purchase_graphics_noico, "src/diesel/2te70.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te70_purchase_sprites, enable_icons)
{
1: _2te70_purchase_graphics_ico;
 _2te70_purchase_graphics_noico;
}
spriteset (_2te70_notpowered_sprites_left, "src/diesel/2te70.png")
{
s13_template(32, 40, 0)
}
spriteset (_2te70_loading_sprites_left, "src/diesel/2te70.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (_2te70_traveling_sprites_left, "src/diesel/2te70.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup _2te70_normal_sprites_left
{
loading: _2te70_loading_sprites_left;
 loaded: _2te70_traveling_sprites_left;
}
spriteset (_2te70_sprites_right, "src/diesel/2te70.png")
{
s13_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te70_normal_sprites_left;
 _2te70_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te70_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te70_sprites_left2;
 1: _2te70_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te70_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te70_sprites_left1;
 128: _2te70_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) || (position_in_consist == 0) ])
{
1: _2te70_sprites_left;
 _2te70_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te70) + 1) % 2))
{
1: _2te70_sprites_2l;
 _2te70_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_old;
 _2te70_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_16;
 _2te70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_14;
 _2te70_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_12;
 _2te70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_10;
 _2te70_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_8;
 _2te70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_6;
 _2te70_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_sprites_4;
 _2te70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te70_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te70_sprites_parent, [ STORE_TEMP(count_veh_id(_2te70), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te70_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te70_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te70_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) || (position_in_consist == 0) ])
{
1: _2te70_create_effect_sprites_left;
 _2te70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te70) + 1) % 2))
{
1: _2te70_create_effect_sprites_2l;
 _2te70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_old;
 _2te70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_16;
 _2te70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_14;
 _2te70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_12;
 _2te70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_10;
 _2te70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_8;
 _2te70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_6;
 _2te70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te70_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te70) ])
{
1: _2te70_create_effect_sprites_4;
 _2te70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te70_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 110 * (100 - speed_penalty_percent) / 100 : 110)
{ return; }
switch (FEAT_TRAINS, SELF, _2te70_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te70), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te70_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te70), 0), STORE_TEMP(vehicle_type_id == _2te70, 1) ])
{ _2te70_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te70_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te70_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te70_running_cost_factor,
[ STORE_TEMP(478, 0), // Моторы
   STORE_TEMP(67, 1), // Бригада
   STORE_TEMP(168, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(117, 4), // ТО
   STORE_TEMP(8, 5), // Сертификация
   STORE_TEMP(110, 6), // Скорость
   STORE_TEMP(141, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 838
switch (FEAT_TRAINS, SELF, _2te70_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (2004 << 16), 0x101), STORE_TEMP(2007 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te70_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te70_additional_text, current_year <= 2007)
{
1: _2te70_additional_text_hidden;
 _2te70_additional_text_shown;
}
item (FEAT_TRAINS, _2te70, 176)
{
property
{
name: string(STR_NAME_2TE70);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2004 - delta_age, 1, 1);
 model_life: 2007 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2004 -2007 -2 < retire_early_default ? 2007 -2004 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2004 -2007 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2004 -2007 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 119 > 255 ? 255 : 119;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2985 * 0.9865);
 weight: (141) ton;
 tractive_effort_coefficient: (((632.0))/((141))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: _2te70_additional_text;
        articulated_part: articulated_part_dummy5;
    bitmask_vehicle_info: _2te70_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te70_create_effect_sprites_start;
                 default: _2te70_sprites;
                purchase: _2te70_purchase_sprites;
          purchase_speed: return 110;
     running_cost_factor: _2te70_running_cost_factor;
                   speed: _2te70_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te70)
{
property
{
name: string(STR_LONGNAME_2TE70);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te70)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te70)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te70)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te70)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te70)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2tep60
spriteset (_2tep60_v1_purchase_graphics_ico, "src/diesel/2tep60-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (_2tep60_v1_purchase_graphics_noico, "src/diesel/2tep60-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v1_purchase_sprites, enable_icons)
{
1: _2tep60_v1_purchase_graphics_ico;
 _2tep60_v1_purchase_graphics_noico;
}
spriteset (_2tep60_v1_notpowered_sprites_left, "src/diesel/2tep60-pre.png")
{
s11_template(32, 40, 0)
}
spriteset (_2tep60_v1_loading_sprites_left, "src/diesel/2tep60-pre.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2tep60_v1_traveling_sprites_left, "src/diesel/2tep60-pre.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2tep60_v1_normal_sprites_left
{
loading: _2tep60_v1_loading_sprites_left;
 loaded: _2tep60_v1_traveling_sprites_left;
}
spriteset (_2tep60_v1_sprites_right, "src/diesel/2tep60-pre.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2tep60_v1_normal_sprites_left;
 _2tep60_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2tep60_v1_sprites_left2;
 1: _2tep60_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2tep60_v1_sprites_left1;
 128: _2tep60_v1_sprites_left1;
}
spriteset (_2tep60_v2_purchase_graphics_ico, "src/diesel/2tep60.png")
{
new_purchase_template(0, 0)
}
spriteset (_2tep60_v2_purchase_graphics_noico, "src/diesel/2tep60.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v2_purchase_sprites, enable_icons)
{
1: _2tep60_v2_purchase_graphics_ico;
 _2tep60_v2_purchase_graphics_noico;
}
spriteset (_2tep60_v2_notpowered_sprites_left, "src/diesel/2tep60.png")
{
s11_template(32, 40, 0)
}
spriteset (_2tep60_v2_loading_sprites_left, "src/diesel/2tep60.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2tep60_v2_traveling_sprites_left, "src/diesel/2tep60.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2tep60_v2_normal_sprites_left
{
loading: _2tep60_v2_loading_sprites_left;
 loaded: _2tep60_v2_traveling_sprites_left;
}
spriteset (_2tep60_v2_sprites_right, "src/diesel/2tep60.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2tep60_v2_normal_sprites_left;
 _2tep60_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2tep60_v2_sprites_left2;
 1: _2tep60_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2tep60_v2_sprites_left1;
 128: _2tep60_v2_sprites_left1;
}
spriteset (_2tep60_v3_notpowered_sprites_left, "src/diesel/2tep60.png")
{
s11_template(32, 241, 0)
}
spriteset (_2tep60_v3_loading_sprites_left, "src/diesel/2tep60.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (_2tep60_v3_traveling_sprites_left, "src/diesel/2tep60.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup _2tep60_v3_normal_sprites_left
{
loading: _2tep60_v3_loading_sprites_left;
 loaded: _2tep60_v3_traveling_sprites_left;
}
spriteset (_2tep60_v3_sprites_right, "src/diesel/2tep60.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2tep60_v3_normal_sprites_left;
 _2tep60_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2tep60_v3_sprites_left2;
 1: _2tep60_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2tep60_v3_sprites_left1;
 128: _2tep60_v3_sprites_left1;
}
spriteset (_2tep60_v3_purchase_graphics_ico, "src/diesel/2tep60-a1970.png")
{
new_purchase_template(0, 0)
}
spriteset (_2tep60_v3_purchase_graphics_noico, "src/diesel/2tep60-a1970.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v3_purchase_sprites, enable_icons)
{
1: _2tep60_v3_purchase_graphics_ico;
 _2tep60_v3_purchase_graphics_noico;
}
spriteset (_2tep60_v4_notpowered_sprites_left, "src/diesel/2tep60-a1970.png")
{
s11_template(32, 40, 0)
}
spriteset (_2tep60_v4_loading_sprites_left, "src/diesel/2tep60-a1970.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (_2tep60_v4_traveling_sprites_left, "src/diesel/2tep60-a1970.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup _2tep60_v4_normal_sprites_left
{
loading: _2tep60_v4_loading_sprites_left;
 loaded: _2tep60_v4_traveling_sprites_left;
}
spriteset (_2tep60_v4_sprites_right, "src/diesel/2tep60-a1970.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2tep60_v4_normal_sprites_left;
 _2tep60_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2tep60_v4_sprites_left2;
 1: _2tep60_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2tep60_v4_sprites_left1;
 128: _2tep60_v4_sprites_left1;
}
spriteset (_2tep60_v5_notpowered_sprites_left, "src/diesel/2tep60-a1970.png")
{
s11_template(32, 241, 0)
}
spriteset (_2tep60_v5_loading_sprites_left, "src/diesel/2tep60-a1970.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (_2tep60_v5_traveling_sprites_left, "src/diesel/2tep60-a1970.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup _2tep60_v5_normal_sprites_left
{
loading: _2tep60_v5_loading_sprites_left;
 loaded: _2tep60_v5_traveling_sprites_left;
}
spriteset (_2tep60_v5_sprites_right, "src/diesel/2tep60-a1970.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2tep60_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2tep60_v5_normal_sprites_left;
 _2tep60_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2tep60_v5_sprites_left2;
 1: _2tep60_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2tep60_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2tep60_v5_sprites_left1;
 128: _2tep60_v5_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, _2tep60_purchase_sprites, (current_year >= 1966) + (current_year >= 1970))
{
0: _2tep60_v1_purchase_sprites;
 1: _2tep60_v2_purchase_sprites;
 _2tep60_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_b1970_sprites_left,
  cargo_subtype)
{
0: _2tep60_v2_sprites_left;
  1: _2tep60_v3_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_a1970_sprites_left,
  cargo_subtype)
{
0: _2tep60_v4_sprites_left;
  1: _2tep60_v5_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_b1970_sprites_right,
  cargo_subtype)
{
0: _2tep60_v2_sprites_right;
  1: _2tep60_v3_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_a1970_sprites_right,
  cargo_subtype)
{
0: _2tep60_v4_sprites_right;
  1: _2tep60_v5_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_sprites_left, build_year >= 1970)
{
0: _2tep60_a1966_b1970_sprites_left;
 _2tep60_a1966_a1970_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_left, build_year < 1966)
{
1: _2tep60_v1_sprites_left;
 _2tep60_a1966_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_sprites_right, build_year >= 1970)
{
0: _2tep60_a1966_b1970_sprites_right;
 _2tep60_a1966_a1970_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_right, build_year < 1966)
{
1: _2tep60_v1_sprites_right;
 _2tep60_a1966_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) || (position_in_consist == 0) ])
{
1: _2tep60_sprites_left;
 _2tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2tep60) + 1) % 2))
{
1: _2tep60_sprites_2l;
 _2tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_old;
 _2tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_16;
 _2tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_14;
 _2tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_12;
 _2tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_10;
 _2tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_8;
 _2tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_6;
 _2tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_sprites_4;
 _2tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2tep60_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2tep60_sprites_parent, [ STORE_TEMP(count_veh_id(_2tep60), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2tep60_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2tep60_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2tep60_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_7C);
 return string(STR_REFIT_TTD_B5);
}
switch (FEAT_TRAINS, SELF, _2tep60_cargo_subtype_text, build_year < 1966)
{
1: return string(STR_REFIT_PREPRODUCTION);
 _2tep60_a1966_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) || (position_in_consist == 0) ])
{
1: _2tep60_create_effect_sprites_left;
 _2tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2tep60) + 1) % 2))
{
1: _2tep60_create_effect_sprites_2l;
 _2tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_old;
 _2tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_16;
 _2tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_14;
 _2tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_12;
 _2tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_10;
 _2tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_8;
 _2tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_6;
 _2tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2tep60_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2tep60) ])
{
1: _2tep60_create_effect_sprites_4;
 _2tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2tep60_speed, [ STORE_TEMP((age_in_days >= (25 * 365 + 25 / 4)) ? 130 : 160, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, _2tep60_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2tep60), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2tep60_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2tep60), 0), STORE_TEMP(vehicle_type_id == _2tep60, 1) ])
{ _2tep60_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2tep60_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2tep60_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2tep60_running_cost_factor,
[ STORE_TEMP(299 - 10 * (build_year >= 1968), 0), // Моторы
   STORE_TEMP(42 - 2 * (build_year >= 1968), 1), // Бригада
   STORE_TEMP(105 - 4 * (build_year >= 1968), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(73 - 3 * (build_year >= 1968), 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(160, 6), // Скорость
   STORE_TEMP(127, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 524-506
switch (FEAT_TRAINS, SELF, _2tep60_cost_factor, build_year >= 1968)
{
1: return 42;
 return 43;
}
switch (FEAT_TRAINS, SELF, _2tep60_power, build_year >= 1968)
{
1: return int (2210 * 0.9865);
 return int (2315 * 0.9865);
}
switch (FEAT_TRAINS, SELF, _2tep60_b1966_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1964 << 16), 0x101), STORE_TEMP(1965 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2tep60_b1966_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2tep60_b1966_additional_text, current_year <= 1965)
{
1: _2tep60_b1966_additional_text_hidden;
 _2tep60_b1966_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1966 << 16), 0x101), STORE_TEMP(1987 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2tep60_a1966_additional_text, current_year <= 1987)
{
1: _2tep60_a1966_additional_text_hidden;
 _2tep60_a1966_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, _2tep60_additional_text, current_year >= 1966)
{
0: _2tep60_b1966_additional_text;
 _2tep60_a1966_additional_text;
}
item (FEAT_TRAINS, _2tep60, 152)
{
property
{
name: string(STR_NAME_2TEP60);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1964 - delta_age, 1, 1);
 model_life: 1987 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1964 -1987 -2 < retire_early_default ? 1987 -1964 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1964 -1987 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1964 -1987 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 43 > 255 ? 255 : 43;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2330 * 0.9865);
 weight: (127) ton;
 tractive_effort_coefficient: (((201.0))/((127))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tep60;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2tep60_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: _2tep60_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2tep60_cargo_subtype_text;
          colour_mapping: any_cc_colour;
             cost_factor: _2tep60_cost_factor;
           create_effect: _2tep60_create_effect_sprites_start;
                 default: _2tep60_sprites;
                   power: _2tep60_power;
                purchase: _2tep60_purchase_sprites;
          purchase_speed: return 160;
     running_cost_factor: _2tep60_running_cost_factor;
                   speed: _2tep60_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2tep60)
{
property
{
name: string(STR_LONGNAME_2TEP60);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2tep60)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2tep60)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2tep60)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2tep60)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2tep60)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te3250
spriteset (_2te3250_purchase_graphics_ico, "src/diesel/2te3250.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te3250_purchase_graphics_noico, "src/diesel/2te3250.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te3250_purchase_sprites, enable_icons)
{
1: _2te3250_purchase_graphics_ico;
 _2te3250_purchase_graphics_noico;
}
spriteset (_2te3250_notpowered_sprites_left, "src/diesel/2te3250.png")
{
s13_template(32, 40, 0)
}
spriteset (_2te3250_loading_sprites_left, "src/diesel/2te3250.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (_2te3250_traveling_sprites_left, "src/diesel/2te3250.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup _2te3250_normal_sprites_left
{
loading: _2te3250_loading_sprites_left;
 loaded: _2te3250_traveling_sprites_left;
}
spriteset (_2te3250_sprites_right, "src/diesel/2te3250.png")
{
s13_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te3250_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te3250_normal_sprites_left;
 _2te3250_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te3250_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te3250_sprites_left2;
 1: _2te3250_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te3250_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te3250_sprites_left1;
 128: _2te3250_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te3250_sprites_start, position_in_articulated_veh)
{
0: _2te3250_sprites_left;
 2: _2te3250_sprites_right;
 4: _2te3250_sprites_left;
 6: _2te3250_sprites_right;
 8: _2te3250_sprites_left;
 10: _2te3250_sprites_right;
 12: _2te3250_sprites_left;
 _2te3250_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te3250_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te3250_sprites_parent, [ STORE_TEMP(count_veh_id(_2te3250), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te3250_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te3250_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te3250_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) || (position_in_consist == 0) ])
{
1: _2te3250_create_effect_sprites_left;
 _2te3250_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te3250) + 1) % 2))
{
1: _2te3250_create_effect_sprites_2l;
 _2te3250_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_old;
 _2te3250_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_16;
 _2te3250_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_14;
 _2te3250_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_12;
 _2te3250_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_10;
 _2te3250_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_8;
 _2te3250_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_6;
 _2te3250_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te3250_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te3250) ])
{
1: _2te3250_create_effect_sprites_4;
 _2te3250_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te3250_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, _2te3250_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te3250), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te3250_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te3250), 0), STORE_TEMP(vehicle_type_id == _2te3250, 1) ])
{ _2te3250_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te3250_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te3250_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te3250_articulated_part, extra_callback_info1)
{
1: return dummy5;
 2: return _2te3250;
 3: return dummy5;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, _2te3250_running_cost_factor,
[ STORE_TEMP(2 * 561, 0), // Моторы
   STORE_TEMP(2 * 79, 1), // Бригада
   STORE_TEMP(2 * 197, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2 * 138, 4), // ТО
   STORE_TEMP(2 * 10, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(2 * 150, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 2 * 985
switch (FEAT_TRAINS, SELF, _2te3250_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2021 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_CATERPILLAR_EMD), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te3250_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_CATERPILLAR_EMD), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te3250_additional_text, current_year <= 2023)
{
1: _2te3250_additional_text_hidden;
 _2te3250_additional_text_shown;
}
item (FEAT_TRAINS, _2te3250, 729)
{
property
{
name: string(STR_NAME_2TE3250);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2021 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2021 -2050 -2 < retire_early_default ? 2050 -2021 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2021 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2021 -2050 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 2 * 107 > 255 ? 255 : 2 * 107;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2 * 3250 * 0.9865);
 weight: (2 * 150) ton;
 tractive_effort_coefficient: (((2 * 660))/((2 * 150))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: _2te3250_additional_text;
        articulated_part: _2te3250_articulated_part;
    bitmask_vehicle_info: _2te3250_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te3250_create_effect_sprites_start;
                 default: _2te3250_sprites;
                purchase: _2te3250_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: _2te3250_running_cost_factor;
                   speed: _2te3250_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te3250)
{
property
{
name: string(STR_LONGNAME_2TE3250);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te3250)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te3250)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te3250)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te3250)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te3250)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2m62
spriteset (_2m62_purchase_graphics_ico, "src/diesel/2m62.png")
{
new_purchase_template(0, 0)
}
spriteset (_2m62_purchase_graphics_noico, "src/diesel/2m62.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_purchase_sprites, enable_icons)
{
1: _2m62_purchase_graphics_ico;
 _2m62_purchase_graphics_noico;
}
spriteset (_2m62_v1_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 40, 0)
}
spriteset (_2m62_v1_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2m62_v1_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2m62_v1_normal_sprites_left
{
loading: _2m62_v1_loading_sprites_left;
 loaded: _2m62_v1_traveling_sprites_left;
}
spriteset (_2m62_v1_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v1_normal_sprites_left;
 _2m62_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v1_sprites_left2;
 1: _2m62_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v1_sprites_left1;
 128: _2m62_v1_sprites_left1;
}
spriteset (_2m62_v2_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 241, 0)
}
spriteset (_2m62_v2_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2m62_v2_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2m62_v2_normal_sprites_left
{
loading: _2m62_v2_loading_sprites_left;
 loaded: _2m62_v2_traveling_sprites_left;
}
spriteset (_2m62_v2_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v2_normal_sprites_left;
 _2m62_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v2_sprites_left2;
 1: _2m62_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v2_sprites_left1;
 128: _2m62_v2_sprites_left1;
}
spriteset (_2m62_v3_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 442, 0)
}
spriteset (_2m62_v3_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2m62_v3_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2m62_v3_normal_sprites_left
{
loading: _2m62_v3_loading_sprites_left;
 loaded: _2m62_v3_traveling_sprites_left;
}
spriteset (_2m62_v3_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v3_normal_sprites_left;
 _2m62_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v3_sprites_left2;
 1: _2m62_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v3_sprites_left1;
 128: _2m62_v3_sprites_left1;
}
spriteset (_2m62_v4_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 643, 0)
}
spriteset (_2m62_v4_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2m62_v4_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2m62_v4_normal_sprites_left
{
loading: _2m62_v4_loading_sprites_left;
 loaded: _2m62_v4_traveling_sprites_left;
}
spriteset (_2m62_v4_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v4_normal_sprites_left;
 _2m62_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v4_sprites_left2;
 1: _2m62_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v4_sprites_left1;
 128: _2m62_v4_sprites_left1;
}
spriteset (_2m62_v5_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 844, 0)
}
spriteset (_2m62_v5_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (_2m62_v5_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup _2m62_v5_normal_sprites_left
{
loading: _2m62_v5_loading_sprites_left;
 loaded: _2m62_v5_traveling_sprites_left;
}
spriteset (_2m62_v5_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v5_normal_sprites_left;
 _2m62_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v5_sprites_left2;
 1: _2m62_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v5_sprites_left1;
 128: _2m62_v5_sprites_left1;
}
spriteset (_2m62_v6_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 1045, 0)
}
spriteset (_2m62_v6_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 1045 +67, 0)
}
spriteset (_2m62_v6_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 1045 +134, 0)
}
spritegroup _2m62_v6_normal_sprites_left
{
loading: _2m62_v6_loading_sprites_left;
 loaded: _2m62_v6_traveling_sprites_left;
}
spriteset (_2m62_v6_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 1045, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v6_normal_sprites_left;
 _2m62_v6_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v6_sprites_left2;
 1: _2m62_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v6_sprites_left1;
 128: _2m62_v6_sprites_left1;
}
spriteset (_2m62_v7_notpowered_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 1246, 0)
}
spriteset (_2m62_v7_loading_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 1246 +67, 0)
}
spriteset (_2m62_v7_traveling_sprites_left, "src/diesel/2m62.png")
{
s10_template(32, 1246 +134, 0)
}
spritegroup _2m62_v7_normal_sprites_left
{
loading: _2m62_v7_loading_sprites_left;
 loaded: _2m62_v7_traveling_sprites_left;
}
spriteset (_2m62_v7_sprites_right, "src/diesel/2m62.png")
{
s10_r_template(32, 1246, 0)
}
switch (FEAT_TRAINS, SELF, _2m62_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62_v7_normal_sprites_left;
 _2m62_v7_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62_v7_sprites_left2;
 1: _2m62_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62_v7_sprites_left1;
 128: _2m62_v7_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_left_lg,
  ((build_year >= 2008) || (date_of_last_service >= date(2008,1,1))))
{
0: _2m62_v6_sprites_left;
     _2m62_v7_sprites_left;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_left,
  cargo_subtype)
{
0: _2m62_v1_sprites_left;
              14: _2m62_v1_sprites_left;
              15: _2m62_v2_sprites_left;
  29: _2m62_v3_sprites_left;
  33: _2m62_v4_sprites_left;
      16: _2m62_v5_sprites_left;
                   28: _2m62_sprites_left_lg;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_right_lg,
  ((build_year >= 2008) || (date_of_last_service >= date(2008,1,1))))
{
0: _2m62_v6_sprites_right;
     _2m62_v7_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_right,
  cargo_subtype)
{
0: _2m62_v1_sprites_right;
              14: _2m62_v1_sprites_right;
              15: _2m62_v2_sprites_right;
  29: _2m62_v3_sprites_right;
  33: _2m62_v4_sprites_right;
      16: _2m62_v5_sprites_right;
                   28: _2m62_sprites_right_lg;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) || (position_in_consist == 0) ])
{
1: _2m62_sprites_left;
 _2m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2m62) + 1) % 2))
{
1: _2m62_sprites_2l;
 _2m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_old;
 _2m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_16;
 _2m62_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_14;
 _2m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_12;
 _2m62_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_10;
 _2m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_8;
 _2m62_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_6;
 _2m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_sprites_4;
 _2m62_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2m62_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2m62_sprites_parent, [ STORE_TEMP(count_veh_id(_2m62), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2m62_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2m62_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2m62_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2m62_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 33: general_cargo_subtype_text_LV_KALININGRAD_RAILWAY;
 16: general_cargo_subtype_text_LV_OCTOBER_RAILWAY;
 28: general_cargo_subtype_text_LV_LG;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) || (position_in_consist == 0) ])
{
1: _2m62_create_effect_sprites_left;
 _2m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2m62) + 1) % 2))
{
1: _2m62_create_effect_sprites_2l;
 _2m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_old;
 _2m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_16;
 _2m62_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_14;
 _2m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_12;
 _2m62_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_10;
 _2m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_8;
 _2m62_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_6;
 _2m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62) ])
{
1: _2m62_create_effect_sprites_4;
 _2m62_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2m62_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2m62), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2m62_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2m62), 0), STORE_TEMP(vehicle_type_id == _2m62, 1) ])
{ _2m62_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2m62_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2m62_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2m62_running_cost_factor,
[ STORE_TEMP(191, 0), // Моторы
   STORE_TEMP(27, 1), // Бригада
   STORE_TEMP(67, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(47, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(120, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 335
switch (FEAT_TRAINS, SELF, _2m62_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1976 << 16), 0x101), STORE_TEMP(1988 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2m62_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2m62_additional_text, current_year <= 1988)
{
1: _2m62_additional_text_hidden;
 _2m62_additional_text_shown;
}
item (FEAT_TRAINS, _2m62, 167)
{
property
{
name: string(STR_NAME_2M62);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1976 - delta_age, 1, 1);
 model_life: 1988 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1976 -1988 -2 < retire_early_default ? 1988 -1976 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1976 -1988 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1976 -1988 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 34 > 255 ? 255 : 34;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1545 * 0.9865);
 weight: (120) ton;
 tractive_effort_coefficient: (((350.0))/((120))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: m62;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2m62_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2m62_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2m62_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2m62_create_effect_sprites_start;
                 default: _2m62_sprites;
                purchase: _2m62_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2m62_running_cost_factor;
                   speed: _2m62_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2m62)
{
property
{
name: string(STR_LONGNAME_2M62);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2m62)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2m62)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2m62)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2m62)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2m62)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2m62u
spriteset (_2m62u_purchase_graphics_ico, "src/diesel/3m62u-part1.png")
{
new_purchase_template(0, 0)
}
spriteset (_2m62u_purchase_graphics_noico, "src/diesel/3m62u-part1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_purchase_sprites, enable_icons)
{
1: _2m62u_purchase_graphics_ico;
 _2m62u_purchase_graphics_noico;
}
spriteset (_2m62u_v1_notpowered_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 40, 0)
}
spriteset (_2m62u_v1_loading_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2m62u_v1_traveling_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2m62u_v1_normal_sprites_left
{
loading: _2m62u_v1_loading_sprites_left;
 loaded: _2m62u_v1_traveling_sprites_left;
}
spriteset (_2m62u_v1_sprites_right, "src/diesel/3m62u-part1.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v1_normal_sprites_left;
 _2m62u_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v1_sprites_left2;
 1: _2m62u_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v1_sprites_left1;
 128: _2m62u_v1_sprites_left1;
}
spriteset (_2m62u_v2_notpowered_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 241, 0)
}
spriteset (_2m62u_v2_loading_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2m62u_v2_traveling_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2m62u_v2_normal_sprites_left
{
loading: _2m62u_v2_loading_sprites_left;
 loaded: _2m62u_v2_traveling_sprites_left;
}
spriteset (_2m62u_v2_sprites_right, "src/diesel/3m62u-part1.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v2_normal_sprites_left;
 _2m62u_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v2_sprites_left2;
 1: _2m62u_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v2_sprites_left1;
 128: _2m62u_v2_sprites_left1;
}
spriteset (_2m62u_v3_notpowered_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 442, 0)
}
spriteset (_2m62u_v3_loading_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2m62u_v3_traveling_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2m62u_v3_normal_sprites_left
{
loading: _2m62u_v3_loading_sprites_left;
 loaded: _2m62u_v3_traveling_sprites_left;
}
spriteset (_2m62u_v3_sprites_right, "src/diesel/3m62u-part1.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v3_normal_sprites_left;
 _2m62u_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v3_sprites_left2;
 1: _2m62u_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v3_sprites_left1;
 128: _2m62u_v3_sprites_left1;
}
spriteset (_2m62u_v4_notpowered_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 643, 0)
}
spriteset (_2m62u_v4_loading_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2m62u_v4_traveling_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2m62u_v4_normal_sprites_left
{
loading: _2m62u_v4_loading_sprites_left;
 loaded: _2m62u_v4_traveling_sprites_left;
}
spriteset (_2m62u_v4_sprites_right, "src/diesel/3m62u-part1.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v4_normal_sprites_left;
 _2m62u_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v4_sprites_left2;
 1: _2m62u_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v4_sprites_left1;
 128: _2m62u_v4_sprites_left1;
}
spriteset (_2m62u_v5_notpowered_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 844, 0)
}
spriteset (_2m62u_v5_loading_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (_2m62u_v5_traveling_sprites_left, "src/diesel/3m62u-part1.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup _2m62u_v5_normal_sprites_left
{
loading: _2m62u_v5_loading_sprites_left;
 loaded: _2m62u_v5_traveling_sprites_left;
}
spriteset (_2m62u_v5_sprites_right, "src/diesel/3m62u-part1.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v5_normal_sprites_left;
 _2m62u_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v5_sprites_left2;
 1: _2m62u_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v5_sprites_left1;
 128: _2m62u_v5_sprites_left1;
}
spriteset (_2m62u_v6_notpowered_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 40, 0)
}
spriteset (_2m62u_v6_loading_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2m62u_v6_traveling_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2m62u_v6_normal_sprites_left
{
loading: _2m62u_v6_loading_sprites_left;
 loaded: _2m62u_v6_traveling_sprites_left;
}
spriteset (_2m62u_v6_sprites_right, "src/diesel/3m62u-part2.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v6_normal_sprites_left;
 _2m62u_v6_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v6_sprites_left2;
 1: _2m62u_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v6_sprites_left1;
 128: _2m62u_v6_sprites_left1;
}
spriteset (_2m62u_v7_notpowered_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 241, 0)
}
spriteset (_2m62u_v7_loading_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2m62u_v7_traveling_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2m62u_v7_normal_sprites_left
{
loading: _2m62u_v7_loading_sprites_left;
 loaded: _2m62u_v7_traveling_sprites_left;
}
spriteset (_2m62u_v7_sprites_right, "src/diesel/3m62u-part2.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v7_normal_sprites_left;
 _2m62u_v7_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v7_sprites_left2;
 1: _2m62u_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v7_sprites_left1;
 128: _2m62u_v7_sprites_left1;
}
spriteset (_2m62u_v8_notpowered_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 442, 0)
}
spriteset (_2m62u_v8_loading_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2m62u_v8_traveling_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2m62u_v8_normal_sprites_left
{
loading: _2m62u_v8_loading_sprites_left;
 loaded: _2m62u_v8_traveling_sprites_left;
}
spriteset (_2m62u_v8_sprites_right, "src/diesel/3m62u-part2.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v8_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v8_normal_sprites_left;
 _2m62u_v8_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v8_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v8_sprites_left2;
 1: _2m62u_v8_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v8_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v8_sprites_left1;
 128: _2m62u_v8_sprites_left1;
}
spriteset (_2m62u_v9_notpowered_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 643, 0)
}
spriteset (_2m62u_v9_loading_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2m62u_v9_traveling_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2m62u_v9_normal_sprites_left
{
loading: _2m62u_v9_loading_sprites_left;
 loaded: _2m62u_v9_traveling_sprites_left;
}
spriteset (_2m62u_v9_sprites_right, "src/diesel/3m62u-part2.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v9_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v9_normal_sprites_left;
 _2m62u_v9_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v9_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v9_sprites_left2;
 1: _2m62u_v9_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v9_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v9_sprites_left1;
 128: _2m62u_v9_sprites_left1;
}
spriteset (_2m62u_v10_notpowered_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 844, 0)
}
spriteset (_2m62u_v10_loading_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (_2m62u_v10_traveling_sprites_left, "src/diesel/3m62u-part2.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup _2m62u_v10_normal_sprites_left
{
loading: _2m62u_v10_loading_sprites_left;
 loaded: _2m62u_v10_traveling_sprites_left;
}
spriteset (_2m62u_v10_sprites_right, "src/diesel/3m62u-part2.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, _2m62u_v10_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2m62u_v10_normal_sprites_left;
 _2m62u_v10_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v10_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2m62u_v10_sprites_left2;
 1: _2m62u_v10_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2m62u_v10_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2m62u_v10_sprites_left1;
 128: _2m62u_v10_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_left,
  cargo_subtype)
{
0: _2m62u_v1_sprites_left;
                  14: _2m62u_v1_sprites_left;
                  15: _2m62u_v2_sprites_left;
      29: _2m62u_v3_sprites_left;
  35: _2m62u_v4_sprites_left;
                       28: _2m62u_v5_sprites_left;
                      27: _2m62u_v6_sprites_left;
       26: _2m62u_v7_sprites_left;
      33: _2m62u_v8_sprites_left;
          16: _2m62u_v9_sprites_left;
           20: _2m62u_v10_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_right,
  cargo_subtype)
{
0: _2m62u_v1_sprites_right;
                  14: _2m62u_v1_sprites_right;
                  15: _2m62u_v2_sprites_right;
      29: _2m62u_v3_sprites_right;
  35: _2m62u_v4_sprites_right;
                       28: _2m62u_v5_sprites_right;
                      27: _2m62u_v6_sprites_right;
       26: _2m62u_v7_sprites_right;
      33: _2m62u_v8_sprites_right;
          16: _2m62u_v9_sprites_right;
           20: _2m62u_v10_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (position_in_consist == 0) ])
{
1: _2m62u_sprites_left;
 _2m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2m62u) - count_veh_id(_3m62u) - count_veh_id(_3m62u_m) + 1) % 2))
{
1: _2m62u_sprites_2l;
 _2m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_old;
 2: _2m62u_sprites_2l;
 _2m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_16;
 2: _2m62u_sprites_right;
 _2m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_14;
 2: _2m62u_sprites_2l;
 _2m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_12;
 2: _2m62u_sprites_right;
 _2m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_10;
 2: _2m62u_sprites_2l;
 _2m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_8;
 2: _2m62u_sprites_right;
 _2m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_6;
 2: _2m62u_sprites_2l;
 _2m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_sprites_4;
 2: _2m62u_sprites_right;
 _2m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _2m62u_sprites_left;
 _2m62u_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _2m62u_sprites_right;
 _2m62u_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2m62u_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2m62u_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2m62u_sprites_parent, [ STORE_TEMP(count_veh_id(_2m62u), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2m62u_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2m62u_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2m62u_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2m62u_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2m62u) - count_veh_id(_3m62u) - count_veh_id(_3m62u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2m62u_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2m62u) + count_veh_id(_3m62u) + count_veh_id(_3m62u_m), 0), STORE_TEMP((vehicle_type_id == _2m62u) || (vehicle_type_id == _3m62u) || (vehicle_type_id == _3m62u_m), 1) ])
{ _2m62u_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2m62u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2m62u_bitmask_vehicle_info2;
}
// отключить пенальти для ДРБ1
switch (FEAT_TRAINS, SELF, _2m62u_bitmask_vehicle_info_drb1_2,
  (position_in_consist_from_end == 1) && (cargo_subtype == 35))
{
1: return bitmask(1);
     return 0;
}
switch (FEAT_TRAINS, PARENT, _2m62u_bitmask_vehicle_info_drb1,
  ((num_vehs_in_consist - count_veh_id(214) * 2
                        - count_veh_id(213) * 2
                        - count_veh_id(_2m62u) * 2) == 0) &&
  ((count_veh_id(214) + count_veh_id(213)) >= 1))
{
1: _2m62u_bitmask_vehicle_info_drb1_2;
     _2m62u_bitmask_vehicle_info;
}
switch (FEAT_TRAINS, SELF, _2m62u_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 20: general_cargo_subtype_text_LV_MOSCOW_RAILWAY;
 33: general_cargo_subtype_text_LV_KALININGRAD_RAILWAY;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 35: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY_DRB;
 16: general_cargo_subtype_text_LV_OCTOBER_RAILWAY;
 28: general_cargo_subtype_text_LV_LG;
 27: general_cargo_subtype_text_LV_LDZ;
 26: general_cargo_subtype_text_LV_LATVIJAS_EKSPRESIS;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _2m62u_refit_cost, ((extra_callback_info1 & 0xFF00) == (35 << 8)) + ((cargo_subtype == 35) * 2))
{
1: return 2;
 return 0 | CB_RESULT_AUTOREFIT;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (position_in_consist == 0) ])
{
1: _2m62u_create_effect_sprites_left;
 _2m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2m62u) - count_veh_id(_3m62u) - count_veh_id(_3m62u_m) + 1) % 2))
{
1: _2m62u_create_effect_sprites_2l;
 _2m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_old;
 2: _2m62u_create_effect_sprites_2l;
 _2m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_16;
 2: _2m62u_create_effect_sprites_right;
 _2m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_14;
 2: _2m62u_create_effect_sprites_2l;
 _2m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_12;
 2: _2m62u_create_effect_sprites_right;
 _2m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_10;
 2: _2m62u_create_effect_sprites_2l;
 _2m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_8;
 2: _2m62u_create_effect_sprites_right;
 _2m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_6;
 2: _2m62u_create_effect_sprites_2l;
 _2m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _2m62u_create_effect_sprites_4;
 2: _2m62u_create_effect_sprites_right;
 _2m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _2m62u_create_effect_sprites_left;
 _2m62u_create_effect_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2m62u_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _2m62u_create_effect_sprites_right;
 _2m62u_create_effect_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2m62u_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2m62u_running_cost_factor,
[ STORE_TEMP(194, 0), // Моторы
   STORE_TEMP(27, 1), // Бригада
   STORE_TEMP(68, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(48, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 341
switch (FEAT_TRAINS, SELF, _2m62u_b1998_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_3M62U) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1987 | (2000 << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2m62u_b1998_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_3M62U) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2m62u_b1998_additional_text, current_year <= 2000)
{
1: _2m62u_b1998_additional_text_hidden;
 _2m62u_b1998_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, _2m62u_a1998_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_3M62U) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1987 | (2000 << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) | (string(STR_PURCHASE_HINT_DRB1) << 16), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, _2m62u_a1998_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_3M62U) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_DRB1), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, _2m62u_a1998_additional_text, current_year <= 2000)
{
1: _2m62u_a1998_additional_text_hidden;
 _2m62u_a1998_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, _2m62u_additional_text, current_year >= 1998)
{
0: _2m62u_b1998_additional_text;
 _2m62u_a1998_additional_text;
}
item (FEAT_TRAINS, _2m62u, 168)
{
property
{
name: string(STR_NAME_2M62U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1987 - delta_age, 1, 1);
 model_life: 2000 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1987 -2000 -2 < retire_early_default ? 2000 -1987 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1987 -2000 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1987 -2000 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 35 > 255 ? 255 : 35;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1545 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((350.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: m62;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2m62u_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2m62u_bitmask_vehicle_info_drb1;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2m62u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2m62u_create_effect_sprites_start;
                 default: _2m62u_sprites;
                purchase: _2m62u_purchase_sprites;
          purchase_speed: return 100;
              refit_cost: _2m62u_refit_cost;
     running_cost_factor: _2m62u_running_cost_factor;
                   speed: _2m62u_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2m62u)
{
property
{
name: string(STR_LONGNAME_2M62U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2m62u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2m62u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2m62u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2m62u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2m62u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3m62u
spriteset (_3m62u_purchase_graphics_ico, "src/diesel/3m62u-part1.png")
{
new_purchase_template(0, 19)
}
spriteset (_3m62u_purchase_graphics_noico, "src/diesel/3m62u-part1.png")
{
new_purchase_template_noico(0, 19)
}
switch (FEAT_TRAINS, SELF, _3m62u_purchase_sprites, enable_icons)
{
1: _3m62u_purchase_graphics_ico;
 _3m62u_purchase_graphics_noico;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_left,
  cargo_subtype)
{
0: _2m62u_v1_sprites_left;
              14: _2m62u_v1_sprites_left;
              15: _2m62u_v2_sprites_left;
  33: _2m62u_v8_sprites_left;
       20: _2m62u_v10_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_right,
  cargo_subtype)
{
0: _2m62u_v1_sprites_right;
              14: _2m62u_v1_sprites_right;
              15: _2m62u_v2_sprites_right;
  33: _2m62u_v8_sprites_right;
       20: _2m62u_v10_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (position_in_consist == 0) ])
{
1: _3m62u_sprites_left;
 _3m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_3m62u) - count_veh_id(_2m62u) - count_veh_id(_3m62u_m) + 1) % 2))
{
1: _3m62u_sprites_2l;
 _3m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_old;
 2: _3m62u_sprites_2l;
 _3m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_16;
 2: _3m62u_sprites_right;
 _3m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_14;
 2: _3m62u_sprites_2l;
 _3m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_12;
 2: _3m62u_sprites_right;
 _3m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_10;
 2: _3m62u_sprites_2l;
 _3m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_8;
 2: _3m62u_sprites_right;
 _3m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_6;
 2: _3m62u_sprites_2l;
 _3m62u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_sprites_4;
 2: _3m62u_sprites_right;
 _3m62u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _3m62u_sprites_left;
 _3m62u_sprites_2;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _3m62u_sprites_right;
 _3m62u_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _3m62u_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _3m62u_sprites_start; }
switch (FEAT_TRAINS, PARENT, _3m62u_sprites_parent, [ STORE_TEMP(count_veh_id(_3m62u), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _3m62u_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _3m62u_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _3m62u_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _3m62u_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 20: general_cargo_subtype_text_LV_MOSCOW_RAILWAY;
 33: general_cargo_subtype_text_LV_KALININGRAD_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
// new_3x_train_start_stop(_3m62u)
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u) || (position_in_consist == 0) ])
{
1: _3m62u_create_effect_sprites_left;
 _3m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_3m62u) - count_veh_id(_2m62u) - count_veh_id(_3m62u_m) + 1) % 2))
{
1: _3m62u_create_effect_sprites_2l;
 _3m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_old;
 2: _3m62u_create_effect_sprites_2l;
 _3m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_16;
 2: _3m62u_create_effect_sprites_right;
 _3m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_14;
 2: _3m62u_create_effect_sprites_2l;
 _3m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_12;
 2: _3m62u_create_effect_sprites_right;
 _3m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_10;
 2: _3m62u_create_effect_sprites_2l;
 _3m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_8;
 2: _3m62u_create_effect_sprites_right;
 _3m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_6;
 2: _3m62u_create_effect_sprites_2l;
 _3m62u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2m62u)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) * 2) ])
{
1: _3m62u_create_effect_sprites_4;
 2: _3m62u_create_effect_sprites_right;
 _3m62u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _3m62u_create_effect_sprites_left;
 _3m62u_create_effect_sprites_2;
}
switch (FEAT_TRAINS, SELF, _3m62u_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _3m62u_m) ])
{
1: _3m62u_create_effect_sprites_right;
 _3m62u_create_effect_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _3m62u_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _3m62u_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3m62u) - count_veh_id(_2m62u) - count_veh_id(_3m62u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3m62u_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3m62u) + count_veh_id(_2m62u) + count_veh_id(_3m62u_m), 0), STORE_TEMP((vehicle_type_id == _3m62u) || (vehicle_type_id == _2m62u) || (vehicle_type_id == _3m62u_m), 1) ])
{ _3m62u_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3m62u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3m62u_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3m62u_running_cost_factor,
[ STORE_TEMP(194, 0), // Моторы
   STORE_TEMP(27, 1), // Бригада
   STORE_TEMP(68, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(48, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 341
switch (FEAT_TRAINS, SELF, _3m62u_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_2M62U) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1986 | (1992 << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3m62u_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_2M62U) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3m62u_additional_text, current_year <= 1992)
{
1: _3m62u_additional_text_hidden;
 _3m62u_additional_text_shown;
}
item (FEAT_TRAINS, _3m62u, 169)
{
property
{
name: string(STR_NAME_3M62U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1986 - delta_age, 1, 1);
 model_life: 1992 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1986 -1992 -2 < retire_early_default ? 1992 -1986 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1986 -1992 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1986 -1992 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 35 > 255 ? 255 : 35;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1546 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((350.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: m62;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3m62u_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _3m62u_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _3m62u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _3m62u_create_effect_sprites_start;
                 default: _3m62u_sprites;
                purchase: _3m62u_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _3m62u_running_cost_factor;
                   speed: _3m62u_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3m62u)
{
property
{
name: string(STR_LONGNAME_3M62U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3m62u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3m62u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3m62u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3m62u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3m62u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3m62u_m
spriteset (_3m62u_m_purchase_graphics_ico, "src/diesel/3m62u_m.png")
{
new_purchase_template(0, 0)
}
spriteset (_3m62u_m_purchase_graphics_noico, "src/diesel/3m62u_m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_purchase_sprites, enable_icons)
{
1: _3m62u_m_purchase_graphics_ico;
 _3m62u_m_purchase_graphics_noico;
}
spriteset (_3m62u_m_v1_sprites_left_g, "src/diesel/3m62u_m.png")
{
s10_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v1_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v1_sprites_left_g; }
spriteset (_3m62u_m_v1_sprites_right_g, "src/diesel/3m62u_m.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v1_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v1_sprites_right_g; }
spriteset (_3m62u_m_v2_sprites_left_g, "src/diesel/3m62u_m.png")
{
s10_template(32, 107, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v2_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v2_sprites_left_g; }
spriteset (_3m62u_m_v2_sprites_right_g, "src/diesel/3m62u_m.png")
{
s10_r_template(32, 107, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v2_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v2_sprites_right_g; }
spriteset (_3m62u_m_v3_sprites_left_g, "src/diesel/3m62u_m.png")
{
s10_template(32, 174, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v3_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v3_sprites_left_g; }
spriteset (_3m62u_m_v3_sprites_right_g, "src/diesel/3m62u_m.png")
{
s10_r_template(32, 174, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v3_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v3_sprites_right_g; }
spriteset (_3m62u_m_v4_sprites_left_g, "src/diesel/3m62u_m.png")
{
s10_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v4_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v4_sprites_left_g; }
spriteset (_3m62u_m_v4_sprites_right_g, "src/diesel/3m62u_m.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _3m62u_m_v4_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3m62u_m_v4_sprites_right_g; }
switch (FEAT_TRAINS, SELF, _3m62u_m_sprites_left,
  cargo_subtype)
{
0: _3m62u_m_v1_sprites_left;
              14: _3m62u_m_v1_sprites_left;
              15: _3m62u_m_v2_sprites_left;
       20: _3m62u_m_v3_sprites_left;
  33: _3m62u_m_v4_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3m62u_m_sprites_right,
  cargo_subtype)
{
0: _3m62u_m_v1_sprites_right;
              14: _3m62u_m_v1_sprites_right;
              15: _3m62u_m_v2_sprites_right;
       20: _3m62u_m_v3_sprites_right;
  33: _3m62u_m_v4_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3m62u_m_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3m62u_m_sprites_left;
 _3m62u_m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _3m62u_m_sprites_start; }
switch (FEAT_TRAINS, PARENT, _3m62u_m_sprites_parent, [ STORE_TEMP(count_veh_id(_3m62u_m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _3m62u_m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _3m62u_m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _3m62u_m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _3m62u_m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3m62u_m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3m62u_m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3m62u_m_create_effect_sprites_left;
 _3m62u_m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3m62u_m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _3m62u_m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3m62u_m) - count_veh_id(_2m62u) - count_veh_id(_3m62u), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3m62u_m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3m62u_m) + count_veh_id(_2m62u) + count_veh_id(_3m62u), 0), STORE_TEMP((vehicle_type_id == _3m62u_m) || (vehicle_type_id == _2m62u) || (vehicle_type_id == _3m62u), 1) ])
{ _3m62u_m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3m62u_m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3m62u_m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3m62u_m_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 20: general_cargo_subtype_text_LV_MOSCOW_RAILWAY;
 33: general_cargo_subtype_text_LV_KALININGRAD_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, _3m62u_m_running_cost_factor,
[ STORE_TEMP(175, 0), // Моторы
   STORE_TEMP(6, 1), // Бригада
   STORE_TEMP(61, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(43, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 307
switch (FEAT_TRAINS, SELF, _3m62u_m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST2) | (string(STR_NAME_2M62U) << 16), 0x101), STORE_TEMP(string(STR_NAME_3M62U) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x102), STORE_TEMP(1986 | (1992 << 16), 0x103), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3m62u_m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST2) | (string(STR_NAME_2M62U) << 16), 0x101), STORE_TEMP(string(STR_NAME_3M62U) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3m62u_m_additional_text, current_year <= 1992)
{
1: _3m62u_m_additional_text_hidden;
 _3m62u_m_additional_text_shown;
}
item (FEAT_TRAINS, _3m62u_m, 170)
{
property
{
name: string(STR_NAME_3M62U_M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1986 - delta_age, 1, 1);
 model_life: 1992 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1986 -1992 -2 < retire_early_default ? 1992 -1986 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1986 -1992 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1986 -1992 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 34 > 255 ? 255 : 34;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1546 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((350.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: m62;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3m62u_m_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _3m62u_m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _3m62u_m_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _3m62u_m_create_effect_sprites_start;
                 default: _3m62u_m_sprites;
                purchase: _3m62u_m_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _3m62u_m_running_cost_factor;
                   speed: _3m62u_m_speed;
              start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3m62u_m)
{
property
{
name: string(STR_LONGNAME_3M62U_M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3m62u_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3m62u_m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3m62u_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3m62u_m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3m62u_m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10m
spriteset (_2te10m_v1_purchase_graphics_ico, "src/diesel/3te10m.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10m_v1_purchase_graphics_noico, "src/diesel/3te10m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v1_purchase_sprites, enable_icons)
{
1: _2te10m_v1_purchase_graphics_ico;
 _2te10m_v1_purchase_graphics_noico;
}
spriteset (_2te10m_v2_purchase_graphics_ico, "src/diesel/3te10m.png")
{
new_purchase_template(110, 0)
}
spriteset (_2te10m_v2_purchase_graphics_noico, "src/diesel/3te10m.png")
{
new_purchase_template_noico(110, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v2_purchase_sprites, enable_icons)
{
1: _2te10m_v2_purchase_graphics_ico;
 _2te10m_v2_purchase_graphics_noico;
}
switch (FEAT_TRAINS, PARENT, _2te10m_purchase_sprites, current_year >= 1985)
{
0: _2te10m_v1_purchase_sprites;
 _2te10m_v2_purchase_sprites;
}
spriteset (_2te10m_v1_notpowered_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10m_v1_loading_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10m_v1_traveling_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10m_v1_normal_sprites_left
{
loading: _2te10m_v1_loading_sprites_left;
 loaded: _2te10m_v1_traveling_sprites_left;
}
spriteset (_2te10m_v1_sprites_right, "src/diesel/3te10m.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10m_v1_normal_sprites_left;
 _2te10m_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10m_v1_sprites_left2;
 1: _2te10m_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10m_v1_sprites_left1;
 128: _2te10m_v1_sprites_left1;
}
spriteset (_2te10m_v2_notpowered_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 241, 0)
}
spriteset (_2te10m_v2_loading_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2te10m_v2_traveling_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2te10m_v2_normal_sprites_left
{
loading: _2te10m_v2_loading_sprites_left;
 loaded: _2te10m_v2_traveling_sprites_left;
}
spriteset (_2te10m_v2_sprites_right, "src/diesel/3te10m.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10m_v2_normal_sprites_left;
 _2te10m_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10m_v2_sprites_left2;
 1: _2te10m_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10m_v2_sprites_left1;
 128: _2te10m_v2_sprites_left1;
}
spriteset (_2te10m_v3_notpowered_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 442, 0)
}
spriteset (_2te10m_v3_loading_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2te10m_v3_traveling_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2te10m_v3_normal_sprites_left
{
loading: _2te10m_v3_loading_sprites_left;
 loaded: _2te10m_v3_traveling_sprites_left;
}
spriteset (_2te10m_v3_sprites_right, "src/diesel/3te10m.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10m_v3_normal_sprites_left;
 _2te10m_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10m_v3_sprites_left2;
 1: _2te10m_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10m_v3_sprites_left1;
 128: _2te10m_v3_sprites_left1;
}
spriteset (_2te10m_v4_notpowered_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 643, 0)
}
spriteset (_2te10m_v4_loading_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2te10m_v4_traveling_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2te10m_v4_normal_sprites_left
{
loading: _2te10m_v4_loading_sprites_left;
 loaded: _2te10m_v4_traveling_sprites_left;
}
spriteset (_2te10m_v4_sprites_right, "src/diesel/3te10m.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10m_v4_normal_sprites_left;
 _2te10m_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10m_v4_sprites_left2;
 1: _2te10m_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10m_v4_sprites_left1;
 128: _2te10m_v4_sprites_left1;
}
spriteset (_2te10m_v5_notpowered_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 844, 0)
}
spriteset (_2te10m_v5_loading_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (_2te10m_v5_traveling_sprites_left, "src/diesel/3te10m.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup _2te10m_v5_normal_sprites_left
{
loading: _2te10m_v5_loading_sprites_left;
 loaded: _2te10m_v5_traveling_sprites_left;
}
spriteset (_2te10m_v5_sprites_right, "src/diesel/3te10m.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, _2te10m_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10m_v5_normal_sprites_left;
 _2te10m_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10m_v5_sprites_left2;
 1: _2te10m_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10m_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10m_v5_sprites_left1;
 128: _2te10m_v5_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_left_b1985,
  cargo_subtype)
{
0: _2te10m_v1_sprites_left;
  1: _2te10m_v2_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_left_a1985,
  cargo_subtype)
{
0: _2te10m_v3_sprites_left;
  1: _2te10m_v4_sprites_left;
  2: _2te10m_v5_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_left,
  ((build_year >= 1985) || (date_of_last_service >= date(1985,1,1))))
{
0: _2te10m_sprites_left_b1985;
     _2te10m_sprites_left_a1985;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_right_b1985,
  cargo_subtype)
{
0: _2te10m_v1_sprites_right;
  1: _2te10m_v2_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_right_a1985,
  cargo_subtype)
{
0: _2te10m_v3_sprites_right;
  1: _2te10m_v4_sprites_right;
  2: _2te10m_v5_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_right,
  ((build_year >= 1985) || (date_of_last_service >= date(1985,1,1))))
{
0: _2te10m_sprites_right_b1985;
     _2te10m_sprites_right_a1985;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (position_in_consist == 0) ])
{
1: _2te10m_sprites_left;
 _2te10m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10m) - count_veh_id(_2te10u) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m) + 1) % 2))
{
1: _2te10m_sprites_2l;
 _2te10m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_old;
 2: _2te10m_sprites_2l;
 _2te10m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_16;
 2: _2te10m_sprites_right;
 _2te10m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_14;
 2: _2te10m_sprites_2l;
 _2te10m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_12;
 2: _2te10m_sprites_right;
 _2te10m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_10;
 2: _2te10m_sprites_2l;
 _2te10m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_8;
 2: _2te10m_sprites_right;
 _2te10m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_6;
 2: _2te10m_sprites_2l;
 _2te10m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_sprites_4;
 2: _2te10m_sprites_right;
 _2te10m_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_ml, [ STORE_TEMP(2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10m_sprites_left;
 _2te10m_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_start, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10m_sprites_right;
 _2te10m_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2te10m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10m_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10m_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10m_b1985_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te10m_a1985_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_TTD_15);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te10m_cargo_subtype_text, build_year >= 1985)
{
0: _2te10m_b1985_cargo_subtype_text;
 _2te10m_a1985_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (position_in_consist == 0) ])
{
1: _2te10m_create_effect_sprites_left;
 _2te10m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10m) - count_veh_id(_2te10u) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m) + 1) % 2))
{
1: _2te10m_create_effect_sprites_2l;
 _2te10m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_old;
 2: _2te10m_create_effect_sprites_2l;
 _2te10m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_16;
 2: _2te10m_create_effect_sprites_right;
 _2te10m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_14;
 2: _2te10m_create_effect_sprites_2l;
 _2te10m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_12;
 2: _2te10m_create_effect_sprites_right;
 _2te10m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_10;
 2: _2te10m_create_effect_sprites_2l;
 _2te10m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_8;
 2: _2te10m_create_effect_sprites_right;
 _2te10m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_6;
 2: _2te10m_create_effect_sprites_2l;
 _2te10m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10m_create_effect_sprites_4;
 2: _2te10m_create_effect_sprites_right;
 _2te10m_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_ml, [ STORE_TEMP(2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10m_create_effect_sprites_left;
 _2te10m_create_effect_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2te10m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10m_create_effect_sprites_right;
 _2te10m_create_effect_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2te10m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10m) - count_veh_id(_2te10u) - count_veh_id(_3te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10m) + count_veh_id(_2te10u) + count_veh_id(_3te10m) + count_veh_id(_3te10u) + count_veh_id(_3te10m_m) + count_veh_id(_3te10u_m), 0), STORE_TEMP((vehicle_type_id == _2te10m) || (vehicle_type_id == _2te10u) || (vehicle_type_id == _3te10m) || (vehicle_type_id == _3te10u) || (vehicle_type_id == _3te10m_m) || (vehicle_type_id == _3te10u_m), 1) ])
{ _2te10m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10m_running_cost_factor,
[ STORE_TEMP(272, 0), // Моторы
   STORE_TEMP(38, 1), // Бригада
   STORE_TEMP(96, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(67, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 478
switch (FEAT_TRAINS, SELF, _2te10m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_3TE10M) | (string(STR_NAME_3TE10U) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1981 << 16), 0x103), STORE_TEMP(1990 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_3TE10M) | (string(STR_NAME_3TE10U) << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10m_additional_text, current_year <= 1990)
{
1: _2te10m_additional_text_hidden;
 _2te10m_additional_text_shown;
}
item (FEAT_TRAINS, _2te10m, 159)
{
property
{
name: string(STR_NAME_2TE10M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1981 - delta_age, 1, 1);
 model_life: 1990 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1981 -1990 -2 < retire_early_default ? 1990 -1981 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1981 -1990 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1981 -1990 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2270 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10m_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10m_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10m_create_effect_sprites_start;
                 default: _2te10m_sprites;
                purchase: _2te10m_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10m_running_cost_factor;
                   speed: _2te10m_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10m)
{
property
{
name: string(STR_LONGNAME_2TE10M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3te10m
spriteset (_3te10m_v1_purchase_graphics_ico, "src/diesel/3te10m.png")
{
new_purchase_template(0, 19)
}
spriteset (_3te10m_v1_purchase_graphics_noico, "src/diesel/3te10m.png")
{
new_purchase_template_noico(0, 19)
}
switch (FEAT_TRAINS, SELF, _3te10m_v1_purchase_sprites, enable_icons)
{
1: _3te10m_v1_purchase_graphics_ico;
 _3te10m_v1_purchase_graphics_noico;
}
spriteset (_3te10m_v2_purchase_graphics_ico, "src/diesel/3te10m.png")
{
new_purchase_template(110, 19)
}
spriteset (_3te10m_v2_purchase_graphics_noico, "src/diesel/3te10m.png")
{
new_purchase_template_noico(110, 19)
}
switch (FEAT_TRAINS, SELF, _3te10m_v2_purchase_sprites, enable_icons)
{
1: _3te10m_v2_purchase_graphics_ico;
 _3te10m_v2_purchase_graphics_noico;
}
switch (FEAT_TRAINS, PARENT, _3te10m_purchase_sprites, current_year >= 1985)
{
0: _3te10m_v1_purchase_sprites;
 _3te10m_v2_purchase_sprites;
}
// new_3x_train_start_stop(_3te10m)
switch (FEAT_TRAINS, SELF, _3te10m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _3te10m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3te10m) - count_veh_id(_2te10u) - count_veh_id(_2te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3te10m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3te10m) + count_veh_id(_2te10u) + count_veh_id(_2te10m) + count_veh_id(_3te10u) + count_veh_id(_3te10m_m) + count_veh_id(_3te10u_m), 0), STORE_TEMP((vehicle_type_id == _3te10m) || (vehicle_type_id == _2te10u) || (vehicle_type_id == _2te10m) || (vehicle_type_id == _3te10u) || (vehicle_type_id == _3te10m_m) || (vehicle_type_id == _3te10u_m), 1) ])
{ _3te10m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3te10m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3te10m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3te10m_running_cost_factor,
[ STORE_TEMP(272, 0), // Моторы
   STORE_TEMP(38, 1), // Бригада
   STORE_TEMP(96, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(67, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 478
switch (FEAT_TRAINS, SELF, _3te10m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_2TE10M) | (string(STR_NAME_3TE10U) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1979 << 16), 0x103), STORE_TEMP(1990 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3te10m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_2TE10M) | (string(STR_NAME_3TE10U) << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3te10m_additional_text, current_year <= 1990)
{
1: _3te10m_additional_text_hidden;
 _3te10m_additional_text_shown;
}
item (FEAT_TRAINS, _3te10m, 160)
{
property
{
name: string(STR_NAME_3TE10M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1979 - delta_age, 1, 1);
 model_life: 1990 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1979 -1990 -2 < retire_early_default ? 1990 -1979 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1979 -1990 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1979 -1990 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2273 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10m;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3te10m_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _3te10m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10m_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10m_create_effect_sprites_start;
                 default: _2te10m_sprites;
                purchase: _3te10m_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _3te10m_running_cost_factor;
                   speed: _3te10m_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3te10m)
{
property
{
name: string(STR_LONGNAME_3TE10M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3te10m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3te10m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3te10m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3te10m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3te10m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3te10m_m
spriteset (_3te10m_m_purchase_graphics_ico, "src/diesel/3te10m_m.png")
{
new_purchase_template(0, 0)
}
spriteset (_3te10m_m_purchase_graphics_noico, "src/diesel/3te10m_m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_purchase_sprites, enable_icons)
{
1: _3te10m_m_purchase_graphics_ico;
 _3te10m_m_purchase_graphics_noico;
}
spriteset (_3te10m_m_v1_sprites_left_g, "src/diesel/3te10m_m.png")
{
s10_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_v1_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10m_m_v1_sprites_left_g; }
spriteset (_3te10m_m_v1_sprites_right_g, "src/diesel/3te10m_m.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_v1_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10m_m_v1_sprites_right_g; }
spriteset (_3te10m_m_v2_sprites_left_g, "src/diesel/3te10m_m.png")
{
s10_template(32, 107, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_v2_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10m_m_v2_sprites_left_g; }
spriteset (_3te10m_m_v2_sprites_right_g, "src/diesel/3te10m_m.png")
{
s10_r_template(32, 107, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_v2_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10m_m_v2_sprites_right_g; }
spriteset (_3te10m_m_v3_sprites_left_g, "src/diesel/3te10m_m.png")
{
s10_template(32, 174, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_v3_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10m_m_v3_sprites_left_g; }
spriteset (_3te10m_m_v3_sprites_right_g, "src/diesel/3te10m_m.png")
{
s10_r_template(32, 174, 0)
}
switch (FEAT_TRAINS, SELF, _3te10m_m_v3_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10m_m_v3_sprites_right_g; }
switch (FEAT_TRAINS, SELF, _3te10m_m_sprites_left,
  cargo_subtype)
{
0: _3te10m_m_v1_sprites_left;
  1: _3te10m_m_v2_sprites_left;
  2: _3te10m_m_v3_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3te10m_m_sprites_right,
  cargo_subtype)
{
0: _3te10m_m_v1_sprites_right;
  1: _3te10m_m_v2_sprites_right;
  2: _3te10m_m_v3_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3te10m_m_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3te10m_m_sprites_left;
 _3te10m_m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te10m_m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _3te10m_m_sprites_start; }
switch (FEAT_TRAINS, PARENT, _3te10m_m_sprites_parent, [ STORE_TEMP(count_veh_id(_3te10m_m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _3te10m_m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _3te10m_m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _3te10m_m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _3te10m_m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te10m_m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te10m_m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3te10m_m_create_effect_sprites_left;
 _3te10m_m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te10m_m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _3te10m_m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3te10m_m) - count_veh_id(_2te10m) - count_veh_id(_2te10u) - count_veh_id(_3te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3te10m_m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3te10m_m) + count_veh_id(_2te10m) + count_veh_id(_2te10u) + count_veh_id(_3te10m) + count_veh_id(_3te10u) + count_veh_id(_3te10u_m), 0), STORE_TEMP((vehicle_type_id == _3te10m_m) || (vehicle_type_id == _2te10m) || (vehicle_type_id == _2te10u) || (vehicle_type_id == _3te10m) || (vehicle_type_id == _3te10u) || (vehicle_type_id == _3te10u_m), 1) ])
{ _3te10m_m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3te10m_m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3te10m_m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3te10m_m_running_cost_factor,
[ STORE_TEMP(245, 0), // Моторы
   STORE_TEMP(9, 1), // Бригада
   STORE_TEMP(86, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(60, 4), // ТО
   STORE_TEMP(4, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 430
switch (FEAT_TRAINS, SELF, _3te10m_m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST4) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_2TE10M) | (string(STR_NAME_3TE10M) << 16), 0x102), STORE_TEMP(string(STR_NAME_3TE10U) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x103), STORE_TEMP(1979 | (1990 << 16), 0x104), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x105)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3te10m_m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST4) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_2TE10M) | (string(STR_NAME_3TE10M) << 16), 0x102), STORE_TEMP(string(STR_NAME_3TE10U) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3te10m_m_additional_text, current_year <= 1990)
{
1: _3te10m_m_additional_text_hidden;
 _3te10m_m_additional_text_shown;
}
item (FEAT_TRAINS, _3te10m_m, 161)
{
property
{
name: string(STR_NAME_3TE10M_M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1979 - delta_age, 1, 1);
 model_life: 1990 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1979 -1990 -2 < retire_early_default ? 1990 -1979 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1979 -1990 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1979 -1990 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 48 > 255 ? 255 : 48;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2273 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10m;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3te10m_m_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _3te10m_m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10m_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _3te10m_m_create_effect_sprites_start;
                 default: _3te10m_m_sprites;
                purchase: _3te10m_m_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _3te10m_m_running_cost_factor;
                   speed: _3te10m_m_speed;
              start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3te10m_m)
{
property
{
name: string(STR_LONGNAME_3TE10M_M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3te10m_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3te10m_m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3te10m_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3te10m_m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3te10m_m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10u
spriteset (_2te10u_purchase_graphics_ico, "src/diesel/3te10u.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10u_purchase_graphics_noico, "src/diesel/3te10u.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10u_purchase_sprites, enable_icons)
{
1: _2te10u_purchase_graphics_ico;
 _2te10u_purchase_graphics_noico;
}
spriteset (_2te10u_v1_notpowered_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10u_v1_loading_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10u_v1_traveling_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10u_v1_normal_sprites_left
{
loading: _2te10u_v1_loading_sprites_left;
 loaded: _2te10u_v1_traveling_sprites_left;
}
spriteset (_2te10u_v1_sprites_right, "src/diesel/3te10u.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10u_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10u_v1_normal_sprites_left;
 _2te10u_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10u_v1_sprites_left2;
 1: _2te10u_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10u_v1_sprites_left1;
 128: _2te10u_v1_sprites_left1;
}
spriteset (_2te10u_v2_notpowered_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 241, 0)
}
spriteset (_2te10u_v2_loading_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (_2te10u_v2_traveling_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup _2te10u_v2_normal_sprites_left
{
loading: _2te10u_v2_loading_sprites_left;
 loaded: _2te10u_v2_traveling_sprites_left;
}
spriteset (_2te10u_v2_sprites_right, "src/diesel/3te10u.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _2te10u_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10u_v2_normal_sprites_left;
 _2te10u_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10u_v2_sprites_left2;
 1: _2te10u_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10u_v2_sprites_left1;
 128: _2te10u_v2_sprites_left1;
}
spriteset (_2te10u_v3_notpowered_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 442, 0)
}
spriteset (_2te10u_v3_loading_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (_2te10u_v3_traveling_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup _2te10u_v3_normal_sprites_left
{
loading: _2te10u_v3_loading_sprites_left;
 loaded: _2te10u_v3_traveling_sprites_left;
}
spriteset (_2te10u_v3_sprites_right, "src/diesel/3te10u.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, _2te10u_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10u_v3_normal_sprites_left;
 _2te10u_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10u_v3_sprites_left2;
 1: _2te10u_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10u_v3_sprites_left1;
 128: _2te10u_v3_sprites_left1;
}
spriteset (_2te10u_v4_notpowered_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 643, 0)
}
spriteset (_2te10u_v4_loading_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (_2te10u_v4_traveling_sprites_left, "src/diesel/3te10u.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup _2te10u_v4_normal_sprites_left
{
loading: _2te10u_v4_loading_sprites_left;
 loaded: _2te10u_v4_traveling_sprites_left;
}
spriteset (_2te10u_v4_sprites_right, "src/diesel/3te10u.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, _2te10u_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10u_v4_normal_sprites_left;
 _2te10u_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10u_v4_sprites_left2;
 1: _2te10u_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10u_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10u_v4_sprites_left1;
 128: _2te10u_v4_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_left,
  cargo_subtype)
{
0: _2te10u_v1_sprites_left;
  1: _2te10u_v2_sprites_left;
  2: _2te10u_v3_sprites_left;
  3: _2te10u_v4_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_right,
  cargo_subtype)
{
0: _2te10u_v1_sprites_right;
  1: _2te10u_v2_sprites_right;
  2: _2te10u_v3_sprites_right;
  3: _2te10u_v4_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (position_in_consist == 0) ])
{
1: _2te10u_sprites_left;
 _2te10u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10u) - count_veh_id(_3te10u) - count_veh_id(_3te10m) - count_veh_id(_2te10m) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m) + 1) % 2))
{
1: _2te10u_sprites_2l;
 _2te10u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_old;
 2: _2te10u_sprites_2l;
 _2te10u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_16;
 2: _2te10u_sprites_right;
 _2te10u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_14;
 2: _2te10u_sprites_2l;
 _2te10u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_12;
 2: _2te10u_sprites_right;
 _2te10u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_10;
 2: _2te10u_sprites_2l;
 _2te10u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_8;
 2: _2te10u_sprites_right;
 _2te10u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_6;
 2: _2te10u_sprites_2l;
 _2te10u_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_sprites_4;
 2: _2te10u_sprites_right;
 _2te10u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_ml, [ STORE_TEMP(2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10u_sprites_left;
 _2te10u_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_start, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10u_sprites_right;
 _2te10u_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2te10u_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10u_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10u_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10u), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10u_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10u_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10u_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10u_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 2: return string(STR_REFIT_TTD_B5);
 3: return string(STR_REFIT_TTD_15);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m) || (position_in_consist == 0) ])
{
1: _2te10u_create_effect_sprites_left;
 _2te10u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10u) - count_veh_id(_3te10m) - count_veh_id(_3te10u) - count_veh_id(_2te10m) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m) + 1) % 2))
{
1: _2te10u_create_effect_sprites_2l;
 _2te10u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_old;
 2: _2te10u_create_effect_sprites_2l;
 _2te10u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_16;
 2: _2te10u_create_effect_sprites_right;
 _2te10u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_14;
 2: _2te10u_create_effect_sprites_2l;
 _2te10u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_12;
 2: _2te10u_create_effect_sprites_right;
 _2te10u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_10;
 2: _2te10u_create_effect_sprites_2l;
 _2te10u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_8;
 2: _2te10u_create_effect_sprites_right;
 _2te10u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_6;
 2: _2te10u_create_effect_sprites_2l;
 _2te10u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _2te10m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10m)) + (((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) * 2) ])
{
1: _2te10u_create_effect_sprites_4;
 2: _2te10u_create_effect_sprites_right;
 _2te10u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_ml, [ STORE_TEMP(2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10u_create_effect_sprites_left;
 _2te10u_create_effect_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2te10u_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _3te10m_m) || (var[0x61, 0, 0xFFFF, 0xC6] == _3te10u_m)) ])
{
1: _2te10u_create_effect_sprites_right;
 _2te10u_create_effect_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2te10u_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10u_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10u) - count_veh_id(_2te10m) - count_veh_id(_3te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10u_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10u) + count_veh_id(_2te10m) + count_veh_id(_3te10m) + count_veh_id(_3te10u) + count_veh_id(_3te10m_m) + count_veh_id(_3te10u_m), 0), STORE_TEMP((vehicle_type_id == _2te10u) || (vehicle_type_id == _2te10m) || (vehicle_type_id == _3te10m) || (vehicle_type_id == _3te10u) || (vehicle_type_id == _3te10m_m) || (vehicle_type_id == _3te10u_m), 1) ])
{ _2te10u_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10u_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10u_running_cost_factor,
[ STORE_TEMP(277, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(97, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(68, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 486
switch (FEAT_TRAINS, SELF, _2te10u_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10M) << 16), 0x101), STORE_TEMP(string(STR_NAME_3TE10M) | (string(STR_NAME_3TE10U) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1989 << 16), 0x103), STORE_TEMP(2001 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10u_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10M) << 16), 0x101), STORE_TEMP(string(STR_NAME_3TE10M) | (string(STR_NAME_3TE10U) << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10u_additional_text, current_year <= 2001)
{
1: _2te10u_additional_text_hidden;
 _2te10u_additional_text_shown;
}
item (FEAT_TRAINS, _2te10u, 162)
{
property
{
name: string(STR_NAME_2TE10U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1989 - delta_age, 1, 1);
 model_life: 2001 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1989 -2001 -2 < retire_early_default ? 2001 -1989 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1989 -2001 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1989 -2001 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2260 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10m;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10u_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10u_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10u_create_effect_sprites_start;
                 default: _2te10u_sprites;
                purchase: _2te10u_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10u_running_cost_factor;
                   speed: _2te10u_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10u)
{
property
{
name: string(STR_LONGNAME_2TE10U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3te10u
spriteset (_3te10u_purchase_graphics_ico, "src/diesel/3te10u.png")
{
new_purchase_template(0, 19)
}
spriteset (_3te10u_purchase_graphics_noico, "src/diesel/3te10u.png")
{
new_purchase_template_noico(0, 19)
}
switch (FEAT_TRAINS, SELF, _3te10u_purchase_sprites, enable_icons)
{
1: _3te10u_purchase_graphics_ico;
 _3te10u_purchase_graphics_noico;
}
// new_3x_train_start_stop(_3te10u)
switch (FEAT_TRAINS, SELF, _3te10u_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _3te10u_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3te10u) - count_veh_id(_2te10m) - count_veh_id(_2te10u) - count_veh_id(_3te10m) - count_veh_id(_3te10m_m) - count_veh_id(_3te10u_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3te10u_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3te10u) + count_veh_id(_2te10m) + count_veh_id(_2te10u) + count_veh_id(_3te10m) + count_veh_id(_3te10m_m) + count_veh_id(_3te10u_m), 0), STORE_TEMP((vehicle_type_id == _3te10u) || (vehicle_type_id == _2te10m) || (vehicle_type_id == _2te10u) || (vehicle_type_id == _3te10m) || (vehicle_type_id == _3te10m_m) || (vehicle_type_id == _3te10u_m), 1) ])
{ _3te10u_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3te10u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3te10u_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3te10u_running_cost_factor,
[ STORE_TEMP(277, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(97, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(68, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 486
switch (FEAT_TRAINS, SELF, _3te10u_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10M) << 16), 0x101), STORE_TEMP(string(STR_NAME_3TE10M) | (string(STR_NAME_2TE10U) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1990 << 16), 0x103), STORE_TEMP(1992 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3te10u_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | (string(STR_NAME_2TE10M) << 16), 0x101), STORE_TEMP(string(STR_NAME_3TE10M) | (string(STR_NAME_2TE10U) << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3te10u_additional_text, current_year <= 1992)
{
1: _3te10u_additional_text_hidden;
 _3te10u_additional_text_shown;
}
item (FEAT_TRAINS, _3te10u, 163)
{
property
{
name: string(STR_NAME_3TE10U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1990 - delta_age, 1, 1);
 model_life: 1992 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1990 -1992 -2 < retire_early_default ? 1992 -1990 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1990 -1992 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1990 -1992 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 50 > 255 ? 255 : 50;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2260 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10m;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3te10u_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _3te10u_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _2te10u_create_effect_sprites_start;
                 default: _2te10u_sprites;
                purchase: _3te10u_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _3te10u_running_cost_factor;
                   speed: _3te10u_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3te10u)
{
property
{
name: string(STR_LONGNAME_3TE10U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3te10u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3te10u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3te10u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3te10u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3te10u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 3te10u_m
spriteset (_3te10u_m_purchase_graphics_ico, "src/diesel/3te10u_m.png")
{
new_purchase_template(0, 0)
}
spriteset (_3te10u_m_purchase_graphics_noico, "src/diesel/3te10u_m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_purchase_sprites, enable_icons)
{
1: _3te10u_m_purchase_graphics_ico;
 _3te10u_m_purchase_graphics_noico;
}
spriteset (_3te10u_m_v1_sprites_left_g, "src/diesel/3te10u_m.png")
{
s10_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v1_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v1_sprites_left_g; }
spriteset (_3te10u_m_v1_sprites_right_g, "src/diesel/3te10u_m.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v1_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v1_sprites_right_g; }
spriteset (_3te10u_m_v2_sprites_left_g, "src/diesel/3te10u_m.png")
{
s10_template(32, 107, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v2_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v2_sprites_left_g; }
spriteset (_3te10u_m_v2_sprites_right_g, "src/diesel/3te10u_m.png")
{
s10_r_template(32, 107, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v2_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v2_sprites_right_g; }
spriteset (_3te10u_m_v3_sprites_left_g, "src/diesel/3te10u_m.png")
{
s10_template(32, 174, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v3_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v3_sprites_left_g; }
spriteset (_3te10u_m_v3_sprites_right_g, "src/diesel/3te10u_m.png")
{
s10_r_template(32, 174, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v3_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v3_sprites_right_g; }
spriteset (_3te10u_m_v4_sprites_left_g, "src/diesel/3te10u_m.png")
{
s10_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v4_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v4_sprites_left_g; }
spriteset (_3te10u_m_v4_sprites_right_g, "src/diesel/3te10u_m.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, _3te10u_m_v4_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _3te10u_m_v4_sprites_right_g; }
switch (FEAT_TRAINS, SELF, _3te10u_m_sprites_left,
  cargo_subtype)
{
0: _3te10u_m_v1_sprites_left;
  1: _3te10u_m_v2_sprites_left;
  2: _3te10u_m_v3_sprites_left;
  3: _3te10u_m_v4_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3te10u_m_sprites_right,
  cargo_subtype)
{
0: _3te10u_m_v1_sprites_right;
  1: _3te10u_m_v2_sprites_right;
  2: _3te10u_m_v3_sprites_right;
  3: _3te10u_m_v4_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, _3te10u_m_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3te10u_m_sprites_left;
 _3te10u_m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te10u_m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _3te10u_m_sprites_start; }
switch (FEAT_TRAINS, PARENT, _3te10u_m_sprites_parent, [ STORE_TEMP(count_veh_id(_3te10u_m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _3te10u_m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _3te10u_m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _3te10u_m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _3te10u_m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te10u_m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _3te10u_m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _3te10u_m_create_effect_sprites_left;
 _3te10u_m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _3te10u_m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _3te10u_m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_3te10u_m) - count_veh_id(_2te10m) - count_veh_id(_2te10u) - count_veh_id(_3te10m) - count_veh_id(_3te10u) - count_veh_id(_3te10m_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _3te10u_m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_3te10u_m) + count_veh_id(_2te10m) + count_veh_id(_2te10u) + count_veh_id(_3te10m) + count_veh_id(_3te10u) + count_veh_id(_3te10m_m), 0), STORE_TEMP((vehicle_type_id == _3te10u_m) || (vehicle_type_id == _2te10m) || (vehicle_type_id == _2te10u) || (vehicle_type_id == _3te10m) || (vehicle_type_id == _3te10u) || (vehicle_type_id == _3te10m_m), 1) ])
{ _3te10u_m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _3te10u_m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _3te10u_m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _3te10u_m_running_cost_factor,
[ STORE_TEMP(250, 0), // Моторы
   STORE_TEMP(9, 1), // Бригада
   STORE_TEMP(88, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(61, 4), // ТО
   STORE_TEMP(4, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 438
switch (FEAT_TRAINS, SELF, _3te10u_m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST4) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_2TE10M) | (string(STR_NAME_3TE10M) << 16), 0x102), STORE_TEMP(string(STR_NAME_3TE10U) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x103), STORE_TEMP(1990 | (1992 << 16), 0x104), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x105)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _3te10u_m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST4) | (string(STR_NAME_2TE10U) << 16), 0x101), STORE_TEMP(string(STR_NAME_2TE10M) | (string(STR_NAME_3TE10M) << 16), 0x102), STORE_TEMP(string(STR_NAME_3TE10U) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _3te10u_m_additional_text, current_year <= 1992)
{
1: _3te10u_m_additional_text_hidden;
 _3te10u_m_additional_text_shown;
}
item (FEAT_TRAINS, _3te10u_m, 164)
{
property
{
name: string(STR_NAME_3TE10U_M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1990 - delta_age, 1, 1);
 model_life: 1992 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1990 -1992 -2 < retire_early_default ? 1992 -1990 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1990 -1992 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1990 -1992 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2260 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: _2te10m;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _3te10u_m_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _3te10u_m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: _2te10u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: _3te10u_m_create_effect_sprites_start;
                 default: _3te10u_m_sprites;
                purchase: _3te10u_m_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _3te10u_m_running_cost_factor;
                   speed: _3te10u_m_speed;
              start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _3te10u_m)
{
property
{
name: string(STR_LONGNAME_3TE10U_M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _3te10u_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _3te10u_m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _3te10u_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _3te10u_m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _3te10u_m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 2te10s
spriteset (_2te10s_purchase_graphics_ico, "src/diesel/4te10s.png")
{
new_purchase_template(0, 0)
}
spriteset (_2te10s_purchase_graphics_noico, "src/diesel/4te10s.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _2te10s_purchase_sprites, enable_icons)
{
1: _2te10s_purchase_graphics_ico;
 _2te10s_purchase_graphics_noico;
}
spriteset (_2te10s_notpowered_sprites_left, "src/diesel/4te10s.png")
{
s10_template(32, 40, 0)
}
spriteset (_2te10s_loading_sprites_left, "src/diesel/4te10s.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (_2te10s_traveling_sprites_left, "src/diesel/4te10s.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup _2te10s_normal_sprites_left
{
loading: _2te10s_loading_sprites_left;
 loaded: _2te10s_traveling_sprites_left;
}
spriteset (_2te10s_sprites_right, "src/diesel/4te10s.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _2te10s_normal_sprites_left;
 _2te10s_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _2te10s_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _2te10s_sprites_left2;
 1: _2te10s_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, _2te10s_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _2te10s_sprites_left1;
 128: _2te10s_sprites_left1;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (position_in_consist == 0) ])
{
1: _2te10s_sprites_left;
 _2te10s_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10s) - count_veh_id(_4te10s) - count_veh_id(_4te10s_m) + 1) % 2))
{
1: _2te10s_sprites_2l;
 _2te10s_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_old;
 2: _2te10s_sprites_2l;
 _2te10s_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_16;
 2: _2te10s_sprites_right;
 _2te10s_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_14;
 2: _2te10s_sprites_2l;
 _2te10s_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_12;
 2: _2te10s_sprites_right;
 _2te10s_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_10;
 2: _2te10s_sprites_2l;
 _2te10s_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_8;
 2: _2te10s_sprites_right;
 _2te10s_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_6;
 2: _2te10s_sprites_2l;
 _2te10s_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_sprites_4;
 2: _2te10s_sprites_right;
 _2te10s_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) ])
{
1: _2te10s_sprites_left;
 _2te10s_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) ])
{
1: _2te10s_sprites_right;
 _2te10s_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2te10s_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _2te10s_sprites_start; }
switch (FEAT_TRAINS, PARENT, _2te10s_sprites_parent, [ STORE_TEMP(count_veh_id(_2te10s), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _2te10s_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _2te10s_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _2te10s_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (position_in_consist == 0) ])
{
1: _2te10s_create_effect_sprites_left;
 _2te10s_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(_2te10s) - count_veh_id(_4te10s) - count_veh_id(_4te10s_m) + 1) % 2))
{
1: _2te10s_create_effect_sprites_2l;
 _2te10s_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_old;
 2: _2te10s_create_effect_sprites_2l;
 _2te10s_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_16;
 2: _2te10s_create_effect_sprites_right;
 _2te10s_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_14;
 2: _2te10s_create_effect_sprites_2l;
 _2te10s_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_12;
 2: _2te10s_create_effect_sprites_right;
 _2te10s_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_10;
 2: _2te10s_create_effect_sprites_2l;
 _2te10s_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_8;
 2: _2te10s_create_effect_sprites_right;
 _2te10s_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_6;
 2: _2te10s_create_effect_sprites_2l;
 _2te10s_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_2, [ STORE_TEMP(-2, 0x10F), ((var[0x61, 0, 0xFFFF, 0xC6] == _2te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s)) + ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) * 2) ])
{
1: _2te10s_create_effect_sprites_4;
 2: _2te10s_create_effect_sprites_right;
 _2te10s_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_ml, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) ])
{
1: _2te10s_create_effect_sprites_left;
 _2te10s_create_effect_sprites_2;
}
switch (FEAT_TRAINS, SELF, _2te10s_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m) ])
{
1: _2te10s_create_effect_sprites_right;
 _2te10s_create_effect_sprites_ml;
}
switch (FEAT_TRAINS, SELF, _2te10s_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _2te10s_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_2te10s) - count_veh_id(_4te10s) - count_veh_id(_4te10s_m), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _2te10s_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_2te10s) + count_veh_id(_4te10s) + count_veh_id(_4te10s_m), 0), STORE_TEMP((vehicle_type_id == _2te10s) || (vehicle_type_id == _4te10s) || (vehicle_type_id == _4te10s_m), 1) ])
{ _2te10s_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _2te10s_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _2te10s_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _2te10s_running_cost_factor,
[ STORE_TEMP(272, 0), // Моторы
   STORE_TEMP(38, 1), // Бригада
   STORE_TEMP(96, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(67, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 478
switch (FEAT_TRAINS, SELF, _2te10s_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_4TE10S) | (string(STR_PURCHASE_HINT_IN) << 16), 0x101), STORE_TEMP(1988 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _2te10s_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_4TE10S) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _2te10s_additional_text, current_year <= 1988)
{
1: _2te10s_additional_text_hidden;
 _2te10s_additional_text_shown;
}
item (FEAT_TRAINS, _2te10s, 349)
{
property
{
name: string(STR_NAME_2TE10S);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1988 - delta_age, 1, 1);
 model_life: 1988 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1988 -1988 -2 < retire_early_default ? 1988 -1988 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1988 -1988 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1988 -1988 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2273 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _2te10s_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _2te10s_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te10s_create_effect_sprites_start;
                 default: _2te10s_sprites;
                purchase: _2te10s_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _2te10s_running_cost_factor;
                   speed: _2te10s_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _2te10s)
{
property
{
name: string(STR_LONGNAME_2TE10S);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _2te10s)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _2te10s)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _2te10s)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _2te10s)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _2te10s)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 4te10s
spriteset (_4te10s_purchase_graphics_ico, "src/diesel/4te10s.png")
{
new_purchase_template(0, 19)
}
spriteset (_4te10s_purchase_graphics_noico, "src/diesel/4te10s.png")
{
new_purchase_template_noico(0, 19)
}
switch (FEAT_TRAINS, SELF, _4te10s_purchase_sprites, enable_icons)
{
1: _4te10s_purchase_graphics_ico;
 _4te10s_purchase_graphics_noico;
}
// todo разобраться, почему в пенальти есть 2ТЭ10С, а в старт-стоп нет
// Если хотя бы 4 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop5,
[
  STORE_TEMP(2, 0x10F),
  STORE_TEMP((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m), 0),
  STORE_TEMP(4, 0x10F),
  STORE_TEMP(((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m)) && LOAD_TEMP(0), 0),
  STORE_TEMP(6, 0x10F),
  ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m)) && LOAD_TEMP(0)
])
{
1: any_start_stop;
  return string(STR_START_STOP_NEED_AT_LEAST_4_CONSECUTIVE_ENGINE);
}
// Если локомотивов меньше 4, то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop_b1993,
  (count_veh_id(_4te10s) >= 2) && (count_veh_id(_4te10s_m) >= 2))
{
1: _4te10s_start_stop5;
  return string(STR_START_STOP_NEED_2AND2_OR_MORE_ENGINE);
}
// Если хотя бы 3 не следуют др. за др., то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop3,
[
  STORE_TEMP(2, 0x10F),
  STORE_TEMP((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m), 0),
  STORE_TEMP(4, 0x10F),
  ((var[0x61, 0, 0xFFFF, 0xC6] == _4te10s) || (var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m)) && LOAD_TEMP(0)
])
{
1: any_start_stop;
  return string(STR_START_STOP_NEED_AT_LEAST_3_CONSECUTIVE_ENGINE);
}
// Если локомотивов меньше 3, то не выпускать
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop_a1993,
  (count_veh_id(_4te10s) >= 2) && (count_veh_id(_4te10s_m) >= 1))
{
1: _4te10s_start_stop3;
  return string(STR_START_STOP_NEED_2AND1_OR_MORE_ENGINE);
}
// Если год >= 1993, можно в 3 секции
switch (FEAT_TRAINS, PARENT, _4te10s_start_stop,
  current_year >= 1993)
{
1: _4te10s_start_stop_a1993;
     _4te10s_start_stop_b1993;
}
switch (FEAT_TRAINS, SELF, _4te10s_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _4te10s_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_4te10s) - count_veh_id(_4te10s_m) - count_veh_id(_2te10s), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _4te10s_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_4te10s) + count_veh_id(_4te10s_m) + count_veh_id(_2te10s), 0), STORE_TEMP((vehicle_type_id == _4te10s) || (vehicle_type_id == _4te10s_m) || (vehicle_type_id == _2te10s), 1) ])
{ _4te10s_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _4te10s_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _4te10s_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _4te10s_running_cost_factor,
[ STORE_TEMP(272, 0), // Моторы
   STORE_TEMP(38, 1), // Бригада
   STORE_TEMP(96, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(67, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 478
switch (FEAT_TRAINS, SELF, _4te10s_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_3_4M_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_2TE10S) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1983 | (1987 << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _4te10s_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_3_4M_WITH_ATTACH) << 16), 0x100), STORE_TEMP(string(STR_NAME_2TE10S) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _4te10s_additional_text, current_year <= 1987)
{
1: _4te10s_additional_text_hidden;
 _4te10s_additional_text_shown;
}
item (FEAT_TRAINS, _4te10s, 350)
{
property
{
name: string(STR_NAME_4TE10S);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1983 - delta_age, 1, 1);
 model_life: 1987 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1983 -1987 -2 < retire_early_default ? 1987 -1983 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1983 -1987 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1983 -1987 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 49 > 255 ? 255 : 49;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2273 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _4te10s_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _4te10s_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _2te10s_create_effect_sprites_start;
                 default: _2te10s_sprites;
                purchase: _4te10s_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _4te10s_running_cost_factor;
                   speed: _4te10s_speed;
              start_stop: _4te10s_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _4te10s)
{
property
{
name: string(STR_LONGNAME_4TE10S);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _4te10s)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _4te10s)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _4te10s)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _4te10s)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _4te10s)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// 4te10s_m
spriteset (_4te10s_m_purchase_graphics_ico, "src/diesel/4te10s_m.png")
{
new_purchase_template(0, 0)
}
spriteset (_4te10s_m_purchase_graphics_noico, "src/diesel/4te10s_m.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _4te10s_m_purchase_sprites, enable_icons)
{
1: _4te10s_m_purchase_graphics_ico;
 _4te10s_m_purchase_graphics_noico;
}
spriteset (_4te10s_m_sprites_left_g, "src/diesel/4te10s_m.png")
{
s10_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites_left, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _4te10s_m_sprites_left_g; }
spriteset (_4te10s_m_sprites_right_g, "src/diesel/4te10s_m.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites_right, [ STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)])
{ _4te10s_m_sprites_right_g; }
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites2, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _4te10s_m_sprites_left;
 _4te10s_m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites1, [ STORE_TEMP(-4, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _4te10s_m_sprites_left;
 _4te10s_m_sprites_right;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m])
{
1: _4te10s_m_sprites1;
 _4te10s_m_sprites2;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _4te10s_m_sprites_start; }
switch (FEAT_TRAINS, PARENT, _4te10s_m_sprites_parent, [ STORE_TEMP(count_veh_id(_4te10s_m), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _4te10s_m_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _4te10s_m_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _4te10s_m_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _4te10s_m_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _4te10s_m_create_effect_sprites2, [ STORE_TEMP(-2, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _4te10s_m_create_effect_sprites_left;
 _4te10s_m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_create_effect_sprites1, [ STORE_TEMP(-4, 0x10F), var[0x61, 8, 0xFF, 0x5F] & 0x01 ])
{
1: _4te10s_m_create_effect_sprites_left;
 _4te10s_m_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), var[0x61, 0, 0xFFFF, 0xC6] == _4te10s_m])
{
1: _4te10s_m_create_effect_sprites1;
 _4te10s_m_create_effect_sprites2;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, _4te10s_m_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(_4te10s_m) - count_veh_id(_4te10s) - count_veh_id(_2te10s), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, _4te10s_m_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(_4te10s_m) + count_veh_id(_4te10s) + count_veh_id(_2te10s), 0), STORE_TEMP((vehicle_type_id == _4te10s_m) || (vehicle_type_id == _4te10s) || (vehicle_type_id == _2te10s), 1) ])
{ _4te10s_m_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, _4te10s_m_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 _4te10s_m_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, _4te10s_m_running_cost_factor,
[ STORE_TEMP(245, 0), // Моторы
   STORE_TEMP(9, 1), // Бригада
   STORE_TEMP(86, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(60, 4), // ТО
   STORE_TEMP(4, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 430
switch (FEAT_TRAINS, SELF, _4te10s_m_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST2) | (string(STR_NAME_2TE10S) << 16), 0x101), STORE_TEMP(string(STR_NAME_4TE10S) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x102), STORE_TEMP(1983 | (1987 << 16), 0x103), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _4te10s_m_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_MS_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_MS) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_LIST2) | (string(STR_NAME_2TE10S) << 16), 0x101), STORE_TEMP(string(STR_NAME_4TE10S) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _4te10s_m_additional_text, current_year <= 1987)
{
1: _4te10s_m_additional_text_hidden;
 _4te10s_m_additional_text_shown;
}
item (FEAT_TRAINS, _4te10s_m, 351)
{
property
{
name: string(STR_NAME_4TE10S_M);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1983 - delta_age, 1, 1);
 model_life: 1987 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1983 -1987 -2 < retire_early_default ? 1987 -1983 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1983 -1987 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1983 -1987 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 48 > 255 ? 255 : 48;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2273 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((398.6))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: te10;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: _4te10s_m_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: _4te10s_m_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _4te10s_m_create_effect_sprites_start;
                 default: _4te10s_m_sprites;
                purchase: _4te10s_m_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: _4te10s_m_running_cost_factor;
                   speed: _4te10s_m_speed;
              start_stop: return string(STR_START_STOP_HEAD_REQUIRED);
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _4te10s_m)
{
property
{
name: string(STR_LONGNAME_4TE10S_M);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _4te10s_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _4te10s_m)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _4te10s_m)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _4te10s_m)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _4te10s_m)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// chme3
spriteset (chme3_v1_purchase_graphics_ico, "src/diesel/chme3.png")
{
new_purchase_template(0, 0)
}
spriteset (chme3_v1_purchase_graphics_noico, "src/diesel/chme3.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, chme3_v1_purchase_sprites, enable_icons)
{
1: chme3_v1_purchase_graphics_ico;
 chme3_v1_purchase_graphics_noico;
}
spriteset (chme3_v2_purchase_graphics_ico, "src/diesel/chme3.png")
{
new_purchase_template(100, 0)
}
spriteset (chme3_v2_purchase_graphics_noico, "src/diesel/chme3.png")
{
new_purchase_template_noico(100, 0)
}
switch (FEAT_TRAINS, SELF, chme3_v2_purchase_sprites, enable_icons)
{
1: chme3_v2_purchase_graphics_ico;
 chme3_v2_purchase_graphics_noico;
}
spriteset (chme3_v1_notpowered_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 40, 0)
}
spriteset (chme3_v1_loading_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (chme3_v1_traveling_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup chme3_v1_normal_sprites_left
{
loading: chme3_v1_loading_sprites_left;
 loaded: chme3_v1_traveling_sprites_left;
}
spriteset (chme3_v1_notpowered_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32, 40, 0)
}
spriteset (chme3_v1_loading_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (chme3_v1_traveling_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup chme3_v1_normal_sprites_right
{
loading: chme3_v1_loading_sprites_right;
 loaded: chme3_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v1_normal_sprites_left;
 chme3_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v1_normal_sprites_right;
 chme3_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v1_sprites_left2;
 1: chme3_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v1_sprites_left1;
 128: chme3_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v1_sprites_right2;
 1: chme3_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v1_sprites_right1;
 128: chme3_v1_sprites_right1;
}
spriteset (chme3_v2_notpowered_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 241, 0)
}
spriteset (chme3_v2_loading_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (chme3_v2_traveling_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup chme3_v2_normal_sprites_left
{
loading: chme3_v2_loading_sprites_left;
 loaded: chme3_v2_traveling_sprites_left;
}
spriteset (chme3_v2_notpowered_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32, 241, 0)
}
spriteset (chme3_v2_loading_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (chme3_v2_traveling_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup chme3_v2_normal_sprites_right
{
loading: chme3_v2_loading_sprites_right;
 loaded: chme3_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v2_normal_sprites_left;
 chme3_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v2_normal_sprites_right;
 chme3_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v2_sprites_left2;
 1: chme3_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v2_sprites_left1;
 128: chme3_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v2_sprites_right2;
 1: chme3_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v2_sprites_right1;
 128: chme3_v2_sprites_right1;
}
spriteset (chme3_v3_notpowered_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 442, 0)
}
spriteset (chme3_v3_loading_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (chme3_v3_traveling_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup chme3_v3_normal_sprites_left
{
loading: chme3_v3_loading_sprites_left;
 loaded: chme3_v3_traveling_sprites_left;
}
spriteset (chme3_v3_notpowered_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32, 442, 0)
}
spriteset (chme3_v3_loading_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (chme3_v3_traveling_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup chme3_v3_normal_sprites_right
{
loading: chme3_v3_loading_sprites_right;
 loaded: chme3_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v3_normal_sprites_left;
 chme3_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v3_normal_sprites_right;
 chme3_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v3_sprites_left2;
 1: chme3_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v3_sprites_left1;
 128: chme3_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v3_sprites_right2;
 1: chme3_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v3_sprites_right1;
 128: chme3_v3_sprites_right1;
}
spriteset (chme3_v4_notpowered_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 643, 0)
}
spriteset (chme3_v4_loading_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (chme3_v4_traveling_sprites_left, "src/diesel/chme3.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup chme3_v4_normal_sprites_left
{
loading: chme3_v4_loading_sprites_left;
 loaded: chme3_v4_traveling_sprites_left;
}
spriteset (chme3_v4_notpowered_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32, 643, 0)
}
spriteset (chme3_v4_loading_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 643 +67, 0)
}
spriteset (chme3_v4_traveling_sprites_right, "src/diesel/chme3.png")
{
s10_r_template(32 +415, 643 +134, 0)
}
spritegroup chme3_v4_normal_sprites_right
{
loading: chme3_v4_loading_sprites_right;
 loaded: chme3_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v4_normal_sprites_left;
 chme3_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3_v4_normal_sprites_right;
 chme3_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v4_sprites_left2;
 1: chme3_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v4_sprites_left1;
 128: chme3_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3_v4_sprites_right2;
 1: chme3_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3_v4_sprites_right1;
 128: chme3_v4_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, chme3_purchase_sprites, current_year >= 1972)
{
0: chme3_v1_purchase_sprites;
 chme3_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_left_RND,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x01])
{
0: chme3_v2_sprites_left;
     chme3_v3_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3_year_sprites_left,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: chme3_v1_sprites_left;
     chme3_sprites_left_RND;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_left,
  cargo_subtype)
{
0: chme3_year_sprites_left;
            15: chme3_year_sprites_left;
            14: chme3_year_sprites_left;
  30: chme3_v2_sprites_left;
            34: chme3_v4_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_right_RND,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x01])
{
0: chme3_v2_sprites_right;
     chme3_v3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_year_sprites_right,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: chme3_v1_sprites_right;
     chme3_sprites_right_RND;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_right,
  cargo_subtype)
{
0: chme3_year_sprites_right;
            15: chme3_year_sprites_right;
            14: chme3_year_sprites_right;
  30: chme3_v2_sprites_right;
            34: chme3_v4_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) || (position_in_consist == 0) ])
{
1: chme3_sprites_left;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_old, ((LOAD_TEMP(0) - count_veh_id(chme3) + 1) % 2))
{
1: chme3_sprites_2l;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_old;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_16;
 chme3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_14;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_12;
 chme3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_10;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_8;
 chme3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_6;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_sprites_4;
 chme3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: chme3_sprites_left;
 chme3_sprites_right;
}
switch (FEAT_TRAINS, PARENT, chme3_sprites_start_sp, count_veh_id(chme3))
{
1: chme3_sprites_1RND;
 chme3_sprites_start;
}
switch (FEAT_TRAINS, SELF, chme3_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ chme3_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, chme3_sprites_parent, [ STORE_TEMP(count_veh_id(chme3), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ chme3_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, chme3_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 chme3_sprites_parent;
}
switch (FEAT_TRAINS, SELF, chme3_colour_mapping_CC,
  cargo_subtype)
{
0: return ttd_cc2 + 0x49;
            15: return ttd_cc2 + 0x49;
            14: return ttd_cc2 + 0x4A;
  30: return ttd_cc2 + 0x3E;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, chme3_colour_mapping_2CC,
  cargo_subtype)
{
0: return ttd_cc2 + 0x46;
            15: return ttd_cc2 + 0x46;
            14: return ttd_cc2 + 0x47;
  30: return ttd_cc2 + 0x48;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, chme3_colour_mapping,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] >> 1 & 0x01])
{
0: chme3_colour_mapping_CC;
     chme3_colour_mapping_2CC;
}
switch (FEAT_TRAINS, SELF, chme3_cargo_subtype_text, cargo_subtype)
{
14: general_cargo_subtype_text_LV_RAL6020;
 15: general_cargo_subtype_text_LV_RAL6002;
 30: general_cargo_subtype_text_LV_UKRAINIAN_RAILWAY;
 34: general_cargo_subtype_text_LV_RZD_PID;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) || (position_in_consist == 0) ])
{
1: chme3_create_effect_sprites_left;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(chme3) + 1) % 2))
{
1: chme3_create_effect_sprites_2l;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_old;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_16;
 chme3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_14;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_12;
 chme3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_10;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_8;
 chme3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_6;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3) ])
{
1: chme3_create_effect_sprites_4;
 chme3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: chme3_create_effect_sprites_left;
 chme3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, chme3_create_effect, count_veh_id(chme3))
{
1: chme3_create_effect_1RND;
 chme3_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, chme3_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 95 * (100 - speed_penalty_percent) / 100 : 95)
{ return; }
switch (FEAT_TRAINS, SELF, chme3_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(chme3), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, chme3_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(chme3), 0), STORE_TEMP(vehicle_type_id == chme3, 1) ])
{ chme3_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, chme3_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 chme3_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, chme3_running_cost_factor,
[ STORE_TEMP(132, 0), // Моторы
   STORE_TEMP(19, 1), // Бригада
   STORE_TEMP(46, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(32, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(95, 6), // Скорость
   STORE_TEMP(123, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 232
switch (FEAT_TRAINS, SELF, chme3_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1964 << 16), 0x101), STORE_TEMP(1988 | ((current_year < 1953 ? string(STR_PURCHASE_HINT_FACTORY_CHKD) : string(STR_PURCHASE_HINT_FACTORY_CHKD_A1993)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, chme3_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1953 ? string(STR_PURCHASE_HINT_FACTORY_CHKD) : string(STR_PURCHASE_HINT_FACTORY_CHKD_A1993)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, chme3_additional_text, current_year <= 1988)
{
1: chme3_additional_text_hidden;
 chme3_additional_text_shown;
}
item (FEAT_TRAINS, chme3, 202)
{
property
{
name: string(STR_NAME_CHME3);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1964 - delta_age, 1, 1);
 model_life: 1988 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1964 -1988 -2 < retire_early_default ? 1988 -1964 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1964 -1988 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1964 -1988 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 30 > 255 ? 255 : 30;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (970 * 0.9865);
 weight: (123) ton;
 tractive_effort_coefficient: (((356.0))/((123))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: chme3_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: chme3_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: chme3_cargo_subtype_text;
          colour_mapping: chme3_colour_mapping;
           create_effect: chme3_create_effect;
                 default: chme3_sprites;
                purchase: chme3_purchase_sprites;
          purchase_speed: return 95;
     running_cost_factor: chme3_running_cost_factor;
                   speed: chme3_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, chme3)
{
property
{
name: string(STR_LONGNAME_CHME3);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, chme3)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, chme3)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, chme3)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, chme3)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, chme3)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// chme3t
spriteset (chme3t_purchase_graphics_ico, "src/diesel/chme3t.png")
{
new_purchase_template(0, 0)
}
spriteset (chme3t_purchase_graphics_noico, "src/diesel/chme3t.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, chme3t_purchase_sprites, enable_icons)
{
1: chme3t_purchase_graphics_ico;
 chme3t_purchase_graphics_noico;
}
spriteset (chme3t_v1_notpowered_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 40, 0)
}
spriteset (chme3t_v1_loading_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (chme3t_v1_traveling_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup chme3t_v1_normal_sprites_left
{
loading: chme3t_v1_loading_sprites_left;
 loaded: chme3t_v1_traveling_sprites_left;
}
spriteset (chme3t_v1_notpowered_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32, 40, 0)
}
spriteset (chme3t_v1_loading_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (chme3t_v1_traveling_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup chme3t_v1_normal_sprites_right
{
loading: chme3t_v1_loading_sprites_right;
 loaded: chme3t_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3t_v1_normal_sprites_left;
 chme3t_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3t_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3t_v1_normal_sprites_right;
 chme3t_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3t_v1_sprites_left2;
 1: chme3t_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3t_v1_sprites_left1;
 128: chme3t_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3t_v1_sprites_right2;
 1: chme3t_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3t_v1_sprites_right1;
 128: chme3t_v1_sprites_right1;
}
spriteset (chme3t_v2_notpowered_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 241, 0)
}
spriteset (chme3t_v2_loading_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (chme3t_v2_traveling_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup chme3t_v2_normal_sprites_left
{
loading: chme3t_v2_loading_sprites_left;
 loaded: chme3t_v2_traveling_sprites_left;
}
spriteset (chme3t_v2_notpowered_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32, 241, 0)
}
spriteset (chme3t_v2_loading_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (chme3t_v2_traveling_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup chme3t_v2_normal_sprites_right
{
loading: chme3t_v2_loading_sprites_right;
 loaded: chme3t_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3t_v2_normal_sprites_left;
 chme3t_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3t_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3t_v2_normal_sprites_right;
 chme3t_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3t_v2_sprites_left2;
 1: chme3t_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3t_v2_sprites_left1;
 128: chme3t_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3t_v2_sprites_right2;
 1: chme3t_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3t_v2_sprites_right1;
 128: chme3t_v2_sprites_right1;
}
spriteset (chme3t_v3_notpowered_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 442, 0)
}
spriteset (chme3t_v3_loading_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (chme3t_v3_traveling_sprites_left, "src/diesel/chme3t.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup chme3t_v3_normal_sprites_left
{
loading: chme3t_v3_loading_sprites_left;
 loaded: chme3t_v3_traveling_sprites_left;
}
spriteset (chme3t_v3_notpowered_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32, 442, 0)
}
spriteset (chme3t_v3_loading_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (chme3t_v3_traveling_sprites_right, "src/diesel/chme3t.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup chme3t_v3_normal_sprites_right
{
loading: chme3t_v3_loading_sprites_right;
 loaded: chme3t_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3t_v3_normal_sprites_left;
 chme3t_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3t_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: chme3t_v3_normal_sprites_right;
 chme3t_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3t_v3_sprites_left2;
 1: chme3t_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3t_v3_sprites_left1;
 128: chme3t_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: chme3t_v3_sprites_right2;
 1: chme3t_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, chme3t_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: chme3t_v3_sprites_right1;
 128: chme3t_v3_sprites_right1;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_left_RND,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x07])
{
0..4: chme3t_v1_sprites_left;
        chme3t_v2_sprites_left;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_left,
  cargo_subtype)
{
0: chme3t_sprites_left_RND;
            15: chme3t_sprites_left_RND;
            14: chme3t_sprites_left_RND;
            34: chme3t_v3_sprites_left;
  30: chme3t_v1_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_right_RND,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x07])
{
0..4: chme3t_v1_sprites_right;
        chme3t_v2_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_right,
  cargo_subtype)
{
0: chme3t_sprites_right_RND;
            15: chme3t_sprites_right_RND;
            14: chme3t_sprites_right_RND;
            34: chme3t_v3_sprites_right;
  30: chme3t_v1_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) || (position_in_consist == 0) ])
{
1: chme3t_sprites_left;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_old, ((LOAD_TEMP(0) - count_veh_id(chme3t) + 1) % 2))
{
1: chme3t_sprites_2l;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_old;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_16;
 chme3t_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_14;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_12;
 chme3t_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_10;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_8;
 chme3t_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_6;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_sprites_4;
 chme3t_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: chme3t_sprites_left;
 chme3t_sprites_right;
}
switch (FEAT_TRAINS, PARENT, chme3t_sprites_start_sp, count_veh_id(chme3t))
{
1: chme3t_sprites_1RND;
 chme3t_sprites_start;
}
switch (FEAT_TRAINS, SELF, chme3t_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ chme3t_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, chme3t_sprites_parent, [ STORE_TEMP(count_veh_id(chme3t), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ chme3t_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, chme3t_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 chme3t_sprites_parent;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) || (position_in_consist == 0) ])
{
1: chme3t_create_effect_sprites_left;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(chme3t) + 1) % 2))
{
1: chme3t_create_effect_sprites_2l;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_old;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_16;
 chme3t_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_14;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_12;
 chme3t_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_10;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_8;
 chme3t_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_6;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == chme3t) ])
{
1: chme3t_create_effect_sprites_4;
 chme3t_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, chme3t_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: chme3t_create_effect_sprites_left;
 chme3t_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, chme3t_create_effect, count_veh_id(chme3t))
{
1: chme3t_create_effect_1RND;
 chme3t_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, chme3t_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 95 * (100 - speed_penalty_percent) / 100 : 95)
{ return; }
switch (FEAT_TRAINS, SELF, chme3t_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(chme3t), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, chme3t_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(chme3t), 0), STORE_TEMP(vehicle_type_id == chme3t, 1) ])
{ chme3t_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, chme3t_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 chme3t_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, chme3t_running_cost_factor,
[ STORE_TEMP(144, 0), // Моторы
   STORE_TEMP(20, 1), // Бригада
   STORE_TEMP(50, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(35, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(95, 6), // Скорость
   STORE_TEMP(123, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 252
switch (FEAT_TRAINS, SELF, chme3t_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1984 << 16), 0x101), STORE_TEMP(1994 | ((current_year < 1953 ? string(STR_PURCHASE_HINT_FACTORY_CHKD) : string(STR_PURCHASE_HINT_FACTORY_CHKD_A1993)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, chme3t_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1953 ? string(STR_PURCHASE_HINT_FACTORY_CHKD) : string(STR_PURCHASE_HINT_FACTORY_CHKD_A1993)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, chme3t_additional_text, current_year <= 1994)
{
1: chme3t_additional_text_hidden;
 chme3t_additional_text_shown;
}
item (FEAT_TRAINS, chme3t, 624)
{
property
{
name: string(STR_NAME_CHME3T);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1984 - delta_age, 1, 1);
 model_life: 1994 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1984 -1994 -2 < retire_early_default ? 1994 -1984 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1984 -1994 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1984 -1994 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 33 > 255 ? 255 : 33;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1150 * 0.9865);
 weight: (123) ton;
 tractive_effort_coefficient: (((356.0))/((123))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: chme3;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: chme3t_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: chme3t_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: chme3_cargo_subtype_text;
          colour_mapping: chme3_colour_mapping;
           create_effect: chme3t_create_effect;
                 default: chme3t_sprites;
                purchase: chme3t_purchase_sprites;
          purchase_speed: return 95;
     running_cost_factor: chme3t_running_cost_factor;
                   speed: chme3t_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, chme3t)
{
property
{
name: string(STR_LONGNAME_CHME3T);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, chme3t)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, chme3t)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, chme3t)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, chme3t)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, chme3t)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// diesel_da
spriteset (diesel_da_purchase_graphics_ico, "src/diesel/da.png")
{
new_purchase_template(0, 0)
}
spriteset (diesel_da_purchase_graphics_noico, "src/diesel/da.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, diesel_da_purchase_sprites, enable_icons)
{
1: diesel_da_purchase_graphics_ico;
 diesel_da_purchase_graphics_noico;
}
spriteset (diesel_da_notpowered_sprites_left, "src/diesel/da.png")
{
s10_template(32, 40, 0)
}
spriteset (diesel_da_loading_sprites_left, "src/diesel/da.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (diesel_da_traveling_sprites_left, "src/diesel/da.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup diesel_da_normal_sprites_left
{
loading: diesel_da_loading_sprites_left;
 loaded: diesel_da_traveling_sprites_left;
}
spriteset (diesel_da_notpowered_sprites_right, "src/diesel/da.png")
{
s10_r_template(32, 40, 0)
}
spriteset (diesel_da_loading_sprites_right, "src/diesel/da.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (diesel_da_traveling_sprites_right, "src/diesel/da.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup diesel_da_normal_sprites_right
{
loading: diesel_da_loading_sprites_right;
 loaded: diesel_da_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, diesel_da_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: diesel_da_normal_sprites_left;
 diesel_da_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, diesel_da_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: diesel_da_normal_sprites_right;
 diesel_da_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, diesel_da_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: diesel_da_sprites_left2;
 1: diesel_da_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, diesel_da_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: diesel_da_sprites_left1;
 128: diesel_da_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, diesel_da_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: diesel_da_sprites_right2;
 1: diesel_da_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, diesel_da_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: diesel_da_sprites_right1;
 128: diesel_da_sprites_right1;
}
switch (FEAT_TRAINS, SELF, diesel_da_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: diesel_da_sprites_left;
 diesel_da_sprites_right;
}
switch (FEAT_TRAINS, SELF, diesel_da_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ diesel_da_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, diesel_da_sprites_parent, [ STORE_TEMP(count_veh_id(diesel_da), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ diesel_da_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, diesel_da_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 diesel_da_sprites_parent;
}
switch (FEAT_TRAINS, SELF, diesel_da_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, diesel_da_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, diesel_da_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: diesel_da_create_effect_sprites_left;
 diesel_da_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, diesel_da_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 96 * (100 - speed_penalty_percent) / 100 : 96)
{ return; }
switch (FEAT_TRAINS, SELF, diesel_da_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(diesel_da), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, diesel_da_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(diesel_da), 0), STORE_TEMP(vehicle_type_id == diesel_da, 1) ])
{ diesel_da_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, diesel_da_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 diesel_da_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, diesel_da_running_cost_factor,
[ STORE_TEMP(139, 0), // Моторы
   STORE_TEMP(20, 1), // Бригада
   STORE_TEMP(49, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(34, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(96, 6), // Скорость
   STORE_TEMP(121, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 244
switch (FEAT_TRAINS, SELF, diesel_da_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1945 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ALCO), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, diesel_da_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ALCO), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, diesel_da_additional_text, current_year <= 1945)
{
1: diesel_da_additional_text_hidden;
 diesel_da_additional_text_shown;
}
item (FEAT_TRAINS, diesel_da, 144)
{
property
{
name: string(STR_NAME_DA);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1945 - delta_age, 1, 1);
 model_life: 1945 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1945 -1945 -2 < retire_early_default ? 1945 -1945 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1945 -1945 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1945 -1945 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 25 > 255 ? 255 : 25;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (840 * 0.9865);
 weight: (121) ton;
 tractive_effort_coefficient: (((353.0))/((121))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: diesel_da_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: diesel_da_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: diesel_da_create_effect;
                 default: diesel_da_sprites;
                purchase: diesel_da_purchase_sprites;
          purchase_speed: return 96;
     running_cost_factor: diesel_da_running_cost_factor;
                   speed: diesel_da_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, diesel_da)
{
property
{
name: string(STR_LONGNAME_DA);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, diesel_da)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, diesel_da)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, diesel_da)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, diesel_da)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, diesel_da)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// diesel_db
spriteset (diesel_db_purchase_graphics_ico, "src/diesel/db.png")
{
new_purchase_template(0, 0)
}
spriteset (diesel_db_purchase_graphics_noico, "src/diesel/db.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, diesel_db_purchase_sprites, enable_icons)
{
1: diesel_db_purchase_graphics_ico;
 diesel_db_purchase_graphics_noico;
}
spriteset (diesel_db_notpowered_sprites_left, "src/diesel/db.png")
{
s10_template(32, 40, 0)
}
spriteset (diesel_db_normal_sprites_left, "src/diesel/db.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (diesel_db_sprites_right, "src/diesel/db.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, diesel_db_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: diesel_db_normal_sprites_left;
 diesel_db_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, diesel_db_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: diesel_db_sprites_left2;
 1: diesel_db_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, diesel_db_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: diesel_db_sprites_left1;
 128: diesel_db_sprites_left1;
}
switch (FEAT_TRAINS, SELF, diesel_db_sprites_start, 0)
{ diesel_db_sprites_left; }
switch (FEAT_TRAINS, SELF, diesel_db_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ diesel_db_sprites_start; }
switch (FEAT_TRAINS, PARENT, diesel_db_sprites_parent, [ STORE_TEMP(count_veh_id(diesel_db), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ diesel_db_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, diesel_db_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 diesel_db_sprites_parent;
}
switch (FEAT_TRAINS, SELF, diesel_db_colour_mapping,
  cargo_subtype)
{
0: return ttdall_cc + 0x62;
  1: return ttdall_cc + 0x53;
  2: return ttdall_cc + 0xB3;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, diesel_db_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_54);
 2: return string(STR_REFIT_TTD_B3);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, diesel_db_create_effect, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, diesel_db_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 96 * (100 - speed_penalty_percent) / 100 : 96)
{ return; }
switch (FEAT_TRAINS, SELF, diesel_db_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(diesel_db), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, diesel_db_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(diesel_db), 0), STORE_TEMP(vehicle_type_id == diesel_db, 1) ])
{ diesel_db_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, diesel_db_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 diesel_db_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, diesel_db_running_cost_factor,
[ STORE_TEMP(139, 0), // Моторы
   STORE_TEMP(20, 1), // Бригада
   STORE_TEMP(49, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(34, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(96, 6), // Скорость
   STORE_TEMP(121, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 244
switch (FEAT_TRAINS, SELF, diesel_db_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1946 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BALDWIN), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, diesel_db_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BALDWIN), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, diesel_db_additional_text, current_year <= 1946)
{
1: diesel_db_additional_text_hidden;
 diesel_db_additional_text_shown;
}
item (FEAT_TRAINS, diesel_db, 722)
{
property
{
name: string(STR_NAME_DB);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1946 - delta_age, 1, 1);
 model_life: 1946 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1946 -1946 -2 < retire_early_default ? 1946 -1946 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1946 -1946 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1946 -1946 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 25 > 255 ? 255 : 25;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1000 * 0.9865);
 weight: (121) ton;
 tractive_effort_coefficient: (((353.0))/((121))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: diesel_db_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: diesel_db_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: diesel_db_cargo_subtype_text;
          colour_mapping: diesel_db_colour_mapping;
           create_effect: diesel_db_create_effect;
                 default: diesel_db_sprites;
                purchase: diesel_db_purchase_sprites;
          purchase_speed: return 96;
     running_cost_factor: diesel_db_running_cost_factor;
                   speed: diesel_db_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, diesel_db)
{
property
{
name: string(STR_LONGNAME_DB);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, diesel_db)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, diesel_db)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, diesel_db)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, diesel_db)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, diesel_db)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// dm62
spriteset (dm62_purchase_graphics_ico, "src/diesel/dm62-part1.png")
{
new_purchase_template(0, 0)
}
spriteset (dm62_purchase_graphics_noico, "src/diesel/dm62-part1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, dm62_purchase_sprites, enable_icons)
{
1: dm62_purchase_graphics_ico;
 dm62_purchase_graphics_noico;
}
spriteset (dm62_v1_notpowered_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 40, 0)
}
spriteset (dm62_v1_loading_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (dm62_v1_traveling_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup dm62_v1_normal_sprites_left
{
loading: dm62_v1_loading_sprites_left;
 loaded: dm62_v1_traveling_sprites_left;
}
spriteset (dm62_v1_notpowered_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32, 40, 0)
}
spriteset (dm62_v1_loading_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (dm62_v1_traveling_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup dm62_v1_normal_sprites_right
{
loading: dm62_v1_loading_sprites_right;
 loaded: dm62_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v1_normal_sprites_left;
 dm62_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v1_normal_sprites_right;
 dm62_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v1_sprites_left2;
 1: dm62_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v1_sprites_left1;
 128: dm62_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v1_sprites_right2;
 1: dm62_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v1_sprites_right1;
 128: dm62_v1_sprites_right1;
}
spriteset (dm62_v2_notpowered_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 241, 0)
}
spriteset (dm62_v2_loading_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (dm62_v2_traveling_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup dm62_v2_normal_sprites_left
{
loading: dm62_v2_loading_sprites_left;
 loaded: dm62_v2_traveling_sprites_left;
}
spriteset (dm62_v2_notpowered_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32, 241, 0)
}
spriteset (dm62_v2_loading_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (dm62_v2_traveling_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup dm62_v2_normal_sprites_right
{
loading: dm62_v2_loading_sprites_right;
 loaded: dm62_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v2_normal_sprites_left;
 dm62_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v2_normal_sprites_right;
 dm62_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v2_sprites_left2;
 1: dm62_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v2_sprites_left1;
 128: dm62_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v2_sprites_right2;
 1: dm62_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v2_sprites_right1;
 128: dm62_v2_sprites_right1;
}
spriteset (dm62_v3_notpowered_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 442, 0)
}
spriteset (dm62_v3_loading_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (dm62_v3_traveling_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup dm62_v3_normal_sprites_left
{
loading: dm62_v3_loading_sprites_left;
 loaded: dm62_v3_traveling_sprites_left;
}
spriteset (dm62_v3_notpowered_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32, 442, 0)
}
spriteset (dm62_v3_loading_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (dm62_v3_traveling_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup dm62_v3_normal_sprites_right
{
loading: dm62_v3_loading_sprites_right;
 loaded: dm62_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v3_normal_sprites_left;
 dm62_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v3_normal_sprites_right;
 dm62_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v3_sprites_left2;
 1: dm62_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v3_sprites_left1;
 128: dm62_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v3_sprites_right2;
 1: dm62_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v3_sprites_right1;
 128: dm62_v3_sprites_right1;
}
spriteset (dm62_v4_notpowered_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 643, 0)
}
spriteset (dm62_v4_loading_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (dm62_v4_traveling_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup dm62_v4_normal_sprites_left
{
loading: dm62_v4_loading_sprites_left;
 loaded: dm62_v4_traveling_sprites_left;
}
spriteset (dm62_v4_notpowered_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32, 643, 0)
}
spriteset (dm62_v4_loading_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 643 +67, 0)
}
spriteset (dm62_v4_traveling_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 643 +134, 0)
}
spritegroup dm62_v4_normal_sprites_right
{
loading: dm62_v4_loading_sprites_right;
 loaded: dm62_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v4_normal_sprites_left;
 dm62_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v4_normal_sprites_right;
 dm62_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v4_sprites_left2;
 1: dm62_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v4_sprites_left1;
 128: dm62_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v4_sprites_right2;
 1: dm62_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v4_sprites_right1;
 128: dm62_v4_sprites_right1;
}
spriteset (dm62_v5_notpowered_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 844, 0)
}
spriteset (dm62_v5_loading_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (dm62_v5_traveling_sprites_left, "src/diesel/dm62-part1.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup dm62_v5_normal_sprites_left
{
loading: dm62_v5_loading_sprites_left;
 loaded: dm62_v5_traveling_sprites_left;
}
spriteset (dm62_v5_notpowered_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32, 844, 0)
}
spriteset (dm62_v5_loading_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 844 +67, 0)
}
spriteset (dm62_v5_traveling_sprites_right, "src/diesel/dm62-part1.png")
{
s10_r_template(32 +415, 844 +134, 0)
}
spritegroup dm62_v5_normal_sprites_right
{
loading: dm62_v5_loading_sprites_right;
 loaded: dm62_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v5_normal_sprites_left;
 dm62_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v5_normal_sprites_right;
 dm62_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v5_sprites_left2;
 1: dm62_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v5_sprites_left1;
 128: dm62_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v5_sprites_right2;
 1: dm62_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v5_sprites_right1;
 128: dm62_v5_sprites_right1;
}
spriteset (dm62_v6_notpowered_sprites_left, "src/diesel/dm62-part2.png")
{
s10_template(32, 40, 0)
}
spriteset (dm62_v6_loading_sprites_left, "src/diesel/dm62-part2.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (dm62_v6_traveling_sprites_left, "src/diesel/dm62-part2.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup dm62_v6_normal_sprites_left
{
loading: dm62_v6_loading_sprites_left;
 loaded: dm62_v6_traveling_sprites_left;
}
spriteset (dm62_v6_notpowered_sprites_right, "src/diesel/dm62-part2.png")
{
s10_r_template(32, 40, 0)
}
spriteset (dm62_v6_loading_sprites_right, "src/diesel/dm62-part2.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (dm62_v6_traveling_sprites_right, "src/diesel/dm62-part2.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup dm62_v6_normal_sprites_right
{
loading: dm62_v6_loading_sprites_right;
 loaded: dm62_v6_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v6_normal_sprites_left;
 dm62_v6_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v6_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v6_normal_sprites_right;
 dm62_v6_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v6_sprites_left2;
 1: dm62_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v6_sprites_left1;
 128: dm62_v6_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v6_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v6_sprites_right2;
 1: dm62_v6_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v6_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v6_sprites_right1;
 128: dm62_v6_sprites_right1;
}
spriteset (dm62_v7_notpowered_sprites_left, "src/diesel/dm62-part2.png")
{
s10_template(32, 241, 0)
}
spriteset (dm62_v7_loading_sprites_left, "src/diesel/dm62-part2.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (dm62_v7_traveling_sprites_left, "src/diesel/dm62-part2.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup dm62_v7_normal_sprites_left
{
loading: dm62_v7_loading_sprites_left;
 loaded: dm62_v7_traveling_sprites_left;
}
spriteset (dm62_v7_notpowered_sprites_right, "src/diesel/dm62-part2.png")
{
s10_r_template(32, 241, 0)
}
spriteset (dm62_v7_loading_sprites_right, "src/diesel/dm62-part2.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (dm62_v7_traveling_sprites_right, "src/diesel/dm62-part2.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup dm62_v7_normal_sprites_right
{
loading: dm62_v7_loading_sprites_right;
 loaded: dm62_v7_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v7_normal_sprites_left;
 dm62_v7_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, dm62_v7_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: dm62_v7_normal_sprites_right;
 dm62_v7_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, dm62_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v7_sprites_left2;
 1: dm62_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v7_sprites_left1;
 128: dm62_v7_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, dm62_v7_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: dm62_v7_sprites_right2;
 1: dm62_v7_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, dm62_v7_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: dm62_v7_sprites_right1;
 128: dm62_v7_sprites_right1;
}
switch (FEAT_TRAINS, SELF, dm62_sprites_left,
  cargo_subtype)
{
0: dm62_v1_sprites_left;
                       1: dm62_v3_sprites_left;
                       2: dm62_v5_sprites_left;
              15: dm62_v1_sprites_left;
              14: dm62_v2_sprites_left;
  29: dm62_v4_sprites_left;
  33: dm62_v6_sprites_left;
      16: dm62_v7_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, dm62_sprites_right,
  cargo_subtype)
{
0: dm62_v1_sprites_right;
                       1: dm62_v3_sprites_right;
                       2: dm62_v5_sprites_right;
              15: dm62_v1_sprites_right;
              14: dm62_v2_sprites_right;
  29: dm62_v4_sprites_right;
  33: dm62_v6_sprites_right;
      16: dm62_v7_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, dm62_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: dm62_sprites_left;
 dm62_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ dm62_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, dm62_sprites_parent, [ STORE_TEMP(count_veh_id(dm62), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ dm62_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, dm62_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 dm62_sprites_parent;
}
switch (FEAT_TRAINS, SELF, dm62_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 33: general_cargo_subtype_text_LV_KALININGRAD_RAILWAY;
 16: general_cargo_subtype_text_LV_OCTOBER_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, dm62_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_BELARUSSIAN_RAILWAY_TCH1_MINSK_SORT);
 dm62_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, dm62_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, dm62_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, dm62_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: dm62_create_effect_sprites_left;
 dm62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, dm62_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, dm62_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(dm62), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 4)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, dm62_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(dm62), 0), STORE_TEMP(vehicle_type_id == dm62, 1) ])
{ dm62_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, dm62_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 dm62_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, dm62_running_cost_factor,
[ STORE_TEMP(189, 0), // Моторы
   STORE_TEMP(26, 1), // Бригада
   STORE_TEMP(66, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(46, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(116, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 331
switch (FEAT_TRAINS, SELF, dm62_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1994 << 16), 0x101), STORE_TEMP(1996 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, dm62_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_4) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, dm62_additional_text, current_year <= 1996)
{
1: dm62_additional_text_hidden;
 dm62_additional_text_shown;
}
item (FEAT_TRAINS, dm62, 166)
{
property
{
name: string(STR_NAME_DM62);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1994 - delta_age, 1, 1);
 model_life: 1997 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1994 -1997 -2 < retire_early_default ? 1997 -1994 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1994 -1997 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1994 -1997 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 34 > 255 ? 255 : 34;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1545 * 0.9865);
 weight: (116) ton;
 tractive_effort_coefficient: (((333.0))/((116))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: m62;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: dm62_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: dm62_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: dm62_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: dm62_create_effect;
                 default: dm62_sprites;
                purchase: dm62_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: dm62_running_cost_factor;
                   speed: dm62_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, dm62)
{
property
{
name: string(STR_LONGNAME_DM62);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, dm62)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, dm62)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, dm62)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, dm62)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, dm62)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// eel
spriteset (eel_purchase_graphics_ico, "src/diesel/eel.png")
{
new_purchase_template(0, 0)
}
spriteset (eel_purchase_graphics_noico, "src/diesel/eel.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, eel_purchase_sprites, enable_icons)
{
1: eel_purchase_graphics_ico;
 eel_purchase_graphics_noico;
}
spriteset (eel_v1_notpowered_sprites_left, "src/diesel/eel.png")
{
s8_template(32, 40, 0)
}
spriteset (eel_v1_loading_sprites_left, "src/diesel/eel.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (eel_v1_traveling_sprites_left, "src/diesel/eel.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup eel_v1_normal_sprites_left
{
loading: eel_v1_loading_sprites_left;
 loaded: eel_v1_traveling_sprites_left;
}
spriteset (eel_v1_sprites_right, "src/diesel/eel.png")
{
s8_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, eel_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: eel_v1_normal_sprites_left;
 eel_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, eel_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: eel_v1_sprites_left2;
 1: eel_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, eel_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: eel_v1_sprites_left1;
 128: eel_v1_sprites_left1;
}
spriteset (eel_v2_notpowered_sprites_left, "src/diesel/eel.png")
{
s8_template(32, 241, 0)
}
spriteset (eel_v2_loading_sprites_left, "src/diesel/eel.png")
{
s8_template(32, 241 +67, 0)
}
spriteset (eel_v2_traveling_sprites_left, "src/diesel/eel.png")
{
s8_template(32, 241 +134, 0)
}
spritegroup eel_v2_normal_sprites_left
{
loading: eel_v2_loading_sprites_left;
 loaded: eel_v2_traveling_sprites_left;
}
spriteset (eel_v2_sprites_right, "src/diesel/eel.png")
{
s8_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, eel_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: eel_v2_normal_sprites_left;
 eel_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, eel_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: eel_v2_sprites_left2;
 1: eel_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, eel_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: eel_v2_sprites_left1;
 128: eel_v2_sprites_left1;
}
switch (FEAT_TRAINS, SELF, eel_sprites_left,
  ((build_year >= 1960) || (date_of_last_service >= date(1960,1,1))))
{
0: eel_v1_sprites_left;
  1: eel_v2_sprites_left;
     align_8_sprites;
}
switch (FEAT_TRAINS, SELF, eel_sprites_right,
  ((build_year >= 1960) || (date_of_last_service >= date(1960,1,1))))
{
0: eel_v1_sprites_right;
  1: eel_v2_sprites_right;
     align_8_sprites;
}
switch (FEAT_TRAINS, SELF, eel_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) || (position_in_consist == 0) ])
{
1: eel_sprites_left;
 eel_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_sprites_old, ((LOAD_TEMP(0) - count_veh_id(eel) + 1) % 2))
{
1: eel_sprites_2l;
 eel_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_old;
 eel_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_16;
 eel_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_14;
 eel_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_12;
 eel_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_10;
 eel_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_8;
 eel_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_6;
 eel_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_sprites_4;
 eel_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ eel_sprites_start; }
switch (FEAT_TRAINS, PARENT, eel_sprites_parent, [ STORE_TEMP(count_veh_id(eel), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ eel_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, eel_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 eel_sprites_parent;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_left,
  [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, -1, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, -1, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_right,
  [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 1, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 1, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) || (position_in_consist == 0) ])
{
1: eel_create_effect_sprites_left;
 eel_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(eel) + 1) % 2))
{
1: eel_create_effect_sprites_2l;
 eel_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_old;
 eel_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_16;
 eel_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_14;
 eel_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_12;
 eel_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_10;
 eel_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_8;
 eel_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_6;
 eel_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, eel_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == eel) ])
{
1: eel_create_effect_sprites_4;
 eel_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, eel_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 55 * (100 - speed_penalty_percent) / 100 : 55)
{ return; }
switch (FEAT_TRAINS, SELF, eel_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, eel_running_cost_factor,
[ STORE_TEMP(105, 0), // Моторы
   STORE_TEMP(15, 1), // Бригада
   STORE_TEMP(37, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(26, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(55, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 185
switch (FEAT_TRAINS, SELF, eel_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1932 << 16), 0x101), STORE_TEMP(1937 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, eel_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, eel_additional_text, current_year <= 1937)
{
1: eel_additional_text_hidden;
 eel_additional_text_shown;
}
item (FEAT_TRAINS, eel, 361)
{
property
{
name: string(STR_NAME_EEL);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1932 - delta_age, 1, 1);
 model_life: 1937 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1932 -1937 -2 < retire_early_default ? 1937 -1932 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1932 -1937 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1932 -1937 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 19 > 255 ? 255 : 19;
 length: 7;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1050 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((206.0))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: eel_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: eel_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: eel_create_effect_sprites_start;
                 default: eel_sprites;
                purchase: eel_purchase_sprites;
          purchase_speed: return 55;
     running_cost_factor: eel_running_cost_factor;
                   speed: eel_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, eel)
{
property
{
name: string(STR_LONGNAME_EEL);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, eel)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, eel)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, eel)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, eel)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, eel)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// eel2
spriteset (eel2_purchase_graphics_ico, "src/diesel/eel2.png")
{
new_purchase_template(0, 0)
}
spriteset (eel2_purchase_graphics_noico, "src/diesel/eel2.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, eel2_purchase_sprites, enable_icons)
{
1: eel2_purchase_graphics_ico;
 eel2_purchase_graphics_noico;
}
spriteset (eel2_engine_notpowered_sprites_left, "src/diesel/eel2.png")
{
s8_template(32, 40, 0)
}
spriteset (eel2_engine_loading_sprites_left, "src/diesel/eel2.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (eel2_engine_traveling_sprites_left, "src/diesel/eel2.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup eel2_engine_normal_sprites_left
{
loading: eel2_engine_loading_sprites_left;
 loaded: eel2_engine_traveling_sprites_left;
}
spriteset (eel2_engine_sprites_right, "src/diesel/eel2.png")
{
s8_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, eel2_engine_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: eel2_engine_normal_sprites_left;
 eel2_engine_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, eel2_engine_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: eel2_engine_sprites_left2;
 1: eel2_engine_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, eel2_engine_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: eel2_engine_sprites_left1;
 128: eel2_engine_sprites_left1;
}
spriteset (eel2_tender_sprites_start, "src/diesel/eel2.png")
{
s5_template(447, 40, 0)
}
switch (FEAT_TRAINS, SELF, eel2_sprites_start,
  position_in_articulated_veh)
{
0: eel2_engine_sprites_left;
  2: eel2_tender_sprites_start;
     dummy_sprites;
}
switch (FEAT_TRAINS, SELF, eel2_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ eel2_sprites_start; }
switch (FEAT_TRAINS, PARENT, eel2_sprites_parent, [ STORE_TEMP(count_veh_id(eel2), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ eel2_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, eel2_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 eel2_sprites_parent;
}
switch (FEAT_TRAINS, SELF, eel2_running_cost_factor,
[ STORE_TEMP(121, 0), // Моторы
   STORE_TEMP(17, 1), // Бригада
   STORE_TEMP(43, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(30, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(45, 6), // Скорость
   STORE_TEMP(124+50, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 213
switch (FEAT_TRAINS, SELF, eel2_create_effect2,
  [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, -1, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, -1, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, eel2_create_effect,
  position_in_articulated_veh)
{
0: eel2_create_effect2;
     return 0;
}
switch (FEAT_TRAINS, SELF, eel2_engine_colour_mapping,
  cargo_subtype)
{
0: return ttdall_cc + 0x1A;
  1: return ttdall_cc + 0x5A;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, eel2_tender_colour_mapping,
[ STORE_TEMP(-2, 0x10F),
  var[0x61, 0, 0xFFFF, 0xF2]])
{
0: return ttdall_cc + 0x1A;
  1: return ttdall_cc + 0x5A;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, eel2_colour_mapping, position_in_articulated_veh)
{
0: eel2_engine_colour_mapping;
 2: eel2_tender_colour_mapping;
 dummy_sprites;
}
switch (FEAT_TRAINS, SELF, eel2_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_5A);
 return string(STR_REFIT_TTD_1B);
}
switch (FEAT_TRAINS, SELF, eel2_articulated_part, extra_callback_info1)
{
1: return eel2;
 2: return eel2;
 3: return eel2;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, eel2_length, position_in_articulated_veh)
{
0: return 7;
 1: return 1;
 2: return 4;
 3: return 1;
 return 8;
}
switch (FEAT_TRAINS, SELF, eel2_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 45 * (100 - speed_penalty_percent) / 100 : 45)
{ return; }
switch (FEAT_TRAINS, SELF, eel2_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, eel2_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1924 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ESSLINGEN), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, eel2_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ESSLINGEN), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, eel2_additional_text, current_year <= 1924)
{
1: eel2_additional_text_hidden;
 eel2_additional_text_shown;
}
item (FEAT_TRAINS, eel2, 719)
{
property
{
name: string(STR_NAME_EEL2);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1924 - delta_age, 1, 1);
 model_life: 1924 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1924 -1924 -2 < retire_early_default ? 1924 -1924 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1924 -1924 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1924 -1924 -1+retire_late_default;
 vehicle_life: 40;
 reliability_decay: 10;
 cost_factor: 19 > 255 ? 255 : 19;
 length: 5;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1049 * 0.9865);
 weight: (124+50) ton;
 tractive_effort_coefficient: (((147.0))/((124+50))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: eel;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: eel2_additional_text;
        articulated_part: eel2_articulated_part;
    bitmask_vehicle_info: eel2_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: eel2_cargo_subtype_text;
          colour_mapping: eel2_colour_mapping;
           create_effect: eel2_create_effect;
                 default: eel2_sprites;
                  length: eel2_length;
                purchase: eel2_purchase_sprites;
          purchase_speed: return 45;
     running_cost_factor: eel2_running_cost_factor;
                   speed: eel2_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, eel2)
{
property
{
name: string(STR_LONGNAME_EEL2);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, eel2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, eel2)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, eel2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, eel2)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, eel2)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// m3/2
spriteset (m32_purchase_graphics_ico, "src/diesel/m32.png")
{
new_purchase_template(0, 0)
}
spriteset (m32_purchase_graphics_noico, "src/diesel/m32.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, m32_purchase_sprites, enable_icons)
{
1: m32_purchase_graphics_ico;
 m32_purchase_graphics_noico;
}
spriteset (m32_notpowered_sprites_left, "src/diesel/m32.png")
{
s4_template(32, 40, 0)
}
spriteset (m32_loading_sprites_left, "src/diesel/m32.png")
{
s4_template(32, 40 +67, 0)
}
spriteset (m32_traveling_sprites_left, "src/diesel/m32.png")
{
s4_template(32, 40 +134, 0)
}
spritegroup m32_normal_sprites_left
{
loading: m32_loading_sprites_left;
 loaded: m32_traveling_sprites_left;
}
spriteset (m32_notpowered_sprites_right, "src/diesel/m32.png")
{
s4_r_template(32, 40, 0)
}
spriteset (m32_loading_sprites_right, "src/diesel/m32.png")
{
s4_r_template(32 +415, 40 +67, 0)
}
spriteset (m32_traveling_sprites_right, "src/diesel/m32.png")
{
s4_r_template(32 +415, 40 +134, 0)
}
spritegroup m32_normal_sprites_right
{
loading: m32_loading_sprites_right;
 loaded: m32_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m32_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m32_normal_sprites_left;
 m32_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m32_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m32_normal_sprites_right;
 m32_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m32_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m32_sprites_left2;
 1: m32_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m32_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m32_sprites_left1;
 128: m32_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m32_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m32_sprites_right2;
 1: m32_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m32_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m32_sprites_right1;
 128: m32_sprites_right1;
}
switch (FEAT_TRAINS, SELF, m32_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: m32_sprites_left;
 m32_sprites_right;
}
switch (FEAT_TRAINS, SELF, m32_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ m32_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, m32_sprites_parent, [ STORE_TEMP(count_veh_id(m32), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ m32_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, m32_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 m32_sprites_parent;
}
switch (FEAT_TRAINS, SELF, m32_colour_mapping,
  cargo_subtype)
{
0: return ttdall_cc + 0x1A;
  1: return ttdall_cc + 0x71;
  2: return ttdall_cc + 0x59;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, m32_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_71);
 2: return string(STR_REFIT_TTD_59);
 return string(STR_REFIT_TTD_1A);
}
switch (FEAT_TRAINS, SELF, m32_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 38 * (100 - speed_penalty_percent) / 100 : 38)
{ return; }
switch (FEAT_TRAINS, SELF, m32_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, m32_running_cost_factor,
[ STORE_TEMP(4, 0), // Моторы
   STORE_TEMP(1, 1), // Бригада
   STORE_TEMP(1, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(1, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(38, 6), // Скорость
   STORE_TEMP(12, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 7
switch (FEAT_TRAINS, SELF, m32_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1931 << 16), 0x101), STORE_TEMP(1941 | (string(STR_PURCHASE_HINT_FACTORY_KALUGA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, m32_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KALUGA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, m32_additional_text, current_year <= 1941)
{
1: m32_additional_text_hidden;
 m32_additional_text_shown;
}
item (FEAT_TRAINS, m32, 494)
{
property
{
name: string(STR_NAME_M32);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1931 - delta_age, 1, 1);
 model_life: 1941 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1931 -1941 -2 < retire_early_default ? 1941 -1931 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1931 -1941 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1931 -1941 -1+retire_late_default;
 vehicle_life: 15;
 reliability_decay: 10;
 cost_factor: 1 > 255 ? 255 : 1;
 length: 3;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (73 * 0.9865);
 weight: (12) ton;
 tractive_effort_coefficient: (((21.0))/((12))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: m32_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: m32_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: m32_cargo_subtype_text;
          colour_mapping: m32_colour_mapping;
           create_effect: 0;
                 default: m32_sprites;
                purchase: m32_purchase_sprites;
          purchase_speed: return 38;
     running_cost_factor: m32_running_cost_factor;
                   speed: m32_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, m32)
{
property
{
name: string(STR_LONGNAME_M32);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, m32)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, m32)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, m32)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, m32)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, m32)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// m62
spriteset (m62_v1_purchase_graphics_ico, "src/diesel/m62-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (m62_v1_purchase_graphics_noico, "src/diesel/m62-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, m62_v1_purchase_sprites, enable_icons)
{
1: m62_v1_purchase_graphics_ico;
 m62_v1_purchase_graphics_noico;
}
spriteset (m62_v1_notpowered_sprites_left, "src/diesel/m62-pre.png")
{
s10_template(32, 40, 0)
}
spriteset (m62_v1_loading_sprites_left, "src/diesel/m62-pre.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (m62_v1_traveling_sprites_left, "src/diesel/m62-pre.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup m62_v1_normal_sprites_left
{
loading: m62_v1_loading_sprites_left;
 loaded: m62_v1_traveling_sprites_left;
}
spriteset (m62_v1_notpowered_sprites_right, "src/diesel/m62-pre.png")
{
s10_r_template(32, 40, 0)
}
spriteset (m62_v1_loading_sprites_right, "src/diesel/m62-pre.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (m62_v1_traveling_sprites_right, "src/diesel/m62-pre.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup m62_v1_normal_sprites_right
{
loading: m62_v1_loading_sprites_right;
 loaded: m62_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v1_normal_sprites_left;
 m62_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v1_normal_sprites_right;
 m62_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m62_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v1_sprites_left2;
 1: m62_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m62_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v1_sprites_left1;
 128: m62_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m62_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v1_sprites_right2;
 1: m62_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m62_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v1_sprites_right1;
 128: m62_v1_sprites_right1;
}
spriteset (m62_v2_purchase_graphics_ico, "src/diesel/m62.png")
{
new_purchase_template(0, 0)
}
spriteset (m62_v2_purchase_graphics_noico, "src/diesel/m62.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, m62_v2_purchase_sprites, enable_icons)
{
1: m62_v2_purchase_graphics_ico;
 m62_v2_purchase_graphics_noico;
}
spriteset (m62_v2_notpowered_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 40, 0)
}
spriteset (m62_v2_loading_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (m62_v2_traveling_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup m62_v2_normal_sprites_left
{
loading: m62_v2_loading_sprites_left;
 loaded: m62_v2_traveling_sprites_left;
}
spriteset (m62_v2_notpowered_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32, 40, 0)
}
spriteset (m62_v2_loading_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (m62_v2_traveling_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup m62_v2_normal_sprites_right
{
loading: m62_v2_loading_sprites_right;
 loaded: m62_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v2_normal_sprites_left;
 m62_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v2_normal_sprites_right;
 m62_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m62_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v2_sprites_left2;
 1: m62_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m62_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v2_sprites_left1;
 128: m62_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m62_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v2_sprites_right2;
 1: m62_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m62_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v2_sprites_right1;
 128: m62_v2_sprites_right1;
}
spriteset (m62_v3_notpowered_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 241, 0)
}
spriteset (m62_v3_loading_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (m62_v3_traveling_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup m62_v3_normal_sprites_left
{
loading: m62_v3_loading_sprites_left;
 loaded: m62_v3_traveling_sprites_left;
}
spriteset (m62_v3_notpowered_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32, 241, 0)
}
spriteset (m62_v3_loading_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (m62_v3_traveling_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup m62_v3_normal_sprites_right
{
loading: m62_v3_loading_sprites_right;
 loaded: m62_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v3_normal_sprites_left;
 m62_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v3_normal_sprites_right;
 m62_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m62_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v3_sprites_left2;
 1: m62_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m62_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v3_sprites_left1;
 128: m62_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m62_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v3_sprites_right2;
 1: m62_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m62_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v3_sprites_right1;
 128: m62_v3_sprites_right1;
}
spriteset (m62_v4_notpowered_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 442, 0)
}
spriteset (m62_v4_loading_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (m62_v4_traveling_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup m62_v4_normal_sprites_left
{
loading: m62_v4_loading_sprites_left;
 loaded: m62_v4_traveling_sprites_left;
}
spriteset (m62_v4_notpowered_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32, 442, 0)
}
spriteset (m62_v4_loading_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (m62_v4_traveling_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup m62_v4_normal_sprites_right
{
loading: m62_v4_loading_sprites_right;
 loaded: m62_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v4_normal_sprites_left;
 m62_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v4_normal_sprites_right;
 m62_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m62_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v4_sprites_left2;
 1: m62_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m62_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v4_sprites_left1;
 128: m62_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m62_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v4_sprites_right2;
 1: m62_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m62_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v4_sprites_right1;
 128: m62_v4_sprites_right1;
}
spriteset (m62_v5_notpowered_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 643, 0)
}
spriteset (m62_v5_loading_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (m62_v5_traveling_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup m62_v5_normal_sprites_left
{
loading: m62_v5_loading_sprites_left;
 loaded: m62_v5_traveling_sprites_left;
}
spriteset (m62_v5_notpowered_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32, 643, 0)
}
spriteset (m62_v5_loading_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 643 +67, 0)
}
spriteset (m62_v5_traveling_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 643 +134, 0)
}
spritegroup m62_v5_normal_sprites_right
{
loading: m62_v5_loading_sprites_right;
 loaded: m62_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v5_normal_sprites_left;
 m62_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v5_normal_sprites_right;
 m62_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m62_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v5_sprites_left2;
 1: m62_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m62_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v5_sprites_left1;
 128: m62_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m62_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v5_sprites_right2;
 1: m62_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m62_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v5_sprites_right1;
 128: m62_v5_sprites_right1;
}
spriteset (m62_v6_notpowered_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 844, 0)
}
spriteset (m62_v6_loading_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (m62_v6_traveling_sprites_left, "src/diesel/m62.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup m62_v6_normal_sprites_left
{
loading: m62_v6_loading_sprites_left;
 loaded: m62_v6_traveling_sprites_left;
}
spriteset (m62_v6_notpowered_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32, 844, 0)
}
spriteset (m62_v6_loading_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 844 +67, 0)
}
spriteset (m62_v6_traveling_sprites_right, "src/diesel/m62.png")
{
s10_r_template(32 +415, 844 +134, 0)
}
spritegroup m62_v6_normal_sprites_right
{
loading: m62_v6_loading_sprites_right;
 loaded: m62_v6_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v6_normal_sprites_left;
 m62_v6_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_v6_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: m62_v6_normal_sprites_right;
 m62_v6_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, m62_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v6_sprites_left2;
 1: m62_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, m62_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v6_sprites_left1;
 128: m62_v6_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, m62_v6_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: m62_v6_sprites_right2;
 1: m62_v6_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, m62_v6_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: m62_v6_sprites_right1;
 128: m62_v6_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, m62_purchase_sprites, current_year >= 1970)
{
0: m62_v1_purchase_sprites;
 m62_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, m62_a1970_sprites_left,
  cargo_subtype)
{
0: m62_v2_sprites_left;
              15: m62_v3_sprites_left;
              14: m62_v2_sprites_left;
  29: m62_v4_sprites_left;
  33: m62_v5_sprites_left;
      16: m62_v6_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, m62_a1970_sprites_right,
  cargo_subtype)
{
0: m62_v2_sprites_right;
              15: m62_v3_sprites_right;
              14: m62_v2_sprites_right;
  29: m62_v4_sprites_right;
  33: m62_v5_sprites_right;
      16: m62_v6_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, m62_sprites_left, build_year < 1970)
{
1: m62_v1_sprites_left;
 m62_a1970_sprites_left;
}
switch (FEAT_TRAINS, SELF, m62_sprites_right, build_year < 1970)
{
1: m62_v1_sprites_right;
 m62_a1970_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: m62_sprites_left;
 m62_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ m62_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, m62_sprites_parent, [ STORE_TEMP(count_veh_id(m62), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ m62_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, m62_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 m62_sprites_parent;
}
switch (FEAT_TRAINS, SELF, m62_a1970_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 33: general_cargo_subtype_text_LV_KALININGRAD_RAILWAY;
 16: general_cargo_subtype_text_LV_OCTOBER_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, m62_cargo_subtype_text, build_year < 1970)
{
1: return string(STR_REFIT_PREPRODUCTION);
 m62_a1970_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, m62_cost_factor, build_year >= 1970)
{
1: return 33;
 return 36;
}
switch (FEAT_TRAINS, SELF, m62_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, m62_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, m62_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: m62_create_effect_sprites_left;
 m62_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, m62_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, m62_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(m62), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, m62_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(m62), 0), STORE_TEMP(vehicle_type_id == m62, 1) ])
{ m62_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, m62_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 m62_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, m62_running_cost_factor,
[ STORE_TEMP(186 - 2 * (build_year >= 1970), 0), // Моторы
   STORE_TEMP(26, 1), // Бригада
   STORE_TEMP(65 - (build_year >= 1970), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(46, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(116, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 327-324
switch (FEAT_TRAINS, SELF, m62_b1970_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1970 << 16), 0x101), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, m62_b1970_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, m62_b1970_additional_text, current_year <= 1970)
{
1: m62_b1970_additional_text_hidden;
 m62_b1970_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, m62_a1970_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1971 << 16), 0x101), STORE_TEMP(1976 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, m62_a1970_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, m62_a1970_additional_text, current_year <= 1976)
{
1: m62_a1970_additional_text_hidden;
 m62_a1970_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, m62_additional_text, current_year >= 1970)
{
0: m62_b1970_additional_text;
 m62_a1970_additional_text;
}
item (FEAT_TRAINS, m62, 165)
{
property
{
name: string(STR_NAME_M62);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1970 - delta_age, 1, 1);
 model_life: 1976 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1970 -1976 -2 < retire_early_default ? 1976 -1970 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1970 -1976 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1970 -1976 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 36 > 255 ? 255 : 36;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1480 * 0.9865);
 weight: (116) ton;
 tractive_effort_coefficient: (((350.0))/((116))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: m62_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: m62_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: m62_cargo_subtype_text;
          colour_mapping: any_cc_colour;
             cost_factor: m62_cost_factor;
           create_effect: m62_create_effect;
                 default: m62_sprites;
                purchase: m62_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: m62_running_cost_factor;
                   speed: m62_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, m62)
{
property
{
name: string(STR_LONGNAME_M62);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, m62)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, m62)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, m62)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, m62)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, m62)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// _mx
spriteset (_mx_purchase_graphics_ico, "src/diesel/mx.png")
{
new_purchase_template(0, 0)
}
spriteset (_mx_purchase_graphics_noico, "src/diesel/mx.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, _mx_purchase_sprites, enable_icons)
{
1: _mx_purchase_graphics_ico;
 _mx_purchase_graphics_noico;
}
spriteset (_mx_notpowered_sprites_1_left, "src/diesel/mx.png")
{
s5_template(32, 40, 0)
}
spriteset (_mx_notpowered_sprites_2_left, "src/diesel/mx.png")
{
s5_template(32, 40 +67, 0)
}
spriteset (_mx_notpowered_sprites_3_left, "src/diesel/mx.png")
{
s5_template(32, 40 +134, 0)
}
spriteset (_mx_notpowered_sprites_4_left, "src/diesel/mx.png")
{
s5_template(32, 40 +201, 0)
}
spriteset (_mx_loading_sprites_1_left, "src/diesel/mx.png")
{
s5_template(32, 40 +268, 0)
}
spriteset (_mx_loading_sprites_2_left, "src/diesel/mx.png")
{
s5_template(32, 40 +335, 0)
}
spriteset (_mx_loading_sprites_3_left, "src/diesel/mx.png")
{
s5_template(32, 40 +402, 0)
}
spriteset (_mx_loading_sprites_4_left, "src/diesel/mx.png")
{
s5_template(32, 40 +469, 0)
}
spriteset (_mx_traveling_sprites_1_left, "src/diesel/mx.png")
{
s5_template(32, 40 +536, 0)
}
spriteset (_mx_traveling_sprites_2_left, "src/diesel/mx.png")
{
s5_template(32, 40 +603, 0)
}
spriteset (_mx_traveling_sprites_3_left, "src/diesel/mx.png")
{
s5_template(32, 40 +670, 0)
}
spriteset (_mx_traveling_sprites_4_left, "src/diesel/mx.png")
{
s5_template(32, 40 +737, 0)
}
spritegroup _mx_normal_sprites_1_left
{
loading: _mx_loading_sprites_1_left;
 loaded: _mx_traveling_sprites_1_left;
}
spritegroup _mx_normal_sprites_2_left
{
loading: _mx_loading_sprites_2_left;
 loaded: _mx_traveling_sprites_2_left;
}
spritegroup _mx_normal_sprites_3_left
{
loading: _mx_loading_sprites_3_left;
 loaded: _mx_traveling_sprites_3_left;
}
spritegroup _mx_normal_sprites_4_left
{
loading: _mx_loading_sprites_4_left;
 loaded: _mx_traveling_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, _mx_notpowered_sprites_left, LOAD_TEMP(3))
{
0: _mx_notpowered_sprites_1_left;
 1: _mx_notpowered_sprites_2_left;
 2: _mx_notpowered_sprites_3_left;
 _mx_notpowered_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, _mx_normal_sprites_left, LOAD_TEMP(3))
{
0: _mx_normal_sprites_1_left;
 1: _mx_normal_sprites_2_left;
 2: _mx_normal_sprites_3_left;
 _mx_normal_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, _mx_sprites_start2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: _mx_normal_sprites_left;
 _mx_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, _mx_sprites_start1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: _mx_sprites_start2;
 1: _mx_sprites_start2;
}
random_switch (FEAT_TRAINS, SELF, _mx_sprites_start, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: _mx_sprites_start1;
 128: _mx_sprites_start1;
}
switch (FEAT_TRAINS, SELF, _mx_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ _mx_sprites_start; }
switch (FEAT_TRAINS, PARENT, _mx_sprites_parent, [ STORE_TEMP(count_veh_id(_mx), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ _mx_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, _mx_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 _mx_sprites_parent;
}
switch (FEAT_TRAINS, SELF, _mx_create_effect, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, _mx_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 45 * (100 - speed_penalty_percent) / 100 : 45)
{ return; }
switch (FEAT_TRAINS, SELF, _mx_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, _mx_running_cost_factor,
[ STORE_TEMP(13, 0), // Моторы
   STORE_TEMP(2, 1), // Бригада
   STORE_TEMP(5, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(3, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(45, 6), // Скорость
   STORE_TEMP(38, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 23
switch (FEAT_TRAINS, SELF, _mx_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1931 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_FRIEDRICH_KRUPP), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, _mx_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_FRIEDRICH_KRUPP), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, _mx_additional_text, current_year <= 1931)
{
1: _mx_additional_text_hidden;
 _mx_additional_text_shown;
}
item (FEAT_TRAINS, _mx, 379)
{
property
{
name: string(STR_NAME_MX);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1931 - delta_age, 1, 1);
 model_life: 1931 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1931 -1931 -2 < retire_early_default ? 1931 -1931 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1931 -1931 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1931 -1931 -1+retire_late_default;
 vehicle_life: 15;
 reliability_decay: 10;
 cost_factor: 3 > 255 ? 255 : 3;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (175 * 0.9865);
 weight: (38) ton;
 tractive_effort_coefficient: (((88.0))/((38))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: _mx_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: _mx_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: _mx_create_effect;
                 default: _mx_sprites;
                purchase: _mx_purchase_sprites;
          purchase_speed: return 45;
     running_cost_factor: _mx_running_cost_factor;
                   speed: _mx_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, _mx)
{
property
{
name: string(STR_LONGNAME_MX);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, _mx)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, _mx)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, _mx)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, _mx)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, _mx)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// schel1
spriteset (schel1_purchase_graphics_ico, "src/diesel/schel1.png")
{
new_purchase_template(0, 0)
}
spriteset (schel1_purchase_graphics_noico, "src/diesel/schel1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, schel1_purchase_sprites, enable_icons)
{
1: schel1_purchase_graphics_ico;
 schel1_purchase_graphics_noico;
}
spriteset (schel1_notpowered_sprites_left, "src/diesel/schel1.png")
{
s13_template(32, 40, 0)
}
spriteset (schel1_loading_sprites_left, "src/diesel/schel1.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (schel1_traveling_sprites_left, "src/diesel/schel1.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup schel1_normal_sprites_left
{
loading: schel1_loading_sprites_left;
 loaded: schel1_traveling_sprites_left;
}
spriteset (schel1_sprites_right, "src/diesel/schel1.png")
{
s13_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, schel1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: schel1_normal_sprites_left;
 schel1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, schel1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: schel1_sprites_left2;
 1: schel1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, schel1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: schel1_sprites_left1;
 128: schel1_sprites_left1;
}
switch (FEAT_TRAINS, SELF, schel1_sprites_start, 0)
{ schel1_sprites_left; }
switch (FEAT_TRAINS, SELF, schel1_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ schel1_sprites_start; }
switch (FEAT_TRAINS, PARENT, schel1_sprites_parent, [ STORE_TEMP(count_veh_id(schel1), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ schel1_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, schel1_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 schel1_sprites_parent;
}
switch (FEAT_TRAINS, SELF, schel1_colour_mapping,
  cargo_subtype)
{
0: return ttdall_cc + 0x6C;
  1: return ttdall_cc + 0xA2;
  2: return ttdall_cc + 0x1A;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, schel1_create_effect, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, schel1_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_A5);
 2: return string(STR_REFIT_TTD_1B);
 return string(STR_REFIT_TTD_6C);
}
switch (FEAT_TRAINS, SELF, schel1_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 75 * (100 - speed_penalty_percent) / 100 : 75)
{ return; }
switch (FEAT_TRAINS, SELF, schel1_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, schel1_running_cost_factor,
[ STORE_TEMP(135, 0), // Моторы
   STORE_TEMP(19, 1), // Бригада
   STORE_TEMP(47, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(33, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(75, 6), // Скорость
   STORE_TEMP(180, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 237
switch (FEAT_TRAINS, SELF, schel1_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1924 << 16), 0x101), STORE_TEMP((current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_BALTISKY_PLANT) : string(STR_PURCHASE_HINT_FACTORY_BALTISKY_PLANT_AUSSR)), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, schel1_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP((current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_BALTISKY_PLANT) : string(STR_PURCHASE_HINT_FACTORY_BALTISKY_PLANT_AUSSR)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, schel1_additional_text, current_year <= 1924)
{
1: schel1_additional_text_hidden;
 schel1_additional_text_shown;
}
item (FEAT_TRAINS, schel1, 730)
{
property
{
name: string(STR_NAME_SCHEL1);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1924 - delta_age, 1, 1);
 model_life: 1924 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1924 -1924 -2 < retire_early_default ? 1924 -1924 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1924 -1924 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1924 -1924 -1+retire_late_default;
 vehicle_life: 5;
 reliability_decay: 15;
 cost_factor: 24 > 255 ? 255 : 24;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (800 * 0.9865);
 weight: (180) ton;
 tractive_effort_coefficient: (((216.0))/((180))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: schel1_additional_text;
        articulated_part: articulated_part_dummy5;
    bitmask_vehicle_info: schel1_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: schel1_cargo_subtype_text;
          colour_mapping: schel1_colour_mapping;
           create_effect: schel1_create_effect;
                 default: schel1_sprites;
                purchase: schel1_purchase_sprites;
          purchase_speed: return 75;
     running_cost_factor: schel1_running_cost_factor;
                   speed: schel1_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, schel1)
{
property
{
name: string(STR_LONGNAME_SCHEL1);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, schel1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, schel1)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, schel1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, schel1)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, schel1)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te1
spriteset (te1_purchase_graphics_ico, "src/diesel/te1.png")
{
new_purchase_template(0, 0)
}
spriteset (te1_purchase_graphics_noico, "src/diesel/te1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te1_purchase_sprites, enable_icons)
{
1: te1_purchase_graphics_ico;
 te1_purchase_graphics_noico;
}
spriteset (te1_v1_notpowered_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 40, 0)
}
spriteset (te1_v1_loading_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (te1_v1_traveling_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup te1_v1_normal_sprites_left
{
loading: te1_v1_loading_sprites_left;
 loaded: te1_v1_traveling_sprites_left;
}
spriteset (te1_v1_notpowered_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32, 40, 0)
}
spriteset (te1_v1_loading_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (te1_v1_traveling_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup te1_v1_normal_sprites_right
{
loading: te1_v1_loading_sprites_right;
 loaded: te1_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te1_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te1_v1_normal_sprites_left;
 te1_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te1_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te1_v1_normal_sprites_right;
 te1_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te1_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te1_v1_sprites_left2;
 1: te1_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te1_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te1_v1_sprites_left1;
 128: te1_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te1_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te1_v1_sprites_right2;
 1: te1_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te1_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te1_v1_sprites_right1;
 128: te1_v1_sprites_right1;
}
spriteset (te1_v2_notpowered_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 241, 0)
}
spriteset (te1_v2_loading_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (te1_v2_traveling_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup te1_v2_normal_sprites_left
{
loading: te1_v2_loading_sprites_left;
 loaded: te1_v2_traveling_sprites_left;
}
spriteset (te1_v2_notpowered_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32, 241, 0)
}
spriteset (te1_v2_loading_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (te1_v2_traveling_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup te1_v2_normal_sprites_right
{
loading: te1_v2_loading_sprites_right;
 loaded: te1_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te1_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te1_v2_normal_sprites_left;
 te1_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te1_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te1_v2_normal_sprites_right;
 te1_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te1_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te1_v2_sprites_left2;
 1: te1_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te1_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te1_v2_sprites_left1;
 128: te1_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te1_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te1_v2_sprites_right2;
 1: te1_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te1_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te1_v2_sprites_right1;
 128: te1_v2_sprites_right1;
}
spriteset (te1_v3_notpowered_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 442, 0)
}
spriteset (te1_v3_loading_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (te1_v3_traveling_sprites_left, "src/diesel/te1.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup te1_v3_normal_sprites_left
{
loading: te1_v3_loading_sprites_left;
 loaded: te1_v3_traveling_sprites_left;
}
spriteset (te1_v3_notpowered_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32, 442, 0)
}
spriteset (te1_v3_loading_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (te1_v3_traveling_sprites_right, "src/diesel/te1.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup te1_v3_normal_sprites_right
{
loading: te1_v3_loading_sprites_right;
 loaded: te1_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te1_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te1_v3_normal_sprites_left;
 te1_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te1_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te1_v3_normal_sprites_right;
 te1_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te1_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te1_v3_sprites_left2;
 1: te1_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te1_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te1_v3_sprites_left1;
 128: te1_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te1_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te1_v3_sprites_right2;
 1: te1_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te1_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te1_v3_sprites_right1;
 128: te1_v3_sprites_right1;
}
switch (FEAT_TRAINS, SELF, te1_sprites_left,
  cargo_subtype)
{
0: te1_v1_sprites_left;
  15: te1_v1_sprites_left;
           1: te1_v2_sprites_left;
           2: te1_v3_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te1_sprites_right,
  cargo_subtype)
{
0: te1_v1_sprites_right;
  15: te1_v1_sprites_right;
           1: te1_v2_sprites_right;
           2: te1_v3_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te1_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: te1_sprites_left;
 te1_sprites_right;
}
switch (FEAT_TRAINS, SELF, te1_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te1_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, te1_sprites_parent, [ STORE_TEMP(count_veh_id(te1), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te1_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te1_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te1_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te1_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_54);
 2: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_TTD_53);
}
switch (FEAT_TRAINS, SELF, te1_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te1_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te1_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: te1_create_effect_sprites_left;
 te1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te1_speed, [ STORE_TEMP(((build_year >= 1956) || (date_of_last_service >= date(1956,1,1))) ? 95: 93, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, te1_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(te1), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, te1_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(te1), 0), STORE_TEMP(vehicle_type_id == te1, 1) ])
{ te1_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, te1_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 te1_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, te1_running_cost_factor,
[ STORE_TEMP(117, 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(41, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(29, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(93 + 2 * (current_year >= 1956), 6), // Скорость
   STORE_TEMP(124, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 205
switch (FEAT_TRAINS, SELF, te1_b1956_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1947 << 16), 0x101), STORE_TEMP(1950 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te1_b1956_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te1_b1956_additional_text, current_year <= 1950)
{
1: te1_b1956_additional_text_hidden;
 te1_b1956_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te1_a1956_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1947 << 16), 0x101), STORE_TEMP(1950 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_SPEED_CHANGE_ON_DATE, 95, 1956), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, te1_a1956_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR))))| (string(STR_PURCHASE_HINT_SPEED_CHANGE_ON_DATE, 95, 1956) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, te1_a1956_additional_text, current_year <= 1950)
{
1: te1_a1956_additional_text_hidden;
 te1_a1956_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te1_additional_text, current_year >= 1956)
{
0: te1_b1956_additional_text;
 te1_a1956_additional_text;
}
item (FEAT_TRAINS, te1, 145)
{
property
{
name: string(STR_NAME_TE1);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1947 - delta_age, 1, 1);
 model_life: 1950 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1947 -1950 -2 < retire_early_default ? 1950 -1947 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1947 -1950 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1947 -1950 -1+retire_late_default;
 vehicle_life: 35;
 reliability_decay: 10;
 cost_factor: 21 > 255 ? 255 : 21;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (758 * 0.9865);
 weight: (124) ton;
 tractive_effort_coefficient: (((351.0))/((124))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te1_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: te1_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te1_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: te1_create_effect;
                 default: te1_sprites;
                purchase: te1_purchase_sprites;
          purchase_speed: return 93;
     running_cost_factor: te1_running_cost_factor;
                   speed: te1_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te1)
{
property
{
name: string(STR_LONGNAME_TE1);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te1)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te1)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te1)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te10
spriteset (te10_purchase_graphics_ico, "src/diesel/te10.png")
{
new_purchase_template(0, 0)
}
spriteset (te10_purchase_graphics_noico, "src/diesel/te10.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te10_purchase_sprites, enable_icons)
{
1: te10_purchase_graphics_ico;
 te10_purchase_graphics_noico;
}
spriteset (te10_v1_notpowered_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 40, 0)
}
spriteset (te10_v1_loading_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (te10_v1_traveling_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup te10_v1_normal_sprites_left
{
loading: te10_v1_loading_sprites_left;
 loaded: te10_v1_traveling_sprites_left;
}
spriteset (te10_v1_notpowered_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32, 40, 0)
}
spriteset (te10_v1_loading_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (te10_v1_traveling_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup te10_v1_normal_sprites_right
{
loading: te10_v1_loading_sprites_right;
 loaded: te10_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v1_normal_sprites_left;
 te10_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te10_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v1_normal_sprites_right;
 te10_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te10_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v1_sprites_left2;
 1: te10_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te10_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v1_sprites_left1;
 128: te10_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te10_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v1_sprites_right2;
 1: te10_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te10_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v1_sprites_right1;
 128: te10_v1_sprites_right1;
}
spriteset (te10_v2_notpowered_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 241, 0)
}
spriteset (te10_v2_loading_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (te10_v2_traveling_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup te10_v2_normal_sprites_left
{
loading: te10_v2_loading_sprites_left;
 loaded: te10_v2_traveling_sprites_left;
}
spriteset (te10_v2_notpowered_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32, 241, 0)
}
spriteset (te10_v2_loading_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 241 +67, 0)
}
spriteset (te10_v2_traveling_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 241 +134, 0)
}
spritegroup te10_v2_normal_sprites_right
{
loading: te10_v2_loading_sprites_right;
 loaded: te10_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v2_normal_sprites_left;
 te10_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te10_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v2_normal_sprites_right;
 te10_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te10_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v2_sprites_left2;
 1: te10_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te10_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v2_sprites_left1;
 128: te10_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te10_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v2_sprites_right2;
 1: te10_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te10_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v2_sprites_right1;
 128: te10_v2_sprites_right1;
}
spriteset (te10_v3_notpowered_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 442, 0)
}
spriteset (te10_v3_loading_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 442 +67, 0)
}
spriteset (te10_v3_traveling_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 442 +134, 0)
}
spritegroup te10_v3_normal_sprites_left
{
loading: te10_v3_loading_sprites_left;
 loaded: te10_v3_traveling_sprites_left;
}
spriteset (te10_v3_notpowered_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32, 442, 0)
}
spriteset (te10_v3_loading_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 442 +67, 0)
}
spriteset (te10_v3_traveling_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 442 +134, 0)
}
spritegroup te10_v3_normal_sprites_right
{
loading: te10_v3_loading_sprites_right;
 loaded: te10_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v3_normal_sprites_left;
 te10_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te10_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v3_normal_sprites_right;
 te10_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te10_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v3_sprites_left2;
 1: te10_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te10_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v3_sprites_left1;
 128: te10_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te10_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v3_sprites_right2;
 1: te10_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te10_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v3_sprites_right1;
 128: te10_v3_sprites_right1;
}
spriteset (te10_v4_notpowered_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 643, 0)
}
spriteset (te10_v4_loading_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 643 +67, 0)
}
spriteset (te10_v4_traveling_sprites_left, "src/diesel/te10.png")
{
s11_template(32, 643 +134, 0)
}
spritegroup te10_v4_normal_sprites_left
{
loading: te10_v4_loading_sprites_left;
 loaded: te10_v4_traveling_sprites_left;
}
spriteset (te10_v4_notpowered_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32, 643, 0)
}
spriteset (te10_v4_loading_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 643 +67, 0)
}
spriteset (te10_v4_traveling_sprites_right, "src/diesel/te10.png")
{
s11_r_template(32 +415, 643 +134, 0)
}
spritegroup te10_v4_normal_sprites_right
{
loading: te10_v4_loading_sprites_right;
 loaded: te10_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v4_normal_sprites_left;
 te10_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te10_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te10_v4_normal_sprites_right;
 te10_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te10_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v4_sprites_left2;
 1: te10_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te10_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v4_sprites_left1;
 128: te10_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te10_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te10_v4_sprites_right2;
 1: te10_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te10_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te10_v4_sprites_right1;
 128: te10_v4_sprites_right1;
}
switch (FEAT_TRAINS, SELF, te10_sprites_left_base,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te10_v1_sprites_left;
     te10_v3_sprites_left;
}
switch (FEAT_TRAINS, SELF, te10_sprites_left_grey,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te10_v2_sprites_left;
     te10_v4_sprites_left;
}
switch (FEAT_TRAINS, SELF, te10_sprites_left,
  cargo_subtype)
{
0: te10_sprites_left_base;
           1: te10_sprites_left_grey;
  15: te10_sprites_left_base;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, te10_sprites_right_base,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te10_v1_sprites_right;
     te10_v3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_sprites_right_grey,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te10_v2_sprites_right;
     te10_v4_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_sprites_right,
  cargo_subtype)
{
0: te10_sprites_right_base;
           1: te10_sprites_right_grey;
  15: te10_sprites_right_base;
              align_11_sprites;
}
switch (FEAT_TRAINS, SELF, te10_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: te10_sprites_left;
 te10_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te10_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, te10_sprites_parent, [ STORE_TEMP(count_veh_id(te10), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te10_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te10_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te10_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te10_bGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_63);
 return string(STR_REFIT_TTD_93);
}
switch (FEAT_TRAINS, SELF, te10_aGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_63);
 return string(STR_REFIT_TTD_53);
}
switch (FEAT_TRAINS, SELF, te10_cargo_subtype_text, ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te10_bGREAT_CHANGE_YEAR_cargo_subtype_text;
 te10_aGREAT_CHANGE_YEAR_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te10_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te10_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te10_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: te10_create_effect_sprites_left;
 te10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te10_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, te10_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(te10), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, te10_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(te10), 0), STORE_TEMP(vehicle_type_id == te10, 1) ])
{ te10_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, te10_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 te10_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, te10_running_cost_factor,
[ STORE_TEMP(302, 0), // Моторы
   STORE_TEMP(42, 1), // Бригада
   STORE_TEMP(106, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(74, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 530
switch (FEAT_TRAINS, SELF, te10_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1958 << 16), 0x101), STORE_TEMP(1961 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te10_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te10_additional_text, current_year <= 1961)
{
1: te10_additional_text_hidden;
 te10_additional_text_shown;
}
item (FEAT_TRAINS, te10, 147)
{
property
{
name: string(STR_NAME_TE10);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1958 - delta_age, 1, 1);
 model_life: 1961 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1958 -1961 -2 < retire_early_default ? 1961 -1958 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1958 -1961 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1958 -1961 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 20;
 cost_factor: 54 > 255 ? 255 : 54;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2310 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((375.1))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te10_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: te10_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te10_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: te10_create_effect;
                 default: te10_sprites;
                purchase: te10_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: te10_running_cost_factor;
                   speed: te10_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te10)
{
property
{
name: string(STR_LONGNAME_TE10);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te10)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te10)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te10)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te109
spriteset (te109_v1_purchase_graphics_ico, "src/diesel/te109-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (te109_v1_purchase_graphics_noico, "src/diesel/te109-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te109_v1_purchase_sprites, enable_icons)
{
1: te109_v1_purchase_graphics_ico;
 te109_v1_purchase_graphics_noico;
}
spriteset (te109_v1_notpowered_sprites_left, "src/diesel/te109-pre.png")
{
s12_template(32, 40, 0)
}
spriteset (te109_v1_loading_sprites_left, "src/diesel/te109-pre.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (te109_v1_traveling_sprites_left, "src/diesel/te109-pre.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup te109_v1_normal_sprites_left
{
loading: te109_v1_loading_sprites_left;
 loaded: te109_v1_traveling_sprites_left;
}
spriteset (te109_v1_notpowered_sprites_right, "src/diesel/te109-pre.png")
{
s12_r_template(32, 40, 0)
}
spriteset (te109_v1_loading_sprites_right, "src/diesel/te109-pre.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (te109_v1_traveling_sprites_right, "src/diesel/te109-pre.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup te109_v1_normal_sprites_right
{
loading: te109_v1_loading_sprites_right;
 loaded: te109_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te109_v1_normal_sprites_left;
 te109_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te109_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te109_v1_normal_sprites_right;
 te109_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te109_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te109_v1_sprites_left2;
 1: te109_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te109_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te109_v1_sprites_left1;
 128: te109_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te109_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te109_v1_sprites_right2;
 1: te109_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te109_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te109_v1_sprites_right1;
 128: te109_v1_sprites_right1;
}
spriteset (te109_v2_purchase_graphics_ico, "src/diesel/te109.png")
{
new_purchase_template(0, 0)
}
spriteset (te109_v2_purchase_graphics_noico, "src/diesel/te109.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te109_v2_purchase_sprites, enable_icons)
{
1: te109_v2_purchase_graphics_ico;
 te109_v2_purchase_graphics_noico;
}
spriteset (te109_v2_notpowered_sprites_left, "src/diesel/te109.png")
{
s12_template(32, 40, 0)
}
spriteset (te109_v2_loading_sprites_left, "src/diesel/te109.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (te109_v2_traveling_sprites_left, "src/diesel/te109.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup te109_v2_normal_sprites_left
{
loading: te109_v2_loading_sprites_left;
 loaded: te109_v2_traveling_sprites_left;
}
spriteset (te109_v2_notpowered_sprites_right, "src/diesel/te109.png")
{
s12_r_template(32, 40, 0)
}
spriteset (te109_v2_loading_sprites_right, "src/diesel/te109.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (te109_v2_traveling_sprites_right, "src/diesel/te109.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup te109_v2_normal_sprites_right
{
loading: te109_v2_loading_sprites_right;
 loaded: te109_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te109_v2_normal_sprites_left;
 te109_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te109_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te109_v2_normal_sprites_right;
 te109_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te109_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te109_v2_sprites_left2;
 1: te109_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te109_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te109_v2_sprites_left1;
 128: te109_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te109_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te109_v2_sprites_right2;
 1: te109_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te109_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te109_v2_sprites_right1;
 128: te109_v2_sprites_right1;
}
spriteset (te109_v3_notpowered_sprites_left, "src/diesel/te109.png")
{
s12_template(32, 241, 0)
}
spriteset (te109_v3_loading_sprites_left, "src/diesel/te109.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (te109_v3_traveling_sprites_left, "src/diesel/te109.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup te109_v3_normal_sprites_left
{
loading: te109_v3_loading_sprites_left;
 loaded: te109_v3_traveling_sprites_left;
}
spriteset (te109_v3_notpowered_sprites_right, "src/diesel/te109.png")
{
s12_r_template(32, 241, 0)
}
spriteset (te109_v3_loading_sprites_right, "src/diesel/te109.png")
{
s12_r_template(32 +415, 241 +67, 0)
}
spriteset (te109_v3_traveling_sprites_right, "src/diesel/te109.png")
{
s12_r_template(32 +415, 241 +134, 0)
}
spritegroup te109_v3_normal_sprites_right
{
loading: te109_v3_loading_sprites_right;
 loaded: te109_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te109_v3_normal_sprites_left;
 te109_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te109_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te109_v3_normal_sprites_right;
 te109_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te109_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te109_v3_sprites_left2;
 1: te109_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te109_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te109_v3_sprites_left1;
 128: te109_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te109_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te109_v3_sprites_right2;
 1: te109_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te109_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te109_v3_sprites_right1;
 128: te109_v3_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, te109_purchase_sprites, current_year >= 1977)
{
0: te109_v1_purchase_sprites;
 te109_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, te109_a1977_sprites_left,
  cargo_subtype)
{
0: te109_v2_sprites_left;
  1: te109_v3_sprites_left;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, te109_a1977_sprites_right,
  cargo_subtype)
{
0: te109_v2_sprites_right;
  1: te109_v3_sprites_right;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, te109_sprites_left, build_year < 1977)
{
1: te109_v1_sprites_left;
 te109_a1977_sprites_left;
}
switch (FEAT_TRAINS, SELF, te109_sprites_right, build_year < 1977)
{
1: te109_v1_sprites_right;
 te109_a1977_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) || (position_in_consist == 0) ])
{
1: te109_sprites_left;
 te109_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te109) + 1) % 2))
{
1: te109_sprites_2l;
 te109_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_old;
 te109_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_16;
 te109_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te109_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_14;
 te109_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_12;
 te109_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te109_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_10;
 te109_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_8;
 te109_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te109_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_6;
 te109_sprites_right;
}
switch (FEAT_TRAINS, SELF, te109_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te109) ])
{
1: te109_sprites_4;
 te109_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te109_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: te109_sprites_left;
 te109_sprites_right;
}
switch (FEAT_TRAINS, PARENT, te109_sprites_start_sp, count_veh_id(te109))
{
1: te109_sprites_1RND;
 te109_sprites_start;
}
switch (FEAT_TRAINS, SELF, te109_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te109_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, te109_sprites_parent, [ STORE_TEMP(count_veh_id(te109), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te109_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te109_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te109_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te109_a1977_a1997_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_TTD_B5);
}
switch (FEAT_TRAINS, SELF, te109_a1977_cargo_subtype_text, ((build_year >= 1997) || (date_of_last_service >= date(1997,1,1))))
{
0: return CB_RESULT_NO_TEXT;
 te109_a1977_a1997_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te109_cargo_subtype_text, build_year < 1977)
{
1: return string(STR_REFIT_PREPRODUCTION);
 te109_a1977_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te109_create_effect, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te109_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, te109_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(te109), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, te109_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(te109), 0), STORE_TEMP(vehicle_type_id == te109, 1) ])
{ te109_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, te109_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 te109_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, te109_running_cost_factor,
[ STORE_TEMP(253, 0), // Моторы
   STORE_TEMP(35, 1), // Бригада
   STORE_TEMP(89, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(62, 4), // ТО
   STORE_TEMP(4, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(120, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 443
switch (FEAT_TRAINS, SELF, te109_b1978_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1977 << 16), 0x101), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te109_b1978_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te109_b1978_additional_text, current_year <= 1977)
{
1: te109_b1978_additional_text_hidden;
 te109_b1978_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te109_a1978_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1978 << 16), 0x101), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te109_a1978_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te109_a1978_additional_text, current_year <= 1978)
{
1: te109_a1978_additional_text_hidden;
 te109_a1978_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te109_additional_text, current_year >= 1978)
{
0: te109_b1978_additional_text;
 te109_a1978_additional_text;
}
item (FEAT_TRAINS, te109, 352)
{
property
{
name: string(STR_NAME_TE109);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1977 - delta_age, 1, 1);
 model_life: 1978 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1977 -1978 -2 < retire_early_default ? 1978 -1977 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1977 -1978 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1977 -1978 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 45 > 255 ? 255 : 45;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2200 * 0.9865);
 weight: (120) ton;
 tractive_effort_coefficient: (((370.0))/((120))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te109_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: te109_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te109_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: te109_create_effect;
                 default: te109_sprites;
                purchase: te109_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: te109_running_cost_factor;
                   speed: te109_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te109)
{
property
{
name: string(STR_LONGNAME_TE109);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te109)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te109)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te109)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te109)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te109)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te2
spriteset (te2_v1_purchase_graphics_ico, "src/diesel/te2-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (te2_v1_purchase_graphics_noico, "src/diesel/te2-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te2_v1_purchase_sprites, enable_icons)
{
1: te2_v1_purchase_graphics_ico;
 te2_v1_purchase_graphics_noico;
}
spriteset (te2_v1_notpowered_sprites_left, "src/diesel/te2-pre.png")
{
s7_template(32, 40, 0)
}
spriteset (te2_v1_loading_sprites_left, "src/diesel/te2-pre.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (te2_v1_traveling_sprites_left, "src/diesel/te2-pre.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup te2_v1_normal_sprites_left
{
loading: te2_v1_loading_sprites_left;
 loaded: te2_v1_traveling_sprites_left;
}
spriteset (te2_v1_sprites_right, "src/diesel/te2-pre.png")
{
s7_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te2_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te2_v1_normal_sprites_left;
 te2_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te2_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te2_v1_sprites_left2;
 1: te2_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te2_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te2_v1_sprites_left1;
 128: te2_v1_sprites_left1;
}
spriteset (te2_v2_purchase_graphics_ico, "src/diesel/te2.png")
{
new_purchase_template(0, 0)
}
spriteset (te2_v2_purchase_graphics_noico, "src/diesel/te2.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te2_v2_purchase_sprites, enable_icons)
{
1: te2_v2_purchase_graphics_ico;
 te2_v2_purchase_graphics_noico;
}
spriteset (te2_v2_notpowered_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 40, 0)
}
spriteset (te2_v2_loading_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (te2_v2_traveling_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup te2_v2_normal_sprites_left
{
loading: te2_v2_loading_sprites_left;
 loaded: te2_v2_traveling_sprites_left;
}
spriteset (te2_v2_sprites_right, "src/diesel/te2.png")
{
s7_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te2_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te2_v2_normal_sprites_left;
 te2_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te2_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te2_v2_sprites_left2;
 1: te2_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te2_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te2_v2_sprites_left1;
 128: te2_v2_sprites_left1;
}
spriteset (te2_v3_notpowered_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 241, 0)
}
spriteset (te2_v3_loading_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 241 +67, 0)
}
spriteset (te2_v3_traveling_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 241 +134, 0)
}
spritegroup te2_v3_normal_sprites_left
{
loading: te2_v3_loading_sprites_left;
 loaded: te2_v3_traveling_sprites_left;
}
spriteset (te2_v3_sprites_right, "src/diesel/te2.png")
{
s7_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, te2_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te2_v3_normal_sprites_left;
 te2_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te2_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te2_v3_sprites_left2;
 1: te2_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te2_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te2_v3_sprites_left1;
 128: te2_v3_sprites_left1;
}
spriteset (te2_v4_notpowered_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 442, 0)
}
spriteset (te2_v4_loading_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 442 +67, 0)
}
spriteset (te2_v4_traveling_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 442 +134, 0)
}
spritegroup te2_v4_normal_sprites_left
{
loading: te2_v4_loading_sprites_left;
 loaded: te2_v4_traveling_sprites_left;
}
spriteset (te2_v4_sprites_right, "src/diesel/te2.png")
{
s7_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, te2_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te2_v4_normal_sprites_left;
 te2_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te2_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te2_v4_sprites_left2;
 1: te2_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te2_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te2_v4_sprites_left1;
 128: te2_v4_sprites_left1;
}
spriteset (te2_v5_notpowered_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 643, 0)
}
spriteset (te2_v5_loading_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 643 +67, 0)
}
spriteset (te2_v5_traveling_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 643 +134, 0)
}
spritegroup te2_v5_normal_sprites_left
{
loading: te2_v5_loading_sprites_left;
 loaded: te2_v5_traveling_sprites_left;
}
spriteset (te2_v5_sprites_right, "src/diesel/te2.png")
{
s7_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, te2_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te2_v5_normal_sprites_left;
 te2_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te2_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te2_v5_sprites_left2;
 1: te2_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te2_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te2_v5_sprites_left1;
 128: te2_v5_sprites_left1;
}
spriteset (te2_v6_notpowered_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 844, 0)
}
spriteset (te2_v6_loading_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 844 +67, 0)
}
spriteset (te2_v6_traveling_sprites_left, "src/diesel/te2.png")
{
s7_template(32, 844 +134, 0)
}
spritegroup te2_v6_normal_sprites_left
{
loading: te2_v6_loading_sprites_left;
 loaded: te2_v6_traveling_sprites_left;
}
spriteset (te2_v6_sprites_right, "src/diesel/te2.png")
{
s7_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, te2_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te2_v6_normal_sprites_left;
 te2_v6_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te2_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te2_v6_sprites_left2;
 1: te2_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te2_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te2_v6_sprites_left1;
 128: te2_v6_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, te2_purchase_sprites, current_year >= 1950)
{
0: te2_v1_purchase_sprites;
 te2_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, te2_sprites_left_factory,
  (((build_year >= 1960) || (date_of_last_service >= date(1960,1,1)))) +
  (((build_year >= 1972) || (date_of_last_service >= date(1972,1,1)))))
{
0: te2_v2_sprites_left;
  1: te2_v3_sprites_left;
     te2_v5_sprites_left;
}
switch (FEAT_TRAINS, SELF, te2_sprites_left_alt,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te2_v4_sprites_left;
     te2_v6_sprites_left;
}
switch (FEAT_TRAINS, SELF, te2_a1950_sprites_left,
  cargo_subtype)
{
0: te2_sprites_left_factory;
  1: te2_sprites_left_alt;
     align_7_sprites;
}
switch (FEAT_TRAINS, SELF, te2_sprites_right_factory,
  (((build_year >= 1960) || (date_of_last_service >= date(1960,1,1)))) +
  (((build_year >= 1972) || (date_of_last_service >= date(1972,1,1)))))
{
0: te2_v2_sprites_right;
  1: te2_v3_sprites_right;
     te2_v5_sprites_right;
}
switch (FEAT_TRAINS, SELF, te2_sprites_right_alt,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: te2_v4_sprites_right;
     te2_v6_sprites_right;
}
switch (FEAT_TRAINS, SELF, te2_a1950_sprites_right,
  cargo_subtype)
{
0: te2_sprites_right_factory;
  1: te2_sprites_right_alt;
     align_7_sprites;
}
switch (FEAT_TRAINS, SELF, te2_sprites_left, build_year < 1950)
{
1: te2_v1_sprites_left;
 te2_a1950_sprites_left;
}
switch (FEAT_TRAINS, SELF, te2_sprites_right, build_year < 1950)
{
1: te2_v1_sprites_right;
 te2_a1950_sprites_right;
}
switch (FEAT_TRAINS, SELF, te2_sprites_start, position_in_articulated_veh)
{
0: te2_sprites_left;
 2: te2_sprites_right;
 4: te2_sprites_left;
 6: te2_sprites_right;
 8: te2_sprites_left;
 10: te2_sprites_right;
 12: te2_sprites_left;
 te2_sprites_right;
}
switch (FEAT_TRAINS, SELF, te2_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te2_sprites_start; }
switch (FEAT_TRAINS, PARENT, te2_sprites_parent, [ STORE_TEMP(count_veh_id(te2), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te2_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te2_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te2_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te2_a1950_a1960_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_64);
 return string(STR_REFIT_TTD_63);
}
switch (FEAT_TRAINS, SELF, te2_a1950_aGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_TTD_5B);
}
switch (FEAT_TRAINS, SELF, te2_a1950_cargo_subtype_text, ((build_year >= 1960) || (date_of_last_service >= date(1960,1,1))) + ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: return CB_RESULT_NO_TEXT;
 1: te2_a1950_a1960_cargo_subtype_text;
 te2_a1950_aGREAT_CHANGE_YEAR_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te2_cargo_subtype_text, build_year < 1950)
{
1: return string(STR_REFIT_PREPRODUCTION);
 te2_a1950_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te2_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te2_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te2_create_effect_sprites_start, position_in_articulated_veh)
{
0: te2_create_effect_sprites_left;
 2: te2_create_effect_sprites_right;
 4: te2_create_effect_sprites_left;
 6: te2_create_effect_sprites_right;
 8: te2_create_effect_sprites_left;
 10: te2_create_effect_sprites_right;
 12: te2_create_effect_sprites_left;
 te2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te2_speed, [ STORE_TEMP(((build_year >= 1956) || (date_of_last_service >= date(1956,1,1))) ? 95: 93, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, te2_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, te2_articulated_part, extra_callback_info1)
{
1: return dummy1;
 2: return te2;
 3: return dummy1;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, te2_running_cost_factor,
[ STORE_TEMP(2 * 85, 0), // Моторы
   STORE_TEMP(12, 1), // Бригада
   STORE_TEMP(2 * 30, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2 * 21, 4), // ТО
   STORE_TEMP(2 * 1, 5), // Сертификация
   STORE_TEMP(93 + 2 * (current_year >= 1956), 6), // Скорость
   STORE_TEMP(2 * 85, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 2 * 149
switch (FEAT_TRAINS, SELF, te2_b1950_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1949 << 16), 0x101), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te2_b1950_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te2_b1950_additional_text, current_year <= 1949)
{
1: te2_b1950_additional_text_hidden;
 te2_b1950_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te2_a1950_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1950 << 16), 0x101), STORE_TEMP(1955 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te2_a1950_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te2_a1950_additional_text, current_year <= 1955)
{
1: te2_a1950_additional_text_hidden;
 te2_a1950_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te2_a1956_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1950 << 16), 0x101), STORE_TEMP(1955 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_SPEED_CHANGE_ON_DATE, 95, 1956), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, te2_a1956_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR))))| (string(STR_PURCHASE_HINT_SPEED_CHANGE_ON_DATE, 95, 1956) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, te2_a1956_additional_text, current_year <= 1955)
{
1: te2_a1956_additional_text_hidden;
 te2_a1956_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te2_additional_text, (current_year >= 1950) + (current_year >= 1956))
{
0: te2_b1950_additional_text;
 1: te2_a1950_additional_text;
 te2_a1956_additional_text;
}
item (FEAT_TRAINS, te2, 146)
{
property
{
name: string(STR_NAME_TE2);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1948 - delta_age, 1, 1);
 model_life: 1955 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1948 -1955 -2 < retire_early_default ? 1955 -1948 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1948 -1955 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1948 -1955 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 2 * 15 > 255 ? 255 : 2 * 15;
 length: 6;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2 * 754 * 0.9865);
 weight: (2 * 85) ton;
 tractive_effort_coefficient: (((2 * 245.6))/((2 * 85))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te2_additional_text;
        articulated_part: te2_articulated_part;
    bitmask_vehicle_info: te2_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te2_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: te2_create_effect_sprites_start;
                 default: te2_sprites;
                purchase: te2_purchase_sprites;
          purchase_speed: return 93;
     running_cost_factor: te2_running_cost_factor;
                   speed: te2_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te2)
{
property
{
name: string(STR_LONGNAME_TE2);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te2)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te2)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te2)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te3
spriteset (te3_v1_purchase_graphics_ico, "src/diesel/te3-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (te3_v1_purchase_graphics_noico, "src/diesel/te3-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te3_v1_purchase_sprites, enable_icons)
{
1: te3_v1_purchase_graphics_ico;
 te3_v1_purchase_graphics_noico;
}
spriteset (te3_v2_purchase_graphics_ico, "src/diesel/te3-pre.png")
{
new_purchase_template(102, 0)
}
spriteset (te3_v2_purchase_graphics_noico, "src/diesel/te3-pre.png")
{
new_purchase_template_noico(102, 0)
}
switch (FEAT_TRAINS, SELF, te3_v2_purchase_sprites, enable_icons)
{
1: te3_v2_purchase_graphics_ico;
 te3_v2_purchase_graphics_noico;
}
spriteset (te3_v1_notpowered_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 40, 0)
}
spriteset (te3_v1_loading_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (te3_v1_traveling_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup te3_v1_normal_sprites_left
{
loading: te3_v1_loading_sprites_left;
 loaded: te3_v1_traveling_sprites_left;
}
spriteset (te3_v1_sprites_right, "src/diesel/te3-pre.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te3_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v1_normal_sprites_left;
 te3_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v1_sprites_left2;
 1: te3_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v1_sprites_left1;
 128: te3_v1_sprites_left1;
}
spriteset (te3_a1955_b1956_notpowered_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 241, 0)
}
spriteset (te3_a1955_b1956_loading_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (te3_a1955_b1956_traveling_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup te3_a1955_b1956_normal_sprites_left
{
loading: te3_a1955_b1956_loading_sprites_left;
 loaded: te3_a1955_b1956_traveling_sprites_left;
}
spriteset (te3_a1955_b1956_sprites_right, "src/diesel/te3-pre.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, te3_a1955_b1956_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_a1955_b1956_normal_sprites_left;
 te3_a1955_b1956_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_a1955_b1956_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_a1955_b1956_sprites_left2;
 1: te3_a1955_b1956_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_a1955_b1956_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_a1955_b1956_sprites_left1;
 128: te3_a1955_b1956_sprites_left1;
}
spriteset (te3_v4_notpowered_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 442, 0)
}
spriteset (te3_v4_loading_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (te3_v4_traveling_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup te3_v4_normal_sprites_left
{
loading: te3_v4_loading_sprites_left;
 loaded: te3_v4_traveling_sprites_left;
}
spriteset (te3_v4_sprites_right, "src/diesel/te3-pre.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, te3_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v4_normal_sprites_left;
 te3_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v4_sprites_left2;
 1: te3_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v4_sprites_left1;
 128: te3_v4_sprites_left1;
}
spriteset (te3_v5_notpowered_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 643, 0)
}
spriteset (te3_v5_loading_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (te3_v5_traveling_sprites_left, "src/diesel/te3-pre.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup te3_v5_normal_sprites_left
{
loading: te3_v5_loading_sprites_left;
 loaded: te3_v5_traveling_sprites_left;
}
spriteset (te3_v5_sprites_right, "src/diesel/te3-pre.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, te3_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v5_normal_sprites_left;
 te3_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v5_sprites_left2;
 1: te3_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v5_sprites_left1;
 128: te3_v5_sprites_left1;
}
spriteset (te3_v3_purchase_graphics_ico, "src/diesel/te3.png")
{
new_purchase_template(0, 0)
}
spriteset (te3_v3_purchase_graphics_noico, "src/diesel/te3.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te3_v3_purchase_sprites, enable_icons)
{
1: te3_v3_purchase_graphics_ico;
 te3_v3_purchase_graphics_noico;
}
spriteset (te3_v4_purchase_graphics_ico, "src/diesel/te3.png")
{
new_purchase_template(100, 0)
}
spriteset (te3_v4_purchase_graphics_noico, "src/diesel/te3.png")
{
new_purchase_template_noico(100, 0)
}
switch (FEAT_TRAINS, SELF, te3_v4_purchase_sprites, enable_icons)
{
1: te3_v4_purchase_graphics_ico;
 te3_v4_purchase_graphics_noico;
}
spriteset (te3_v3_notpowered_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 40, 0)
}
spriteset (te3_v3_loading_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (te3_v3_traveling_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup te3_v3_normal_sprites_left
{
loading: te3_v3_loading_sprites_left;
 loaded: te3_v3_traveling_sprites_left;
}
spriteset (te3_v3_sprites_right, "src/diesel/te3.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te3_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v3_normal_sprites_left;
 te3_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v3_sprites_left2;
 1: te3_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v3_sprites_left1;
 128: te3_v3_sprites_left1;
}
spriteset (te3_v6_notpowered_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 241, 0)
}
spriteset (te3_v6_loading_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (te3_v6_traveling_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup te3_v6_normal_sprites_left
{
loading: te3_v6_loading_sprites_left;
 loaded: te3_v6_traveling_sprites_left;
}
spriteset (te3_v6_sprites_right, "src/diesel/te3.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, te3_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v6_normal_sprites_left;
 te3_v6_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v6_sprites_left2;
 1: te3_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v6_sprites_left1;
 128: te3_v6_sprites_left1;
}
spriteset (te3_v7_notpowered_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 442, 0)
}
spriteset (te3_v7_loading_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (te3_v7_traveling_sprites_left, "src/diesel/te3.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup te3_v7_normal_sprites_left
{
loading: te3_v7_loading_sprites_left;
 loaded: te3_v7_traveling_sprites_left;
}
spriteset (te3_v7_sprites_right, "src/diesel/te3.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, te3_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v7_normal_sprites_left;
 te3_v7_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v7_sprites_left2;
 1: te3_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v7_sprites_left1;
 128: te3_v7_sprites_left1;
}
spriteset (te3_v5_purchase_graphics_ico, "src/diesel/te3-lastochka.png")
{
new_purchase_template(0, 0)
}
spriteset (te3_v5_purchase_graphics_noico, "src/diesel/te3-lastochka.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te3_v5_purchase_sprites, enable_icons)
{
1: te3_v5_purchase_graphics_ico;
 te3_v5_purchase_graphics_noico;
}
spriteset (te3_v6_purchase_graphics_ico, "src/diesel/te3-lastochka.png")
{
new_purchase_template(100, 0)
}
spriteset (te3_v6_purchase_graphics_noico, "src/diesel/te3-lastochka.png")
{
new_purchase_template_noico(100, 0)
}
switch (FEAT_TRAINS, SELF, te3_v6_purchase_sprites, enable_icons)
{
1: te3_v6_purchase_graphics_ico;
 te3_v6_purchase_graphics_noico;
}
spriteset (te3_v8_notpowered_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 40, 0)
}
spriteset (te3_v8_loading_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (te3_v8_traveling_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup te3_v8_normal_sprites_left
{
loading: te3_v8_loading_sprites_left;
 loaded: te3_v8_traveling_sprites_left;
}
spriteset (te3_v8_sprites_right, "src/diesel/te3-lastochka.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te3_v8_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v8_normal_sprites_left;
 te3_v8_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v8_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v8_sprites_left2;
 1: te3_v8_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v8_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v8_sprites_left1;
 128: te3_v8_sprites_left1;
}
spriteset (te3_v9_notpowered_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 241, 0)
}
spriteset (te3_v9_loading_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (te3_v9_traveling_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup te3_v9_normal_sprites_left
{
loading: te3_v9_loading_sprites_left;
 loaded: te3_v9_traveling_sprites_left;
}
spriteset (te3_v9_sprites_right, "src/diesel/te3-lastochka.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, te3_v9_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v9_normal_sprites_left;
 te3_v9_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v9_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v9_sprites_left2;
 1: te3_v9_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v9_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v9_sprites_left1;
 128: te3_v9_sprites_left1;
}
spriteset (te3_v10_notpowered_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 442, 0)
}
spriteset (te3_v10_loading_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (te3_v10_traveling_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup te3_v10_normal_sprites_left
{
loading: te3_v10_loading_sprites_left;
 loaded: te3_v10_traveling_sprites_left;
}
spriteset (te3_v10_sprites_right, "src/diesel/te3-lastochka.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, te3_v10_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v10_normal_sprites_left;
 te3_v10_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v10_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v10_sprites_left2;
 1: te3_v10_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v10_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v10_sprites_left1;
 128: te3_v10_sprites_left1;
}
spriteset (te3_v11_notpowered_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 643, 0)
}
spriteset (te3_v11_loading_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (te3_v11_traveling_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup te3_v11_normal_sprites_left
{
loading: te3_v11_loading_sprites_left;
 loaded: te3_v11_traveling_sprites_left;
}
spriteset (te3_v11_sprites_right, "src/diesel/te3-lastochka.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, te3_v11_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v11_normal_sprites_left;
 te3_v11_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v11_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v11_sprites_left2;
 1: te3_v11_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v11_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v11_sprites_left1;
 128: te3_v11_sprites_left1;
}
spriteset (te3_v12_notpowered_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 844, 0)
}
spriteset (te3_v12_loading_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (te3_v12_traveling_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup te3_v12_normal_sprites_left
{
loading: te3_v12_loading_sprites_left;
 loaded: te3_v12_traveling_sprites_left;
}
spriteset (te3_v12_sprites_right, "src/diesel/te3-lastochka.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, te3_v12_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v12_normal_sprites_left;
 te3_v12_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v12_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v12_sprites_left2;
 1: te3_v12_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v12_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v12_sprites_left1;
 128: te3_v12_sprites_left1;
}
spriteset (te3_v13_notpowered_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 1045, 0)
}
spriteset (te3_v13_loading_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 1045 +67, 0)
}
spriteset (te3_v13_traveling_sprites_left, "src/diesel/te3-lastochka.png")
{
s10_template(32, 1045 +134, 0)
}
spritegroup te3_v13_normal_sprites_left
{
loading: te3_v13_loading_sprites_left;
 loaded: te3_v13_traveling_sprites_left;
}
spriteset (te3_v13_sprites_right, "src/diesel/te3-lastochka.png")
{
s10_r_template(32, 1045, 0)
}
switch (FEAT_TRAINS, SELF, te3_v13_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te3_v13_normal_sprites_left;
 te3_v13_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te3_v13_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te3_v13_sprites_left2;
 1: te3_v13_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te3_v13_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te3_v13_sprites_left1;
 128: te3_v13_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, te3_purchase_sprites, (current_year >= 1955) + (current_year >= 1956) + (current_year >= 1957) + (current_year >= 1958) + (current_year >= 1963))
{
0: te3_v1_purchase_sprites;
 1: te3_v2_purchase_sprites;
 2: te3_v3_purchase_sprites;
 3: te3_v4_purchase_sprites;
 4: te3_v5_purchase_sprites;
 te3_v6_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1956_sprites_left,
  cargo_subtype)
{
0: te3_v3_sprites_left;
           1: te3_v4_sprites_left;
           2: te3_v5_sprites_left;
  14: te3_v6_sprites_left;
  15: te3_v7_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1957_sprites_left,
  cargo_subtype)
{
0: te3_v6_sprites_left;
  14: te3_v6_sprites_left;
  15: te3_v7_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1958_sprites_left,
  cargo_subtype)
{
0: te3_v8_sprites_left;
           1: te3_v13_sprites_left;
           2: te3_v10_sprites_left;
  15: te3_v12_sprites_left;
  14: te3_v11_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1963_sprites_left,
  cargo_subtype)
{
0: te3_v9_sprites_left;
           1: te3_v13_sprites_left;
           2: te3_v10_sprites_left;
  15: te3_v12_sprites_left;
  14: te3_v11_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_aGAMEEND_sprites_left,
  cargo_subtype)
{
0: te3_v1_sprites_left;
  1: te3_a1955_b1956_sprites_left;
  2: te3_v3_sprites_left;
  3: te3_v4_sprites_left;
  4: te3_v5_sprites_left;
  5: te3_v6_sprites_left;
  6: te3_v7_sprites_left;
  7: te3_v8_sprites_left;
  8: te3_v9_sprites_left;
  9: te3_v10_sprites_left;
 10: te3_v11_sprites_left;
 11: te3_v12_sprites_left;
 12: te3_v13_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1956_sprites_right,
  cargo_subtype)
{
0: te3_v3_sprites_right;
           1: te3_v4_sprites_right;
           2: te3_v5_sprites_right;
  14: te3_v6_sprites_right;
  15: te3_v7_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1957_sprites_right,
  cargo_subtype)
{
0: te3_v6_sprites_right;
  14: te3_v6_sprites_right;
  15: te3_v7_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1958_sprites_right,
  cargo_subtype)
{
0: te3_v8_sprites_right;
           1: te3_v13_sprites_right;
           2: te3_v10_sprites_right;
  15: te3_v12_sprites_right;
  14: te3_v11_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1963_sprites_right,
  cargo_subtype)
{
0: te3_v9_sprites_right;
           1: te3_v13_sprites_right;
           2: te3_v10_sprites_right;
  15: te3_v12_sprites_right;
  14: te3_v11_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_aGAMEEND_sprites_right,
  cargo_subtype)
{
0: te3_v1_sprites_right;
  1: te3_a1955_b1956_sprites_right;
  2: te3_v3_sprites_right;
  3: te3_v4_sprites_right;
  4: te3_v5_sprites_right;
  5: te3_v6_sprites_right;
  6: te3_v7_sprites_right;
  7: te3_v8_sprites_right;
  8: te3_v9_sprites_right;
  9: te3_v10_sprites_right;
 10: te3_v11_sprites_right;
 11: te3_v12_sprites_right;
 12: te3_v13_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te3_a1955_sprites_left, (build_year >= 1956) + (build_year >= 1957) + (build_year >= 1958) + (build_year >= 1963) + (build_year >= 2050))
{
0: te3_a1955_b1956_sprites_left;
 1: te3_a1955_a1956_sprites_left;
 2: te3_a1955_a1957_sprites_left;
 3: te3_a1955_a1958_sprites_left;
 4: te3_a1955_a1963_sprites_left;
 te3_a1955_aGAMEEND_sprites_left;
}
switch (FEAT_TRAINS, SELF, te3_a1955_sprites_right, (build_year >= 1956) + (build_year >= 1957) + (build_year >= 1958) + (build_year >= 1963) + (build_year >= 2050))
{
0: te3_a1955_b1956_sprites_right;
 1: te3_a1955_a1956_sprites_right;
 2: te3_a1955_a1957_sprites_right;
 3: te3_a1955_a1958_sprites_right;
 4: te3_a1955_a1963_sprites_right;
 te3_a1955_aGAMEEND_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_left, build_year < 1955)
{
1: te3_v1_sprites_left;
 te3_a1955_sprites_left;
}
switch (FEAT_TRAINS, SELF, te3_sprites_right, build_year < 1955)
{
1: te3_v1_sprites_right;
 te3_a1955_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) || (position_in_consist == 0) ])
{
1: te3_sprites_left;
 te3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te3) + 1) % 2))
{
1: te3_sprites_2l;
 te3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_old;
 te3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_16;
 te3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_14;
 te3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_12;
 te3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_10;
 te3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_8;
 te3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_6;
 te3_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_sprites_4;
 te3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te3_sprites_start; }
switch (FEAT_TRAINS, PARENT, te3_sprites_parent, [ STORE_TEMP(count_veh_id(te3), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te3_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te3_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te3_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te3_a1955_aGAMEEND_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_GAMEEND_SP, 1953, string(STR_REFIT_PREPRODUCTION));
  1: return string(STR_REFIT_GAMEEND, 1955);
  2: return string(STR_REFIT_GAMEEND_SP, 1956, string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_KOLOMNA)));
  3: return string(STR_REFIT_GAMEEND_SP, 1956, string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928)));
  4: return string(STR_REFIT_GAMEEND_SP, 1956, string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD)));
  5: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1956, 1957, string(STR_REFIT_TTD_59));
  6: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1956, 1957, string(STR_REFIT_TTD_53));
  7: return string(STR_REFIT_GAMEEND, 1958);
  8: return string(STR_REFIT_GAMEEND_SERVICE, 1958, 1963);
  9: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1958, 1963, string(STR_REFIT_TTD_51));
 10: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1958, 1963, string(STR_REFIT_TTD_59));
 11: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1958, 1963, string(STR_REFIT_TTD_53));
 12: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1958, 1963, string(STR_REFIT_TTD_96));
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1956_b1957_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928));
 1: return string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD));
 2: return string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_KOLOMNA));
    return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1956_a1957_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD));
          2: return string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_KOLOMNA));
 14: string(STR_REFIT_TTD_59);
 15: string(STR_REFIT_TTD_53);
             return string(STR_REFIT_FACTORY_NAME, string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928));
}
switch (FEAT_TRAINS, SELF, te3_a1955_b1956_cargo_subtype_text, 0)
{ return CB_RESULT_NO_TEXT; }
switch (FEAT_TRAINS, SELF, te3_a1955_a1956_cargo_subtype_text, ((build_year >= 1957) || (date_of_last_service >= date(1957,1,1))))
{
0: te3_a1955_a1956_b1957_cargo_subtype_text;
 te3_a1955_a1956_a1957_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1957_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1958_a1963_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1958_a1963_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_96);
 2: return string(STR_REFIT_TTD_51);
 te3_a1955_a1958_a1963_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te3_a1955_a1958_cargo_subtype_text, ((build_year >= 1963) || (date_of_last_service >= date(1963,1,1))))
{
0: return CB_RESULT_NO_TEXT;
 te3_a1955_a1958_a1963_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te3_a1955_cargo_subtype_text, (build_year >= 1956) + (build_year >= 1957) + (build_year >= 1958) + (build_year >= 2050))
{
0: te3_a1955_b1956_cargo_subtype_text;
 1: te3_a1955_a1956_cargo_subtype_text;
 2: te3_a1955_a1957_cargo_subtype_text;
 3: te3_a1955_a1958_cargo_subtype_text;
 te3_a1955_aGAMEEND_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te3_cargo_subtype_text, build_year < 1955)
{
1: return string(STR_REFIT_PREPRODUCTION);
 te3_a1955_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) || (position_in_consist == 0) ])
{
1: te3_create_effect_sprites_left;
 te3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te3) + 1) % 2))
{
1: te3_create_effect_sprites_2l;
 te3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_old;
 te3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_16;
 te3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_14;
 te3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_12;
 te3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_10;
 te3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_8;
 te3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_6;
 te3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te3_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te3) ])
{
1: te3_create_effect_sprites_4;
 te3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te3_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(te3), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, te3_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(te3), 0), STORE_TEMP(vehicle_type_id == te3, 1) ])
{ te3_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, te3_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 te3_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, te3_running_cost_factor,
[ STORE_TEMP(199, 0), // Моторы
   STORE_TEMP(28, 1), // Бригада
   STORE_TEMP(70, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(49, 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 349
switch (FEAT_TRAINS, SELF, te3_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, te3_b1955_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1953 << 16), 0x101), STORE_TEMP(1954 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te3_b1955_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te3_b1955_additional_text, current_year <= 1954)
{
1: te3_b1955_additional_text_hidden;
 te3_b1955_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te3_a1955_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_MONGOLKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1955 | (1956 << 16), 0x102), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te3_a1955_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_MONGOLKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te3_a1955_additional_text, current_year <= 1956)
{
1: te3_a1955_additional_text_hidden;
 te3_a1955_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te3_a1956_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_MONGOLKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1955 | (1956 << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x103), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te3_a1956_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_MONGOLKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | (string(STR_PURCHASE_HINT_LIST3) << 16), 0x101), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te3_a1956_additional_text, current_year <= 1956)
{
1: te3_a1956_additional_text_hidden;
 te3_a1956_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te3_a1958_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_LASTOCHKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1958 | (1973 << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_LIST3) | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x103), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x104)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te3_a1958_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_LASTOCHKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | (string(STR_PURCHASE_HINT_LIST3) << 16), 0x101), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te3_a1958_additional_text, current_year <= 1973)
{
1: te3_a1958_additional_text_hidden;
 te3_a1958_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te3_a1963_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_LASTOCHKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | (string(STR_PURCHASE_HINT_FROMTO) << 16), 0x101), STORE_TEMP(1958 | (1973 << 16), 0x102), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te3_a1963_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL_WITH_SUBTYPE) | (string(STR_PURCHASE_HINT_LASTOCHKA) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_SECTIONS_1_2) | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te3_a1963_additional_text, current_year <= 1973)
{
1: te3_a1963_additional_text_hidden;
 te3_a1963_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te3_additional_text, (current_year >= 1955) + (current_year >= 1956) + (current_year >= 1958) + (current_year >= 1963))
{
0: te3_b1955_additional_text;
 1: te3_a1955_additional_text;
 2: te3_a1956_additional_text;
 3: te3_a1958_additional_text;
 te3_a1963_additional_text;
}
item (FEAT_TRAINS, te3, 347)
{
property
{
name: string(STR_NAME_TE3);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1953 - delta_age, 1, 1);
 model_life: 1973 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1953 -1973 -2 < retire_early_default ? 1973 -1953 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1953 -1973 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1953 -1973 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 36 > 255 ? 255 : 36;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1600 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((285.3))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te3_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: te3_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te3_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: te3_create_effect_sprites_start;
                 default: te3_sprites;
                purchase: te3_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: te3_running_cost_factor;
                   speed: te3_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te3)
{
property
{
name: string(STR_LONGNAME_TE3);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te3)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te3)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te3)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te3)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te3)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te7
spriteset (te7_v1_purchase_graphics_ico, "src/diesel/te7-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (te7_v1_purchase_graphics_noico, "src/diesel/te7-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te7_v1_purchase_sprites, enable_icons)
{
1: te7_v1_purchase_graphics_ico;
 te7_v1_purchase_graphics_noico;
}
spriteset (te7_v1_notpowered_sprites_left, "src/diesel/te7-pre.png")
{
s10_template(32, 40, 0)
}
spriteset (te7_v1_loading_sprites_left, "src/diesel/te7-pre.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (te7_v1_traveling_sprites_left, "src/diesel/te7-pre.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup te7_v1_normal_sprites_left
{
loading: te7_v1_loading_sprites_left;
 loaded: te7_v1_traveling_sprites_left;
}
spriteset (te7_v1_sprites_right, "src/diesel/te7-pre.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te7_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te7_v1_normal_sprites_left;
 te7_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te7_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te7_v1_sprites_left2;
 1: te7_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te7_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te7_v1_sprites_left1;
 128: te7_v1_sprites_left1;
}
spriteset (te7_v2_purchase_graphics_ico, "src/diesel/te7.png")
{
new_purchase_template(0, 0)
}
spriteset (te7_v2_purchase_graphics_noico, "src/diesel/te7.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te7_v2_purchase_sprites, enable_icons)
{
1: te7_v2_purchase_graphics_ico;
 te7_v2_purchase_graphics_noico;
}
spriteset (te7_v2_notpowered_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 40, 0)
}
spriteset (te7_v2_loading_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (te7_v2_traveling_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup te7_v2_normal_sprites_left
{
loading: te7_v2_loading_sprites_left;
 loaded: te7_v2_traveling_sprites_left;
}
spriteset (te7_v2_sprites_right, "src/diesel/te7.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, te7_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te7_v2_normal_sprites_left;
 te7_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te7_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te7_v2_sprites_left2;
 1: te7_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te7_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te7_v2_sprites_left1;
 128: te7_v2_sprites_left1;
}
spriteset (te7_v3_notpowered_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 241, 0)
}
spriteset (te7_v3_loading_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (te7_v3_traveling_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup te7_v3_normal_sprites_left
{
loading: te7_v3_loading_sprites_left;
 loaded: te7_v3_traveling_sprites_left;
}
spriteset (te7_v3_sprites_right, "src/diesel/te7.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, te7_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te7_v3_normal_sprites_left;
 te7_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te7_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te7_v3_sprites_left2;
 1: te7_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te7_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te7_v3_sprites_left1;
 128: te7_v3_sprites_left1;
}
spriteset (te7_v4_notpowered_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 442, 0)
}
spriteset (te7_v4_loading_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (te7_v4_traveling_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup te7_v4_normal_sprites_left
{
loading: te7_v4_loading_sprites_left;
 loaded: te7_v4_traveling_sprites_left;
}
spriteset (te7_v4_sprites_right, "src/diesel/te7.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, te7_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te7_v4_normal_sprites_left;
 te7_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te7_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te7_v4_sprites_left2;
 1: te7_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te7_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te7_v4_sprites_left1;
 128: te7_v4_sprites_left1;
}
spriteset (te7_v5_notpowered_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 643, 0)
}
spriteset (te7_v5_loading_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (te7_v5_traveling_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup te7_v5_normal_sprites_left
{
loading: te7_v5_loading_sprites_left;
 loaded: te7_v5_traveling_sprites_left;
}
spriteset (te7_v5_sprites_right, "src/diesel/te7.png")
{
s10_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, te7_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te7_v5_normal_sprites_left;
 te7_v5_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te7_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te7_v5_sprites_left2;
 1: te7_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te7_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te7_v5_sprites_left1;
 128: te7_v5_sprites_left1;
}
spriteset (te7_v6_notpowered_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 844, 0)
}
spriteset (te7_v6_loading_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (te7_v6_traveling_sprites_left, "src/diesel/te7.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup te7_v6_normal_sprites_left
{
loading: te7_v6_loading_sprites_left;
 loaded: te7_v6_traveling_sprites_left;
}
spriteset (te7_v6_sprites_right, "src/diesel/te7.png")
{
s10_r_template(32, 844, 0)
}
switch (FEAT_TRAINS, SELF, te7_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te7_v6_normal_sprites_left;
 te7_v6_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, te7_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te7_v6_sprites_left2;
 1: te7_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te7_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te7_v6_sprites_left1;
 128: te7_v6_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, te7_purchase_sprites, current_year >= 1958)
{
0: te7_v1_purchase_sprites;
 te7_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, te7_a1958_sprites_left,
  cargo_subtype)
{
0: te7_v5_sprites_left;
             1: te7_v6_sprites_left;
    14: te7_v4_sprites_left;
    15: te7_v5_sprites_left;
  60: te7_v2_sprites_left;
     69: te7_v3_sprites_left;
                align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te7_a1958_sprites_right,
  cargo_subtype)
{
0: te7_v5_sprites_right;
             1: te7_v6_sprites_right;
    14: te7_v4_sprites_right;
    15: te7_v5_sprites_right;
  60: te7_v2_sprites_right;
     69: te7_v3_sprites_right;
                align_10_sprites;
}
switch (FEAT_TRAINS, SELF, te7_sprites_left, build_year < 1958)
{
1: te7_v1_sprites_left;
 te7_a1958_sprites_left;
}
switch (FEAT_TRAINS, SELF, te7_sprites_right, build_year < 1958)
{
1: te7_v1_sprites_right;
 te7_a1958_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) || (position_in_consist == 0) ])
{
1: te7_sprites_left;
 te7_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te7) + 1) % 2))
{
1: te7_sprites_2l;
 te7_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_old;
 te7_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_16;
 te7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_14;
 te7_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_12;
 te7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_10;
 te7_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_8;
 te7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_6;
 te7_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_sprites_4;
 te7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te7_sprites_start; }
switch (FEAT_TRAINS, PARENT, te7_sprites_parent, [ STORE_TEMP(count_veh_id(te7), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te7_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te7_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te7_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te7_a1958_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 14: general_cargo_subtype_text_LV_RAL6020;
 60: general_cargo_subtype_text_LV_RED_ARROW;
 69: general_cargo_subtype_text_LV_RUSSIA;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, te7_a1958_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_96);
 te7_a1958_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te7_cargo_subtype_text, build_year < 1958)
{
1: return string(STR_REFIT_PREPRODUCTION);
 te7_a1958_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) || (position_in_consist == 0) ])
{
1: te7_create_effect_sprites_left;
 te7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te7) + 1) % 2))
{
1: te7_create_effect_sprites_2l;
 te7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_old;
 te7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_16;
 te7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_14;
 te7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_12;
 te7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_10;
 te7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_8;
 te7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_6;
 te7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te7_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te7) ])
{
1: te7_create_effect_sprites_4;
 te7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te7_cost_factor, build_year >= 1962)
{
1: return 32;
 return 27;
}
switch (FEAT_TRAINS, SELF, te7_speed, [ STORE_TEMP((age_in_days >= (25 * 365 + 25 / 4)) ? 110 : 140, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, te7_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(te7), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, te7_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(te7), 0), STORE_TEMP(vehicle_type_id == te7, 1) ])
{ te7_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, te7_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 te7_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, te7_running_cost_factor,
[ STORE_TEMP(151 + 28 * (build_year >= 1962), 0), // Моторы
   STORE_TEMP(21 + 4 * (build_year >= 1962), 1), // Бригада
   STORE_TEMP(53 + 10 * (build_year >= 1962), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(37 + 7 * (build_year >= 1962), 4), // ТО
   STORE_TEMP(3, 5), // Сертификация
   STORE_TEMP(140, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 265-314
switch (FEAT_TRAINS, SELF, te7_b1958_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1956 << 16), 0x101), STORE_TEMP(1957 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te7_b1958_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te7_b1958_additional_text, current_year <= 1957)
{
1: te7_b1958_additional_text_hidden;
 te7_b1958_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te7_a1958_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1958 << 16), 0x101), STORE_TEMP(1964 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te7_a1958_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te7_a1958_additional_text, current_year <= 1964)
{
1: te7_a1958_additional_text_hidden;
 te7_a1958_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te7_a1961_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1958 << 16), 0x101), STORE_TEMP(1964 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te7_a1961_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te7_a1961_additional_text, current_year <= 1964)
{
1: te7_a1961_additional_text_hidden;
 te7_a1961_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te7_additional_text, (current_year >= 1958) + (current_year >= 1961))
{
0: te7_b1958_additional_text;
 1: te7_a1958_additional_text;
 te7_a1961_additional_text;
}
item (FEAT_TRAINS, te7, 418)
{
property
{
name: string(STR_NAME_TE7);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1956 - delta_age, 1, 1);
 model_life: 1964 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1956 -1964 -2 < retire_early_default ? 1964 -1956 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1956 -1964 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1956 -1964 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 27 > 255 ? 255 : 27;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (1610 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((163.7))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te7_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: te7_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te7_cargo_subtype_text;
          colour_mapping: any_cc_colour;
             cost_factor: te7_cost_factor;
           create_effect: te7_create_effect_sprites_start;
                 default: te7_sprites;
                purchase: te7_purchase_sprites;
          purchase_speed: return 140;
     running_cost_factor: te7_running_cost_factor;
                   speed: te7_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te7)
{
property
{
name: string(STR_LONGNAME_TE7);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te7)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te7)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te7)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te7)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te7)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te50
spriteset (te50_purchase_graphics_ico, "src/diesel/te50.png")
{
new_purchase_template(0, 0)
}
spriteset (te50_purchase_graphics_noico, "src/diesel/te50.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te50_purchase_sprites, enable_icons)
{
1: te50_purchase_graphics_ico;
 te50_purchase_graphics_noico;
}
spriteset (te50_notpowered_sprites_left, "src/diesel/te50.png")
{
s11_template(32, 40, 0)
}
spriteset (te50_loading_sprites_left, "src/diesel/te50.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (te50_traveling_sprites_left, "src/diesel/te50.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup te50_normal_sprites_left
{
loading: te50_loading_sprites_left;
 loaded: te50_traveling_sprites_left;
}
spriteset (te50_notpowered_sprites_right, "src/diesel/te50.png")
{
s11_r_template(32, 40, 0)
}
spriteset (te50_loading_sprites_right, "src/diesel/te50.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (te50_traveling_sprites_right, "src/diesel/te50.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup te50_normal_sprites_right
{
loading: te50_loading_sprites_right;
 loaded: te50_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te50_normal_sprites_left;
 te50_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te50_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te50_normal_sprites_right;
 te50_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te50_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te50_sprites_left2;
 1: te50_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te50_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te50_sprites_left1;
 128: te50_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te50_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te50_sprites_right2;
 1: te50_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te50_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te50_sprites_right1;
 128: te50_sprites_right1;
}
switch (FEAT_TRAINS, SELF, te50_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) || (position_in_consist == 0) ])
{
1: te50_sprites_left;
 te50_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te50) + 1) % 2))
{
1: te50_sprites_2l;
 te50_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_old;
 te50_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_16;
 te50_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_14;
 te50_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_12;
 te50_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_10;
 te50_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_8;
 te50_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_6;
 te50_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_sprites_4;
 te50_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: te50_sprites_left;
 te50_sprites_right;
}
switch (FEAT_TRAINS, PARENT, te50_sprites_start_sp, count_veh_id(te50))
{
1: te50_sprites_1RND;
 te50_sprites_start;
}
switch (FEAT_TRAINS, SELF, te50_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te50_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, te50_sprites_parent, [ STORE_TEMP(count_veh_id(te50), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te50_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te50_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te50_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) || (position_in_consist == 0) ])
{
1: te50_create_effect_sprites_left;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te50) + 1) % 2))
{
1: te50_create_effect_sprites_2l;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_old;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_16;
 te50_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_14;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_12;
 te50_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_10;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_8;
 te50_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_6;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te50) ])
{
1: te50_create_effect_sprites_4;
 te50_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te50_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: te50_create_effect_sprites_left;
 te50_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, te50_create_effect, count_veh_id(te50))
{
1: te50_create_effect_1RND;
 te50_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, te50_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, te50_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, te50_running_cost_factor,
[ STORE_TEMP(316, 0), // Моторы
   STORE_TEMP(44, 1), // Бригада
   STORE_TEMP(112, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(78, 4), // ТО
   STORE_TEMP(6, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(139, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 556
switch (FEAT_TRAINS, SELF, te50_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1958 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te50_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te50_additional_text, current_year <= 1958)
{
1: te50_additional_text_hidden;
 te50_additional_text_shown;
}
item (FEAT_TRAINS, te50, 646)
{
property
{
name: string(STR_NAME_TE50);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1958 - delta_age, 1, 1);
 model_life: 1958 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1958 -1958 -2 < retire_early_default ? 1958 -1958 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1958 -1958 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1958 -1958 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 30;
 cost_factor: 46 > 255 ? 255 : 46;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2300 * 0.9865);
 weight: (139) ton;
 tractive_effort_coefficient: (((320.0))/((139))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te50_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: te50_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
           create_effect: te50_create_effect;
                 default: te50_sprites;
                purchase: te50_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: te50_running_cost_factor;
                   speed: te50_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te50)
{
property
{
name: string(STR_LONGNAME_TE50);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te50)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te50)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te50)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te50)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te50)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem2
spriteset (tem2_purchase_graphics_ico, "src/diesel/tem2.png")
{
new_purchase_template(0, 0)
}
spriteset (tem2_purchase_graphics_noico, "src/diesel/tem2.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem2_purchase_sprites, enable_icons)
{
1: tem2_purchase_graphics_ico;
 tem2_purchase_graphics_noico;
}
spriteset (tem2_v1_notpowered_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 40, 0)
}
spriteset (tem2_v1_loading_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tem2_v1_traveling_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tem2_v1_normal_sprites_left
{
loading: tem2_v1_loading_sprites_left;
 loaded: tem2_v1_traveling_sprites_left;
}
spriteset (tem2_v1_notpowered_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32, 40, 0)
}
spriteset (tem2_v1_loading_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (tem2_v1_traveling_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup tem2_v1_normal_sprites_right
{
loading: tem2_v1_loading_sprites_right;
 loaded: tem2_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v1_normal_sprites_left;
 tem2_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v1_normal_sprites_right;
 tem2_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v1_sprites_left2;
 1: tem2_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v1_sprites_left1;
 128: tem2_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v1_sprites_right2;
 1: tem2_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v1_sprites_right1;
 128: tem2_v1_sprites_right1;
}
spriteset (tem2_v2_notpowered_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 241, 0)
}
spriteset (tem2_v2_loading_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (tem2_v2_traveling_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup tem2_v2_normal_sprites_left
{
loading: tem2_v2_loading_sprites_left;
 loaded: tem2_v2_traveling_sprites_left;
}
spriteset (tem2_v2_notpowered_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32, 241, 0)
}
spriteset (tem2_v2_loading_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (tem2_v2_traveling_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup tem2_v2_normal_sprites_right
{
loading: tem2_v2_loading_sprites_right;
 loaded: tem2_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v2_normal_sprites_left;
 tem2_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v2_normal_sprites_right;
 tem2_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v2_sprites_left2;
 1: tem2_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v2_sprites_left1;
 128: tem2_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v2_sprites_right2;
 1: tem2_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v2_sprites_right1;
 128: tem2_v2_sprites_right1;
}
spriteset (tem2_v3_notpowered_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 442, 0)
}
spriteset (tem2_v3_loading_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (tem2_v3_traveling_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup tem2_v3_normal_sprites_left
{
loading: tem2_v3_loading_sprites_left;
 loaded: tem2_v3_traveling_sprites_left;
}
spriteset (tem2_v3_notpowered_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32, 442, 0)
}
spriteset (tem2_v3_loading_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (tem2_v3_traveling_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup tem2_v3_normal_sprites_right
{
loading: tem2_v3_loading_sprites_right;
 loaded: tem2_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v3_normal_sprites_left;
 tem2_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v3_normal_sprites_right;
 tem2_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v3_sprites_left2;
 1: tem2_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v3_sprites_left1;
 128: tem2_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v3_sprites_right2;
 1: tem2_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v3_sprites_right1;
 128: tem2_v3_sprites_right1;
}
spriteset (tem2_v4_notpowered_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 643, 0)
}
spriteset (tem2_v4_loading_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 643 +67, 0)
}
spriteset (tem2_v4_traveling_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 643 +134, 0)
}
spritegroup tem2_v4_normal_sprites_left
{
loading: tem2_v4_loading_sprites_left;
 loaded: tem2_v4_traveling_sprites_left;
}
spriteset (tem2_v4_notpowered_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32, 643, 0)
}
spriteset (tem2_v4_loading_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 643 +67, 0)
}
spriteset (tem2_v4_traveling_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 643 +134, 0)
}
spritegroup tem2_v4_normal_sprites_right
{
loading: tem2_v4_loading_sprites_right;
 loaded: tem2_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v4_normal_sprites_left;
 tem2_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v4_normal_sprites_right;
 tem2_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v4_sprites_left2;
 1: tem2_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v4_sprites_left1;
 128: tem2_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v4_sprites_right2;
 1: tem2_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v4_sprites_right1;
 128: tem2_v4_sprites_right1;
}
spriteset (tem2_v5_notpowered_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 844, 0)
}
spriteset (tem2_v5_loading_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 844 +67, 0)
}
spriteset (tem2_v5_traveling_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 844 +134, 0)
}
spritegroup tem2_v5_normal_sprites_left
{
loading: tem2_v5_loading_sprites_left;
 loaded: tem2_v5_traveling_sprites_left;
}
spriteset (tem2_v5_notpowered_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32, 844, 0)
}
spriteset (tem2_v5_loading_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 844 +67, 0)
}
spriteset (tem2_v5_traveling_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 844 +134, 0)
}
spritegroup tem2_v5_normal_sprites_right
{
loading: tem2_v5_loading_sprites_right;
 loaded: tem2_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v5_normal_sprites_left;
 tem2_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v5_normal_sprites_right;
 tem2_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v5_sprites_left2;
 1: tem2_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v5_sprites_left1;
 128: tem2_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v5_sprites_right2;
 1: tem2_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v5_sprites_right1;
 128: tem2_v5_sprites_right1;
}
spriteset (tem2_v6_notpowered_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 1045, 0)
}
spriteset (tem2_v6_loading_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 1045 +67, 0)
}
spriteset (tem2_v6_traveling_sprites_left, "src/diesel/tem2.png")
{
s10_template(32, 1045 +134, 0)
}
spritegroup tem2_v6_normal_sprites_left
{
loading: tem2_v6_loading_sprites_left;
 loaded: tem2_v6_traveling_sprites_left;
}
spriteset (tem2_v6_notpowered_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32, 1045, 0)
}
spriteset (tem2_v6_loading_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 1045 +67, 0)
}
spriteset (tem2_v6_traveling_sprites_right, "src/diesel/tem2.png")
{
s10_r_template(32 +415, 1045 +134, 0)
}
spritegroup tem2_v6_normal_sprites_right
{
loading: tem2_v6_loading_sprites_right;
 loaded: tem2_v6_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v6_normal_sprites_left;
 tem2_v6_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_v6_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2_v6_normal_sprites_right;
 tem2_v6_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v6_sprites_left2;
 1: tem2_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v6_sprites_left1;
 128: tem2_v6_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2_v6_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2_v6_sprites_right2;
 1: tem2_v6_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2_v6_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2_v6_sprites_right1;
 128: tem2_v6_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_green_left,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x07])
{
0..2: tem2_v1_sprites_left;
  3..4: tem2_v2_sprites_left;
        tem2_v3_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_green_right,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x07])
{
0..2: tem2_v1_sprites_right;
  3..4: tem2_v2_sprites_right;
        tem2_v3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_blue_left,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x01])
{
0: tem2_v4_sprites_left;
     tem2_v5_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_blue_right,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x01])
{
0: tem2_v4_sprites_right;
     tem2_v5_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_left,
  cargo_subtype)
{
0: tem2_sprites_green_left;
  1: tem2_sprites_blue_left;
  2: tem2_v6_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_right,
  cargo_subtype)
{
0: tem2_sprites_green_right;
  1: tem2_sprites_blue_right;
  2: tem2_v6_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) || (position_in_consist == 0) ])
{
1: tem2_sprites_left;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem2) + 1) % 2))
{
1: tem2_sprites_2l;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_old;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_16;
 tem2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_14;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_12;
 tem2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_10;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_8;
 tem2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_6;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_sprites_4;
 tem2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem2_sprites_left;
 tem2_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem2_sprites_start_sp, count_veh_id(tem2))
{
1: tem2_sprites_1RND;
 tem2_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem2_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem2_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem2_sprites_parent, [ STORE_TEMP(count_veh_id(tem2), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem2_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem2_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem2_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem2_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem2_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem2), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem2_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem2), 0), STORE_TEMP(vehicle_type_id == tem2, 1) ])
{ tem2_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem2_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem2_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, PARENT, tem2_bitmask_vehicle_info_advanced2,
  (vehicle_type_id == tem2) && (build_year < 1971))
{
1: return bitmask(0);
     tem2_bitmask_vehicle_info;
}
switch (FEAT_TRAINS, SELF, tem2_bitmask_vehicle_info_advanced1,
  build_year < 1971)
{
1: return bitmask(0);
     tem2_bitmask_vehicle_info_advanced2;
}
switch (FEAT_TRAINS, SELF, tem2_bitmask_vehicle_info_advanced,
  (position_in_consist == 0) || (vehicle_is_not_powered))
{
1: return 0;
     tem2_bitmask_vehicle_info_advanced1;
}
switch (FEAT_TRAINS, SELF, tem2_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_96);
 2: return string(STR_REFIT_TTD_B3);
 return string(STR_REFIT_TTD_53);
}
switch (FEAT_TRAINS, SELF, tem2_running_cost_factor,
[ STORE_TEMP(113 + 2 * (build_year >= 1967) - 2 * (build_year >= 1974), 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(40 + (build_year >= 1967) - (build_year >= 1974), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(28 + (build_year >= 1967), 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(120, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 199-203-200
switch (FEAT_TRAINS, SELF, tem2_tractive_effort_coefficient, (build_year >= 1967) + (build_year >= 1974))
{
1: return int(256*(347.1)/(120)/9.8);
 2: return int(256*(347.1)/(120)/9.8);
 return int(256*(347.1)/(120)/9.8);
}
switch (FEAT_TRAINS, SELF, tem2_cost_factor, (build_year >= 1967) + (build_year >= 1974))
{
1: return 27;
 2: return 26;
 return 26;
}
switch (FEAT_TRAINS, SELF, tem2_power, build_year >= 1967)
{
1: return int (890 * 0.9865);
 return int (840 * 0.9865);
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) || (position_in_consist == 0) ])
{
1: tem2_create_effect_sprites_left;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem2) + 1) % 2))
{
1: tem2_create_effect_sprites_2l;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_old;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_16;
 tem2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_14;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_12;
 tem2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_10;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_8;
 tem2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_6;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2) ])
{
1: tem2_create_effect_sprites_4;
 tem2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem2_create_effect_sprites_left;
 tem2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem2_create_effect, count_veh_id(tem2))
{
1: tem2_create_effect_1RND;
 tem2_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem2_b1971_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1984 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem2_b1971_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem2_b1971_additional_text, current_year <= 1984)
{
1: tem2_b1971_additional_text_hidden;
 tem2_b1971_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tem2_a1971_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1984 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem2_a1971_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem2_a1971_additional_text, current_year <= 1984)
{
1: tem2_a1971_additional_text_hidden;
 tem2_a1971_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tem2_additional_text, current_year >= 1971)
{
0: tem2_b1971_additional_text;
 tem2_a1971_additional_text;
}
item (FEAT_TRAINS, tem2, 341)
{
property
{
name: string(STR_NAME_TEM2);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1960 - delta_age, 1, 1);
 model_life: 1984 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1960 -1984 -2 < retire_early_default ? 1984 -1960 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1960 -1984 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1960 -1984 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 26 > 255 ? 255 : 26;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (840 * 0.9865);
 weight: (120) ton;
 tractive_effort_coefficient: (((347.1))/((120))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem2_additional_text;
               articulated_part: articulated_part_dummy2;
           bitmask_vehicle_info: tem2_bitmask_vehicle_info_advanced;
               can_attach_wagon: any_can_attach_wagon;
                 cargo_capacity: return 0;
             cargo_subtype_text: tem2_cargo_subtype_text;
                 colour_mapping: any_cc_colour;
                    cost_factor: tem2_cost_factor;
                  create_effect: tem2_create_effect;
                        default: tem2_sprites;
                          power: tem2_power;
                       purchase: tem2_purchase_sprites;
                 purchase_speed: return 100;
            running_cost_factor: tem2_running_cost_factor;
                          speed: tem2_speed;
                     start_stop: any_start_stop;
    tractive_effort_coefficient: tem2_tractive_effort_coefficient;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem2)
{
property
{
name: string(STR_LONGNAME_TEM2);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem2)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem2)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem2)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem2u
spriteset (tem2u_purchase_graphics_ico, "src/diesel/tem2u.png")
{
new_purchase_template(0, 0)
}
spriteset (tem2u_purchase_graphics_noico, "src/diesel/tem2u.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem2u_purchase_sprites, enable_icons)
{
1: tem2u_purchase_graphics_ico;
 tem2u_purchase_graphics_noico;
}
spriteset (tem2u_v1_notpowered_sprites_left, "src/diesel/tem2u.png")
{
s10_template(32, 40, 0)
}
spriteset (tem2u_v1_loading_sprites_left, "src/diesel/tem2u.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tem2u_v1_traveling_sprites_left, "src/diesel/tem2u.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tem2u_v1_normal_sprites_left
{
loading: tem2u_v1_loading_sprites_left;
 loaded: tem2u_v1_traveling_sprites_left;
}
spriteset (tem2u_v1_notpowered_sprites_right, "src/diesel/tem2u.png")
{
s10_r_template(32, 40, 0)
}
spriteset (tem2u_v1_loading_sprites_right, "src/diesel/tem2u.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (tem2u_v1_traveling_sprites_right, "src/diesel/tem2u.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup tem2u_v1_normal_sprites_right
{
loading: tem2u_v1_loading_sprites_right;
 loaded: tem2u_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2u_v1_normal_sprites_left;
 tem2u_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2u_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2u_v1_normal_sprites_right;
 tem2u_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2u_v1_sprites_left2;
 1: tem2u_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2u_v1_sprites_left1;
 128: tem2u_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2u_v1_sprites_right2;
 1: tem2u_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2u_v1_sprites_right1;
 128: tem2u_v1_sprites_right1;
}
spriteset (tem2u_v2_notpowered_sprites_left, "src/diesel/tem2u.png")
{
s10_template(32, 241, 0)
}
spriteset (tem2u_v2_loading_sprites_left, "src/diesel/tem2u.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (tem2u_v2_traveling_sprites_left, "src/diesel/tem2u.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup tem2u_v2_normal_sprites_left
{
loading: tem2u_v2_loading_sprites_left;
 loaded: tem2u_v2_traveling_sprites_left;
}
spriteset (tem2u_v2_notpowered_sprites_right, "src/diesel/tem2u.png")
{
s10_r_template(32, 241, 0)
}
spriteset (tem2u_v2_loading_sprites_right, "src/diesel/tem2u.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (tem2u_v2_traveling_sprites_right, "src/diesel/tem2u.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup tem2u_v2_normal_sprites_right
{
loading: tem2u_v2_loading_sprites_right;
 loaded: tem2u_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2u_v2_normal_sprites_left;
 tem2u_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem2u_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem2u_v2_normal_sprites_right;
 tem2u_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2u_v2_sprites_left2;
 1: tem2u_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2u_v2_sprites_left1;
 128: tem2u_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem2u_v2_sprites_right2;
 1: tem2u_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem2u_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem2u_v2_sprites_right1;
 128: tem2u_v2_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_left,
  cargo_subtype)
{
0: tem2u_v1_sprites_left;
           1: tem2u_v2_sprites_left;
  15: tem2u_v1_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_right,
  cargo_subtype)
{
0: tem2u_v1_sprites_right;
           1: tem2u_v2_sprites_right;
  15: tem2u_v1_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) || (position_in_consist == 0) ])
{
1: tem2u_sprites_left;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem2u) + 1) % 2))
{
1: tem2u_sprites_2l;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_old;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_16;
 tem2u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_14;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_12;
 tem2u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_10;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_8;
 tem2u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_6;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_sprites_4;
 tem2u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem2u_sprites_left;
 tem2u_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem2u_sprites_start_sp, count_veh_id(tem2u))
{
1: tem2u_sprites_1RND;
 tem2u_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem2u_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem2u_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem2u_sprites_parent, [ STORE_TEMP(count_veh_id(tem2u), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem2u_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem2u_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem2u_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem2u_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_TTD_53);
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) || (position_in_consist == 0) ])
{
1: tem2u_create_effect_sprites_left;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem2u) + 1) % 2))
{
1: tem2u_create_effect_sprites_2l;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_old;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_16;
 tem2u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_14;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_12;
 tem2u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_10;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_8;
 tem2u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_6;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2u) ])
{
1: tem2u_create_effect_sprites_4;
 tem2u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2u_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem2u_create_effect_sprites_left;
 tem2u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem2u_create_effect, count_veh_id(tem2u))
{
1: tem2u_create_effect_1RND;
 tem2u_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem2u_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem2u_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem2u), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem2u_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem2u), 0), STORE_TEMP(vehicle_type_id == tem2u, 1) ])
{ tem2u_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem2u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem2u_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem2u_running_cost_factor,
[ STORE_TEMP(115, 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(40, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(28, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(124, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 201
switch (FEAT_TRAINS, SELF, tem2u_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1984 << 16), 0x101), STORE_TEMP(1989 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem2u_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem2u_additional_text, current_year <= 1989)
{
1: tem2u_additional_text_hidden;
 tem2u_additional_text_shown;
}
item (FEAT_TRAINS, tem2u, 342)
{
property
{
name: string(STR_NAME_TEM2U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1984 - delta_age, 1, 1);
 model_life: 1989 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1984 -1989 -2 < retire_early_default ? 1989 -1984 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1984 -1989 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1984 -1989 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 26 > 255 ? 255 : 26;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (840 * 0.9865);
 weight: (124) ton;
 tractive_effort_coefficient: (((380.0))/((124))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tem2;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tem2u_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tem2u_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem2u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tem2u_create_effect;
                 default: tem2u_sprites;
                purchase: tem2u_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem2u_running_cost_factor;
                   speed: tem2u_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem2u)
{
property
{
name: string(STR_LONGNAME_TEM2U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem2u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem2u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem2u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem2u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem2u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem2um uses tem2u
switch (FEAT_TRAINS, SELF, tem2um_sprites_left,
  cargo_subtype)
{
0: tem2u_v1_sprites_left;
           1: tem2u_v2_sprites_left;
  15: tem2u_v1_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_right,
  cargo_subtype)
{
0: tem2u_v1_sprites_right;
           1: tem2u_v2_sprites_right;
  15: tem2u_v1_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) || (position_in_consist == 0) ])
{
1: tem2um_sprites_left;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem2um) + 1) % 2))
{
1: tem2um_sprites_2l;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_old;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_16;
 tem2um_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_14;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_12;
 tem2um_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_10;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_8;
 tem2um_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_6;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_sprites_4;
 tem2um_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem2um_sprites_left;
 tem2um_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem2um_sprites_start_sp, count_veh_id(tem2um))
{
1: tem2um_sprites_1RND;
 tem2um_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem2um_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem2um_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem2um_sprites_parent, [ STORE_TEMP(count_veh_id(tem2um), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem2um_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem2um_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem2um_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) || (position_in_consist == 0) ])
{
1: tem2um_create_effect_sprites_left;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem2um) + 1) % 2))
{
1: tem2um_create_effect_sprites_2l;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_old;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_16;
 tem2um_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_14;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_12;
 tem2um_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_10;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_8;
 tem2um_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_6;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem2um) ])
{
1: tem2um_create_effect_sprites_4;
 tem2um_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem2um_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem2um_create_effect_sprites_left;
 tem2um_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem2um_create_effect, count_veh_id(tem2um))
{
1: tem2um_create_effect_1RND;
 tem2um_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem2um_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem2um_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem2um), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem2um_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem2um), 0), STORE_TEMP(vehicle_type_id == tem2um, 1) ])
{ tem2um_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem2um_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem2um_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem2um_running_cost_factor,
[ STORE_TEMP(121, 0), // Моторы
   STORE_TEMP(17, 1), // Бригада
   STORE_TEMP(42, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(30, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 212
switch (FEAT_TRAINS, SELF, tem2um_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1989 << 16), 0x101), STORE_TEMP(1995 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem2um_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem2um_additional_text, current_year <= 1995)
{
1: tem2um_additional_text_hidden;
 tem2um_additional_text_shown;
}
item (FEAT_TRAINS, tem2um, 343)
{
property
{
name: string(STR_NAME_TEM2UM);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1989 - delta_age, 1, 1);
 model_life: 1995 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1989 -1995 -2 < retire_early_default ? 1995 -1989 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1989 -1995 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1989 -1995 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 28 > 255 ? 255 : 28;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (840 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((382.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tem2;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tem2um_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tem2um_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem2u_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tem2um_create_effect;
                 default: tem2um_sprites;
                purchase: tem2u_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem2um_running_cost_factor;
                   speed: tem2um_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem2um)
{
property
{
name: string(STR_LONGNAME_TEM2UM);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem2um)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem2um)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem2um)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem2um)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem2um)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem1 uses tem2
spriteset (tem1_v1_purchase_graphics_ico, "src/diesel/tem1.png")
{
new_purchase_template(0, 0)
}
spriteset (tem1_v1_purchase_graphics_noico, "src/diesel/tem1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem1_v1_purchase_sprites, enable_icons)
{
1: tem1_v1_purchase_graphics_ico;
 tem1_v1_purchase_graphics_noico;
}
spriteset (tem1_v1_notpowered_sprites_left, "src/diesel/tem1.png")
{
s10_template(32, 40, 0)
}
spriteset (tem1_v1_loading_sprites_left, "src/diesel/tem1.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tem1_v1_traveling_sprites_left, "src/diesel/tem1.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tem1_v1_normal_sprites_left
{
loading: tem1_v1_loading_sprites_left;
 loaded: tem1_v1_traveling_sprites_left;
}
spriteset (tem1_v1_notpowered_sprites_right, "src/diesel/tem1.png")
{
s10_r_template(32, 40, 0)
}
spriteset (tem1_v1_loading_sprites_right, "src/diesel/tem1.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (tem1_v1_traveling_sprites_right, "src/diesel/tem1.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup tem1_v1_normal_sprites_right
{
loading: tem1_v1_loading_sprites_right;
 loaded: tem1_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem1_v1_normal_sprites_left;
 tem1_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem1_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem1_v1_normal_sprites_right;
 tem1_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem1_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem1_v1_sprites_left2;
 1: tem1_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem1_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem1_v1_sprites_left1;
 128: tem1_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem1_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem1_v1_sprites_right2;
 1: tem1_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem1_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem1_v1_sprites_right1;
 128: tem1_v1_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem1_purchase_sprites,
  current_year >= 1960)
{
0: tem1_v1_purchase_sprites;
     tem2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_left,
  build_year >= 1960)
{
0: tem1_v1_sprites_left;
     tem2_v1_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_right,
  build_year >= 1960)
{
0: tem1_v1_sprites_right;
     tem2_v1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) || (position_in_consist == 0) ])
{
1: tem1_sprites_left;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem1) + 1) % 2))
{
1: tem1_sprites_2l;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_old;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_16;
 tem1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_14;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_12;
 tem1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_10;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_8;
 tem1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_6;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_sprites_4;
 tem1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem1_sprites_left;
 tem1_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem1_sprites_start_sp, count_veh_id(tem1))
{
1: tem1_sprites_1RND;
 tem1_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem1_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem1_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem1_sprites_parent, [ STORE_TEMP(count_veh_id(tem1), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem1_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem1_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem1_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) || (position_in_consist == 0) ])
{
1: tem1_create_effect_sprites_left;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem1) + 1) % 2))
{
1: tem1_create_effect_sprites_2l;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_old;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_16;
 tem1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_14;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_12;
 tem1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_10;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_8;
 tem1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_6;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem1) ])
{
1: tem1_create_effect_sprites_4;
 tem1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem1_cost_factor, build_year >= 1965)
{
1: return 18;
 return 17;
}
switch (FEAT_TRAINS, SELF, tem1_weight, build_year >= 1965)
{
1: return int(120);
 return int(124);
}
switch (FEAT_TRAINS, SELF, tem1_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem1_create_effect_sprites_left;
 tem1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem1_create_effect, count_veh_id(tem1))
{
1: tem1_create_effect_1RND;
 tem1_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem1_purchase_speed, build_year >= 1965)
{
1: return 100;
 return 90;
}
switch (FEAT_TRAINS, SELF, tem1_speed, [ STORE_TEMP(build_year >= 1965 ? 100 : 90, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, tem1_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem1), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem1_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem1), 0), STORE_TEMP(vehicle_type_id == tem1, 1) ])
{ tem1_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem1_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem1_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem1_running_cost_factor,
[ STORE_TEMP(74 + 3 * (build_year >= 1965), 0), // Моторы
   STORE_TEMP(10, 1), // Бригада
   STORE_TEMP(26 + (build_year >= 1965), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(18 + (build_year >= 1965), 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(90 + 10 * (build_year >= 1965), 6), // Скорость
   STORE_TEMP(124, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 129-134
switch (FEAT_TRAINS, SELF, tem1_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1958 << 16), 0x101), STORE_TEMP(1968 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem1_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem1_additional_text, current_year <= 1968)
{
1: tem1_additional_text_hidden;
 tem1_additional_text_shown;
}
item (FEAT_TRAINS, tem1, 344)
{
property
{
name: string(STR_NAME_TEM1);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1958 - delta_age, 1, 1);
 model_life: 1968 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1958 -1968 -2 < retire_early_default ? 1968 -1958 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1958 -1968 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1958 -1968 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 17 > 255 ? 255 : 17;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (670 * 0.9865);
 weight: (124) ton;
 tractive_effort_coefficient: (((347.1))/((124))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem1_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tem1_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
             cost_factor: tem1_cost_factor;
           create_effect: tem1_create_effect;
                 default: tem1_sprites;
                purchase: tem1_purchase_sprites;
          purchase_speed: tem1_purchase_speed;
     running_cost_factor: tem1_running_cost_factor;
                   speed: tem1_speed;
              start_stop: any_start_stop;
                  weight: tem1_weight;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem1)
{
property
{
name: string(STR_LONGNAME_TEM1);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem1)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem1)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem1)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem18
spriteset (tem18_purchase_graphics_ico, "src/diesel/tem18.png")
{
new_purchase_template(0, 0)
}
spriteset (tem18_purchase_graphics_noico, "src/diesel/tem18.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem18_purchase_sprites, enable_icons)
{
1: tem18_purchase_graphics_ico;
 tem18_purchase_graphics_noico;
}
spriteset (tem18_v1_notpowered_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 40, 0)
}
spriteset (tem18_v1_loading_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tem18_v1_traveling_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tem18_v1_normal_sprites_left
{
loading: tem18_v1_loading_sprites_left;
 loaded: tem18_v1_traveling_sprites_left;
}
spriteset (tem18_v1_notpowered_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32, 40, 0)
}
spriteset (tem18_v1_loading_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (tem18_v1_traveling_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup tem18_v1_normal_sprites_right
{
loading: tem18_v1_loading_sprites_right;
 loaded: tem18_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18_v1_normal_sprites_left;
 tem18_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem18_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18_v1_normal_sprites_right;
 tem18_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem18_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18_v1_sprites_left2;
 1: tem18_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem18_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18_v1_sprites_left1;
 128: tem18_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem18_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18_v1_sprites_right2;
 1: tem18_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem18_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18_v1_sprites_right1;
 128: tem18_v1_sprites_right1;
}
spriteset (tem18_v2_notpowered_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 241, 0)
}
spriteset (tem18_v2_loading_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (tem18_v2_traveling_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup tem18_v2_normal_sprites_left
{
loading: tem18_v2_loading_sprites_left;
 loaded: tem18_v2_traveling_sprites_left;
}
spriteset (tem18_v2_notpowered_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32, 241, 0)
}
spriteset (tem18_v2_loading_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (tem18_v2_traveling_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup tem18_v2_normal_sprites_right
{
loading: tem18_v2_loading_sprites_right;
 loaded: tem18_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18_v2_normal_sprites_left;
 tem18_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem18_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18_v2_normal_sprites_right;
 tem18_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem18_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18_v2_sprites_left2;
 1: tem18_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem18_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18_v2_sprites_left1;
 128: tem18_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem18_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18_v2_sprites_right2;
 1: tem18_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem18_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18_v2_sprites_right1;
 128: tem18_v2_sprites_right1;
}
spriteset (tem18_v3_notpowered_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 442, 0)
}
spriteset (tem18_v3_loading_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (tem18_v3_traveling_sprites_left, "src/diesel/tem18.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup tem18_v3_normal_sprites_left
{
loading: tem18_v3_loading_sprites_left;
 loaded: tem18_v3_traveling_sprites_left;
}
spriteset (tem18_v3_notpowered_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32, 442, 0)
}
spriteset (tem18_v3_loading_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (tem18_v3_traveling_sprites_right, "src/diesel/tem18.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup tem18_v3_normal_sprites_right
{
loading: tem18_v3_loading_sprites_right;
 loaded: tem18_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18_v3_normal_sprites_left;
 tem18_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem18_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18_v3_normal_sprites_right;
 tem18_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem18_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18_v3_sprites_left2;
 1: tem18_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem18_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18_v3_sprites_left1;
 128: tem18_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem18_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18_v3_sprites_right2;
 1: tem18_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem18_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18_v3_sprites_right1;
 128: tem18_v3_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_left,
  cargo_subtype)
{
0: tem18_v1_sprites_left;
           1: tem18_v3_sprites_left;
  15: tem18_v2_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_right,
  cargo_subtype)
{
0: tem18_v1_sprites_right;
           1: tem18_v3_sprites_right;
  15: tem18_v2_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) || (position_in_consist == 0) ])
{
1: tem18_sprites_left;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem18) + 1) % 2))
{
1: tem18_sprites_2l;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_old;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_16;
 tem18_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_14;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_12;
 tem18_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_10;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_8;
 tem18_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_6;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_sprites_4;
 tem18_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem18_sprites_left;
 tem18_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem18_sprites_start_sp, count_veh_id(tem18))
{
1: tem18_sprites_1RND;
 tem18_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem18_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem18_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem18_sprites_parent, [ STORE_TEMP(count_veh_id(tem18), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem18_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem18_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem18_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem18_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tem18_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 tem18_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) || (position_in_consist == 0) ])
{
1: tem18_create_effect_sprites_left;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem18) + 1) % 2))
{
1: tem18_create_effect_sprites_2l;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_old;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_16;
 tem18_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_14;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_12;
 tem18_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_10;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_8;
 tem18_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_6;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18) ])
{
1: tem18_create_effect_sprites_4;
 tem18_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem18_create_effect_sprites_left;
 tem18_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem18_create_effect, count_veh_id(tem18))
{
1: tem18_create_effect_1RND;
 tem18_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem18_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem18_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem18), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem18_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem18), 0), STORE_TEMP(vehicle_type_id == tem18, 1) ])
{ tem18_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem18_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem18_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem18_running_cost_factor,
[ STORE_TEMP(113, 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(40, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(28, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 198
switch (FEAT_TRAINS, SELF, tem18_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1992 << 16), 0x101), STORE_TEMP(2012 | (string(STR_PURCHASE_HINT_FACTORY_BRYANSK) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem18_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem18_additional_text, current_year <= 2012)
{
1: tem18_additional_text_hidden;
 tem18_additional_text_shown;
}
item (FEAT_TRAINS, tem18, 348)
{
property
{
name: string(STR_NAME_TEM18);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1992 - delta_age, 1, 1);
 model_life: 2012 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1992 -2012 -2 < retire_early_default ? 2012 -1992 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1992 -2012 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1992 -2012 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 26 > 255 ? 255 : 26;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (820 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((319.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem18_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tem18_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem18_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tem18_create_effect;
                 default: tem18_sprites;
                purchase: tem18_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem18_running_cost_factor;
                   speed: tem18_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem18)
{
property
{
name: string(STR_LONGNAME_TEM18);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem18)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem18)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem18)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem18)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem18)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem18dm
spriteset (tem18dm_purchase_graphics_ico, "src/diesel/tem18dm.png")
{
new_purchase_template(0, 0)
}
spriteset (tem18dm_purchase_graphics_noico, "src/diesel/tem18dm.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem18dm_purchase_sprites, enable_icons)
{
1: tem18dm_purchase_graphics_ico;
 tem18dm_purchase_graphics_noico;
}
spriteset (tem18dm_v1_notpowered_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 40, 0)
}
spriteset (tem18dm_v1_loading_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tem18dm_v1_traveling_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tem18dm_v1_normal_sprites_left
{
loading: tem18dm_v1_loading_sprites_left;
 loaded: tem18dm_v1_traveling_sprites_left;
}
spriteset (tem18dm_v1_notpowered_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32, 40, 0)
}
spriteset (tem18dm_v1_loading_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (tem18dm_v1_traveling_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup tem18dm_v1_normal_sprites_right
{
loading: tem18dm_v1_loading_sprites_right;
 loaded: tem18dm_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18dm_v1_normal_sprites_left;
 tem18dm_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem18dm_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18dm_v1_normal_sprites_right;
 tem18dm_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18dm_v1_sprites_left2;
 1: tem18dm_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18dm_v1_sprites_left1;
 128: tem18dm_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18dm_v1_sprites_right2;
 1: tem18dm_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18dm_v1_sprites_right1;
 128: tem18dm_v1_sprites_right1;
}
spriteset (tem18dm_v2_notpowered_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 241, 0)
}
spriteset (tem18dm_v2_loading_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (tem18dm_v2_traveling_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup tem18dm_v2_normal_sprites_left
{
loading: tem18dm_v2_loading_sprites_left;
 loaded: tem18dm_v2_traveling_sprites_left;
}
spriteset (tem18dm_v2_notpowered_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32, 241, 0)
}
spriteset (tem18dm_v2_loading_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32 +415, 241 +67, 0)
}
spriteset (tem18dm_v2_traveling_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32 +415, 241 +134, 0)
}
spritegroup tem18dm_v2_normal_sprites_right
{
loading: tem18dm_v2_loading_sprites_right;
 loaded: tem18dm_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18dm_v2_normal_sprites_left;
 tem18dm_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem18dm_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18dm_v2_normal_sprites_right;
 tem18dm_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18dm_v2_sprites_left2;
 1: tem18dm_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18dm_v2_sprites_left1;
 128: tem18dm_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18dm_v2_sprites_right2;
 1: tem18dm_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18dm_v2_sprites_right1;
 128: tem18dm_v2_sprites_right1;
}
spriteset (tem18dm_v3_notpowered_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 442, 0)
}
spriteset (tem18dm_v3_loading_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (tem18dm_v3_traveling_sprites_left, "src/diesel/tem18dm.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup tem18dm_v3_normal_sprites_left
{
loading: tem18dm_v3_loading_sprites_left;
 loaded: tem18dm_v3_traveling_sprites_left;
}
spriteset (tem18dm_v3_notpowered_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32, 442, 0)
}
spriteset (tem18dm_v3_loading_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32 +415, 442 +67, 0)
}
spriteset (tem18dm_v3_traveling_sprites_right, "src/diesel/tem18dm.png")
{
s10_r_template(32 +415, 442 +134, 0)
}
spritegroup tem18dm_v3_normal_sprites_right
{
loading: tem18dm_v3_loading_sprites_right;
 loaded: tem18dm_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18dm_v3_normal_sprites_left;
 tem18dm_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem18dm_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem18dm_v3_normal_sprites_right;
 tem18dm_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18dm_v3_sprites_left2;
 1: tem18dm_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18dm_v3_sprites_left1;
 128: tem18dm_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem18dm_v3_sprites_right2;
 1: tem18dm_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem18dm_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem18dm_v3_sprites_right1;
 128: tem18dm_v3_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_left,
  cargo_subtype)
{
0: tem18dm_v1_sprites_left;
           1: tem18dm_v3_sprites_left;
  15: tem18dm_v2_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_right,
  cargo_subtype)
{
0: tem18dm_v1_sprites_right;
           1: tem18dm_v3_sprites_right;
  15: tem18dm_v2_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) || (position_in_consist == 0) ])
{
1: tem18dm_sprites_left;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem18dm) + 1) % 2))
{
1: tem18dm_sprites_2l;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_old;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_16;
 tem18dm_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_14;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_12;
 tem18dm_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_10;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_8;
 tem18dm_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_6;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_sprites_4;
 tem18dm_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem18dm_sprites_left;
 tem18dm_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem18dm_sprites_start_sp, count_veh_id(tem18dm))
{
1: tem18dm_sprites_1RND;
 tem18dm_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem18dm_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem18dm_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem18dm_sprites_parent, [ STORE_TEMP(count_veh_id(tem18dm), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem18dm_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem18dm_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem18dm_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem18dm_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tem18dm_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 tem18dm_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) || (position_in_consist == 0) ])
{
1: tem18dm_create_effect_sprites_left;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem18dm) + 1) % 2))
{
1: tem18dm_create_effect_sprites_2l;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_old;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_16;
 tem18dm_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_14;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_12;
 tem18dm_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_10;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_8;
 tem18dm_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_6;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem18dm) ])
{
1: tem18dm_create_effect_sprites_4;
 tem18dm_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem18dm_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 1)) < 1])
{
1: tem18dm_create_effect_sprites_left;
 tem18dm_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem18dm_create_effect, count_veh_id(tem18dm))
{
1: tem18dm_create_effect_1RND;
 tem18dm_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem18dm_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem18dm_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem18dm), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem18dm_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem18dm), 0), STORE_TEMP(vehicle_type_id == tem18dm, 1) ])
{ tem18dm_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem18dm_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem18dm_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem18dm_running_cost_factor,
[ STORE_TEMP(113, 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(40, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(28, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(126, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 198
switch (FEAT_TRAINS, SELF, tem18dm_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2008 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem18dm_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_BRYANSK), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem18dm_additional_text, current_year <= 2023)
{
1: tem18dm_additional_text_hidden;
 tem18dm_additional_text_shown;
}
item (FEAT_TRAINS, tem18dm, 517)
{
property
{
name: string(STR_NAME_TEM18DM);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2008 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2008 -2050 -2 < retire_early_default ? 2050 -2008 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2008 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2008 -2050 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 26 > 255 ? 255 : 26;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (820 * 0.9865);
 weight: (126) ton;
 tractive_effort_coefficient: (((319.0))/((126))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tem18;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tem18dm_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tem18dm_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem18dm_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tem18dm_create_effect;
                 default: tem18dm_sprites;
                purchase: tem18dm_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem18dm_running_cost_factor;
                   speed: tem18dm_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem18dm)
{
property
{
name: string(STR_LONGNAME_TEM18DM);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem18dm)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem18dm)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem18dm)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem18dm)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem18dm)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem7
spriteset (tem7_purchase_graphics_ico, "src/diesel/tem7.png")
{
new_purchase_template(0, 0)
}
spriteset (tem7_purchase_graphics_noico, "src/diesel/tem7.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem7_purchase_sprites, enable_icons)
{
1: tem7_purchase_graphics_ico;
 tem7_purchase_graphics_noico;
}
spriteset (tem7_notpowered_sprites_left, "src/diesel/tem7.png")
{
s12_template(32, 40, 0)
}
spriteset (tem7_loading_sprites_left, "src/diesel/tem7.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tem7_traveling_sprites_left, "src/diesel/tem7.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tem7_normal_sprites_left
{
loading: tem7_loading_sprites_left;
 loaded: tem7_traveling_sprites_left;
}
spriteset (tem7_notpowered_sprites_right, "src/diesel/tem7.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tem7_loading_sprites_right, "src/diesel/tem7.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tem7_traveling_sprites_right, "src/diesel/tem7.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tem7_normal_sprites_right
{
loading: tem7_loading_sprites_right;
 loaded: tem7_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7_normal_sprites_left;
 tem7_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7_normal_sprites_right;
 tem7_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7_sprites_left2;
 1: tem7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7_sprites_left1;
 128: tem7_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem7_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7_sprites_right2;
 1: tem7_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem7_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7_sprites_right1;
 128: tem7_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) || (position_in_consist == 0) ])
{
1: tem7_sprites_left;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem7) + 1) % 2))
{
1: tem7_sprites_2l;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_old;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_16;
 tem7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_14;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_12;
 tem7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_10;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_8;
 tem7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_6;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_sprites_4;
 tem7_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (3 + 1)) < 3])
{
1: tem7_sprites_left;
 tem7_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem7_sprites_start_sp, count_veh_id(tem7))
{
1: tem7_sprites_1RND;
 tem7_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem7_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem7_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem7_sprites_parent, [ STORE_TEMP(count_veh_id(tem7), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem7_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem7_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem7_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 5, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) || (position_in_consist == 0) ])
{
1: tem7_create_effect_sprites_left;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem7) + 1) % 2))
{
1: tem7_create_effect_sprites_2l;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_old;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_16;
 tem7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_14;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_12;
 tem7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_10;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_8;
 tem7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_6;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7) ])
{
1: tem7_create_effect_sprites_4;
 tem7_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (3 + 1)) < 3])
{
1: tem7_create_effect_sprites_left;
 tem7_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem7_create_effect, count_veh_id(tem7))
{
1: tem7_create_effect_1RND;
 tem7_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem7_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem7_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem7), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem7_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem7), 0), STORE_TEMP(vehicle_type_id == tem7, 1) ])
{ tem7_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem7_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem7_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem7_running_cost_factor,
[ STORE_TEMP(234, 0), // Моторы
   STORE_TEMP(33, 1), // Бригада
   STORE_TEMP(82, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(58, 4), // ТО
   STORE_TEMP(4, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(180, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 411
switch (FEAT_TRAINS, SELF, tem7_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1975 << 16), 0x101), STORE_TEMP(1989 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem7_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem7_additional_text, current_year <= 1989)
{
1: tem7_additional_text_hidden;
 tem7_additional_text_shown;
}
item (FEAT_TRAINS, tem7, 404)
{
property
{
name: string(STR_NAME_TEM7);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1975 - delta_age, 1, 1);
 model_life: 1989 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1975 -1989 -2 < retire_early_default ? 1989 -1975 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1975 -1989 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1975 -1989 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 54 > 255 ? 255 : 54;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1330 * 0.9865);
 weight: (180) ton;
 tractive_effort_coefficient: (((580.0))/((180))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem7_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: tem7_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: tem7_create_effect;
                 default: tem7_sprites;
                purchase: tem7_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem7_running_cost_factor;
                   speed: tem7_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem7)
{
property
{
name: string(STR_LONGNAME_TEM7);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem7)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem7)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem7)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem7)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem7)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem7a
spriteset (tem7a_v1_purchase_graphics_ico, "src/diesel/tem7a.png")
{
new_purchase_template(0, 0)
}
spriteset (tem7a_v1_purchase_graphics_noico, "src/diesel/tem7a.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem7a_v1_purchase_sprites, enable_icons)
{
1: tem7a_v1_purchase_graphics_ico;
 tem7a_v1_purchase_graphics_noico;
}
spriteset (tem7a_v1_notpowered_sprites_left, "src/diesel/tem7a.png")
{
s12_template(32, 40, 0)
}
spriteset (tem7a_v1_loading_sprites_left, "src/diesel/tem7a.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tem7a_v1_traveling_sprites_left, "src/diesel/tem7a.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tem7a_v1_normal_sprites_left
{
loading: tem7a_v1_loading_sprites_left;
 loaded: tem7a_v1_traveling_sprites_left;
}
spriteset (tem7a_v1_notpowered_sprites_right, "src/diesel/tem7a.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tem7a_v1_loading_sprites_right, "src/diesel/tem7a.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tem7a_v1_traveling_sprites_right, "src/diesel/tem7a.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tem7a_v1_normal_sprites_right
{
loading: tem7a_v1_loading_sprites_right;
 loaded: tem7a_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v1_normal_sprites_left;
 tem7a_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7a_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v1_normal_sprites_right;
 tem7a_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v1_sprites_left2;
 1: tem7a_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v1_sprites_left1;
 128: tem7a_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v1_sprites_right2;
 1: tem7a_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v1_sprites_right1;
 128: tem7a_v1_sprites_right1;
}
spriteset (tem7a_v2_notpowered_sprites_left, "src/diesel/tem7a.png")
{
s12_template(32, 241, 0)
}
spriteset (tem7a_v2_loading_sprites_left, "src/diesel/tem7a.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (tem7a_v2_traveling_sprites_left, "src/diesel/tem7a.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup tem7a_v2_normal_sprites_left
{
loading: tem7a_v2_loading_sprites_left;
 loaded: tem7a_v2_traveling_sprites_left;
}
spriteset (tem7a_v2_notpowered_sprites_right, "src/diesel/tem7a.png")
{
s12_r_template(32, 241, 0)
}
spriteset (tem7a_v2_loading_sprites_right, "src/diesel/tem7a.png")
{
s12_r_template(32 +415, 241 +67, 0)
}
spriteset (tem7a_v2_traveling_sprites_right, "src/diesel/tem7a.png")
{
s12_r_template(32 +415, 241 +134, 0)
}
spritegroup tem7a_v2_normal_sprites_right
{
loading: tem7a_v2_loading_sprites_right;
 loaded: tem7a_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v2_normal_sprites_left;
 tem7a_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7a_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v2_normal_sprites_right;
 tem7a_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v2_sprites_left2;
 1: tem7a_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v2_sprites_left1;
 128: tem7a_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v2_sprites_right2;
 1: tem7a_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v2_sprites_right1;
 128: tem7a_v2_sprites_right1;
}
spriteset (tem7a_v2_purchase_graphics_ico, "src/diesel/tem7a-a2008.png")
{
new_purchase_template(0, 0)
}
spriteset (tem7a_v2_purchase_graphics_noico, "src/diesel/tem7a-a2008.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem7a_v2_purchase_sprites, enable_icons)
{
1: tem7a_v2_purchase_graphics_ico;
 tem7a_v2_purchase_graphics_noico;
}
spriteset (tem7a_v3_purchase_graphics_ico, "src/diesel/tem7a-a2008.png")
{
new_purchase_template(100, 0)
}
spriteset (tem7a_v3_purchase_graphics_noico, "src/diesel/tem7a-a2008.png")
{
new_purchase_template_noico(100, 0)
}
switch (FEAT_TRAINS, SELF, tem7a_v3_purchase_sprites, enable_icons)
{
1: tem7a_v3_purchase_graphics_ico;
 tem7a_v3_purchase_graphics_noico;
}
spriteset (tem7a_v3_notpowered_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 40, 0)
}
spriteset (tem7a_v3_loading_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tem7a_v3_traveling_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tem7a_v3_normal_sprites_left
{
loading: tem7a_v3_loading_sprites_left;
 loaded: tem7a_v3_traveling_sprites_left;
}
spriteset (tem7a_v3_notpowered_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tem7a_v3_loading_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tem7a_v3_traveling_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tem7a_v3_normal_sprites_right
{
loading: tem7a_v3_loading_sprites_right;
 loaded: tem7a_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v3_normal_sprites_left;
 tem7a_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7a_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v3_normal_sprites_right;
 tem7a_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v3_sprites_left2;
 1: tem7a_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v3_sprites_left1;
 128: tem7a_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v3_sprites_right2;
 1: tem7a_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v3_sprites_right1;
 128: tem7a_v3_sprites_right1;
}
spriteset (tem7a_v4_notpowered_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 241, 0)
}
spriteset (tem7a_v4_loading_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (tem7a_v4_traveling_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup tem7a_v4_normal_sprites_left
{
loading: tem7a_v4_loading_sprites_left;
 loaded: tem7a_v4_traveling_sprites_left;
}
spriteset (tem7a_v4_notpowered_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32, 241, 0)
}
spriteset (tem7a_v4_loading_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32 +415, 241 +67, 0)
}
spriteset (tem7a_v4_traveling_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32 +415, 241 +134, 0)
}
spritegroup tem7a_v4_normal_sprites_right
{
loading: tem7a_v4_loading_sprites_right;
 loaded: tem7a_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v4_normal_sprites_left;
 tem7a_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7a_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v4_normal_sprites_right;
 tem7a_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v4_sprites_left2;
 1: tem7a_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v4_sprites_left1;
 128: tem7a_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v4_sprites_right2;
 1: tem7a_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v4_sprites_right1;
 128: tem7a_v4_sprites_right1;
}
spriteset (tem7a_v5_notpowered_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 442, 0)
}
spriteset (tem7a_v5_loading_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 442 +67, 0)
}
spriteset (tem7a_v5_traveling_sprites_left, "src/diesel/tem7a-a2008.png")
{
s12_template(32, 442 +134, 0)
}
spritegroup tem7a_v5_normal_sprites_left
{
loading: tem7a_v5_loading_sprites_left;
 loaded: tem7a_v5_traveling_sprites_left;
}
spriteset (tem7a_v5_notpowered_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32, 442, 0)
}
spriteset (tem7a_v5_loading_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32 +415, 442 +67, 0)
}
spriteset (tem7a_v5_traveling_sprites_right, "src/diesel/tem7a-a2008.png")
{
s12_r_template(32 +415, 442 +134, 0)
}
spritegroup tem7a_v5_normal_sprites_right
{
loading: tem7a_v5_loading_sprites_right;
 loaded: tem7a_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v5_normal_sprites_left;
 tem7a_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7a_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem7a_v5_normal_sprites_right;
 tem7a_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v5_sprites_left2;
 1: tem7a_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v5_sprites_left1;
 128: tem7a_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem7a_v5_sprites_right2;
 1: tem7a_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem7a_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem7a_v5_sprites_right1;
 128: tem7a_v5_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tem7a_purchase_sprites, (current_year >= 2008) + (current_year >= 2012))
{
0: tem7a_v1_purchase_sprites;
 1: tem7a_v2_purchase_sprites;
 tem7a_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_b2008_sprites_left,
  cargo_subtype)
{
0: tem7a_v1_sprites_left;
  34: tem7a_v2_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_a2008_sprites_left,
  cargo_subtype)
{
0: tem7a_v3_sprites_left;
           1: tem7a_v4_sprites_left;
  34: tem7a_v5_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_a2012_sprites_left,
  cargo_subtype)
{
0: tem7a_v5_sprites_left;
           1: tem7a_v3_sprites_left;
  34: tem7a_v5_sprites_left;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_aGAMEEND_sprites_left,
  cargo_subtype)
{
0: tem7a_v1_sprites_left;
  1: tem7a_v2_sprites_left;
  2: tem7a_v3_sprites_left;
  3: tem7a_v4_sprites_left;
  4: tem7a_v5_sprites_left;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_b2008_sprites_right,
  cargo_subtype)
{
0: tem7a_v1_sprites_right;
  34: tem7a_v2_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_a2008_sprites_right,
  cargo_subtype)
{
0: tem7a_v3_sprites_right;
           1: tem7a_v4_sprites_right;
  34: tem7a_v5_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_a2012_sprites_right,
  cargo_subtype)
{
0: tem7a_v5_sprites_right;
           1: tem7a_v3_sprites_right;
  34: tem7a_v5_sprites_right;
              align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_aGAMEEND_sprites_right,
  cargo_subtype)
{
0: tem7a_v1_sprites_right;
  1: tem7a_v2_sprites_right;
  2: tem7a_v3_sprites_right;
  3: tem7a_v4_sprites_right;
  4: tem7a_v5_sprites_right;
     align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_left, (build_year >= 2008) + (build_year >= 2012) + (build_year >= 2050))
{
0: tem7a_b2008_sprites_left;
 1: tem7a_a2008_sprites_left;
 2: tem7a_a2012_sprites_left;
 tem7a_aGAMEEND_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_right, (build_year >= 2008) + (build_year >= 2012) + (build_year >= 2050))
{
0: tem7a_b2008_sprites_right;
 1: tem7a_a2008_sprites_right;
 2: tem7a_a2012_sprites_right;
 tem7a_aGAMEEND_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) || (position_in_consist == 0) ])
{
1: tem7a_sprites_left;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem7a) + 1) % 2))
{
1: tem7a_sprites_2l;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_old;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_16;
 tem7a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_14;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_12;
 tem7a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_10;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_8;
 tem7a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_6;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_sprites_4;
 tem7a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (3 + 1)) < 3])
{
1: tem7a_sprites_left;
 tem7a_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem7a_sprites_start_sp, count_veh_id(tem7a))
{
1: tem7a_sprites_1RND;
 tem7a_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem7a_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem7a_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem7a_sprites_parent, [ STORE_TEMP(count_veh_id(tem7a), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem7a_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem7a_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem7a_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem7a_aGAMEEND_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_GAMEEND, 1988);
  1: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1988, 2012, string(STR_REFIT_LV_RZD_PID));
  2: return string(STR_REFIT_GAMEEND, 2008);
  3: return string(STR_REFIT_GAMEEND_SP, 2008, string(STR_REFIT_RZD_TCHE_23_BEKASOVO_SORTIROVOCHNOE));
  4: return string(STR_REFIT_GAMEEND_SERVICE_SP, 2008, 2012, string(STR_REFIT_LV_RZD_PID));
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tem7a_b2008_cargo_subtype_text2, cargo_subtype)
{
34: return string(STR_REFIT_LV_RZD_PID);
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tem7a_b2008_cargo_subtype_text, (build_year >= 2009) || (current_year >= 2009))
{
1: tem7a_b2008_cargo_subtype_text2;
 return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, SELF, tem7a_a2008_alt_cargo_subtype_text, cargo_subtype)
{
34: general_cargo_subtype_text_LV_RZD_PID;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tem7a_a2008_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_RZD_TCHE_23_BEKASOVO_SORTIROVOCHNOE);
 tem7a_a2008_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tem7a_a2012_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_93);
 return string(STR_REFIT_LV_RZD_PID);
}
switch (FEAT_TRAINS, SELF, tem7a_cargo_subtype_text, (build_year >= 2008) + (build_year >= 2012) + (build_year >= 2050))
{
0: tem7a_b2008_cargo_subtype_text;
 1: tem7a_a2008_cargo_subtype_text;
 2: tem7a_a2012_cargo_subtype_text;
 tem7a_aGAMEEND_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 5, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) || (position_in_consist == 0) ])
{
1: tem7a_create_effect_sprites_left;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem7a) + 1) % 2))
{
1: tem7a_create_effect_sprites_2l;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_old;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_16;
 tem7a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_14;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_12;
 tem7a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_10;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_8;
 tem7a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_6;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem7a) ])
{
1: tem7a_create_effect_sprites_4;
 tem7a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem7a_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (3 + 1)) < 3])
{
1: tem7a_create_effect_sprites_left;
 tem7a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem7a_create_effect, count_veh_id(tem7a))
{
1: tem7a_create_effect_1RND;
 tem7a_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem7a_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem7a_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem7a), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem7a_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem7a), 0), STORE_TEMP(vehicle_type_id == tem7a, 1) ])
{ tem7a_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem7a_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem7a_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem7a_running_cost_factor,
[ STORE_TEMP(241, 0), // Моторы
   STORE_TEMP(34, 1), // Бригада
   STORE_TEMP(84, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(59, 4), // ТО
   STORE_TEMP(4, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(180, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 422
switch (FEAT_TRAINS, SELF, tem7a_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (1988 << 16), 0x101), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem7a_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem7a_additional_text, current_year <= 2023)
{
1: tem7a_additional_text_hidden;
 tem7a_additional_text_shown;
}
item (FEAT_TRAINS, tem7a, 405)
{
property
{
name: string(STR_NAME_TEM7A);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1988 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1988 -2050 -2 < retire_early_default ? 2050 -1988 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1988 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1988 -2050 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 56 > 255 ? 255 : 56;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1360 * 0.9865);
 weight: (180) ton;
 tractive_effort_coefficient: (((583.0))/((180))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tem7;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tem7a_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: tem7a_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem7a_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tem7a_create_effect;
                 default: tem7a_sprites;
                purchase: tem7a_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem7a_running_cost_factor;
                   speed: tem7a_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem7a)
{
property
{
name: string(STR_LONGNAME_TEM7A);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem7a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem7a)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem7a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem7a)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem7a)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem9
spriteset (tem9_purchase_graphics_ico, "src/diesel/tem9.png")
{
new_purchase_template(0, 0)
}
spriteset (tem9_purchase_graphics_noico, "src/diesel/tem9.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem9_purchase_sprites, enable_icons)
{
1: tem9_purchase_graphics_ico;
 tem9_purchase_graphics_noico;
}
spriteset (tem9_notpowered_sprites_left, "src/diesel/tem9.png")
{
s9_template(32, 40, 0)
}
spriteset (tem9_loading_sprites_left, "src/diesel/tem9.png")
{
s9_template(32, 40 +67, 0)
}
spriteset (tem9_traveling_sprites_left, "src/diesel/tem9.png")
{
s9_template(32, 40 +134, 0)
}
spritegroup tem9_normal_sprites_left
{
loading: tem9_loading_sprites_left;
 loaded: tem9_traveling_sprites_left;
}
spriteset (tem9_notpowered_sprites_right, "src/diesel/tem9.png")
{
s9_r_template(32, 40, 0)
}
spriteset (tem9_loading_sprites_right, "src/diesel/tem9.png")
{
s9_r_template(32 +415, 40 +67, 0)
}
spriteset (tem9_traveling_sprites_right, "src/diesel/tem9.png")
{
s9_r_template(32 +415, 40 +134, 0)
}
spritegroup tem9_normal_sprites_right
{
loading: tem9_loading_sprites_right;
 loaded: tem9_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem9_normal_sprites_left;
 tem9_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem9_normal_sprites_right;
 tem9_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem9_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem9_sprites_left2;
 1: tem9_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem9_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem9_sprites_left1;
 128: tem9_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem9_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem9_sprites_right2;
 1: tem9_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem9_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem9_sprites_right1;
 128: tem9_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) || (position_in_consist == 0) ])
{
1: tem9_sprites_left;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem9) + 1) % 2))
{
1: tem9_sprites_2l;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_old;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_16;
 tem9_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_14;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_12;
 tem9_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_10;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_8;
 tem9_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_6;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_sprites_4;
 tem9_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tem9_sprites_left;
 tem9_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem9_sprites_start_sp, count_veh_id(tem9))
{
1: tem9_sprites_1RND;
 tem9_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem9_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem9_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem9_sprites_parent, [ STORE_TEMP(count_veh_id(tem9), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem9_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem9_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem9_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem9_colour_mapping,
  cargo_subtype)
{
0: return tgm23_cc + 0;
  1: return tgm23_cc + 1;
  2: return tgm23_cc + 2;
  3: return tgm23_cc + 3;
  4: return tgm23_cc + 5;
  5: return tgm23_cc + 6;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tem9_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_TTD_63);
 3: return string(STR_REFIT_TTD_54);
 4: return string(STR_REFIT_TTD_93);
 5: return string(STR_REFIT_TTD_96);
 return string(STR_REFIT_TTD_B6);
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) || (position_in_consist == 0) ])
{
1: tem9_create_effect_sprites_left;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem9) + 1) % 2))
{
1: tem9_create_effect_sprites_2l;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_old;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_16;
 tem9_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_14;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_12;
 tem9_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_10;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_8;
 tem9_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_6;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem9) ])
{
1: tem9_create_effect_sprites_4;
 tem9_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem9_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tem9_create_effect_sprites_left;
 tem9_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem9_create_effect, count_veh_id(tem9))
{
1: tem9_create_effect_1RND;
 tem9_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem9_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem9_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem9), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem9_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem9), 0), STORE_TEMP(vehicle_type_id == tem9, 1) ])
{ tem9_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem9_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem9_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem9_running_cost_factor,
[ STORE_TEMP(111, 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(39, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(27, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(90, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 195
switch (FEAT_TRAINS, SELF, tem9_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2010 << 16), 0x101), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem9_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem9_additional_text, current_year <= 2023)
{
1: tem9_additional_text_hidden;
 tem9_additional_text_shown;
}
item (FEAT_TRAINS, tem9, 539)
{
property
{
name: string(STR_NAME_TEM9);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2010 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2010 -2050 -2 < retire_early_default ? 2050 -2010 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2010 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2010 -2050 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 26 > 255 ? 255 : 26;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (840 * 0.9865);
 weight: (90) ton;
 tractive_effort_coefficient: (((291.0))/((90))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem9_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tem9_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem9_cargo_subtype_text;
          colour_mapping: tem9_colour_mapping;
           create_effect: tem9_create_effect;
                 default: tem9_sprites;
                purchase: tem9_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem9_running_cost_factor;
                   speed: tem9_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem9)
{
property
{
name: string(STR_LONGNAME_TEM9);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem9)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem9)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem9)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem9)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem9)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem10
spriteset (tem10_purchase_graphics_ico, "src/diesel/tem10.png")
{
new_purchase_template(0, 0)
}
spriteset (tem10_purchase_graphics_noico, "src/diesel/tem10.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem10_purchase_sprites, enable_icons)
{
1: tem10_purchase_graphics_ico;
 tem10_purchase_graphics_noico;
}
spriteset (tem10_notpowered_sprites_left, "src/diesel/tem10.png")
{
s10_template(32, 40, 0)
}
spriteset (tem10_loading_sprites_left, "src/diesel/tem10.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tem10_traveling_sprites_left, "src/diesel/tem10.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tem10_normal_sprites_left
{
loading: tem10_loading_sprites_left;
 loaded: tem10_traveling_sprites_left;
}
spriteset (tem10_notpowered_sprites_right, "src/diesel/tem10.png")
{
s10_r_template(32, 40, 0)
}
spriteset (tem10_loading_sprites_right, "src/diesel/tem10.png")
{
s10_r_template(32 +415, 40 +67, 0)
}
spriteset (tem10_traveling_sprites_right, "src/diesel/tem10.png")
{
s10_r_template(32 +415, 40 +134, 0)
}
spritegroup tem10_normal_sprites_right
{
loading: tem10_loading_sprites_right;
 loaded: tem10_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem10_normal_sprites_left;
 tem10_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem10_normal_sprites_right;
 tem10_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem10_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem10_sprites_left2;
 1: tem10_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem10_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem10_sprites_left1;
 128: tem10_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem10_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem10_sprites_right2;
 1: tem10_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem10_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem10_sprites_right1;
 128: tem10_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) || (position_in_consist == 0) ])
{
1: tem10_sprites_left;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem10) + 1) % 2))
{
1: tem10_sprites_2l;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_old;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_16;
 tem10_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_14;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_12;
 tem10_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_10;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_8;
 tem10_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_6;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_sprites_4;
 tem10_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tem10_sprites_left;
 tem10_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem10_sprites_start_sp, count_veh_id(tem10))
{
1: tem10_sprites_1RND;
 tem10_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem10_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem10_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem10_sprites_parent, [ STORE_TEMP(count_veh_id(tem10), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem10_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem10_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem10_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem10_colour_mapping,
  cargo_subtype)
{
0: return tgm23_cc + 0;
  1: return tgm23_cc + 1;
  2: return tgm23_cc + 2;
  3: return tgm23_cc + 3;
  4: return tgm23_cc + 5;
  5: return tgm23_cc + 6;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tem10_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_TTD_63);
 3: return string(STR_REFIT_TTD_54);
 4: return string(STR_REFIT_TTD_93);
 5: return string(STR_REFIT_TTD_96);
 return string(STR_REFIT_TTD_B6);
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_left, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -2, 0, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_right, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) || (position_in_consist == 0) ])
{
1: tem10_create_effect_sprites_left;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem10) + 1) % 2))
{
1: tem10_create_effect_sprites_2l;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_old;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_16;
 tem10_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_14;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_12;
 tem10_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_10;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_8;
 tem10_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_6;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem10) ])
{
1: tem10_create_effect_sprites_4;
 tem10_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem10_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tem10_create_effect_sprites_left;
 tem10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem10_create_effect, count_veh_id(tem10))
{
1: tem10_create_effect_1RND;
 tem10_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem10_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem10_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem10), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem10_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem10), 0), STORE_TEMP(vehicle_type_id == tem10, 1) ])
{ tem10_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem10_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem10_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem10_running_cost_factor,
[ STORE_TEMP(95, 0), // Моторы
   STORE_TEMP(16, 1), // Бригада
   STORE_TEMP(50, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(37, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(90, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 194 (200)
switch (FEAT_TRAINS, SELF, tem10_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2019 << 16), 0x101), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem10_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem10_additional_text, current_year <= 2023)
{
1: tem10_additional_text_hidden;
 tem10_additional_text_shown;
}
item (FEAT_TRAINS, tem10, 728)
{
property
{
name: string(STR_NAME_TEM10);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2019 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2019 -2050 -2 < retire_early_default ? 2050 -2019 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2019 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2019 -2050 -1+retire_late_default;
 vehicle_life: 27;
 reliability_decay: 10;
 cost_factor: 25 > 255 ? 255 : 25;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (790 * 0.9865);
 weight: (90) ton;
 tractive_effort_coefficient: (((291.0))/((90))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem10_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tem10_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tem10_cargo_subtype_text;
          colour_mapping: tem10_colour_mapping;
           create_effect: tem10_create_effect;
                 default: tem10_sprites;
                purchase: tem10_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem10_running_cost_factor;
                   speed: tem10_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem10)
{
property
{
name: string(STR_LONGNAME_TEM10);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem10)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem10)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem10)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tem14
spriteset (tem14_purchase_graphics_ico, "src/diesel/tem14.png")
{
new_purchase_template(0, 0)
}
spriteset (tem14_purchase_graphics_noico, "src/diesel/tem14.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tem14_purchase_sprites, enable_icons)
{
1: tem14_purchase_graphics_ico;
 tem14_purchase_graphics_noico;
}
spriteset (tem14_notpowered_sprites_left, "src/diesel/tem14.png")
{
s12_template(32, 40, 0)
}
spriteset (tem14_loading_sprites_left, "src/diesel/tem14.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tem14_traveling_sprites_left, "src/diesel/tem14.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tem14_normal_sprites_left
{
loading: tem14_loading_sprites_left;
 loaded: tem14_traveling_sprites_left;
}
spriteset (tem14_notpowered_sprites_right, "src/diesel/tem14.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tem14_loading_sprites_right, "src/diesel/tem14.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tem14_traveling_sprites_right, "src/diesel/tem14.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tem14_normal_sprites_right
{
loading: tem14_loading_sprites_right;
 loaded: tem14_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem14_normal_sprites_left;
 tem14_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tem14_normal_sprites_right;
 tem14_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tem14_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem14_sprites_left2;
 1: tem14_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tem14_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem14_sprites_left1;
 128: tem14_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tem14_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tem14_sprites_right2;
 1: tem14_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tem14_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tem14_sprites_right1;
 128: tem14_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) || (position_in_consist == 0) ])
{
1: tem14_sprites_left;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem14) + 1) % 2))
{
1: tem14_sprites_2l;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_old;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_16;
 tem14_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_14;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_12;
 tem14_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_10;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_8;
 tem14_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_6;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_sprites_4;
 tem14_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tem14_sprites_left;
 tem14_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem14_sprites_start_sp, count_veh_id(tem14))
{
1: tem14_sprites_1RND;
 tem14_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem14_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tem14_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tem14_sprites_parent, [ STORE_TEMP(count_veh_id(tem14), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tem14_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tem14_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tem14_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_left, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 12), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_right, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 6, 0, 12), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) || (position_in_consist == 0) ])
{
1: tem14_create_effect_sprites_left;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tem14) + 1) % 2))
{
1: tem14_create_effect_sprites_2l;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_old;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_16;
 tem14_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_14;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_12;
 tem14_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_10;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_8;
 tem14_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_6;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tem14) ])
{
1: tem14_create_effect_sprites_4;
 tem14_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tem14_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tem14_create_effect_sprites_left;
 tem14_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tem14_create_effect, count_veh_id(tem14))
{
1: tem14_create_effect_1RND;
 tem14_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tem14_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 100 * (100 - speed_penalty_percent) / 100 : 100)
{ return; }
switch (FEAT_TRAINS, SELF, tem14_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tem14), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tem14_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tem14), 0), STORE_TEMP(vehicle_type_id == tem14, 1) ])
{ tem14_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tem14_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tem14_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tem14_running_cost_factor,
[ STORE_TEMP(281, 0), // Моторы
   STORE_TEMP(39, 1), // Бригада
   STORE_TEMP(99, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(69, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(100, 6), // Скорость
   STORE_TEMP(200, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 493
switch (FEAT_TRAINS, SELF, tem14_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2012 << 16), 0x101), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tem14_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tem14_additional_text, current_year <= 2023)
{
1: tem14_additional_text_hidden;
 tem14_additional_text_shown;
}
item (FEAT_TRAINS, tem14, 606)
{
property
{
name: string(STR_NAME_TEM14);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2012 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2012 -2050 -2 < retire_early_default ? 2050 -2012 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2012 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2012 -2050 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 65 > 255 ? 255 : 65;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (1711 * 0.9865);
 weight: (200) ton;
 tractive_effort_coefficient: (((582.0))/((200))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tem14_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: tem14_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: tem14_create_effect;
                 default: tem14_sprites;
                purchase: tem14_purchase_sprites;
          purchase_speed: return 100;
     running_cost_factor: tem14_running_cost_factor;
                   speed: tem14_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tem14)
{
property
{
name: string(STR_LONGNAME_TEM14);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tem14)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tem14)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tem14)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tem14)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tem14)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep10
spriteset (tep10_purchase_graphics_ico, "src/diesel/tep10.png")
{
new_purchase_template(0, 0)
}
spriteset (tep10_purchase_graphics_noico, "src/diesel/tep10.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep10_purchase_sprites, enable_icons)
{
1: tep10_purchase_graphics_ico;
 tep10_purchase_graphics_noico;
}
spriteset (tep10_v1_notpowered_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 40, 0)
}
spriteset (tep10_v1_loading_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (tep10_v1_traveling_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup tep10_v1_normal_sprites_left
{
loading: tep10_v1_loading_sprites_left;
 loaded: tep10_v1_traveling_sprites_left;
}
spriteset (tep10_v1_sprites_right, "src/diesel/tep10.png")
{
s11_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, tep10_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10_v1_normal_sprites_left;
 tep10_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10_v1_sprites_left2;
 1: tep10_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10_v1_sprites_left1;
 128: tep10_v1_sprites_left1;
}
spriteset (tep10_v2_notpowered_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 241, 0)
}
spriteset (tep10_v2_loading_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (tep10_v2_traveling_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup tep10_v2_normal_sprites_left
{
loading: tep10_v2_loading_sprites_left;
 loaded: tep10_v2_traveling_sprites_left;
}
spriteset (tep10_v2_sprites_right, "src/diesel/tep10.png")
{
s11_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, tep10_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10_v2_normal_sprites_left;
 tep10_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10_v2_sprites_left2;
 1: tep10_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10_v2_sprites_left1;
 128: tep10_v2_sprites_left1;
}
spriteset (tep10_v3_notpowered_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 442, 0)
}
spriteset (tep10_v3_loading_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 442 +67, 0)
}
spriteset (tep10_v3_traveling_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 442 +134, 0)
}
spritegroup tep10_v3_normal_sprites_left
{
loading: tep10_v3_loading_sprites_left;
 loaded: tep10_v3_traveling_sprites_left;
}
spriteset (tep10_v3_sprites_right, "src/diesel/tep10.png")
{
s11_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, tep10_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10_v3_normal_sprites_left;
 tep10_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10_v3_sprites_left2;
 1: tep10_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10_v3_sprites_left1;
 128: tep10_v3_sprites_left1;
}
spriteset (tep10_v4_notpowered_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 643, 0)
}
spriteset (tep10_v4_loading_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 643 +67, 0)
}
spriteset (tep10_v4_traveling_sprites_left, "src/diesel/tep10.png")
{
s11_template(32, 643 +134, 0)
}
spritegroup tep10_v4_normal_sprites_left
{
loading: tep10_v4_loading_sprites_left;
 loaded: tep10_v4_traveling_sprites_left;
}
spriteset (tep10_v4_sprites_right, "src/diesel/tep10.png")
{
s11_r_template(32, 643, 0)
}
switch (FEAT_TRAINS, SELF, tep10_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10_v4_normal_sprites_left;
 tep10_v4_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10_v4_sprites_left2;
 1: tep10_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10_v4_sprites_left1;
 128: tep10_v4_sprites_left1;
}
switch (FEAT_TRAINS, SELF, tep10_sprites_left2,
  cargo_subtype)
{
0: tep10_v2_sprites_left;
           1: tep10_v4_sprites_left;
  15: tep10_v3_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep10_sprites_left,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep10_v1_sprites_left;
     tep10_sprites_left2;
}
switch (FEAT_TRAINS, SELF, tep10_sprites_right2,
  cargo_subtype)
{
0: tep10_v2_sprites_right;
           1: tep10_v4_sprites_right;
  15: tep10_v3_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep10_sprites_right,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep10_v1_sprites_right;
     tep10_sprites_right2;
}
switch (FEAT_TRAINS, SELF, tep10_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep10_sprites_left;
 tep10_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep10_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tep10_sprites_parent, [ STORE_TEMP(count_veh_id(tep10), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep10_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep10_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep10_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep10_aGREAT_CHANGE_YEAR_alt_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep10_aGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 tep10_aGREAT_CHANGE_YEAR_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep10_cargo_subtype_text, ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: return CB_RESULT_NO_TEXT;
 tep10_aGREAT_CHANGE_YEAR_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep10_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep10_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep10_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 5)) < 5])
{
1: tep10_create_effect_sprites_left;
 tep10_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10_speed, [ STORE_TEMP((age_in_days >= (25 * 365 + 25 / 4)) ? 120 : 140, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, tep10_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tep10), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep10_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tep10), 0), STORE_TEMP(vehicle_type_id == tep10, 1) ])
{ tep10_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tep10_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tep10_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tep10_power, build_year >= 1964)
{
1: return int (2333 * 0.9865);
 return int (2293 * 0.9865);
}
switch (FEAT_TRAINS, SELF, tep10_running_cost_factor,
[ STORE_TEMP(262 + 2 * (build_year >= 1964), 0), // Моторы
   STORE_TEMP(37, 1), // Бригада
   STORE_TEMP(92 + (build_year >= 1964), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(64 + (build_year >= 1964), 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(140, 6), // Скорость
   STORE_TEMP(129, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 460-464
switch (FEAT_TRAINS, SELF, tep10_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1968 | ((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep10_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1928 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV) : (current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1928) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_KHARKIV_A1957) : string(STR_PURCHASE_HINT_FACTORY_KHARKIV_AUSSR)))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep10_additional_text, current_year <= 1968)
{
1: tep10_additional_text_hidden;
 tep10_additional_text_shown;
}
item (FEAT_TRAINS, tep10, 150)
{
property
{
name: string(STR_NAME_TEP10);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1960 - delta_age, 1, 1);
 model_life: 1968 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1960 -1968 -2 < retire_early_default ? 1968 -1960 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1960 -1968 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1960 -1968 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 47 > 255 ? 255 : 47;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2293 * 0.9865);
 weight: (129) ton;
 tractive_effort_coefficient: (((333.4))/((129))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tep10_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: tep10_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tep10_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tep10_create_effect;
                 default: tep10_sprites;
                   power: tep10_power;
                purchase: tep10_purchase_sprites;
          purchase_speed: return 140;
     running_cost_factor: tep10_running_cost_factor;
                   speed: tep10_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep10)
{
property
{
name: string(STR_LONGNAME_TEP10);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep10)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep10)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep10)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep10)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep10l
spriteset (tep10l_purchase_graphics_ico, "src/diesel/tep10l.png")
{
new_purchase_template(0, 0)
}
spriteset (tep10l_purchase_graphics_noico, "src/diesel/tep10l.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep10l_purchase_sprites, enable_icons)
{
1: tep10l_purchase_graphics_ico;
 tep10l_purchase_graphics_noico;
}
spriteset (tep10l_v1_notpowered_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 40, 0)
}
spriteset (tep10l_v1_loading_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 40 +67, 0)
}
spriteset (tep10l_v1_traveling_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 40 +134, 0)
}
spritegroup tep10l_v1_normal_sprites_left
{
loading: tep10l_v1_loading_sprites_left;
 loaded: tep10l_v1_traveling_sprites_left;
}
spriteset (tep10l_v1_sprites_right, "src/diesel/tep10l.png")
{
s10_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, tep10l_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10l_v1_normal_sprites_left;
 tep10l_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10l_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10l_v1_sprites_left2;
 1: tep10l_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10l_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10l_v1_sprites_left1;
 128: tep10l_v1_sprites_left1;
}
spriteset (tep10l_v2_notpowered_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 241, 0)
}
spriteset (tep10l_v2_loading_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 241 +67, 0)
}
spriteset (tep10l_v2_traveling_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 241 +134, 0)
}
spritegroup tep10l_v2_normal_sprites_left
{
loading: tep10l_v2_loading_sprites_left;
 loaded: tep10l_v2_traveling_sprites_left;
}
spriteset (tep10l_v2_sprites_right, "src/diesel/tep10l.png")
{
s10_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, tep10l_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10l_v2_normal_sprites_left;
 tep10l_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10l_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10l_v2_sprites_left2;
 1: tep10l_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10l_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10l_v2_sprites_left1;
 128: tep10l_v2_sprites_left1;
}
spriteset (tep10l_v3_notpowered_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 442, 0)
}
spriteset (tep10l_v3_loading_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 442 +67, 0)
}
spriteset (tep10l_v3_traveling_sprites_left, "src/diesel/tep10l.png")
{
s10_template(32, 442 +134, 0)
}
spritegroup tep10l_v3_normal_sprites_left
{
loading: tep10l_v3_loading_sprites_left;
 loaded: tep10l_v3_traveling_sprites_left;
}
spriteset (tep10l_v3_sprites_right, "src/diesel/tep10l.png")
{
s10_r_template(32, 442, 0)
}
switch (FEAT_TRAINS, SELF, tep10l_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep10l_v3_normal_sprites_left;
 tep10l_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tep10l_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep10l_v3_sprites_left2;
 1: tep10l_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep10l_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep10l_v3_sprites_left1;
 128: tep10l_v3_sprites_left1;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_left2,
  cargo_subtype)
{
0: tep10l_v1_sprites_left;
  15: tep10l_v2_sprites_left;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_left,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep10l_sprites_left2;
     tep10l_v3_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_right2,
  cargo_subtype)
{
0: tep10l_v1_sprites_right;
  15: tep10l_v2_sprites_right;
  align_10_sprites;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_right,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep10l_sprites_right2;
     tep10l_v3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) || (position_in_consist == 0) ])
{
1: tep10l_sprites_left;
 tep10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep10l) + 1) % 2))
{
1: tep10l_sprites_2l;
 tep10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_old;
 tep10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_16;
 tep10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_14;
 tep10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_12;
 tep10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_10;
 tep10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_8;
 tep10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_6;
 tep10l_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_sprites_4;
 tep10l_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep10l_sprites_start; }
switch (FEAT_TRAINS, PARENT, tep10l_sprites_parent, [ STORE_TEMP(count_veh_id(tep10l), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep10l_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep10l_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep10l_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep10l_bGREAT_CHANGE_YEAR_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep10l_cargo_subtype_text, ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep10l_bGREAT_CHANGE_YEAR_cargo_subtype_text;
 return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) || (position_in_consist == 0) ])
{
1: tep10l_create_effect_sprites_left;
 tep10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep10l) + 1) % 2))
{
1: tep10l_create_effect_sprites_2l;
 tep10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_old;
 tep10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_16;
 tep10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_14;
 tep10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_12;
 tep10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_10;
 tep10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_8;
 tep10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_6;
 tep10l_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep10l_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep10l) ])
{
1: tep10l_create_effect_sprites_4;
 tep10l_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep10l_speed, [ STORE_TEMP((age_in_days >= (25 * 365 + 25 / 4)) ? 120 : 140, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, tep10l_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tep10l), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep10l_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tep10l), 0), STORE_TEMP(vehicle_type_id == tep10l, 1) ])
{ tep10l_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tep10l_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tep10l_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tep10l_running_cost_factor,
[ STORE_TEMP(262, 0), // Моторы
   STORE_TEMP(37, 1), // Бригада
   STORE_TEMP(92, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(64, 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(140, 6), // Скорость
   STORE_TEMP(128, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 459
switch (FEAT_TRAINS, SELF, tep10l_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1964 << 16), 0x101), STORE_TEMP(1967 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep10l_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep10l_additional_text, current_year <= 1967)
{
1: tep10l_additional_text_hidden;
 tep10l_additional_text_shown;
}
item (FEAT_TRAINS, tep10l, 153)
{
property
{
name: string(STR_NAME_TEP10L);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1964 - delta_age, 1, 1);
 model_life: 1967 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1964 -1967 -2 < retire_early_default ? 1967 -1964 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1964 -1967 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1964 -1967 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 47 > 255 ? 255 : 47;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2290 * 0.9865);
 weight: (128) ton;
 tractive_effort_coefficient: (((333.4))/((128))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tep10l_additional_text;
        articulated_part: articulated_part_dummy2;
    bitmask_vehicle_info: tep10l_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tep10l_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tep10l_create_effect_sprites_start;
                 default: tep10l_sprites;
                purchase: tep10l_purchase_sprites;
          purchase_speed: return 140;
     running_cost_factor: tep10l_running_cost_factor;
                   speed: tep10l_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep10l)
{
property
{
name: string(STR_LONGNAME_TEP10L);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep10l)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep10l)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep10l)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep10l)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep10l)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep60
spriteset (tep60_v1_purchase_graphics_ico, "src/diesel/tep60-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (tep60_v1_purchase_graphics_noico, "src/diesel/tep60-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep60_v1_purchase_sprites, enable_icons)
{
1: tep60_v1_purchase_graphics_ico;
 tep60_v1_purchase_graphics_noico;
}
spriteset (tep60_v1_notpowered_sprites_left, "src/diesel/tep60-pre.png")
{
s11_template(32, 40, 0)
}
spriteset (tep60_v1_loading_sprites_left, "src/diesel/tep60-pre.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (tep60_v1_traveling_sprites_left, "src/diesel/tep60-pre.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup tep60_v1_normal_sprites_left
{
loading: tep60_v1_loading_sprites_left;
 loaded: tep60_v1_traveling_sprites_left;
}
spriteset (tep60_v1_notpowered_sprites_right, "src/diesel/tep60-pre.png")
{
s11_r_template(32, 40, 0)
}
spriteset (tep60_v1_loading_sprites_right, "src/diesel/tep60-pre.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (tep60_v1_traveling_sprites_right, "src/diesel/tep60-pre.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup tep60_v1_normal_sprites_right
{
loading: tep60_v1_loading_sprites_right;
 loaded: tep60_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v1_normal_sprites_left;
 tep60_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v1_normal_sprites_right;
 tep60_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v1_sprites_left2;
 1: tep60_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v1_sprites_left1;
 128: tep60_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v1_sprites_right2;
 1: tep60_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v1_sprites_right1;
 128: tep60_v1_sprites_right1;
}
spriteset (tep60_v2_purchase_graphics_ico, "src/diesel/tep60.png")
{
new_purchase_template(0, 0)
}
spriteset (tep60_v2_purchase_graphics_noico, "src/diesel/tep60.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep60_v2_purchase_sprites, enable_icons)
{
1: tep60_v2_purchase_graphics_ico;
 tep60_v2_purchase_graphics_noico;
}
spriteset (tep60_a1962_b1963_notpowered_sprites_left, "src/diesel/tep60.png")
{
s11_template(32, 40, 0)
}
spriteset (tep60_a1962_b1963_loading_sprites_left, "src/diesel/tep60.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (tep60_a1962_b1963_traveling_sprites_left, "src/diesel/tep60.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup tep60_a1962_b1963_normal_sprites_left
{
loading: tep60_a1962_b1963_loading_sprites_left;
 loaded: tep60_a1962_b1963_traveling_sprites_left;
}
spriteset (tep60_a1962_b1963_notpowered_sprites_right, "src/diesel/tep60.png")
{
s11_r_template(32, 40, 0)
}
spriteset (tep60_a1962_b1963_loading_sprites_right, "src/diesel/tep60.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (tep60_a1962_b1963_traveling_sprites_right, "src/diesel/tep60.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup tep60_a1962_b1963_normal_sprites_right
{
loading: tep60_a1962_b1963_loading_sprites_right;
 loaded: tep60_a1962_b1963_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_a1962_b1963_normal_sprites_left;
 tep60_a1962_b1963_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_a1962_b1963_normal_sprites_right;
 tep60_a1962_b1963_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_a1962_b1963_sprites_left2;
 1: tep60_a1962_b1963_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_a1962_b1963_sprites_left1;
 128: tep60_a1962_b1963_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_a1962_b1963_sprites_right2;
 1: tep60_a1962_b1963_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_a1962_b1963_sprites_right1;
 128: tep60_a1962_b1963_sprites_right1;
}
spriteset (tep60_v3_purchase_graphics_ico, "src/diesel/tep60-a1963.png")
{
new_purchase_template(0, 0)
}
spriteset (tep60_v3_purchase_graphics_noico, "src/diesel/tep60-a1963.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep60_v3_purchase_sprites, enable_icons)
{
1: tep60_v3_purchase_graphics_ico;
 tep60_v3_purchase_graphics_noico;
}
spriteset (tep60_v3_notpowered_sprites_left, "src/diesel/tep60-a1963.png")
{
s11_template(32, 40, 0)
}
spriteset (tep60_v3_loading_sprites_left, "src/diesel/tep60-a1963.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (tep60_v3_traveling_sprites_left, "src/diesel/tep60-a1963.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup tep60_v3_normal_sprites_left
{
loading: tep60_v3_loading_sprites_left;
 loaded: tep60_v3_traveling_sprites_left;
}
spriteset (tep60_v3_notpowered_sprites_right, "src/diesel/tep60-a1963.png")
{
s11_r_template(32, 40, 0)
}
spriteset (tep60_v3_loading_sprites_right, "src/diesel/tep60-a1963.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (tep60_v3_traveling_sprites_right, "src/diesel/tep60-a1963.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup tep60_v3_normal_sprites_right
{
loading: tep60_v3_loading_sprites_right;
 loaded: tep60_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v3_normal_sprites_left;
 tep60_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v3_normal_sprites_right;
 tep60_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v3_sprites_left2;
 1: tep60_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v3_sprites_left1;
 128: tep60_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v3_sprites_right2;
 1: tep60_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v3_sprites_right1;
 128: tep60_v3_sprites_right1;
}
spriteset (tep60_v4_notpowered_sprites_left, "src/diesel/tep60-a1963.png")
{
s11_template(32, 241, 0)
}
spriteset (tep60_v4_loading_sprites_left, "src/diesel/tep60-a1963.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (tep60_v4_traveling_sprites_left, "src/diesel/tep60-a1963.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup tep60_v4_normal_sprites_left
{
loading: tep60_v4_loading_sprites_left;
 loaded: tep60_v4_traveling_sprites_left;
}
spriteset (tep60_v4_notpowered_sprites_right, "src/diesel/tep60-a1963.png")
{
s11_r_template(32, 241, 0)
}
spriteset (tep60_v4_loading_sprites_right, "src/diesel/tep60-a1963.png")
{
s11_r_template(32 +415, 241 +67, 0)
}
spriteset (tep60_v4_traveling_sprites_right, "src/diesel/tep60-a1963.png")
{
s11_r_template(32 +415, 241 +134, 0)
}
spritegroup tep60_v4_normal_sprites_right
{
loading: tep60_v4_loading_sprites_right;
 loaded: tep60_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v4_normal_sprites_left;
 tep60_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v4_normal_sprites_right;
 tep60_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v4_sprites_left2;
 1: tep60_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v4_sprites_left1;
 128: tep60_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v4_sprites_right2;
 1: tep60_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v4_sprites_right1;
 128: tep60_v4_sprites_right1;
}
spriteset (tep60_v4_purchase_graphics_ico, "src/diesel/tep60-a1965.png")
{
new_purchase_template(0, 0)
}
spriteset (tep60_v4_purchase_graphics_noico, "src/diesel/tep60-a1965.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep60_v4_purchase_sprites, enable_icons)
{
1: tep60_v4_purchase_graphics_ico;
 tep60_v4_purchase_graphics_noico;
}
spriteset (tep60_a1962_a1965_notpowered_sprites_left, "src/diesel/tep60-a1965.png")
{
s11_template(32, 40, 0)
}
spriteset (tep60_a1962_a1965_loading_sprites_left, "src/diesel/tep60-a1965.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (tep60_a1962_a1965_traveling_sprites_left, "src/diesel/tep60-a1965.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup tep60_a1962_a1965_normal_sprites_left
{
loading: tep60_a1962_a1965_loading_sprites_left;
 loaded: tep60_a1962_a1965_traveling_sprites_left;
}
spriteset (tep60_a1962_a1965_notpowered_sprites_right, "src/diesel/tep60-a1965.png")
{
s11_r_template(32, 40, 0)
}
spriteset (tep60_a1962_a1965_loading_sprites_right, "src/diesel/tep60-a1965.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (tep60_a1962_a1965_traveling_sprites_right, "src/diesel/tep60-a1965.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup tep60_a1962_a1965_normal_sprites_right
{
loading: tep60_a1962_a1965_loading_sprites_right;
 loaded: tep60_a1962_a1965_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_a1962_a1965_normal_sprites_left;
 tep60_a1962_a1965_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_a1962_a1965_normal_sprites_right;
 tep60_a1962_a1965_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_a1962_a1965_sprites_left2;
 1: tep60_a1962_a1965_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_a1962_a1965_sprites_left1;
 128: tep60_a1962_a1965_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_a1962_a1965_sprites_right2;
 1: tep60_a1962_a1965_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_a1962_a1965_sprites_right1;
 128: tep60_a1962_a1965_sprites_right1;
}
spriteset (tep60_v5_purchase_graphics_ico, "src/diesel/tep60-a1966.png")
{
new_purchase_template(0, 0)
}
spriteset (tep60_v5_purchase_graphics_noico, "src/diesel/tep60-a1966.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep60_v5_purchase_sprites, enable_icons)
{
1: tep60_v5_purchase_graphics_ico;
 tep60_v5_purchase_graphics_noico;
}
spriteset (tep60_v6_purchase_graphics_ico, "src/diesel/tep60-a1966.png")
{
new_purchase_template(100, 0)
}
spriteset (tep60_v6_purchase_graphics_noico, "src/diesel/tep60-a1966.png")
{
new_purchase_template_noico(100, 0)
}
switch (FEAT_TRAINS, SELF, tep60_v6_purchase_sprites, enable_icons)
{
1: tep60_v6_purchase_graphics_ico;
 tep60_v6_purchase_graphics_noico;
}
spriteset (tep60_v6_notpowered_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 40, 0)
}
spriteset (tep60_v6_loading_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 40 +67, 0)
}
spriteset (tep60_v6_traveling_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 40 +134, 0)
}
spritegroup tep60_v6_normal_sprites_left
{
loading: tep60_v6_loading_sprites_left;
 loaded: tep60_v6_traveling_sprites_left;
}
spriteset (tep60_v6_notpowered_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32, 40, 0)
}
spriteset (tep60_v6_loading_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 40 +67, 0)
}
spriteset (tep60_v6_traveling_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 40 +134, 0)
}
spritegroup tep60_v6_normal_sprites_right
{
loading: tep60_v6_loading_sprites_right;
 loaded: tep60_v6_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v6_normal_sprites_left;
 tep60_v6_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v6_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v6_normal_sprites_right;
 tep60_v6_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v6_sprites_left2;
 1: tep60_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v6_sprites_left1;
 128: tep60_v6_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v6_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v6_sprites_right2;
 1: tep60_v6_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v6_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v6_sprites_right1;
 128: tep60_v6_sprites_right1;
}
spriteset (tep60_v7_notpowered_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 241, 0)
}
spriteset (tep60_v7_loading_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 241 +67, 0)
}
spriteset (tep60_v7_traveling_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 241 +134, 0)
}
spritegroup tep60_v7_normal_sprites_left
{
loading: tep60_v7_loading_sprites_left;
 loaded: tep60_v7_traveling_sprites_left;
}
spriteset (tep60_v7_notpowered_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32, 241, 0)
}
spriteset (tep60_v7_loading_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 241 +67, 0)
}
spriteset (tep60_v7_traveling_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 241 +134, 0)
}
spritegroup tep60_v7_normal_sprites_right
{
loading: tep60_v7_loading_sprites_right;
 loaded: tep60_v7_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v7_normal_sprites_left;
 tep60_v7_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v7_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v7_normal_sprites_right;
 tep60_v7_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v7_sprites_left2;
 1: tep60_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v7_sprites_left1;
 128: tep60_v7_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v7_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v7_sprites_right2;
 1: tep60_v7_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v7_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v7_sprites_right1;
 128: tep60_v7_sprites_right1;
}
spriteset (tep60_v8_notpowered_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 442, 0)
}
spriteset (tep60_v8_loading_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 442 +67, 0)
}
spriteset (tep60_v8_traveling_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 442 +134, 0)
}
spritegroup tep60_v8_normal_sprites_left
{
loading: tep60_v8_loading_sprites_left;
 loaded: tep60_v8_traveling_sprites_left;
}
spriteset (tep60_v8_notpowered_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32, 442, 0)
}
spriteset (tep60_v8_loading_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 442 +67, 0)
}
spriteset (tep60_v8_traveling_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 442 +134, 0)
}
spritegroup tep60_v8_normal_sprites_right
{
loading: tep60_v8_loading_sprites_right;
 loaded: tep60_v8_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v8_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v8_normal_sprites_left;
 tep60_v8_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v8_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v8_normal_sprites_right;
 tep60_v8_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v8_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v8_sprites_left2;
 1: tep60_v8_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v8_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v8_sprites_left1;
 128: tep60_v8_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v8_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v8_sprites_right2;
 1: tep60_v8_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v8_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v8_sprites_right1;
 128: tep60_v8_sprites_right1;
}
spriteset (tep60_v9_notpowered_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 643, 0)
}
spriteset (tep60_v9_loading_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 643 +67, 0)
}
spriteset (tep60_v9_traveling_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 643 +134, 0)
}
spritegroup tep60_v9_normal_sprites_left
{
loading: tep60_v9_loading_sprites_left;
 loaded: tep60_v9_traveling_sprites_left;
}
spriteset (tep60_v9_notpowered_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32, 643, 0)
}
spriteset (tep60_v9_loading_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 643 +67, 0)
}
spriteset (tep60_v9_traveling_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 643 +134, 0)
}
spritegroup tep60_v9_normal_sprites_right
{
loading: tep60_v9_loading_sprites_right;
 loaded: tep60_v9_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v9_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v9_normal_sprites_left;
 tep60_v9_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v9_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v9_normal_sprites_right;
 tep60_v9_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v9_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v9_sprites_left2;
 1: tep60_v9_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v9_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v9_sprites_left1;
 128: tep60_v9_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v9_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v9_sprites_right2;
 1: tep60_v9_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v9_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v9_sprites_right1;
 128: tep60_v9_sprites_right1;
}
spriteset (tep60_v10_notpowered_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 844, 0)
}
spriteset (tep60_v10_loading_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 844 +67, 0)
}
spriteset (tep60_v10_traveling_sprites_left, "src/diesel/tep60-a1966.png")
{
s11_template(32, 844 +134, 0)
}
spritegroup tep60_v10_normal_sprites_left
{
loading: tep60_v10_loading_sprites_left;
 loaded: tep60_v10_traveling_sprites_left;
}
spriteset (tep60_v10_notpowered_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32, 844, 0)
}
spriteset (tep60_v10_loading_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 844 +67, 0)
}
spriteset (tep60_v10_traveling_sprites_right, "src/diesel/tep60-a1966.png")
{
s11_r_template(32 +415, 844 +134, 0)
}
spritegroup tep60_v10_normal_sprites_right
{
loading: tep60_v10_loading_sprites_right;
 loaded: tep60_v10_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_v10_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v10_normal_sprites_left;
 tep60_v10_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_v10_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep60_v10_normal_sprites_right;
 tep60_v10_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep60_v10_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v10_sprites_left2;
 1: tep60_v10_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v10_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v10_sprites_left1;
 128: tep60_v10_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep60_v10_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep60_v10_sprites_right2;
 1: tep60_v10_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep60_v10_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep60_v10_sprites_right1;
 128: tep60_v10_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tep60_purchase_sprites, (current_year >= 1962) + (current_year >= 1963) + (current_year >= 1965) + (current_year >= 1966) + (current_year >= 1972))
{
0: tep60_v1_purchase_sprites;
 1: tep60_v2_purchase_sprites;
 2: tep60_v3_purchase_sprites;
 3: tep60_v4_purchase_sprites;
 4: tep60_v5_purchase_sprites;
 tep60_v6_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1963_sprites_left,
  cargo_subtype)
{
0: tep60_v3_sprites_left;
  1: tep60_v4_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_left_red,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep60_v6_sprites_left;
     tep60_v8_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_left_brown,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep60_v7_sprites_left;
     tep60_v9_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1966_sprites_left,
  cargo_subtype)
{
0: tep60_sprites_left_red;
                       1: tep60_sprites_left_brown;
  29: tep60_v10_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_aGAMEEND_sprites_left,
  cargo_subtype)
{
0: tep60_v1_sprites_left;
  1: tep60_a1962_b1963_sprites_left;
  2: tep60_v3_sprites_left;
  3: tep60_v4_sprites_left;
  4: tep60_a1962_a1965_sprites_left;
  5: tep60_v6_sprites_left;
  6: tep60_v7_sprites_left;
  7: tep60_v8_sprites_left;
  8: tep60_v9_sprites_left;
  9: tep60_v10_sprites_left;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1963_sprites_right,
  cargo_subtype)
{
0: tep60_v3_sprites_right;
  1: tep60_v4_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_right_red,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep60_v6_sprites_right;
     tep60_v8_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_right_brown,
  ((build_year >= 1972) || (date_of_last_service >= date(1972,1,1))))
{
0: tep60_v7_sprites_right;
     tep60_v9_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1966_sprites_right,
  cargo_subtype)
{
0: tep60_sprites_right_red;
                       1: tep60_sprites_right_brown;
  29: tep60_v10_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_aGAMEEND_sprites_right,
  cargo_subtype)
{
0: tep60_v1_sprites_right;
  1: tep60_a1962_b1963_sprites_right;
  2: tep60_v3_sprites_right;
  3: tep60_v4_sprites_right;
  4: tep60_a1962_a1965_sprites_right;
  5: tep60_v6_sprites_right;
  6: tep60_v7_sprites_right;
  7: tep60_v8_sprites_right;
  8: tep60_v9_sprites_right;
  9: tep60_v10_sprites_right;
     align_11_sprites;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_sprites_left, (build_year >= 1963) + (build_year >= 1965) + (build_year >= 1966) + (build_year >= 2050))
{
0: tep60_a1962_b1963_sprites_left;
 1: tep60_a1962_a1963_sprites_left;
 2: tep60_a1962_a1965_sprites_left;
 3: tep60_a1962_a1966_sprites_left;
 tep60_a1962_aGAMEEND_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_sprites_right, (build_year >= 1963) + (build_year >= 1965) + (build_year >= 1966) + (build_year >= 2050))
{
0: tep60_a1962_b1963_sprites_right;
 1: tep60_a1962_a1963_sprites_right;
 2: tep60_a1962_a1965_sprites_right;
 3: tep60_a1962_a1966_sprites_right;
 tep60_a1962_aGAMEEND_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_left, build_year < 1962)
{
1: tep60_v1_sprites_left;
 tep60_a1962_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_right, build_year < 1962)
{
1: tep60_v1_sprites_right;
 tep60_a1962_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) || (position_in_consist == 0) ])
{
1: tep60_sprites_left;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep60) + 1) % 2))
{
1: tep60_sprites_2l;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_old;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_16;
 tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_14;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_12;
 tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_10;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_8;
 tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_6;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_sprites_4;
 tep60_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep60_sprites_left;
 tep60_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep60_sprites_start_sp, count_veh_id(tep60))
{
1: tep60_sprites_1RND;
 tep60_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep60_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep60_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tep60_sprites_parent, [ STORE_TEMP(count_veh_id(tep60), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep60_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep60_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep60_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_aGAMEEND_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_GAMEEND_SP, 1960, string(STR_REFIT_PREPRODUCTION));
  1: return string(STR_REFIT_GAMEEND, 1962);
  2: return string(STR_REFIT_GAMEEND_SP, 1963, string(STR_REFIT_TTD_9C));
  3: return string(STR_REFIT_GAMEEND_SP, 1963, string(STR_REFIT_TTD_B5));
  4: return string(STR_REFIT_GAMEEND, 1965);
  5: return string(STR_REFIT_GAMEEND, 1966);
  6: return string(STR_REFIT_GAMEEND_SP, 1966, string(STR_REFIT_TTD_7C));
  7: return string(STR_REFIT_GAMEEND_SERVICE, 1966, 1972);
  8: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1966, 1972, string(STR_REFIT_TTD_7C));
  9: return string(STR_REFIT_GAMEEND_SERVICE_SP, 1966, 1998, string(STR_REFIT_LV_BELARUSSIAN_RAILWAY));
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_b1963_cargo_subtype_text, 0)
{ return CB_RESULT_NO_TEXT; }
switch (FEAT_TRAINS, SELF, tep60_a1962_a1963_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 return string(STR_REFIT_TTD_9C);
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1965_cargo_subtype_text, 0)
{ return CB_RESULT_NO_TEXT; }
switch (FEAT_TRAINS, SELF, tep60_a1962_a1966_alt_cargo_subtype_text, cargo_subtype)
{
29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep60_a1962_a1966_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_7C);
 tep60_a1962_a1966_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_cargo_subtype_text, (build_year >= 1963) + (build_year >= 1965) + (build_year >= 1966) + (build_year >= 2050))
{
0: tep60_a1962_b1963_cargo_subtype_text;
 1: tep60_a1962_a1963_cargo_subtype_text;
 2: tep60_a1962_a1965_cargo_subtype_text;
 3: tep60_a1962_a1966_cargo_subtype_text;
 tep60_a1962_aGAMEEND_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep60_cargo_subtype_text, build_year < 1962)
{
1: return string(STR_REFIT_PREPRODUCTION);
 tep60_a1962_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) || (position_in_consist == 0) ])
{
1: tep60_create_effect_sprites_left;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep60) + 1) % 2))
{
1: tep60_create_effect_sprites_2l;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_old;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_16;
 tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_14;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_12;
 tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_10;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_8;
 tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_6;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep60) ])
{
1: tep60_create_effect_sprites_4;
 tep60_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep60_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep60_create_effect_sprites_left;
 tep60_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep60_create_effect, count_veh_id(tep60))
{
1: tep60_create_effect_1RND;
 tep60_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep60_speed, [ STORE_TEMP((age_in_days >= (25 * 365 + 25 / 4)) ? 130 : 160, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, tep60_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tep60), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep60_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tep60), 0), STORE_TEMP(vehicle_type_id == tep60, 1) ])
{ tep60_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tep60_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tep60_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tep60_cost_factor, build_year >= 1966)
{
1: return 42;
 return 43;
}
switch (FEAT_TRAINS, SELF, tep60_power, build_year >= 1966)
{
1: return int (2210 * 0.9865);
 return int (2315 * 0.9865);
}
switch (FEAT_TRAINS, SELF, tep60_running_cost_factor,
[ STORE_TEMP(299 - 5 * (build_year >= 1966), 0), // Моторы
   STORE_TEMP(42 - (build_year >= 1966), 1), // Бригада
   STORE_TEMP(105 - 2 * (build_year >= 1966), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(73 - (build_year >= 1966), 4), // ТО
   STORE_TEMP(5, 5), // Сертификация
   STORE_TEMP(160, 6), // Скорость
   STORE_TEMP(127, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 524-516
switch (FEAT_TRAINS, SELF, tep60_b1962_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1961 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep60_b1962_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep60_b1962_additional_text, current_year <= 1961)
{
1: tep60_b1962_additional_text_hidden;
 tep60_b1962_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep60_a1962_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1962 << 16), 0x101), STORE_TEMP(1987 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep60_a1962_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep60_a1962_additional_text, current_year <= 1987)
{
1: tep60_a1962_additional_text_hidden;
 tep60_a1962_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep60_additional_text, current_year >= 1962)
{
0: tep60_b1962_additional_text;
 tep60_a1962_additional_text;
}
item (FEAT_TRAINS, tep60, 151)
{
property
{
name: string(STR_NAME_TEP60);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1960 - delta_age, 1, 1);
 model_life: 1987 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1960 -1987 -2 < retire_early_default ? 1987 -1960 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1960 -1987 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1960 -1987 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 43 > 255 ? 255 : 43;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2315 * 0.9865);
 weight: (127) ton;
 tractive_effort_coefficient: (((201.0))/((127))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tep60_additional_text;
        articulated_part: articulated_part_dummy3;
    bitmask_vehicle_info: tep60_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tep60_cargo_subtype_text;
          colour_mapping: any_cc_colour;
             cost_factor: tep60_cost_factor;
           create_effect: tep60_create_effect;
                 default: tep60_sprites;
                   power: tep60_power;
                purchase: tep60_purchase_sprites;
          purchase_speed: return 160;
     running_cost_factor: tep60_running_cost_factor;
                   speed: tep60_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep60)
{
property
{
name: string(STR_LONGNAME_TEP60);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep60)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep60)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep60)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep60)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep60)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep70
spriteset (tep70_v1_purchase_graphics_ico, "src/diesel/tep70-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (tep70_v1_purchase_graphics_noico, "src/diesel/tep70-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep70_v1_purchase_sprites, enable_icons)
{
1: tep70_v1_purchase_graphics_ico;
 tep70_v1_purchase_graphics_noico;
}
spriteset (tep70_v1_notpowered_sprites_left, "src/diesel/tep70-pre.png")
{
s12_template(32, 40, 0)
}
spriteset (tep70_v1_loading_sprites_left, "src/diesel/tep70-pre.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tep70_v1_traveling_sprites_left, "src/diesel/tep70-pre.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tep70_v1_normal_sprites_left
{
loading: tep70_v1_loading_sprites_left;
 loaded: tep70_v1_traveling_sprites_left;
}
spriteset (tep70_v1_notpowered_sprites_right, "src/diesel/tep70-pre.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tep70_v1_loading_sprites_right, "src/diesel/tep70-pre.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tep70_v1_traveling_sprites_right, "src/diesel/tep70-pre.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tep70_v1_normal_sprites_right
{
loading: tep70_v1_loading_sprites_right;
 loaded: tep70_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v1_normal_sprites_left;
 tep70_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v1_normal_sprites_right;
 tep70_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v1_sprites_left2;
 1: tep70_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v1_sprites_left1;
 128: tep70_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v1_sprites_right2;
 1: tep70_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v1_sprites_right1;
 128: tep70_v1_sprites_right1;
}
spriteset (tep70_v2_purchase_graphics_ico, "src/diesel/tep70.png")
{
new_purchase_template(0, 0)
}
spriteset (tep70_v2_purchase_graphics_noico, "src/diesel/tep70.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep70_v2_purchase_sprites, enable_icons)
{
1: tep70_v2_purchase_graphics_ico;
 tep70_v2_purchase_graphics_noico;
}
spriteset (tep70_v2_notpowered_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 40, 0)
}
spriteset (tep70_v2_loading_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (tep70_v2_traveling_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup tep70_v2_normal_sprites_left
{
loading: tep70_v2_loading_sprites_left;
 loaded: tep70_v2_traveling_sprites_left;
}
spriteset (tep70_v2_notpowered_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32, 40, 0)
}
spriteset (tep70_v2_loading_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 40 +67, 0)
}
spriteset (tep70_v2_traveling_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 40 +134, 0)
}
spritegroup tep70_v2_normal_sprites_right
{
loading: tep70_v2_loading_sprites_right;
 loaded: tep70_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v2_normal_sprites_left;
 tep70_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v2_normal_sprites_right;
 tep70_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v2_sprites_left2;
 1: tep70_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v2_sprites_left1;
 128: tep70_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v2_sprites_right2;
 1: tep70_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v2_sprites_right1;
 128: tep70_v2_sprites_right1;
}
spriteset (tep70_v3_notpowered_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 241, 0)
}
spriteset (tep70_v3_loading_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 241 +67, 0)
}
spriteset (tep70_v3_traveling_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 241 +134, 0)
}
spritegroup tep70_v3_normal_sprites_left
{
loading: tep70_v3_loading_sprites_left;
 loaded: tep70_v3_traveling_sprites_left;
}
spriteset (tep70_v3_notpowered_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32, 241, 0)
}
spriteset (tep70_v3_loading_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 241 +67, 0)
}
spriteset (tep70_v3_traveling_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 241 +134, 0)
}
spritegroup tep70_v3_normal_sprites_right
{
loading: tep70_v3_loading_sprites_right;
 loaded: tep70_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v3_normal_sprites_left;
 tep70_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v3_normal_sprites_right;
 tep70_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v3_sprites_left2;
 1: tep70_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v3_sprites_left1;
 128: tep70_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v3_sprites_right2;
 1: tep70_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v3_sprites_right1;
 128: tep70_v3_sprites_right1;
}
spriteset (tep70_v4_notpowered_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 442, 0)
}
spriteset (tep70_v4_loading_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 442 +67, 0)
}
spriteset (tep70_v4_traveling_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 442 +134, 0)
}
spritegroup tep70_v4_normal_sprites_left
{
loading: tep70_v4_loading_sprites_left;
 loaded: tep70_v4_traveling_sprites_left;
}
spriteset (tep70_v4_notpowered_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32, 442, 0)
}
spriteset (tep70_v4_loading_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 442 +67, 0)
}
spriteset (tep70_v4_traveling_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 442 +134, 0)
}
spritegroup tep70_v4_normal_sprites_right
{
loading: tep70_v4_loading_sprites_right;
 loaded: tep70_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v4_normal_sprites_left;
 tep70_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v4_normal_sprites_right;
 tep70_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v4_sprites_left2;
 1: tep70_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v4_sprites_left1;
 128: tep70_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v4_sprites_right2;
 1: tep70_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v4_sprites_right1;
 128: tep70_v4_sprites_right1;
}
spriteset (tep70_v5_notpowered_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 643, 0)
}
spriteset (tep70_v5_loading_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 643 +67, 0)
}
spriteset (tep70_v5_traveling_sprites_left, "src/diesel/tep70.png")
{
s13_template(32, 643 +134, 0)
}
spritegroup tep70_v5_normal_sprites_left
{
loading: tep70_v5_loading_sprites_left;
 loaded: tep70_v5_traveling_sprites_left;
}
spriteset (tep70_v5_notpowered_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32, 643, 0)
}
spriteset (tep70_v5_loading_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 643 +67, 0)
}
spriteset (tep70_v5_traveling_sprites_right, "src/diesel/tep70.png")
{
s13_r_template(32 +415, 643 +134, 0)
}
spritegroup tep70_v5_normal_sprites_right
{
loading: tep70_v5_loading_sprites_right;
 loaded: tep70_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v5_normal_sprites_left;
 tep70_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v5_normal_sprites_right;
 tep70_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v5_sprites_left2;
 1: tep70_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v5_sprites_left1;
 128: tep70_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v5_sprites_right2;
 1: tep70_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v5_sprites_right1;
 128: tep70_v5_sprites_right1;
}
spriteset (tep70_v3_purchase_graphics_ico, "src/diesel/tep70-a1989.png")
{
new_purchase_template(0, 0)
}
spriteset (tep70_v3_purchase_graphics_noico, "src/diesel/tep70-a1989.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep70_v3_purchase_sprites, enable_icons)
{
1: tep70_v3_purchase_graphics_ico;
 tep70_v3_purchase_graphics_noico;
}
spriteset (tep70_v6_notpowered_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 40, 0)
}
spriteset (tep70_v6_loading_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (tep70_v6_traveling_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup tep70_v6_normal_sprites_left
{
loading: tep70_v6_loading_sprites_left;
 loaded: tep70_v6_traveling_sprites_left;
}
spriteset (tep70_v6_notpowered_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32, 40, 0)
}
spriteset (tep70_v6_loading_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 40 +67, 0)
}
spriteset (tep70_v6_traveling_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 40 +134, 0)
}
spritegroup tep70_v6_normal_sprites_right
{
loading: tep70_v6_loading_sprites_right;
 loaded: tep70_v6_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v6_normal_sprites_left;
 tep70_v6_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v6_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v6_normal_sprites_right;
 tep70_v6_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v6_sprites_left2;
 1: tep70_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v6_sprites_left1;
 128: tep70_v6_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v6_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v6_sprites_right2;
 1: tep70_v6_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v6_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v6_sprites_right1;
 128: tep70_v6_sprites_right1;
}
spriteset (tep70_v7_notpowered_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 241, 0)
}
spriteset (tep70_v7_loading_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 241 +67, 0)
}
spriteset (tep70_v7_traveling_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 241 +134, 0)
}
spritegroup tep70_v7_normal_sprites_left
{
loading: tep70_v7_loading_sprites_left;
 loaded: tep70_v7_traveling_sprites_left;
}
spriteset (tep70_v7_notpowered_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32, 241, 0)
}
spriteset (tep70_v7_loading_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 241 +67, 0)
}
spriteset (tep70_v7_traveling_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 241 +134, 0)
}
spritegroup tep70_v7_normal_sprites_right
{
loading: tep70_v7_loading_sprites_right;
 loaded: tep70_v7_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v7_normal_sprites_left;
 tep70_v7_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v7_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v7_normal_sprites_right;
 tep70_v7_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v7_sprites_left2;
 1: tep70_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v7_sprites_left1;
 128: tep70_v7_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v7_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v7_sprites_right2;
 1: tep70_v7_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v7_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v7_sprites_right1;
 128: tep70_v7_sprites_right1;
}
spriteset (tep70_v8_notpowered_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 442, 0)
}
spriteset (tep70_v8_loading_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 442 +67, 0)
}
spriteset (tep70_v8_traveling_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 442 +134, 0)
}
spritegroup tep70_v8_normal_sprites_left
{
loading: tep70_v8_loading_sprites_left;
 loaded: tep70_v8_traveling_sprites_left;
}
spriteset (tep70_v8_notpowered_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32, 442, 0)
}
spriteset (tep70_v8_loading_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 442 +67, 0)
}
spriteset (tep70_v8_traveling_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 442 +134, 0)
}
spritegroup tep70_v8_normal_sprites_right
{
loading: tep70_v8_loading_sprites_right;
 loaded: tep70_v8_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v8_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v8_normal_sprites_left;
 tep70_v8_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v8_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v8_normal_sprites_right;
 tep70_v8_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v8_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v8_sprites_left2;
 1: tep70_v8_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v8_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v8_sprites_left1;
 128: tep70_v8_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v8_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v8_sprites_right2;
 1: tep70_v8_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v8_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v8_sprites_right1;
 128: tep70_v8_sprites_right1;
}
spriteset (tep70_v9_notpowered_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 643, 0)
}
spriteset (tep70_v9_loading_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 643 +67, 0)
}
spriteset (tep70_v9_traveling_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 643 +134, 0)
}
spritegroup tep70_v9_normal_sprites_left
{
loading: tep70_v9_loading_sprites_left;
 loaded: tep70_v9_traveling_sprites_left;
}
spriteset (tep70_v9_notpowered_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32, 643, 0)
}
spriteset (tep70_v9_loading_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 643 +67, 0)
}
spriteset (tep70_v9_traveling_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 643 +134, 0)
}
spritegroup tep70_v9_normal_sprites_right
{
loading: tep70_v9_loading_sprites_right;
 loaded: tep70_v9_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v9_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v9_normal_sprites_left;
 tep70_v9_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v9_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v9_normal_sprites_right;
 tep70_v9_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v9_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v9_sprites_left2;
 1: tep70_v9_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v9_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v9_sprites_left1;
 128: tep70_v9_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v9_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v9_sprites_right2;
 1: tep70_v9_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v9_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v9_sprites_right1;
 128: tep70_v9_sprites_right1;
}
spriteset (tep70_v10_notpowered_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 844, 0)
}
spriteset (tep70_v10_loading_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 844 +67, 0)
}
spriteset (tep70_v10_traveling_sprites_left, "src/diesel/tep70-a1989.png")
{
s13_template(32, 844 +134, 0)
}
spritegroup tep70_v10_normal_sprites_left
{
loading: tep70_v10_loading_sprites_left;
 loaded: tep70_v10_traveling_sprites_left;
}
spriteset (tep70_v10_notpowered_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32, 844, 0)
}
spriteset (tep70_v10_loading_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 844 +67, 0)
}
spriteset (tep70_v10_traveling_sprites_right, "src/diesel/tep70-a1989.png")
{
s13_r_template(32 +415, 844 +134, 0)
}
spritegroup tep70_v10_normal_sprites_right
{
loading: tep70_v10_loading_sprites_right;
 loaded: tep70_v10_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_v10_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v10_normal_sprites_left;
 tep70_v10_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_v10_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70_v10_normal_sprites_right;
 tep70_v10_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70_v10_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v10_sprites_left2;
 1: tep70_v10_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v10_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v10_sprites_left1;
 128: tep70_v10_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70_v10_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70_v10_sprites_right2;
 1: tep70_v10_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70_v10_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70_v10_sprites_right1;
 128: tep70_v10_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tep70_purchase_sprites, (current_year >= 1978) + (current_year >= 1989))
{
0: tep70_v1_purchase_sprites;
 1: tep70_v2_purchase_sprites;
 tep70_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_b1989_sprites_left,
  cargo_subtype)
{
0: tep70_v2_sprites_left;
      16: tep70_v2_sprites_left;
       20: tep70_v3_sprites_left;
  29: tep70_v4_sprites_left;
     31: tep70_v5_sprites_left;
  align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_a1989_sprites_left,
  cargo_subtype)
{
0: tep70_v6_sprites_left;
      16: tep70_v6_sprites_left;
       20: tep70_v7_sprites_left;
  29: tep70_v8_sprites_left;
     31: tep70_v9_sprites_left;
              34: tep70_v10_sprites_left;
  align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_aGAMEEND_sprites_left,
  cargo_subtype)
{
0: tep70_v1_sprites_left;
  1: tep70_v2_sprites_left;
  2: tep70_v3_sprites_left;
  3: tep70_v4_sprites_left;
  4: tep70_v5_sprites_left;
  5: tep70_v6_sprites_left;
  6: tep70_v7_sprites_left;
  7: tep70_v8_sprites_left;
  8: tep70_v9_sprites_left;
  9: tep70_v10_sprites_left;
     align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_b1989_sprites_right,
  cargo_subtype)
{
0: tep70_v2_sprites_right;
      16: tep70_v2_sprites_right;
       20: tep70_v3_sprites_right;
  29: tep70_v4_sprites_right;
     31: tep70_v5_sprites_right;
  align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_a1989_sprites_right,
  cargo_subtype)
{
0: tep70_v6_sprites_right;
      16: tep70_v6_sprites_right;
       20: tep70_v7_sprites_right;
  29: tep70_v8_sprites_right;
     31: tep70_v9_sprites_right;
              34: tep70_v10_sprites_right;
  align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_aGAMEEND_sprites_right,
  cargo_subtype)
{
0: tep70_v1_sprites_right;
  1: tep70_v2_sprites_right;
  2: tep70_v3_sprites_right;
  3: tep70_v4_sprites_right;
  4: tep70_v5_sprites_right;
  5: tep70_v6_sprites_right;
  6: tep70_v7_sprites_right;
  7: tep70_v8_sprites_right;
  8: tep70_v9_sprites_right;
  9: tep70_v10_sprites_right;
     align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_sprites_left, (build_year >= 1989) + (build_year >= 2050))
{
0: tep70_a1978_b1989_sprites_left;
 1: tep70_a1978_a1989_sprites_left;
 tep70_a1978_aGAMEEND_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_left, build_year < 1978)
{
1: tep70_v1_sprites_left;
 tep70_a1978_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_sprites_right, (build_year >= 1989) + (build_year >= 2050))
{
0: tep70_a1978_b1989_sprites_right;
 1: tep70_a1978_a1989_sprites_right;
 tep70_a1978_aGAMEEND_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_right, build_year < 1978)
{
1: tep70_v1_sprites_right;
 tep70_a1978_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) || (position_in_consist == 0) ])
{
1: tep70_sprites_left;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep70) + 1) % 2))
{
1: tep70_sprites_2l;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_old;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_16;
 tep70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_14;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_12;
 tep70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_10;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_8;
 tep70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_6;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_sprites_4;
 tep70_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep70_sprites_left;
 tep70_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep70_sprites_start_sp, count_veh_id(tep70))
{
1: tep70_sprites_1RND;
 tep70_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep70_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep70_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tep70_sprites_parent, [ STORE_TEMP(count_veh_id(tep70), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep70_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep70_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep70_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep70_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tep70), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep70_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tep70), 0), STORE_TEMP(vehicle_type_id == tep70, 1) ])
{ tep70_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tep70_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tep70_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tep70_speed, [ STORE_TEMP( ((age_in_days >= (7*365)) && (build_year < 1978)) || ((age_in_days >= (25*365)) && (build_year >= 1978)) ? 140 : 160, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, PARENT, tep70_bitmask_vehicle_info_advanced2,
  (vehicle_type_id == tep70) && (build_year >= 1993))
{
1: return bitmask(0);
     tep70_bitmask_vehicle_info;
}
switch (FEAT_TRAINS, SELF, tep70_bitmask_vehicle_info_advanced1,
  build_year >= 1993)
{
1: return bitmask(0);
     tep70_bitmask_vehicle_info_advanced2;
}
switch (FEAT_TRAINS, SELF, tep70_bitmask_vehicle_info_advanced,
  (position_in_consist == 0) || (vehicle_is_not_powered))
{
1: return 0;
     tep70_bitmask_vehicle_info_advanced1;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_aGAMEEND_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_GAMEEND_SP, 1973, string(STR_REFIT_PREPRODUCTION));
  1: return string(STR_REFIT_GAMEEND_SP, 1978, string(STR_REFIT_LV_OCTOBER_RAILWAY));
  2: return string(STR_REFIT_GAMEEND_SP, 1978, string(STR_REFIT_LV_MOSCOW_RAILWAY));
  3: return string(STR_REFIT_GAMEEND_SP, 1978, string(STR_REFIT_LV_BELARUSSIAN_RAILWAY));
  4: return string(STR_REFIT_GAMEEND_SP, 1978, string(STR_REFIT_LV_NORTHERN_RAILWAY));
  5: return string(STR_REFIT_GAMEEND_SP, 1989, string(STR_REFIT_LV_OCTOBER_RAILWAY));
  6: return string(STR_REFIT_GAMEEND_SP, 1989, string(STR_REFIT_LV_MOSCOW_RAILWAY));
  7: return string(STR_REFIT_GAMEEND_SP, 1989, string(STR_REFIT_LV_BELARUSSIAN_RAILWAY));
  8: return string(STR_REFIT_GAMEEND_SP, 1989, string(STR_REFIT_LV_NORTHERN_RAILWAY));
  9: return string(STR_REFIT_GAMEEND_SP, 1989, string(STR_REFIT_LV_RZD_PID));
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_b1989_cargo_subtype_text, cargo_subtype)
{
16: general_cargo_subtype_text_LV_OCTOBER_RAILWAY;
 20: general_cargo_subtype_text_LV_MOSCOW_RAILWAY;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 31: general_cargo_subtype_text_LV_NORTHERN_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep70_a1978_a1989_cargo_subtype_text, cargo_subtype)
{
16: general_cargo_subtype_text_LV_OCTOBER_RAILWAY;
 20: general_cargo_subtype_text_LV_MOSCOW_RAILWAY;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 31: general_cargo_subtype_text_LV_NORTHERN_RAILWAY;
 34: general_cargo_subtype_text_LV_RZD_PID;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep70_a1978_cargo_subtype_text, (build_year >= 1989) + (build_year >= 2050))
{
0: tep70_a1978_b1989_cargo_subtype_text;
 1: tep70_a1978_a1989_cargo_subtype_text;
 tep70_a1978_aGAMEEND_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep70_cargo_subtype_text, build_year < 1978)
{
1: return string(STR_REFIT_PREPRODUCTION);
 tep70_a1978_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 13), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 13), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) || (position_in_consist == 0) ])
{
1: tep70_create_effect_sprites_left;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep70) + 1) % 2))
{
1: tep70_create_effect_sprites_2l;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_old;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_16;
 tep70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_14;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_12;
 tep70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_10;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_8;
 tep70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_6;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70) ])
{
1: tep70_create_effect_sprites_4;
 tep70_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep70_create_effect_sprites_left;
 tep70_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep70_create_effect, count_veh_id(tep70))
{
1: tep70_create_effect_1RND;
 tep70_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep70_tractive_effort_coefficient, build_year >= 1978)
{
1: return int(256*(288.3)/(135)/9.8);
 return int(256*(282.4)/(129)/9.8);
}
switch (FEAT_TRAINS, SELF, tep70_cost_factor, build_year >= 1978)
{
1: return 58;
 return 64;
}
switch (FEAT_TRAINS, SELF, tep70_weight, build_year >= 1978)
{
1: return int(135);
 return int(129);
}
switch (FEAT_TRAINS, SELF, tep70_power, build_year >= 1978)
{
1: return int (3022 * 0.9865);
 return int (3142 * 0.9865);
}
switch (FEAT_TRAINS, SELF, tep70_length2,
  cargo_subtype)
{
0: return 7;
     return 8;
}
switch (FEAT_TRAINS, SELF, tep70_length,
  (build_year >= 1978) +
  (build_year >= 2050))
{
1: return 8;
  2: tep70_length2;
     return 7;
}
switch (FEAT_TRAINS, SELF, tep70_running_cost_factor,
[ STORE_TEMP(359 - 34 * (build_year >= 1978), 0), // Моторы
   STORE_TEMP(50 - 5 * (build_year >= 1978), 1), // Бригада
   STORE_TEMP(126 - 12 * (build_year >= 1978), 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(80 - 8 * (build_year >= 1978), 4), // ТО
   STORE_TEMP(6 - (build_year >= 1978), 5), // Сертификация
   STORE_TEMP(160, 6), // Скорость
   STORE_TEMP(129, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 630-571
switch (FEAT_TRAINS, SELF, tep70_b1978_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1973 << 16), 0x101), STORE_TEMP(1977 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep70_b1978_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep70_b1978_additional_text, current_year <= 1977)
{
1: tep70_b1978_additional_text_hidden;
 tep70_b1978_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep70_a1978_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1978 << 16), 0x101), STORE_TEMP(2006 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep70_a1978_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep70_a1978_additional_text, current_year <= 2006)
{
1: tep70_a1978_additional_text_hidden;
 tep70_a1978_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep70_a1993_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1978 << 16), 0x101), STORE_TEMP(2006 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep70_a1993_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep70_a1993_additional_text, current_year <= 2006)
{
1: tep70_a1993_additional_text_hidden;
 tep70_a1993_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep70_additional_text, (current_year >= 1978) + (current_year >= 1993))
{
0: tep70_b1978_additional_text;
 1: tep70_a1978_additional_text;
 tep70_a1993_additional_text;
}
item (FEAT_TRAINS, tep70, 173)
{
property
{
name: string(STR_NAME_TEP70);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1973 - delta_age, 1, 1);
 model_life: 2006 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1973 -2006 -2 < retire_early_default ? 2006 -1973 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1973 -2006 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1973 -2006 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 66 > 255 ? 255 : 66;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (3142 * 0.9865);
 weight: (129) ton;
 tractive_effort_coefficient: (((282.4))/((129))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tep70_additional_text;
               articulated_part: articulated_part_dummy5;
           bitmask_vehicle_info: tep70_bitmask_vehicle_info_advanced;
               can_attach_wagon: any_can_attach_wagon;
                 cargo_capacity: return 0;
             cargo_subtype_text: tep70_cargo_subtype_text;
                 colour_mapping: any_cc_colour;
                    cost_factor: tep70_cost_factor;
                  create_effect: tep70_create_effect;
                        default: tep70_sprites;
                         length: tep70_length;
                          power: tep70_power;
                       purchase: tep70_purchase_sprites;
                 purchase_speed: return 160;
            running_cost_factor: tep70_running_cost_factor;
                          speed: tep70_speed;
                     start_stop: any_start_stop;
    tractive_effort_coefficient: tep70_tractive_effort_coefficient;
                         weight: tep70_weight;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep70)
{
property
{
name: string(STR_LONGNAME_TEP70);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep70)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep70)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep70)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep70)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep70)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep70u
spriteset (tep70u_purchase_graphics_ico, "src/diesel/tep70u.png")
{
new_purchase_template(0, 0)
}
spriteset (tep70u_purchase_graphics_noico, "src/diesel/tep70u.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep70u_purchase_sprites, enable_icons)
{
1: tep70u_purchase_graphics_ico;
 tep70u_purchase_graphics_noico;
}
spriteset (tep70u_notpowered_sprites_left, "src/diesel/tep70u.png")
{
s13_template(32, 40, 0)
}
spriteset (tep70u_loading_sprites_left, "src/diesel/tep70u.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (tep70u_traveling_sprites_left, "src/diesel/tep70u.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup tep70u_normal_sprites_left
{
loading: tep70u_loading_sprites_left;
 loaded: tep70u_traveling_sprites_left;
}
spriteset (tep70u_notpowered_sprites_right, "src/diesel/tep70u.png")
{
s13_r_template(32, 40, 0)
}
spriteset (tep70u_loading_sprites_right, "src/diesel/tep70u.png")
{
s13_r_template(32 +415, 40 +67, 0)
}
spriteset (tep70u_traveling_sprites_right, "src/diesel/tep70u.png")
{
s13_r_template(32 +415, 40 +134, 0)
}
spritegroup tep70u_normal_sprites_right
{
loading: tep70u_loading_sprites_right;
 loaded: tep70u_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70u_normal_sprites_left;
 tep70u_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70u_normal_sprites_right;
 tep70u_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70u_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70u_sprites_left2;
 1: tep70u_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70u_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70u_sprites_left1;
 128: tep70u_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70u_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70u_sprites_right2;
 1: tep70u_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70u_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70u_sprites_right1;
 128: tep70u_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) || (position_in_consist == 0) ])
{
1: tep70u_sprites_left;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep70u) + 1) % 2))
{
1: tep70u_sprites_2l;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_old;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_16;
 tep70u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_14;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_12;
 tep70u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_10;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_8;
 tep70u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_6;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_sprites_4;
 tep70u_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep70u_sprites_left;
 tep70u_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep70u_sprites_start_sp, count_veh_id(tep70u))
{
1: tep70u_sprites_1RND;
 tep70u_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep70u_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep70u_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tep70u_sprites_parent, [ STORE_TEMP(count_veh_id(tep70u), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep70u_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep70u_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep70u_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 13), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 13), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) || (position_in_consist == 0) ])
{
1: tep70u_create_effect_sprites_left;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep70u) + 1) % 2))
{
1: tep70u_create_effect_sprites_2l;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_old;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_16;
 tep70u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_14;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_12;
 tep70u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_10;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_8;
 tep70u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_6;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70u) ])
{
1: tep70u_create_effect_sprites_4;
 tep70u_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70u_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep70u_create_effect_sprites_left;
 tep70u_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep70u_create_effect, count_veh_id(tep70u))
{
1: tep70u_create_effect_1RND;
 tep70u_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep70u_speed, [ STORE_TEMP((age_in_days >= (25 * 365 + 25 / 4)) ? 140 : 160, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, tep70u_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tep70u_running_cost_factor,
[ STORE_TEMP(374, 0), // Моторы
   STORE_TEMP(53, 1), // Бригада
   STORE_TEMP(131, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(92, 4), // ТО
   STORE_TEMP(7, 5), // Сертификация
   STORE_TEMP(160, 6), // Скорость
   STORE_TEMP(135, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 657
switch (FEAT_TRAINS, SELF, tep70u_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (2006 << 16), 0x101), STORE_TEMP(2007 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep70u_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep70u_additional_text, current_year <= 2007)
{
1: tep70u_additional_text_hidden;
 tep70u_additional_text_shown;
}
item (FEAT_TRAINS, tep70u, 174)
{
property
{
name: string(STR_NAME_TEP70U);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2006 - delta_age, 1, 1);
 model_life: 2007 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2006 -2007 -2 < retire_early_default ? 2007 -2006 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2006 -2007 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2006 -2007 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 82 > 255 ? 255 : 82;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (3022 * 0.9865);
 weight: (135) ton;
 tractive_effort_coefficient: (((310.0))/((135))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tep70;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tep70u_additional_text;
        articulated_part: articulated_part_dummy5;
    bitmask_vehicle_info: tep70u_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: tep70u_create_effect;
                 default: tep70u_sprites;
                purchase: tep70u_purchase_sprites;
          purchase_speed: return 160;
     running_cost_factor: tep70u_running_cost_factor;
                   speed: tep70u_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep70u)
{
property
{
name: string(STR_LONGNAME_TEP70U);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep70u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep70u)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep70u)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep70u)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep70u)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep70bs
spriteset (tep70bs_v1_purchase_graphics_ico, "src/diesel/tep70bs-part1.png")
{
new_purchase_template(0, 0)
}
spriteset (tep70bs_v1_purchase_graphics_noico, "src/diesel/tep70bs-part1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep70bs_v1_purchase_sprites, enable_icons)
{
1: tep70bs_v1_purchase_graphics_ico;
 tep70bs_v1_purchase_graphics_noico;
}
spriteset (tep70bs_v1_notpowered_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 40, 0)
}
spriteset (tep70bs_v1_loading_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (tep70bs_v1_traveling_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup tep70bs_v1_normal_sprites_left
{
loading: tep70bs_v1_loading_sprites_left;
 loaded: tep70bs_v1_traveling_sprites_left;
}
spriteset (tep70bs_v1_notpowered_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32, 40, 0)
}
spriteset (tep70bs_v1_loading_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 40 +67, 0)
}
spriteset (tep70bs_v1_traveling_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 40 +134, 0)
}
spritegroup tep70bs_v1_normal_sprites_right
{
loading: tep70bs_v1_loading_sprites_right;
 loaded: tep70bs_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v1_normal_sprites_left;
 tep70bs_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v1_normal_sprites_right;
 tep70bs_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v1_sprites_left2;
 1: tep70bs_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v1_sprites_left1;
 128: tep70bs_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v1_sprites_right2;
 1: tep70bs_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v1_sprites_right1;
 128: tep70bs_v1_sprites_right1;
}
spriteset (tep70bs_v2_notpowered_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 241, 0)
}
spriteset (tep70bs_v2_loading_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 241 +67, 0)
}
spriteset (tep70bs_v2_traveling_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 241 +134, 0)
}
spritegroup tep70bs_v2_normal_sprites_left
{
loading: tep70bs_v2_loading_sprites_left;
 loaded: tep70bs_v2_traveling_sprites_left;
}
spriteset (tep70bs_v2_notpowered_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32, 241, 0)
}
spriteset (tep70bs_v2_loading_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 241 +67, 0)
}
spriteset (tep70bs_v2_traveling_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 241 +134, 0)
}
spritegroup tep70bs_v2_normal_sprites_right
{
loading: tep70bs_v2_loading_sprites_right;
 loaded: tep70bs_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v2_normal_sprites_left;
 tep70bs_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v2_normal_sprites_right;
 tep70bs_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v2_sprites_left2;
 1: tep70bs_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v2_sprites_left1;
 128: tep70bs_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v2_sprites_right2;
 1: tep70bs_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v2_sprites_right1;
 128: tep70bs_v2_sprites_right1;
}
spriteset (tep70bs_v3_notpowered_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 442, 0)
}
spriteset (tep70bs_v3_loading_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 442 +67, 0)
}
spriteset (tep70bs_v3_traveling_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 442 +134, 0)
}
spritegroup tep70bs_v3_normal_sprites_left
{
loading: tep70bs_v3_loading_sprites_left;
 loaded: tep70bs_v3_traveling_sprites_left;
}
spriteset (tep70bs_v3_notpowered_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32, 442, 0)
}
spriteset (tep70bs_v3_loading_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 442 +67, 0)
}
spriteset (tep70bs_v3_traveling_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 442 +134, 0)
}
spritegroup tep70bs_v3_normal_sprites_right
{
loading: tep70bs_v3_loading_sprites_right;
 loaded: tep70bs_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v3_normal_sprites_left;
 tep70bs_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v3_normal_sprites_right;
 tep70bs_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v3_sprites_left2;
 1: tep70bs_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v3_sprites_left1;
 128: tep70bs_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v3_sprites_right2;
 1: tep70bs_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v3_sprites_right1;
 128: tep70bs_v3_sprites_right1;
}
spriteset (tep70bs_v4_notpowered_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 643, 0)
}
spriteset (tep70bs_v4_loading_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 643 +67, 0)
}
spriteset (tep70bs_v4_traveling_sprites_left, "src/diesel/tep70bs-part1.png")
{
s13_template(32, 643 +134, 0)
}
spritegroup tep70bs_v4_normal_sprites_left
{
loading: tep70bs_v4_loading_sprites_left;
 loaded: tep70bs_v4_traveling_sprites_left;
}
spriteset (tep70bs_v4_notpowered_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32, 643, 0)
}
spriteset (tep70bs_v4_loading_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 643 +67, 0)
}
spriteset (tep70bs_v4_traveling_sprites_right, "src/diesel/tep70bs-part1.png")
{
s13_r_template(32 +415, 643 +134, 0)
}
spritegroup tep70bs_v4_normal_sprites_right
{
loading: tep70bs_v4_loading_sprites_right;
 loaded: tep70bs_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v4_normal_sprites_left;
 tep70bs_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v4_normal_sprites_right;
 tep70bs_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v4_sprites_left2;
 1: tep70bs_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v4_sprites_left1;
 128: tep70bs_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v4_sprites_right2;
 1: tep70bs_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v4_sprites_right1;
 128: tep70bs_v4_sprites_right1;
}
spriteset (tep70bs_v2_purchase_graphics_ico, "src/diesel/tep70bs-part2.png")
{
new_purchase_template(0, 0)
}
spriteset (tep70bs_v2_purchase_graphics_noico, "src/diesel/tep70bs-part2.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep70bs_v2_purchase_sprites, enable_icons)
{
1: tep70bs_v2_purchase_graphics_ico;
 tep70bs_v2_purchase_graphics_noico;
}
spriteset (tep70bs_v5_notpowered_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 40, 0)
}
spriteset (tep70bs_v5_loading_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 40 +67, 0)
}
spriteset (tep70bs_v5_traveling_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 40 +134, 0)
}
spritegroup tep70bs_v5_normal_sprites_left
{
loading: tep70bs_v5_loading_sprites_left;
 loaded: tep70bs_v5_traveling_sprites_left;
}
spriteset (tep70bs_v5_notpowered_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32, 40, 0)
}
spriteset (tep70bs_v5_loading_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32 +415, 40 +67, 0)
}
spriteset (tep70bs_v5_traveling_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32 +415, 40 +134, 0)
}
spritegroup tep70bs_v5_normal_sprites_right
{
loading: tep70bs_v5_loading_sprites_right;
 loaded: tep70bs_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v5_normal_sprites_left;
 tep70bs_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v5_normal_sprites_right;
 tep70bs_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v5_sprites_left2;
 1: tep70bs_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v5_sprites_left1;
 128: tep70bs_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v5_sprites_right2;
 1: tep70bs_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v5_sprites_right1;
 128: tep70bs_v5_sprites_right1;
}
spriteset (tep70bs_v6_notpowered_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 241, 0)
}
spriteset (tep70bs_v6_loading_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 241 +67, 0)
}
spriteset (tep70bs_v6_traveling_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 241 +134, 0)
}
spritegroup tep70bs_v6_normal_sprites_left
{
loading: tep70bs_v6_loading_sprites_left;
 loaded: tep70bs_v6_traveling_sprites_left;
}
spriteset (tep70bs_v6_notpowered_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32, 241, 0)
}
spriteset (tep70bs_v6_loading_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32 +415, 241 +67, 0)
}
spriteset (tep70bs_v6_traveling_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32 +415, 241 +134, 0)
}
spritegroup tep70bs_v6_normal_sprites_right
{
loading: tep70bs_v6_loading_sprites_right;
 loaded: tep70bs_v6_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v6_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v6_normal_sprites_left;
 tep70bs_v6_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v6_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v6_normal_sprites_right;
 tep70bs_v6_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v6_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v6_sprites_left2;
 1: tep70bs_v6_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v6_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v6_sprites_left1;
 128: tep70bs_v6_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v6_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v6_sprites_right2;
 1: tep70bs_v6_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v6_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v6_sprites_right1;
 128: tep70bs_v6_sprites_right1;
}
spriteset (tep70bs_v7_notpowered_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 442, 0)
}
spriteset (tep70bs_v7_loading_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 442 +67, 0)
}
spriteset (tep70bs_v7_traveling_sprites_left, "src/diesel/tep70bs-part2.png")
{
s13_template(32, 442 +134, 0)
}
spritegroup tep70bs_v7_normal_sprites_left
{
loading: tep70bs_v7_loading_sprites_left;
 loaded: tep70bs_v7_traveling_sprites_left;
}
spriteset (tep70bs_v7_notpowered_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32, 442, 0)
}
spriteset (tep70bs_v7_loading_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32 +415, 442 +67, 0)
}
spriteset (tep70bs_v7_traveling_sprites_right, "src/diesel/tep70bs-part2.png")
{
s13_r_template(32 +415, 442 +134, 0)
}
spritegroup tep70bs_v7_normal_sprites_right
{
loading: tep70bs_v7_loading_sprites_right;
 loaded: tep70bs_v7_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_v7_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v7_normal_sprites_left;
 tep70bs_v7_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_v7_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep70bs_v7_normal_sprites_right;
 tep70bs_v7_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v7_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v7_sprites_left2;
 1: tep70bs_v7_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v7_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v7_sprites_left1;
 128: tep70bs_v7_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v7_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep70bs_v7_sprites_right2;
 1: tep70bs_v7_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep70bs_v7_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep70bs_v7_sprites_right1;
 128: tep70bs_v7_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tep70bs_purchase_sprites, current_year >= 2012)
{
0: tep70bs_v1_purchase_sprites;
 tep70bs_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_left_ldz,
  ((build_year >= 2012) || (date_of_last_service >= date(2012,1,1))))
{
0: tep70bs_v3_sprites_left;
     tep70bs_v6_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_left_pid,
  ((build_year >= 2012) || (date_of_last_service >= date(2012,1,1))))
{
0: tep70bs_v1_sprites_left;
     tep70bs_v5_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_sprites_left,
  cargo_subtype)
{
0: tep70bs_sprites_left_pid;
                            1: tep70bs_sprites_left_pid;
 // back compatibility
                         0xE0: tep70bs_sprites_left_pid;
                   34: tep70bs_sprites_left_pid;
       29: tep70bs_v2_sprites_left;
                       27: tep70bs_sprites_left_ldz;
  32: tep70bs_v4_sprites_left;
           38: tep70bs_v7_sprites_left;
  align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70bs_aGAMEEND_sprites_left,
  cargo_subtype)
{
0: tep70bs_v1_sprites_left;
  1: tep70bs_v2_sprites_left;
  2: tep70bs_v3_sprites_left;
  3: tep70bs_v4_sprites_left;
  4: tep70bs_v5_sprites_left;
  5: tep70bs_v6_sprites_left;
  6: tep70bs_v7_sprites_left;
     align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_right_ldz,
  ((build_year >= 2012) || (date_of_last_service >= date(2012,1,1))))
{
0: tep70bs_v3_sprites_right;
     tep70bs_v6_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_right_pid,
  ((build_year >= 2012) || (date_of_last_service >= date(2012,1,1))))
{
0: tep70bs_v1_sprites_right;
     tep70bs_v5_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_sprites_right,
  cargo_subtype)
{
0: tep70bs_sprites_right_pid;
                            1: tep70bs_sprites_right_pid;
 // back compatibility
                         0xE0: tep70bs_sprites_right_pid;
                   34: tep70bs_sprites_right_pid;
       29: tep70bs_v2_sprites_right;
                       27: tep70bs_sprites_right_ldz;
  32: tep70bs_v4_sprites_right;
           38: tep70bs_v7_sprites_right;
  align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70bs_aGAMEEND_sprites_right,
  cargo_subtype)
{
0: tep70bs_v1_sprites_right;
  1: tep70bs_v2_sprites_right;
  2: tep70bs_v3_sprites_right;
  3: tep70bs_v4_sprites_right;
  4: tep70bs_v5_sprites_right;
  5: tep70bs_v6_sprites_right;
  6: tep70bs_v7_sprites_right;
     align_13_sprites;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_left, build_year >= 2050)
{
0: tep70bs_bGAMEEND_sprites_left;
 tep70bs_aGAMEEND_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_right, build_year >= 2050)
{
0: tep70bs_bGAMEEND_sprites_right;
 tep70bs_aGAMEEND_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) || (position_in_consist == 0) ])
{
1: tep70bs_sprites_left;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep70bs) + 1) % 2))
{
1: tep70bs_sprites_2l;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_old;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_16;
 tep70bs_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_14;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_12;
 tep70bs_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_10;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_8;
 tep70bs_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_6;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_sprites_4;
 tep70bs_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep70bs_sprites_left;
 tep70bs_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep70bs_sprites_start_sp, count_veh_id(tep70bs))
{
1: tep70bs_sprites_1RND;
 tep70bs_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep70bs_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep70bs_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tep70bs_sprites_parent, [ STORE_TEMP(count_veh_id(tep70bs), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep70bs_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep70bs_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep70bs_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep70bs_160_speed, [ STORE_TEMP((age_in_days >= (30 * 365 + 30 / 4)) ? 140 : 160, 0), (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : LOAD_TEMP(0) * (100 - speed_penalty_percent) / 100 : LOAD_TEMP(0) ])
{ return; }
switch (FEAT_TRAINS, SELF, tep70bs_120_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, tep70bs_speed,
  cargo_subtype + 250 * (build_year >= 2050))
{
0xE0: tep70bs_120_speed;
        tep70bs_160_speed;
}
switch (FEAT_TRAINS, SELF, tep70bs_120_running_cost_factor,
[ STORE_TEMP(332, 0), // Моторы
   STORE_TEMP(47, 1), // Бригада
   STORE_TEMP(116, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(81, 4), // ТО
   STORE_TEMP(6, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(135, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 582
switch (FEAT_TRAINS, SELF, tep70bs_160_running_cost_factor,
[ STORE_TEMP(358, 0), // Моторы
   STORE_TEMP(50, 1), // Бригада
   STORE_TEMP(126, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(88, 4), // ТО
   STORE_TEMP(6, 5), // Сертификация
   STORE_TEMP(160, 6), // Скорость
   STORE_TEMP(135, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 628
switch (FEAT_TRAINS, SELF, tep70bs_running_cost_factor,
  cargo_subtype + 250 * (build_year >= 2050))
{
0xE0: tep70bs_120_running_cost_factor;
        tep70bs_160_running_cost_factor;
}
switch (FEAT_TRAINS, SELF, tep70bs_tractive_effort_coefficient,
  cargo_subtype + 250 * (build_year >= 2050))
{
0xE0: return int(256*(384.0)/(135)/9.8);
        return int(256*(310.0)/(135)/9.8);
}
switch (FEAT_TRAINS, SELF, tep70bs_aGAMEEND_cargo_subtype_text, cargo_subtype)
{
0: return string(STR_REFIT_GAMEEND_SP, 2006, string(STR_REFIT_LV_RZD_PID));
  1: return string(STR_REFIT_GAMEEND_SP, 2006, string(STR_REFIT_LV_BELARUSSIAN_RAILWAY));
  2: return string(STR_REFIT_GAMEEND_SP, 2006, string(STR_REFIT_LV_LDZ));
  3: return string(STR_REFIT_GAMEEND_SERVICE_SP, 2006, 2008, string(STR_REFIT_LV_UZBEKISTAN_TEMIR_YOLLARI));
  4: return string(STR_REFIT_GAMEEND_SERVICE_SP, 2006, 2012, string(STR_REFIT_LV_RZD_PID));
  5: return string(STR_REFIT_GAMEEND_SERVICE_SP, 2006, 2012, string(STR_REFIT_LV_LDZ));
  6: return string(STR_REFIT_GAMEEND_SERVICE_SP, 2006, 2019, string(STR_REFIT_LV_CRIMEAN_RAILWAY));
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_alt_b2008_cargo_subtype_text, cargo_subtype)
{
29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 27: general_cargo_subtype_text_LV_LDZ;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_alt_a2008_cargo_subtype_text, cargo_subtype)
{
29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 27: general_cargo_subtype_text_LV_LDZ;
 32: general_cargo_subtype_text_LV_UZBEKISTAN_TEMIR_YOLLARI;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_alt_a2012_cargo_subtype_text, cargo_subtype)
{
34: general_cargo_subtype_text_LV_RZD_PID;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 27: general_cargo_subtype_text_LV_LDZ;
 32: general_cargo_subtype_text_LV_UZBEKISTAN_TEMIR_YOLLARI;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_alt_a2019_cargo_subtype_text, cargo_subtype)
{
34: general_cargo_subtype_text_LV_RZD_PID;
 29: general_cargo_subtype_text_LV_BELARUSSIAN_RAILWAY;
 27: general_cargo_subtype_text_LV_LDZ;
 32: general_cargo_subtype_text_LV_UZBEKISTAN_TEMIR_YOLLARI;
 38: general_cargo_subtype_text_LV_CRIMEAN_RAILWAY;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_alt_cargo_subtype_text, ((build_year >= 2008) || (date_of_last_service >= date(2008,1,1))) + ((build_year >= 2012) || (date_of_last_service >= date(2012,1,1))) + ((build_year >= 2019) || (date_of_last_service >= date(2019,1,1))))
{
0: tep70bs_bGAMEEND_alt_b2008_cargo_subtype_text;
 1: tep70bs_bGAMEEND_alt_a2008_cargo_subtype_text;
 2: tep70bs_bGAMEEND_alt_a2012_cargo_subtype_text;
 tep70bs_bGAMEEND_alt_a2019_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep70bs_bGAMEEND_cargo_subtype_text, cargo_subtype)
{
0xE0: return string(STR_REFIT_FACTORY_GENERAL_TYPE_SP, string(STR_REFIT_WITH_REDUCED_SPEED), string(STR_EMPTY));
 tep70bs_bGAMEEND_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep70bs_cargo_subtype_text, build_year >= 2050)
{
0: tep70bs_bGAMEEND_cargo_subtype_text;
 tep70bs_aGAMEEND_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tep70bs_refit_cost, ((extra_callback_info1 & 0xFF00) >= (0xE0 << 8)) + ((cargo_subtype >= 0xE0) * 2))
{
1: return -5;
 2: return 9;
 return 0 | CB_RESULT_AUTOREFIT;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 13), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 13), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) || (position_in_consist == 0) ])
{
1: tep70bs_create_effect_sprites_left;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep70bs) + 1) % 2))
{
1: tep70bs_create_effect_sprites_2l;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_old;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_16;
 tep70bs_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_14;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_12;
 tep70bs_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_10;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_8;
 tep70bs_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_6;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep70bs) ])
{
1: tep70bs_create_effect_sprites_4;
 tep70bs_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep70bs_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep70bs_create_effect_sprites_left;
 tep70bs_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep70bs_create_effect, count_veh_id(tep70bs))
{
1: tep70bs_create_effect_1RND;
 tep70bs_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep70bs_a2018_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tep70bs), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep70bs_a2018_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tep70bs), 0), STORE_TEMP(vehicle_type_id == tep70bs, 1) ])
{ tep70bs_a2018_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tep70bs_a2018_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tep70bs_a2018_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tep70bs_b2018_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep70bs_bitmask_vehicle_info_change2, build_year >= 2018)
{
0: tep70bs_b2018_bitmask_vehicle_info;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep70bs_bitmask_vehicle_info_change1, build_year >= 2018)
{
0: return bitmask(0);
 tep70bs_a2018_bitmask_vehicle_info;
}
switch (FEAT_TRAINS, SELF, tep70bs_bitmask_vehicle_info, build_year >= 2018)
{
0: tep70bs_bitmask_vehicle_info_change2;
 tep70bs_bitmask_vehicle_info_change1;
}
switch (FEAT_TRAINS, SELF, tep70bs_b2018_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (2006 << 16), 0x101), STORE_TEMP(2018 | (string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) << 16), 0x102), STORE_TEMP(string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 120), 0x103)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, tep70bs_b2018_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA)| (string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 120) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, tep70bs_b2018_additional_text, current_year <= 2018)
{
1: tep70bs_b2018_additional_text_hidden;
 tep70bs_b2018_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep70bs_a2018_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2018 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) | (string(STR_PURCHASE_HINT_LIST2_COMMENT, string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 120), string(STR_PURCHASE_HINT_TEP70BS)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, tep70bs_a2018_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA) | (string(STR_PURCHASE_HINT_LIST2_COMMENT, string(STR_PURCHASE_HINT_EDITION_NEW_SPEED, 120), string(STR_PURCHASE_HINT_TEP70BS)) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, tep70bs_a2018_additional_text, current_year <= 2023)
{
1: tep70bs_a2018_additional_text_hidden;
 tep70bs_a2018_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tep70bs_additional_text, current_year >= 2018)
{
0: tep70bs_b2018_additional_text;
 tep70bs_a2018_additional_text;
}
item (FEAT_TRAINS, tep70bs, 175)
{
property
{
name: string(STR_NAME_TEP70BS);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2006 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2006 -2050 -2 < retire_early_default ? 2050 -2006 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2006 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2006 -2050 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 95 > 255 ? 255 : 95;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (3022 * 0.9865);
 weight: (135) ton;
 tractive_effort_coefficient: (((310.0))/((135))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tep70;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tep70bs_additional_text;
               articulated_part: articulated_part_dummy5;
           bitmask_vehicle_info: tep70bs_bitmask_vehicle_info;
               can_attach_wagon: any_can_attach_wagon;
                 cargo_capacity: return 0;
             cargo_subtype_text: tep70bs_cargo_subtype_text;
                 colour_mapping: any_cc_colour;
                  create_effect: tep70bs_create_effect;
                        default: tep70bs_sprites;
                       purchase: tep70bs_purchase_sprites;
                 purchase_speed: return 160;
                     refit_cost: tep70bs_refit_cost;
            running_cost_factor: tep70bs_running_cost_factor;
                          speed: tep70bs_speed;
                     start_stop: any_start_stop;
    tractive_effort_coefficient: tep70bs_tractive_effort_coefficient;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep70bs)
{
property
{
name: string(STR_LONGNAME_TEP70BS);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep70bs)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep70bs)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep70bs)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep70bs)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep70bs)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tep150
spriteset (tep150_purchase_graphics_ico, "src/diesel/tep150.png")
{
new_purchase_template(0, 0)
}
spriteset (tep150_purchase_graphics_noico, "src/diesel/tep150.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tep150_purchase_sprites, enable_icons)
{
1: tep150_purchase_graphics_ico;
 tep150_purchase_graphics_noico;
}
spriteset (tep150_notpowered_sprites_left, "src/diesel/tep150.png")
{
s12_template(32, 40, 0)
}
spriteset (tep150_loading_sprites_left, "src/diesel/tep150.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tep150_traveling_sprites_left, "src/diesel/tep150.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tep150_normal_sprites_left
{
loading: tep150_loading_sprites_left;
 loaded: tep150_traveling_sprites_left;
}
spriteset (tep150_notpowered_sprites_right, "src/diesel/tep150.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tep150_loading_sprites_right, "src/diesel/tep150.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tep150_traveling_sprites_right, "src/diesel/tep150.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tep150_normal_sprites_right
{
loading: tep150_loading_sprites_right;
 loaded: tep150_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep150_normal_sprites_left;
 tep150_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tep150_normal_sprites_right;
 tep150_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tep150_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep150_sprites_left2;
 1: tep150_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tep150_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep150_sprites_left1;
 128: tep150_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tep150_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tep150_sprites_right2;
 1: tep150_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tep150_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tep150_sprites_right1;
 128: tep150_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) || (position_in_consist == 0) ])
{
1: tep150_sprites_left;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tep150) + 1) % 2))
{
1: tep150_sprites_2l;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_old;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_16;
 tep150_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_14;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_12;
 tep150_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_10;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_8;
 tep150_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_6;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tep150) ])
{
1: tep150_sprites_4;
 tep150_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tep150_sprites_left;
 tep150_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tep150_sprites_start_sp, count_veh_id(tep150))
{
1: tep150_sprites_1RND;
 tep150_sprites_start;
}
switch (FEAT_TRAINS, SELF, tep150_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tep150_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tep150_sprites_parent, [ STORE_TEMP(count_veh_id(tep150), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tep150_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tep150_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tep150_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tep150_create_effect, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tep150_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 160 * (100 - speed_penalty_percent) / 100 : 160)
{ return; }
switch (FEAT_TRAINS, SELF, tep150_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tep150), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tep150_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tep150), 0), STORE_TEMP(vehicle_type_id == tep150, 1) ])
{ tep150_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tep150_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tep150_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tep150_running_cost_factor,
[ STORE_TEMP(316, 0), // Моторы
   STORE_TEMP(44, 1), // Бригада
   STORE_TEMP(111, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(78, 4), // ТО
   STORE_TEMP(6, 5), // Сертификация
   STORE_TEMP(160, 6), // Скорость
   STORE_TEMP(135, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 554
switch (FEAT_TRAINS, SELF, tep150_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (2005 << 16), 0x101), STORE_TEMP(2008 | ((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tep150_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tep150_additional_text, current_year <= 2008)
{
1: tep150_additional_text_hidden;
 tep150_additional_text_shown;
}
item (FEAT_TRAINS, tep150, 717)
{
property
{
name: string(STR_NAME_TEP150);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2005 - delta_age, 1, 1);
 model_life: 2008 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2005 -2008 -2 < retire_early_default ? 2008 -2005 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2005 -2008 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2005 -2008 -1+retire_late_default;
 vehicle_life: 25;
 reliability_decay: 10;
 cost_factor: 67 > 255 ? 255 : 67;
 length: 8;
    cargo_allow_refit: [PASS];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (3333 * 0.9865);
 weight: (135) ton;
 tractive_effort_coefficient: (((270.0))/((135))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R2;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tep150_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: tep150_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: tep150_create_effect;
                 default: tep150_sprites;
                purchase: tep150_purchase_sprites;
          purchase_speed: return 160;
     running_cost_factor: tep150_running_cost_factor;
                   speed: tep150_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tep150)
{
property
{
name: string(STR_LONGNAME_TEP150);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tep150)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tep150)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tep150)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tep150)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tep150)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tera1
spriteset (tera1_purchase_graphics_ico, "src/diesel/tera1.png")
{
new_purchase_template(0, 0)
}
spriteset (tera1_purchase_graphics_noico, "src/diesel/tera1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tera1_purchase_sprites, enable_icons)
{
1: tera1_purchase_graphics_ico;
 tera1_purchase_graphics_noico;
}
spriteset (tera1_v1_notpowered_sprites_left, "src/diesel/tera1.png")
{
s12_template(32, 40, 0)
}
spriteset (tera1_v1_loading_sprites_left, "src/diesel/tera1.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (tera1_v1_traveling_sprites_left, "src/diesel/tera1.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup tera1_v1_normal_sprites_left
{
loading: tera1_v1_loading_sprites_left;
 loaded: tera1_v1_traveling_sprites_left;
}
spriteset (tera1_v1_notpowered_sprites_right, "src/diesel/tera1.png")
{
s12_r_template(32, 40, 0)
}
spriteset (tera1_v1_loading_sprites_right, "src/diesel/tera1.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (tera1_v1_traveling_sprites_right, "src/diesel/tera1.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup tera1_v1_normal_sprites_right
{
loading: tera1_v1_loading_sprites_right;
 loaded: tera1_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tera1_v1_normal_sprites_left;
 tera1_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tera1_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tera1_v1_normal_sprites_right;
 tera1_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tera1_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tera1_v1_sprites_left2;
 1: tera1_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tera1_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tera1_v1_sprites_left1;
 128: tera1_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tera1_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tera1_v1_sprites_right2;
 1: tera1_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tera1_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tera1_v1_sprites_right1;
 128: tera1_v1_sprites_right1;
}
spriteset (tera1_v2_notpowered_sprites_left, "src/diesel/tera1.png")
{
s12_template(32, 241, 0)
}
spriteset (tera1_v2_loading_sprites_left, "src/diesel/tera1.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (tera1_v2_traveling_sprites_left, "src/diesel/tera1.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup tera1_v2_normal_sprites_left
{
loading: tera1_v2_loading_sprites_left;
 loaded: tera1_v2_traveling_sprites_left;
}
spriteset (tera1_v2_notpowered_sprites_right, "src/diesel/tera1.png")
{
s12_r_template(32, 241, 0)
}
spriteset (tera1_v2_loading_sprites_right, "src/diesel/tera1.png")
{
s12_r_template(32 +415, 241 +67, 0)
}
spriteset (tera1_v2_traveling_sprites_right, "src/diesel/tera1.png")
{
s12_r_template(32 +415, 241 +134, 0)
}
spritegroup tera1_v2_normal_sprites_right
{
loading: tera1_v2_loading_sprites_right;
 loaded: tera1_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tera1_v2_normal_sprites_left;
 tera1_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tera1_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tera1_v2_normal_sprites_right;
 tera1_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tera1_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tera1_v2_sprites_left2;
 1: tera1_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tera1_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tera1_v2_sprites_left1;
 128: tera1_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tera1_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tera1_v2_sprites_right2;
 1: tera1_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tera1_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tera1_v2_sprites_right1;
 128: tera1_v2_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_left,
  cargo_subtype)
{
0: tera1_v1_sprites_left;
  1: tera1_v2_sprites_left;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_right,
  cargo_subtype)
{
0: tera1_v1_sprites_right;
  1: tera1_v2_sprites_right;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) || (position_in_consist == 0) ])
{
1: tera1_sprites_left;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tera1) + 1) % 2))
{
1: tera1_sprites_2l;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_old;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_16;
 tera1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_14;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_12;
 tera1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_10;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_8;
 tera1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_6;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_sprites_4;
 tera1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tera1_sprites_left;
 tera1_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tera1_sprites_start_sp, count_veh_id(tera1))
{
1: tera1_sprites_1RND;
 tera1_sprites_start;
}
switch (FEAT_TRAINS, SELF, tera1_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tera1_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tera1_sprites_parent, [ STORE_TEMP(count_veh_id(tera1), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tera1_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tera1_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tera1_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tera1_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_96);
 return string(STR_REFIT_TTD_93);
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) || (position_in_consist == 0) ])
{
1: tera1_create_effect_sprites_left;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tera1) + 1) % 2))
{
1: tera1_create_effect_sprites_2l;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_old;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_16;
 tera1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_14;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_12;
 tera1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_10;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_8;
 tera1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_6;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tera1) ])
{
1: tera1_create_effect_sprites_4;
 tera1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tera1_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tera1_create_effect_sprites_left;
 tera1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tera1_create_effect, count_veh_id(tera1))
{
1: tera1_create_effect_1RND;
 tera1_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tera1_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 115 * (100 - speed_penalty_percent) / 100 : 115)
{ return; }
switch (FEAT_TRAINS, SELF, tera1_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tera1), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tera1_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tera1), 0), STORE_TEMP(vehicle_type_id == tera1, 1) ])
{ tera1_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tera1_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tera1_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tera1_running_cost_factor,
[ STORE_TEMP(627, 0), // Моторы
   STORE_TEMP(88, 1), // Бригада
   STORE_TEMP(220, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(154, 4), // ТО
   STORE_TEMP(11, 5), // Сертификация
   STORE_TEMP(115, 6), // Скорость
   STORE_TEMP(180, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 1100
switch (FEAT_TRAINS, SELF, tera1_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1998 << 16), 0x101), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tera1_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tera1_additional_text, current_year <= 1998)
{
1: tera1_additional_text_hidden;
 tera1_additional_text_shown;
}
item (FEAT_TRAINS, tera1, 201)
{
property
{
name: string(STR_NAME_TERA1);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1998 - delta_age, 1, 1);
 model_life: 1998 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1998 -1998 -2 < retire_early_default ? 1998 -1998 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1998 -1998 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1998 -1998 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 103 > 255 ? 255 : 103;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (3209 * 0.9865);
 weight: (180) ton;
 tractive_effort_coefficient: (((582.5))/((180))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tera1_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: tera1_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tera1_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tera1_create_effect;
                 default: tera1_sprites;
                purchase: tera1_purchase_sprites;
          purchase_speed: return 115;
     running_cost_factor: tera1_running_cost_factor;
                   speed: tera1_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tera1)
{
property
{
name: string(STR_LONGNAME_TERA1);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tera1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tera1)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tera1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tera1)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tera1)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tg100
spriteset (tg100_purchase_graphics_ico, "src/diesel/tg100.png")
{
new_purchase_template(0, 0)
}
spriteset (tg100_purchase_graphics_noico, "src/diesel/tg100.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tg100_purchase_sprites, enable_icons)
{
1: tg100_purchase_graphics_ico;
 tg100_purchase_graphics_noico;
}
spriteset (tg100_notpowered_sprites_left, "src/diesel/tg100.png")
{
s9_template(32, 40, 0)
}
spriteset (tg100_loading_sprites_left, "src/diesel/tg100.png")
{
s9_template(32, 40 +67, 0)
}
spriteset (tg100_traveling_sprites_left, "src/diesel/tg100.png")
{
s9_template(32, 40 +134, 0)
}
spritegroup tg100_normal_sprites_left
{
loading: tg100_loading_sprites_left;
 loaded: tg100_traveling_sprites_left;
}
spriteset (tg100_sprites_right, "src/diesel/tg100.png")
{
s9_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, tg100_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tg100_normal_sprites_left;
 tg100_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tg100_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tg100_sprites_left2;
 1: tg100_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tg100_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tg100_sprites_left1;
 128: tg100_sprites_left1;
}
switch (FEAT_TRAINS, SELF, tg100_sprites_start, position_in_articulated_veh)
{
0: tg100_sprites_left;
 2: tg100_sprites_right;
 4: tg100_sprites_left;
 6: tg100_sprites_right;
 8: tg100_sprites_left;
 10: tg100_sprites_right;
 12: tg100_sprites_left;
 tg100_sprites_right;
}
switch (FEAT_TRAINS, SELF, tg100_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tg100_sprites_start; }
switch (FEAT_TRAINS, PARENT, tg100_sprites_parent, [ STORE_TEMP(count_veh_id(tg100), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tg100_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tg100_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tg100_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tg100_create_effect_sprites_left, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tg100_create_effect_sprites_right, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tg100_create_effect_sprites_start, position_in_articulated_veh)
{
0: tg100_create_effect_sprites_left;
 2: tg100_create_effect_sprites_right;
 4: tg100_create_effect_sprites_left;
 6: tg100_create_effect_sprites_right;
 8: tg100_create_effect_sprites_left;
 10: tg100_create_effect_sprites_right;
 12: tg100_create_effect_sprites_left;
 tg100_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tg100_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, tg100_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tg100_articulated_part, extra_callback_info1)
{
1: return dummy1;
 2: return tg100;
 3: return dummy1;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, tg100_running_cost_factor,
[ STORE_TEMP(2 * 198, 0), // Моторы
   STORE_TEMP(28, 1), // Бригада
   STORE_TEMP(2 * 70, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2 * 49, 4), // ТО
   STORE_TEMP(2 * 3, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(2 * 84, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 2 * 348
switch (FEAT_TRAINS, SELF, tg100_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1959 << 16), 0x101), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tg100_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1918 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_BUSSR) : (current_year < 1935 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1958 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 1970 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_VOROSHILOVGRAD) : (current_year < 2014 ? string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AUSSR) : string(STR_PURCHASE_HINT_FACTORY_LUGANSK_AMAIDAN))))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tg100_additional_text, current_year <= 1959)
{
1: tg100_additional_text_hidden;
 tg100_additional_text_shown;
}
item (FEAT_TRAINS, tg100, 655)
{
property
{
name: string(STR_NAME_TG100);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1959 - delta_age, 1, 1);
 model_life: 1959 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1959 -1959 -2 < retire_early_default ? 1959 -1959 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1959 -1959 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1959 -1959 -1+retire_late_default;
 vehicle_life: 10;
 reliability_decay: 40;
 cost_factor: 2 * 28 > 255 ? 255 : 2 * 28;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (2 * 1350 * 0.9865);
 weight: (2 * 80) ton;
 tractive_effort_coefficient: (((2 * 243.0))/((2 * 80))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tg100_additional_text;
        articulated_part: tg100_articulated_part;
    bitmask_vehicle_info: tg100_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: tg100_create_effect_sprites_start;
                 default: tg100_sprites;
                purchase: tg100_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: tg100_running_cost_factor;
                   speed: tg100_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tg100)
{
property
{
name: string(STR_LONGNAME_TG100);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tg100)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tg100)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tg100)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tg100)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tg100)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tg102
spriteset (tg102_v1_purchase_graphics_ico, "src/diesel/tg102-pre.png")
{
new_purchase_template(0, 0)
}
spriteset (tg102_v1_purchase_graphics_noico, "src/diesel/tg102-pre.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tg102_v1_purchase_sprites, enable_icons)
{
1: tg102_v1_purchase_graphics_ico;
 tg102_v1_purchase_graphics_noico;
}
spriteset (tg102_v1_notpowered_sprites_left, "src/diesel/tg102-pre.png")
{
s9_template(32, 40, 0)
}
spriteset (tg102_v1_loading_sprites_left, "src/diesel/tg102-pre.png")
{
s9_template(32, 40 +67, 0)
}
spriteset (tg102_v1_traveling_sprites_left, "src/diesel/tg102-pre.png")
{
s9_template(32, 40 +134, 0)
}
spritegroup tg102_v1_normal_sprites_left
{
loading: tg102_v1_loading_sprites_left;
 loaded: tg102_v1_traveling_sprites_left;
}
spriteset (tg102_v1_sprites_right, "src/diesel/tg102-pre.png")
{
s9_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, tg102_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tg102_v1_normal_sprites_left;
 tg102_v1_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tg102_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tg102_v1_sprites_left2;
 1: tg102_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tg102_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tg102_v1_sprites_left1;
 128: tg102_v1_sprites_left1;
}
spriteset (tg102_v2_purchase_graphics_ico, "src/diesel/tg102.png")
{
new_purchase_template(0, 0)
}
spriteset (tg102_v2_purchase_graphics_noico, "src/diesel/tg102.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tg102_v2_purchase_sprites, enable_icons)
{
1: tg102_v2_purchase_graphics_ico;
 tg102_v2_purchase_graphics_noico;
}
spriteset (tg102_v2_notpowered_sprites_left, "src/diesel/tg102.png")
{
s9_template(32, 40, 0)
}
spriteset (tg102_v2_loading_sprites_left, "src/diesel/tg102.png")
{
s9_template(32, 40 +67, 0)
}
spriteset (tg102_v2_traveling_sprites_left, "src/diesel/tg102.png")
{
s9_template(32, 40 +134, 0)
}
spritegroup tg102_v2_normal_sprites_left
{
loading: tg102_v2_loading_sprites_left;
 loaded: tg102_v2_traveling_sprites_left;
}
spriteset (tg102_v2_sprites_right, "src/diesel/tg102.png")
{
s9_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, tg102_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tg102_v2_normal_sprites_left;
 tg102_v2_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tg102_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tg102_v2_sprites_left2;
 1: tg102_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tg102_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tg102_v2_sprites_left1;
 128: tg102_v2_sprites_left1;
}
spriteset (tg102_v3_notpowered_sprites_left, "src/diesel/tg102.png")
{
s9_template(32, 241, 0)
}
spriteset (tg102_v3_loading_sprites_left, "src/diesel/tg102.png")
{
s9_template(32, 241 +67, 0)
}
spriteset (tg102_v3_traveling_sprites_left, "src/diesel/tg102.png")
{
s9_template(32, 241 +134, 0)
}
spritegroup tg102_v3_normal_sprites_left
{
loading: tg102_v3_loading_sprites_left;
 loaded: tg102_v3_traveling_sprites_left;
}
spriteset (tg102_v3_sprites_right, "src/diesel/tg102.png")
{
s9_r_template(32, 241, 0)
}
switch (FEAT_TRAINS, SELF, tg102_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tg102_v3_normal_sprites_left;
 tg102_v3_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tg102_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tg102_v3_sprites_left2;
 1: tg102_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tg102_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tg102_v3_sprites_left1;
 128: tg102_v3_sprites_left1;
}
spriteset (tg102_v3_purchase_graphics_ico, "src/diesel/tg102-a1963.png")
{
new_purchase_template(0, 0)
}
spriteset (tg102_v3_purchase_graphics_noico, "src/diesel/tg102-a1963.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tg102_v3_purchase_sprites, enable_icons)
{
1: tg102_v3_purchase_graphics_ico;
 tg102_v3_purchase_graphics_noico;
}
spriteset (tg102_a1960_a1963_notpowered_sprites_left, "src/diesel/tg102-a1963.png")
{
s9_template(32, 40, 0)
}
spriteset (tg102_a1960_a1963_loading_sprites_left, "src/diesel/tg102-a1963.png")
{
s9_template(32, 40 +67, 0)
}
spriteset (tg102_a1960_a1963_traveling_sprites_left, "src/diesel/tg102-a1963.png")
{
s9_template(32, 40 +134, 0)
}
spritegroup tg102_a1960_a1963_normal_sprites_left
{
loading: tg102_a1960_a1963_loading_sprites_left;
 loaded: tg102_a1960_a1963_traveling_sprites_left;
}
spriteset (tg102_a1960_a1963_sprites_right, "src/diesel/tg102-a1963.png")
{
s9_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, tg102_a1960_a1963_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tg102_a1960_a1963_normal_sprites_left;
 tg102_a1960_a1963_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tg102_a1960_a1963_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tg102_a1960_a1963_sprites_left2;
 1: tg102_a1960_a1963_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tg102_a1960_a1963_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tg102_a1960_a1963_sprites_left1;
 128: tg102_a1960_a1963_sprites_left1;
}
switch (FEAT_TRAINS, PARENT, tg102_purchase_sprites, (current_year >= 1960) + (current_year >= 1963))
{
0: tg102_v1_purchase_sprites;
 1: tg102_v2_purchase_sprites;
 tg102_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tg102_a1960_b1963_sprites_left,
  cargo_subtype)
{
0: tg102_v2_sprites_left;
  15: tg102_v3_sprites_left;
  align_9_sprites;
}
switch (FEAT_TRAINS, SELF, tg102_a1960_b1963_sprites_right,
  cargo_subtype)
{
0: tg102_v2_sprites_right;
  15: tg102_v3_sprites_right;
  align_9_sprites;
}
switch (FEAT_TRAINS, SELF, tg102_a1960_sprites_left, build_year >= 1963)
{
0: tg102_a1960_b1963_sprites_left;
 tg102_a1960_a1963_sprites_left;
}
switch (FEAT_TRAINS, SELF, tg102_a1960_sprites_right, build_year >= 1963)
{
0: tg102_a1960_b1963_sprites_right;
 tg102_a1960_a1963_sprites_right;
}
switch (FEAT_TRAINS, SELF, tg102_sprites_left, build_year < 1960)
{
1: tg102_v1_sprites_left;
 tg102_a1960_sprites_left;
}
switch (FEAT_TRAINS, SELF, tg102_sprites_right, build_year < 1960)
{
1: tg102_v1_sprites_right;
 tg102_a1960_sprites_right;
}
switch (FEAT_TRAINS, SELF, tg102_sprites_start, position_in_articulated_veh)
{
0: tg102_sprites_left;
 2: tg102_sprites_right;
 4: tg102_sprites_left;
 6: tg102_sprites_right;
 8: tg102_sprites_left;
 10: tg102_sprites_right;
 12: tg102_sprites_left;
 tg102_sprites_right;
}
switch (FEAT_TRAINS, SELF, tg102_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tg102_sprites_start; }
switch (FEAT_TRAINS, PARENT, tg102_sprites_parent, [ STORE_TEMP(count_veh_id(tg102), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tg102_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tg102_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tg102_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tg102_a1960_b1963_cargo_subtype_text, cargo_subtype)
{
15: general_cargo_subtype_text_LV_RAL6002;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tg102_a1960_cargo_subtype_text, build_year >= 1963)
{
0: tg102_a1960_b1963_cargo_subtype_text;
 return CB_RESULT_NO_TEXT;
}
switch (FEAT_TRAINS, SELF, tg102_cargo_subtype_text, build_year < 1960)
{
1: return string(STR_REFIT_PREPRODUCTION);
 tg102_a1960_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tg102_create_effect_sprites_left, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 12), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tg102_create_effect_sprites_right, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 12), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, tg102_create_effect_sprites_start, position_in_articulated_veh)
{
0: tg102_create_effect_sprites_left;
 2: tg102_create_effect_sprites_right;
 4: tg102_create_effect_sprites_left;
 6: tg102_create_effect_sprites_right;
 8: tg102_create_effect_sprites_left;
 10: tg102_create_effect_sprites_right;
 12: tg102_create_effect_sprites_left;
 tg102_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tg102_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, tg102_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tg102_articulated_part, extra_callback_info1)
{
1: return dummy1;
 2: return tg102;
 3: return dummy1;
 return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch (FEAT_TRAINS, SELF, tg102_running_cost_factor,
[ STORE_TEMP(2 * 198, 0), // Моторы
   STORE_TEMP(28, 1), // Бригада
   STORE_TEMP(2 * 70, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2 * 49, 4), // ТО
   STORE_TEMP(2 * 3, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(2 * 84, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 2 * 348
switch (FEAT_TRAINS, SELF, tg102_b1960_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1959 << 16), 0x101), STORE_TEMP((current_year < 1914 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD) : (current_year < 1922 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1914) : (current_year < 1924 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1922) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1924) : string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_AUSSR))))), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tg102_b1960_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL_PROTOTYPE) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1914 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD) : (current_year < 1922 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1914) : (current_year < 1924 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1922) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1924) : string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_AUSSR))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tg102_b1960_additional_text, current_year <= 1959)
{
1: tg102_b1960_additional_text_hidden;
 tg102_b1960_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tg102_a1960_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1966 | ((current_year < 1914 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD) : (current_year < 1922 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1914) : (current_year < 1924 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1922) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1924) : string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_AUSSR))))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tg102_a1960_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_2) << 16), 0x100), STORE_TEMP((current_year < 1914 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD) : (current_year < 1922 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1914) : (current_year < 1924 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1922) : (current_year < 1991 ? string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_A1924) : string(STR_PURCHASE_HINT_FACTORY_PROLETARSKII_ZAVOD_AUSSR))))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tg102_a1960_additional_text, current_year <= 1966)
{
1: tg102_a1960_additional_text_hidden;
 tg102_a1960_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, tg102_additional_text, current_year >= 1960)
{
0: tg102_b1960_additional_text;
 tg102_a1960_additional_text;
}
item (FEAT_TRAINS, tg102, 148)
{
property
{
name: string(STR_NAME_TG102);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1959 - delta_age, 1, 1);
 model_life: 1966 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1959 -1966 -2 < retire_early_default ? 1966 -1959 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1959 -1966 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1959 -1966 -1+retire_late_default;
 vehicle_life: 15;
 reliability_decay: 40;
 cost_factor: 2 * 28 > 255 ? 255 : 2 * 28;
 length: 8;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (2 * 1505 * 0.9865);
 weight: (2 * 84) ton;
 tractive_effort_coefficient: (((2 * 272.0))/((2 * 84))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tg102_additional_text;
        articulated_part: tg102_articulated_part;
    bitmask_vehicle_info: tg102_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tg102_cargo_subtype_text;
          colour_mapping: any_cc_colour;
           create_effect: tg102_create_effect_sprites_start;
                 default: tg102_sprites;
                purchase: tg102_purchase_sprites;
          purchase_speed: return 120;
     running_cost_factor: tg102_running_cost_factor;
                   speed: tg102_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tg102)
{
property
{
name: string(STR_LONGNAME_TG102);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tg102)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tg102)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tg102)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tg102)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tg102)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm23
spriteset (tgm23_purchase_graphics_ico, "src/diesel/tgm23.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm23_purchase_graphics_noico, "src/diesel/tgm23.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm23_purchase_sprites, enable_icons)
{
1: tgm23_purchase_graphics_ico;
 tgm23_purchase_graphics_noico;
}
spriteset (tgm23_left_notpowered_sprites_1_left, "src/diesel/tgm23.png")
{
s5_template(32, 40, 0)
}
spriteset (tgm23_left_notpowered_sprites_2_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +67, 0)
}
spriteset (tgm23_left_notpowered_sprites_3_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +134, 0)
}
spriteset (tgm23_left_notpowered_sprites_4_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +201, 0)
}
spriteset (tgm23_left_traveling_sprites_1_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +268, 0)
}
spriteset (tgm23_left_traveling_sprites_2_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +335, 0)
}
spriteset (tgm23_left_traveling_sprites_3_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +402, 0)
}
spriteset (tgm23_left_traveling_sprites_4_left, "src/diesel/tgm23.png")
{
s5_template(32, 40 +469, 0)
}
spritegroup tgm23_left_normal_sprites_1_left
{
loading: tgm23_left_notpowered_sprites_1_left;
 loaded: tgm23_left_traveling_sprites_1_left;
}
spritegroup tgm23_left_normal_sprites_2_left
{
loading: tgm23_left_notpowered_sprites_2_left;
 loaded: tgm23_left_traveling_sprites_2_left;
}
spritegroup tgm23_left_normal_sprites_3_left
{
loading: tgm23_left_notpowered_sprites_3_left;
 loaded: tgm23_left_traveling_sprites_3_left;
}
spritegroup tgm23_left_normal_sprites_4_left
{
loading: tgm23_left_notpowered_sprites_4_left;
 loaded: tgm23_left_traveling_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23_left_notpowered_sprites_left, LOAD_TEMP(3))
{
0: tgm23_left_notpowered_sprites_1_left;
 1: tgm23_left_notpowered_sprites_2_left;
 2: tgm23_left_notpowered_sprites_3_left;
 tgm23_left_notpowered_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23_left_normal_sprites_left, LOAD_TEMP(3))
{
0: tgm23_left_normal_sprites_1_left;
 1: tgm23_left_normal_sprites_2_left;
 2: tgm23_left_normal_sprites_3_left;
 tgm23_left_normal_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23_left_sprites_start2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm23_left_normal_sprites_left;
 tgm23_left_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tgm23_left_sprites_start1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm23_left_sprites_start2;
 1: tgm23_left_sprites_start2;
}
random_switch (FEAT_TRAINS, SELF, tgm23_left_sprites_start, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm23_left_sprites_start1;
 128: tgm23_left_sprites_start1;
}
spriteset (tgm23_right_notpowered_sprites_1_left, "src/diesel/tgm23.png")
{
s5_template(244, 40, 0)
}
spriteset (tgm23_right_notpowered_sprites_2_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +67, 0)
}
spriteset (tgm23_right_notpowered_sprites_3_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +134, 0)
}
spriteset (tgm23_right_notpowered_sprites_4_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +201, 0)
}
spriteset (tgm23_right_traveling_sprites_1_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +268, 0)
}
spriteset (tgm23_right_traveling_sprites_2_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +335, 0)
}
spriteset (tgm23_right_traveling_sprites_3_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +402, 0)
}
spriteset (tgm23_right_traveling_sprites_4_left, "src/diesel/tgm23.png")
{
s5_template(244, 40 +469, 0)
}
spritegroup tgm23_right_normal_sprites_1_left
{
loading: tgm23_right_notpowered_sprites_1_left;
 loaded: tgm23_right_traveling_sprites_1_left;
}
spritegroup tgm23_right_normal_sprites_2_left
{
loading: tgm23_right_notpowered_sprites_2_left;
 loaded: tgm23_right_traveling_sprites_2_left;
}
spritegroup tgm23_right_normal_sprites_3_left
{
loading: tgm23_right_notpowered_sprites_3_left;
 loaded: tgm23_right_traveling_sprites_3_left;
}
spritegroup tgm23_right_normal_sprites_4_left
{
loading: tgm23_right_notpowered_sprites_4_left;
 loaded: tgm23_right_traveling_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23_right_notpowered_sprites_left, LOAD_TEMP(3))
{
0: tgm23_right_notpowered_sprites_1_left;
 1: tgm23_right_notpowered_sprites_2_left;
 2: tgm23_right_notpowered_sprites_3_left;
 tgm23_right_notpowered_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23_right_normal_sprites_left, LOAD_TEMP(3))
{
0: tgm23_right_normal_sprites_1_left;
 1: tgm23_right_normal_sprites_2_left;
 2: tgm23_right_normal_sprites_3_left;
 tgm23_right_normal_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23_right_sprites_start2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm23_right_normal_sprites_left;
 tgm23_right_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tgm23_right_sprites_start1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm23_right_sprites_start2;
 1: tgm23_right_sprites_start2;
}
random_switch (FEAT_TRAINS, SELF, tgm23_right_sprites_start, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm23_right_sprites_start1;
 128: tgm23_right_sprites_start1;
}
switch (FEAT_TRAINS, SELF, tgm23_sprites_left, 0)
{ tgm23_left_sprites_start; }
switch (FEAT_TRAINS, SELF, tgm23_sprites_right, 0)
{ tgm23_right_sprites_start; }
switch (FEAT_TRAINS, SELF, tgm23_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tgm23_sprites_left;
 tgm23_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm23_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm23_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm23_sprites_parent, [ STORE_TEMP(count_veh_id(tgm23), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm23_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm23_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm23_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm23_colour_mapping,
  cargo_subtype)
{
0: return tgm23_cc + 0;
  1: return tgm23_cc + 1;
  2: return tgm23_cc + 2;
  3: return tgm23_cc + 3;
  4: return tgm23_cc + 4;
  5: return tgm23_cc + 5;
  6: return tgm23_cc + 6;
  7: return tgm23_cc + 7;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tgm23_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_B5);
 2: return string(STR_REFIT_TTD_63);
 3: return string(STR_REFIT_TTD_54);
 4: return string(STR_REFIT_TTD_31);
 5: return string(STR_REFIT_TTD_93);
 6: return string(STR_REFIT_TTD_96);
 7: return string(STR_REFIT_TTD_42);
 return string(STR_REFIT_TTD_B6);
}
switch (FEAT_TRAINS, SELF, tgm23_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 9), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm23_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -3, 0, 9), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm23_create_effect, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tgm23_create_effect_sprites_left;
 tgm23_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm23_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 60 * (100 - speed_penalty_percent) / 100 : 60)
{ return; }
switch (FEAT_TRAINS, SELF, tgm23_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tgm23_running_cost_factor,
[ STORE_TEMP(22, 0), // Моторы
   STORE_TEMP(3, 1), // Бригада
   STORE_TEMP(8, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(5, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(60, 6), // Скорость
   STORE_TEMP(44, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 38
switch (FEAT_TRAINS, SELF, tgm23_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1962 << 16), 0x101), STORE_TEMP(1977 | (string(STR_PURCHASE_HINT_FACTORY_MUROM) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm23_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_MUROM), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm23_additional_text, current_year <= 1977)
{
1: tgm23_additional_text_hidden;
 tgm23_additional_text_shown;
}
item (FEAT_TRAINS, tgm23, 780)
{
property
{
name: string(STR_NAME_TGM23);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1962 - delta_age, 1, 1);
 model_life: 1977 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1962 -1977 -2 < retire_early_default ? 1977 -1962 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1962 -1977 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1962 -1977 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 5 > 255 ? 255 : 5;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (320 * 0.9865);
 weight: (44) ton;
 tractive_effort_coefficient: (((142.0))/((44))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tgm23_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm23_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm23_create_effect;
                 default: tgm23_sprites;
                purchase: tgm23_purchase_sprites;
          purchase_speed: return 60;
     running_cost_factor: tgm23_running_cost_factor;
                   speed: tgm23_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm23)
{
property
{
name: string(STR_LONGNAME_TGM23);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm23)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm23)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm23)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm23)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm23)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm23b
spriteset (tgm23b_purchase_graphics_ico, "src/diesel/tgm23b.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm23b_purchase_graphics_noico, "src/diesel/tgm23b.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm23b_purchase_sprites, enable_icons)
{
1: tgm23b_purchase_graphics_ico;
 tgm23b_purchase_graphics_noico;
}
spriteset (tgm23b_left_notpowered_sprites_1_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40, 0)
}
spriteset (tgm23b_left_notpowered_sprites_2_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +67, 0)
}
spriteset (tgm23b_left_notpowered_sprites_3_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +134, 0)
}
spriteset (tgm23b_left_notpowered_sprites_4_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +201, 0)
}
spriteset (tgm23b_left_loading_sprites_1_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +268, 0)
}
spriteset (tgm23b_left_loading_sprites_2_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +335, 0)
}
spriteset (tgm23b_left_loading_sprites_3_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +402, 0)
}
spriteset (tgm23b_left_loading_sprites_4_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +469, 0)
}
spriteset (tgm23b_left_traveling_sprites_1_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +536, 0)
}
spriteset (tgm23b_left_traveling_sprites_2_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +603, 0)
}
spriteset (tgm23b_left_traveling_sprites_3_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +670, 0)
}
spriteset (tgm23b_left_traveling_sprites_4_left, "src/diesel/tgm23b.png")
{
s5_template(32, 40 +737, 0)
}
spritegroup tgm23b_left_normal_sprites_1_left
{
loading: tgm23b_left_loading_sprites_1_left;
 loaded: tgm23b_left_traveling_sprites_1_left;
}
spritegroup tgm23b_left_normal_sprites_2_left
{
loading: tgm23b_left_loading_sprites_2_left;
 loaded: tgm23b_left_traveling_sprites_2_left;
}
spritegroup tgm23b_left_normal_sprites_3_left
{
loading: tgm23b_left_loading_sprites_3_left;
 loaded: tgm23b_left_traveling_sprites_3_left;
}
spritegroup tgm23b_left_normal_sprites_4_left
{
loading: tgm23b_left_loading_sprites_4_left;
 loaded: tgm23b_left_traveling_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23b_left_notpowered_sprites_left, LOAD_TEMP(3))
{
0: tgm23b_left_notpowered_sprites_1_left;
 1: tgm23b_left_notpowered_sprites_2_left;
 2: tgm23b_left_notpowered_sprites_3_left;
 tgm23b_left_notpowered_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23b_left_normal_sprites_left, LOAD_TEMP(3))
{
0: tgm23b_left_normal_sprites_1_left;
 1: tgm23b_left_normal_sprites_2_left;
 2: tgm23b_left_normal_sprites_3_left;
 tgm23b_left_normal_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23b_left_sprites_start2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm23b_left_normal_sprites_left;
 tgm23b_left_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tgm23b_left_sprites_start1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm23b_left_sprites_start2;
 1: tgm23b_left_sprites_start2;
}
random_switch (FEAT_TRAINS, SELF, tgm23b_left_sprites_start, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm23b_left_sprites_start1;
 128: tgm23b_left_sprites_start1;
}
spriteset (tgm23b_right_notpowered_sprites_1_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40, 0)
}
spriteset (tgm23b_right_notpowered_sprites_2_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +67, 0)
}
spriteset (tgm23b_right_notpowered_sprites_3_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +134, 0)
}
spriteset (tgm23b_right_notpowered_sprites_4_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +201, 0)
}
spriteset (tgm23b_right_loading_sprites_1_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +268, 0)
}
spriteset (tgm23b_right_loading_sprites_2_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +335, 0)
}
spriteset (tgm23b_right_loading_sprites_3_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +402, 0)
}
spriteset (tgm23b_right_loading_sprites_4_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +469, 0)
}
spriteset (tgm23b_right_traveling_sprites_1_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +536, 0)
}
spriteset (tgm23b_right_traveling_sprites_2_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +603, 0)
}
spriteset (tgm23b_right_traveling_sprites_3_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +670, 0)
}
spriteset (tgm23b_right_traveling_sprites_4_left, "src/diesel/tgm23b.png")
{
s5_template(244, 40 +737, 0)
}
spritegroup tgm23b_right_normal_sprites_1_left
{
loading: tgm23b_right_loading_sprites_1_left;
 loaded: tgm23b_right_traveling_sprites_1_left;
}
spritegroup tgm23b_right_normal_sprites_2_left
{
loading: tgm23b_right_loading_sprites_2_left;
 loaded: tgm23b_right_traveling_sprites_2_left;
}
spritegroup tgm23b_right_normal_sprites_3_left
{
loading: tgm23b_right_loading_sprites_3_left;
 loaded: tgm23b_right_traveling_sprites_3_left;
}
spritegroup tgm23b_right_normal_sprites_4_left
{
loading: tgm23b_right_loading_sprites_4_left;
 loaded: tgm23b_right_traveling_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23b_right_notpowered_sprites_left, LOAD_TEMP(3))
{
0: tgm23b_right_notpowered_sprites_1_left;
 1: tgm23b_right_notpowered_sprites_2_left;
 2: tgm23b_right_notpowered_sprites_3_left;
 tgm23b_right_notpowered_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23b_right_normal_sprites_left, LOAD_TEMP(3))
{
0: tgm23b_right_normal_sprites_1_left;
 1: tgm23b_right_normal_sprites_2_left;
 2: tgm23b_right_normal_sprites_3_left;
 tgm23b_right_normal_sprites_4_left;
}
switch (FEAT_TRAINS, SELF, tgm23b_right_sprites_start2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm23b_right_normal_sprites_left;
 tgm23b_right_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, tgm23b_right_sprites_start1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm23b_right_sprites_start2;
 1: tgm23b_right_sprites_start2;
}
random_switch (FEAT_TRAINS, SELF, tgm23b_right_sprites_start, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm23b_right_sprites_start1;
 128: tgm23b_right_sprites_start1;
}
switch (FEAT_TRAINS, SELF, tgm23b_sprites_left, 0)
{ tgm23b_left_sprites_start; }
switch (FEAT_TRAINS, SELF, tgm23b_sprites_right, 0)
{ tgm23b_right_sprites_start; }
switch (FEAT_TRAINS, SELF, tgm23b_sprites_start_sp, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (5 + 3)) < 5])
{
1: tgm23b_sprites_left;
 tgm23b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm23b_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm23b_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm23b_sprites_parent, [ STORE_TEMP(count_veh_id(tgm23b), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm23b_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm23b_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm23b_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm23b_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 60 * (100 - speed_penalty_percent) / 100 : 60)
{ return; }
switch (FEAT_TRAINS, SELF, tgm23b_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tgm23b_running_cost_factor,
[ STORE_TEMP(17, 0), // Моторы
   STORE_TEMP(2, 1), // Бригада
   STORE_TEMP(6, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(4, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(60, 6), // Скорость
   STORE_TEMP(44, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 29
switch (FEAT_TRAINS, SELF, tgm23b_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1973 << 16), 0x101), STORE_TEMP(1985 | (string(STR_PURCHASE_HINT_FACTORY_MUROM) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm23b_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_MUROM), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm23b_additional_text, current_year <= 1985)
{
1: tgm23b_additional_text_hidden;
 tgm23b_additional_text_shown;
}
item (FEAT_TRAINS, tgm23b, 277)
{
property
{
name: string(STR_NAME_TGM23B);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1973 - delta_age, 1, 1);
 model_life: 1985 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1973 -1985 -2 < retire_early_default ? 1985 -1973 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1973 -1985 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1973 -1985 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 4 > 255 ? 255 : 4;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (230 * 0.9865);
 weight: (44) ton;
 tractive_effort_coefficient: (((173.0))/((44))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm23;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm23b_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm23b_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm23_create_effect;
                 default: tgm23b_sprites;
                purchase: tgm23b_purchase_sprites;
          purchase_speed: return 60;
     running_cost_factor: tgm23b_running_cost_factor;
                   speed: tgm23b_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm23b)
{
property
{
name: string(STR_LONGNAME_TGM23B);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm23b)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm23b)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm23b)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm23b)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm23b)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm23v uses tgm23b
switch (FEAT_TRAINS, SELF, tgm23v_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 60 * (100 - speed_penalty_percent) / 100 : 60)
{ return; }
switch (FEAT_TRAINS, SELF, tgm23v_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tgm23v_running_cost_factor,
[ STORE_TEMP(19, 0), // Моторы
   STORE_TEMP(3, 1), // Бригада
   STORE_TEMP(7, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(5, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(60, 6), // Скорость
   STORE_TEMP(44, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 34
switch (FEAT_TRAINS, SELF, tgm23v_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1980 << 16), 0x101), STORE_TEMP(1991 | (string(STR_PURCHASE_HINT_FACTORY_MUROM) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm23v_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_MUROM), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm23v_additional_text, current_year <= 1991)
{
1: tgm23v_additional_text_hidden;
 tgm23v_additional_text_shown;
}
item (FEAT_TRAINS, tgm23v, 278)
{
property
{
name: string(STR_NAME_TGM23V);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1980 - delta_age, 1, 1);
 model_life: 1991 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1980 -1991 -2 < retire_early_default ? 1991 -1980 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1980 -1991 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1980 -1991 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 5 > 255 ? 255 : 5;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (260 * 0.9865);
 weight: (44) ton;
 tractive_effort_coefficient: (((173.0))/((44))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm23;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm23v_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm23v_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm23_create_effect;
                 default: tgm23b_sprites;
                purchase: tgm23b_purchase_sprites;
          purchase_speed: return 60;
     running_cost_factor: tgm23v_running_cost_factor;
                   speed: tgm23v_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm23v)
{
property
{
name: string(STR_LONGNAME_TGM23V);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm23v)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm23v)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm23v)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm23v)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm23v)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm23d uses tgm23b
switch (FEAT_TRAINS, SELF, tgm23d_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 60 * (100 - speed_penalty_percent) / 100 : 60)
{ return; }
switch (FEAT_TRAINS, SELF, tgm23d_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tgm23d_running_cost_factor,
[ STORE_TEMP(32, 0), // Моторы
   STORE_TEMP(5, 1), // Бригада
   STORE_TEMP(11, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(8, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(60, 6), // Скорость
   STORE_TEMP(45, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 57
switch (FEAT_TRAINS, SELF, tgm23d_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (1991 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_MUROM), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm23d_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_MUROM), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm23d_additional_text, current_year <= 2023)
{
1: tgm23d_additional_text_hidden;
 tgm23d_additional_text_shown;
}
item (FEAT_TRAINS, tgm23d, 279)
{
property
{
name: string(STR_NAME_TGM23D);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1991 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1991 -2050 -2 < retire_early_default ? 2050 -1991 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1991 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1991 -2050 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 7 > 255 ? 255 : 7;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (400 * 0.9865);
 weight: (45) ton;
 tractive_effort_coefficient: (((173.0))/((45))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm23;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm23d_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm23d_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm23_create_effect;
                 default: tgm23b_sprites;
                purchase: tgm23b_purchase_sprites;
          purchase_speed: return 60;
     running_cost_factor: tgm23d_running_cost_factor;
                   speed: tgm23d_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm23d)
{
property
{
name: string(STR_LONGNAME_TGM23D);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm23d)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm23d)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm23d)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm23d)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm23d)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm3
spriteset (tgm3_v1_purchase_graphics_ico, "src/diesel/tgm3.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm3_v1_purchase_graphics_noico, "src/diesel/tgm3.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm3_v1_purchase_sprites, enable_icons)
{
1: tgm3_v1_purchase_graphics_ico;
 tgm3_v1_purchase_graphics_noico;
}
spriteset (tgm3_b1966_notpowered_sprites_left, "src/diesel/tgm3.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm3_b1966_loading_sprites_left, "src/diesel/tgm3.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm3_b1966_traveling_sprites_left, "src/diesel/tgm3.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm3_b1966_normal_sprites_left
{
loading: tgm3_b1966_loading_sprites_left;
 loaded: tgm3_b1966_traveling_sprites_left;
}
spriteset (tgm3_b1966_notpowered_sprites_right, "src/diesel/tgm3.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm3_b1966_loading_sprites_right, "src/diesel/tgm3.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm3_b1966_traveling_sprites_right, "src/diesel/tgm3.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm3_b1966_normal_sprites_right
{
loading: tgm3_b1966_loading_sprites_right;
 loaded: tgm3_b1966_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_b1966_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm3_b1966_normal_sprites_left;
 tgm3_b1966_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm3_b1966_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm3_b1966_normal_sprites_right;
 tgm3_b1966_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm3_b1966_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm3_b1966_sprites_left2;
 1: tgm3_b1966_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm3_b1966_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm3_b1966_sprites_left1;
 128: tgm3_b1966_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm3_b1966_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm3_b1966_sprites_right2;
 1: tgm3_b1966_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm3_b1966_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm3_b1966_sprites_right1;
 128: tgm3_b1966_sprites_right1;
}
spriteset (tgm3_v2_purchase_graphics_ico, "src/diesel/tgm3-a1966.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm3_v2_purchase_graphics_noico, "src/diesel/tgm3-a1966.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm3_v2_purchase_sprites, enable_icons)
{
1: tgm3_v2_purchase_graphics_ico;
 tgm3_v2_purchase_graphics_noico;
}
spriteset (tgm3_a1966_notpowered_sprites_left, "src/diesel/tgm3-a1966.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm3_a1966_loading_sprites_left, "src/diesel/tgm3-a1966.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm3_a1966_traveling_sprites_left, "src/diesel/tgm3-a1966.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm3_a1966_normal_sprites_left
{
loading: tgm3_a1966_loading_sprites_left;
 loaded: tgm3_a1966_traveling_sprites_left;
}
spriteset (tgm3_a1966_notpowered_sprites_right, "src/diesel/tgm3-a1966.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm3_a1966_loading_sprites_right, "src/diesel/tgm3-a1966.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm3_a1966_traveling_sprites_right, "src/diesel/tgm3-a1966.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm3_a1966_normal_sprites_right
{
loading: tgm3_a1966_loading_sprites_right;
 loaded: tgm3_a1966_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_a1966_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm3_a1966_normal_sprites_left;
 tgm3_a1966_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm3_a1966_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm3_a1966_normal_sprites_right;
 tgm3_a1966_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm3_a1966_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm3_a1966_sprites_left2;
 1: tgm3_a1966_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm3_a1966_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm3_a1966_sprites_left1;
 128: tgm3_a1966_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm3_a1966_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm3_a1966_sprites_right2;
 1: tgm3_a1966_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm3_a1966_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm3_a1966_sprites_right1;
 128: tgm3_a1966_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tgm3_purchase_sprites, current_year >= 1966)
{
0: tgm3_v1_purchase_sprites;
 tgm3_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_left, build_year >= 1966)
{
0: tgm3_b1966_sprites_left;
 tgm3_a1966_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_right, build_year >= 1966)
{
0: tgm3_b1966_sprites_right;
 tgm3_a1966_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) || (position_in_consist == 0) ])
{
1: tgm3_sprites_left;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm3) + 1) % 2))
{
1: tgm3_sprites_2l;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_old;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_16;
 tgm3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_14;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_12;
 tgm3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_10;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_8;
 tgm3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_6;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_sprites_4;
 tgm3_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm3_sprites_left;
 tgm3_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm3_sprites_start_sp, count_veh_id(tgm3))
{
1: tgm3_sprites_1RND;
 tgm3_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm3_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm3_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm3_sprites_parent, [ STORE_TEMP(count_veh_id(tgm3), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm3_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm3_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm3_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) || (position_in_consist == 0) ])
{
1: tgm3_create_effect_sprites_left;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm3) + 1) % 2))
{
1: tgm3_create_effect_sprites_2l;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_old;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_16;
 tgm3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_14;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_12;
 tgm3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_10;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_8;
 tgm3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_6;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3) ])
{
1: tgm3_create_effect_sprites_4;
 tgm3_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm3_create_effect_sprites_left;
 tgm3_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm3_create_effect, count_veh_id(tgm3))
{
1: tgm3_create_effect_1RND;
 tgm3_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm3_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgm3), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgm3_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgm3), 0), STORE_TEMP(vehicle_type_id == tgm3, 1) ])
{ tgm3_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgm3_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgm3_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgm3_running_cost_factor,
[ STORE_TEMP(36, 0), // Моторы
   STORE_TEMP(5, 1), // Бригада
   STORE_TEMP(13, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(9, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(60, 6), // Скорость
   STORE_TEMP(68, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 64
switch (FEAT_TRAINS, SELF, tgm3_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 60 * (100 - speed_penalty_percent) / 100 : 60)
{ return; }
switch (FEAT_TRAINS, SELF, tgm3_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1959 << 16), 0x101), STORE_TEMP(1967 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm3_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm3_additional_text, current_year <= 1967)
{
1: tgm3_additional_text_hidden;
 tgm3_additional_text_shown;
}
item (FEAT_TRAINS, tgm3, 424)
{
property
{
name: string(STR_NAME_TGM3);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1959 - delta_age, 1, 1);
 model_life: 1967 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1959 -1967 -2 < retire_early_default ? 1967 -1959 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1959 -1967 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1959 -1967 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 8 > 255 ? 255 : 8;
 length: 6;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (500 * 0.9865);
 weight: (68) ton;
 tractive_effort_coefficient: (((201.0))/((68))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tgm3_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm3_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm3_create_effect;
                 default: tgm3_sprites;
                purchase: tgm3_purchase_sprites;
          purchase_speed: return 60;
     running_cost_factor: tgm3_running_cost_factor;
                   speed: tgm3_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm3)
{
property
{
name: string(STR_LONGNAME_TGM3);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm3)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm3)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm3)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm3)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm3)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm3a uses tgm3
switch (FEAT_TRAINS, SELF, tgm3a_sprites_left,
  build_year >= 1966)
{
0: tgm3_b1966_sprites_left;
     tgm3_a1966_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_right,
  build_year >= 1966)
{
0: tgm3_b1966_sprites_right;
     tgm3_a1966_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) || (position_in_consist == 0) ])
{
1: tgm3a_sprites_left;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm3a) + 1) % 2))
{
1: tgm3a_sprites_2l;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_old;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_16;
 tgm3a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_14;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_12;
 tgm3a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_10;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_8;
 tgm3a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_6;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_sprites_4;
 tgm3a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm3a_sprites_left;
 tgm3a_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm3a_sprites_start_sp, count_veh_id(tgm3a))
{
1: tgm3a_sprites_1RND;
 tgm3a_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm3a_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm3a_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm3a_sprites_parent, [ STORE_TEMP(count_veh_id(tgm3a), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm3a_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm3a_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm3a_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) || (position_in_consist == 0) ])
{
1: tgm3a_create_effect_sprites_left;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm3a) + 1) % 2))
{
1: tgm3a_create_effect_sprites_2l;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_old;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_16;
 tgm3a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_14;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_12;
 tgm3a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_10;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_8;
 tgm3a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_6;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3a) ])
{
1: tgm3a_create_effect_sprites_4;
 tgm3a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3a_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm3a_create_effect_sprites_left;
 tgm3a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm3a_create_effect, count_veh_id(tgm3a))
{
1: tgm3a_create_effect_1RND;
 tgm3a_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm3a_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgm3a), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgm3a_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgm3a), 0), STORE_TEMP(vehicle_type_id == tgm3a, 1) ])
{ tgm3a_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgm3a_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgm3a_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgm3a_running_cost_factor,
[ STORE_TEMP(37, 0), // Моторы
   STORE_TEMP(5, 1), // Бригада
   STORE_TEMP(13, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(9, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(62, 6), // Скорость
   STORE_TEMP(68, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 65
switch (FEAT_TRAINS, SELF, tgm3a_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 62 * (100 - speed_penalty_percent) / 100 : 62)
{ return; }
switch (FEAT_TRAINS, SELF, tgm3a_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1961 << 16), 0x101), STORE_TEMP(1970 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm3a_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm3a_additional_text, current_year <= 1970)
{
1: tgm3a_additional_text_hidden;
 tgm3a_additional_text_shown;
}
item (FEAT_TRAINS, tgm3a, 475)
{
property
{
name: string(STR_NAME_TGM3A);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1961 - delta_age, 1, 1);
 model_life: 1970 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1961 -1970 -2 < retire_early_default ? 1970 -1961 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1961 -1970 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1961 -1970 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 8 > 255 ? 255 : 8;
 length: 6;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (500 * 0.9865);
 weight: (68) ton;
 tractive_effort_coefficient: (((220.0))/((68))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm3;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm3a_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm3a_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm3a_create_effect;
                 default: tgm3a_sprites;
                purchase: tgm3_purchase_sprites;
          purchase_speed: return 62;
     running_cost_factor: tgm3a_running_cost_factor;
                   speed: tgm3a_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm3a)
{
property
{
name: string(STR_LONGNAME_TGM3A);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm3a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm3a)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm3a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm3a)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm3a)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm3b uses tgm3
switch (FEAT_TRAINS, SELF, tgm3b_sprites_left,
  build_year >= 1966)
{
0: tgm3_b1966_sprites_left;
     tgm3_a1966_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_right,
  build_year >= 1966)
{
0: tgm3_b1966_sprites_right;
     tgm3_a1966_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) || (position_in_consist == 0) ])
{
1: tgm3b_sprites_left;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm3b) + 1) % 2))
{
1: tgm3b_sprites_2l;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_old;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_16;
 tgm3b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_14;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_12;
 tgm3b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_10;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_8;
 tgm3b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_6;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_sprites_4;
 tgm3b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm3b_sprites_left;
 tgm3b_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm3b_sprites_start_sp, count_veh_id(tgm3b))
{
1: tgm3b_sprites_1RND;
 tgm3b_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm3b_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm3b_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm3b_sprites_parent, [ STORE_TEMP(count_veh_id(tgm3b), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm3b_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm3b_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm3b_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) || (position_in_consist == 0) ])
{
1: tgm3b_create_effect_sprites_left;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm3b) + 1) % 2))
{
1: tgm3b_create_effect_sprites_2l;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_old;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_16;
 tgm3b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_14;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_12;
 tgm3b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_10;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_8;
 tgm3b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_6;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm3b) ])
{
1: tgm3b_create_effect_sprites_4;
 tgm3b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm3b_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm3b_create_effect_sprites_left;
 tgm3b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm3b_create_effect, count_veh_id(tgm3b))
{
1: tgm3b_create_effect_1RND;
 tgm3b_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm3b_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgm3b), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgm3b_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgm3b), 0), STORE_TEMP(vehicle_type_id == tgm3b, 1) ])
{ tgm3b_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgm3b_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgm3b_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgm3b_running_cost_factor,
[ STORE_TEMP(35, 0), // Моторы
   STORE_TEMP(5, 1), // Бригада
   STORE_TEMP(12, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(9, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(55, 6), // Скорость
   STORE_TEMP(68, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 61
switch (FEAT_TRAINS, SELF, tgm3b_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 55 * (100 - speed_penalty_percent) / 100 : 55)
{ return; }
switch (FEAT_TRAINS, SELF, tgm3b_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1966 << 16), 0x101), STORE_TEMP(1977 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm3b_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm3b_additional_text, current_year <= 1977)
{
1: tgm3b_additional_text_hidden;
 tgm3b_additional_text_shown;
}
item (FEAT_TRAINS, tgm3b, 476)
{
property
{
name: string(STR_NAME_TGM3B);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1966 - delta_age, 1, 1);
 model_life: 1977 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1966 -1977 -2 < retire_early_default ? 1977 -1966 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1966 -1977 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1966 -1977 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 8 > 255 ? 255 : 8;
 length: 6;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (500 * 0.9865);
 weight: (68) ton;
 tractive_effort_coefficient: (((259.0))/((68))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm3;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm3b_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm3b_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm3b_create_effect;
                 default: tgm3b_sprites;
                purchase: tgm3_purchase_sprites;
          purchase_speed: return 55;
     running_cost_factor: tgm3b_running_cost_factor;
                   speed: tgm3b_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm3b)
{
property
{
name: string(STR_LONGNAME_TGM3B);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm3b)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm3b)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm3b)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm3b)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm3b)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm4
spriteset (tgm4_v1_purchase_graphics_ico, "src/diesel/tgm4.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4_v1_purchase_graphics_noico, "src/diesel/tgm4.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4_v1_purchase_sprites, enable_icons)
{
1: tgm4_v1_purchase_graphics_ico;
 tgm4_v1_purchase_graphics_noico;
}
spriteset (tgm4_b1975_notpowered_sprites_left, "src/diesel/tgm4.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4_b1975_loading_sprites_left, "src/diesel/tgm4.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4_b1975_traveling_sprites_left, "src/diesel/tgm4.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4_b1975_normal_sprites_left
{
loading: tgm4_b1975_loading_sprites_left;
 loaded: tgm4_b1975_traveling_sprites_left;
}
spriteset (tgm4_b1975_notpowered_sprites_right, "src/diesel/tgm4.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4_b1975_loading_sprites_right, "src/diesel/tgm4.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4_b1975_traveling_sprites_right, "src/diesel/tgm4.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4_b1975_normal_sprites_right
{
loading: tgm4_b1975_loading_sprites_right;
 loaded: tgm4_b1975_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_b1975_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_b1975_normal_sprites_left;
 tgm4_b1975_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_b1975_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_b1975_normal_sprites_right;
 tgm4_b1975_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4_b1975_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_b1975_sprites_left2;
 1: tgm4_b1975_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_b1975_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_b1975_sprites_left1;
 128: tgm4_b1975_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4_b1975_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_b1975_sprites_right2;
 1: tgm4_b1975_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_b1975_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_b1975_sprites_right1;
 128: tgm4_b1975_sprites_right1;
}
spriteset (tgm4_v2_purchase_graphics_ico, "src/diesel/tgm4-a1975.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4_v2_purchase_graphics_noico, "src/diesel/tgm4-a1975.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4_v2_purchase_sprites, enable_icons)
{
1: tgm4_v2_purchase_graphics_ico;
 tgm4_v2_purchase_graphics_noico;
}
spriteset (tgm4_a1975_notpowered_sprites_left, "src/diesel/tgm4-a1975.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4_a1975_loading_sprites_left, "src/diesel/tgm4-a1975.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4_a1975_traveling_sprites_left, "src/diesel/tgm4-a1975.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4_a1975_normal_sprites_left
{
loading: tgm4_a1975_loading_sprites_left;
 loaded: tgm4_a1975_traveling_sprites_left;
}
spriteset (tgm4_a1975_notpowered_sprites_right, "src/diesel/tgm4-a1975.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4_a1975_loading_sprites_right, "src/diesel/tgm4-a1975.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4_a1975_traveling_sprites_right, "src/diesel/tgm4-a1975.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4_a1975_normal_sprites_right
{
loading: tgm4_a1975_loading_sprites_right;
 loaded: tgm4_a1975_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_a1975_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1975_normal_sprites_left;
 tgm4_a1975_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_a1975_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1975_normal_sprites_right;
 tgm4_a1975_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1975_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1975_sprites_left2;
 1: tgm4_a1975_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1975_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1975_sprites_left1;
 128: tgm4_a1975_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1975_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1975_sprites_right2;
 1: tgm4_a1975_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1975_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1975_sprites_right1;
 128: tgm4_a1975_sprites_right1;
}
spriteset (tgm4_v3_purchase_graphics_ico, "src/diesel/tgm4-a1977.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4_v3_purchase_graphics_noico, "src/diesel/tgm4-a1977.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4_v3_purchase_sprites, enable_icons)
{
1: tgm4_v3_purchase_graphics_ico;
 tgm4_v3_purchase_graphics_noico;
}
spriteset (tgm4_a1977_notpowered_sprites_left, "src/diesel/tgm4-a1977.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4_a1977_loading_sprites_left, "src/diesel/tgm4-a1977.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4_a1977_traveling_sprites_left, "src/diesel/tgm4-a1977.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4_a1977_normal_sprites_left
{
loading: tgm4_a1977_loading_sprites_left;
 loaded: tgm4_a1977_traveling_sprites_left;
}
spriteset (tgm4_a1977_notpowered_sprites_right, "src/diesel/tgm4-a1977.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4_a1977_loading_sprites_right, "src/diesel/tgm4-a1977.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4_a1977_traveling_sprites_right, "src/diesel/tgm4-a1977.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4_a1977_normal_sprites_right
{
loading: tgm4_a1977_loading_sprites_right;
 loaded: tgm4_a1977_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_a1977_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1977_normal_sprites_left;
 tgm4_a1977_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_a1977_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1977_normal_sprites_right;
 tgm4_a1977_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1977_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1977_sprites_left2;
 1: tgm4_a1977_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1977_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1977_sprites_left1;
 128: tgm4_a1977_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1977_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1977_sprites_right2;
 1: tgm4_a1977_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1977_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1977_sprites_right1;
 128: tgm4_a1977_sprites_right1;
}
spriteset (tgm4_v4_purchase_graphics_ico, "src/diesel/tgm4-a1978.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4_v4_purchase_graphics_noico, "src/diesel/tgm4-a1978.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4_v4_purchase_sprites, enable_icons)
{
1: tgm4_v4_purchase_graphics_ico;
 tgm4_v4_purchase_graphics_noico;
}
spriteset (tgm4_a1978_notpowered_sprites_left, "src/diesel/tgm4-a1978.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4_a1978_loading_sprites_left, "src/diesel/tgm4-a1978.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4_a1978_traveling_sprites_left, "src/diesel/tgm4-a1978.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4_a1978_normal_sprites_left
{
loading: tgm4_a1978_loading_sprites_left;
 loaded: tgm4_a1978_traveling_sprites_left;
}
spriteset (tgm4_a1978_notpowered_sprites_right, "src/diesel/tgm4-a1978.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4_a1978_loading_sprites_right, "src/diesel/tgm4-a1978.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4_a1978_traveling_sprites_right, "src/diesel/tgm4-a1978.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4_a1978_normal_sprites_right
{
loading: tgm4_a1978_loading_sprites_right;
 loaded: tgm4_a1978_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_a1978_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1978_normal_sprites_left;
 tgm4_a1978_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_a1978_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1978_normal_sprites_right;
 tgm4_a1978_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1978_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1978_sprites_left2;
 1: tgm4_a1978_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1978_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1978_sprites_left1;
 128: tgm4_a1978_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1978_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1978_sprites_right2;
 1: tgm4_a1978_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1978_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1978_sprites_right1;
 128: tgm4_a1978_sprites_right1;
}
spriteset (tgm4_v5_purchase_graphics_ico, "src/diesel/tgm4-a1984.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4_v5_purchase_graphics_noico, "src/diesel/tgm4-a1984.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4_v5_purchase_sprites, enable_icons)
{
1: tgm4_v5_purchase_graphics_ico;
 tgm4_v5_purchase_graphics_noico;
}
spriteset (tgm4_a1984_notpowered_sprites_left, "src/diesel/tgm4-a1984.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4_a1984_loading_sprites_left, "src/diesel/tgm4-a1984.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4_a1984_traveling_sprites_left, "src/diesel/tgm4-a1984.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4_a1984_normal_sprites_left
{
loading: tgm4_a1984_loading_sprites_left;
 loaded: tgm4_a1984_traveling_sprites_left;
}
spriteset (tgm4_a1984_notpowered_sprites_right, "src/diesel/tgm4-a1984.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4_a1984_loading_sprites_right, "src/diesel/tgm4-a1984.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4_a1984_traveling_sprites_right, "src/diesel/tgm4-a1984.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4_a1984_normal_sprites_right
{
loading: tgm4_a1984_loading_sprites_right;
 loaded: tgm4_a1984_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_a1984_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1984_normal_sprites_left;
 tgm4_a1984_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_a1984_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4_a1984_normal_sprites_right;
 tgm4_a1984_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1984_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1984_sprites_left2;
 1: tgm4_a1984_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1984_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1984_sprites_left1;
 128: tgm4_a1984_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1984_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4_a1984_sprites_right2;
 1: tgm4_a1984_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4_a1984_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4_a1984_sprites_right1;
 128: tgm4_a1984_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tgm4_purchase_sprites, (current_year >= 1975) + (current_year >= 1977) + (current_year >= 1978) + (current_year >= 1984))
{
0: tgm4_v1_purchase_sprites;
 1: tgm4_v2_purchase_sprites;
 2: tgm4_v3_purchase_sprites;
 3: tgm4_v4_purchase_sprites;
 tgm4_v5_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_left, (build_year >= 1975) + (build_year >= 1977) + (build_year >= 1978) + (build_year >= 1984))
{
0: tgm4_b1975_sprites_left;
 1: tgm4_a1975_sprites_left;
 2: tgm4_a1977_sprites_left;
 3: tgm4_a1978_sprites_left;
 tgm4_a1984_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_right, (build_year >= 1975) + (build_year >= 1977) + (build_year >= 1978) + (build_year >= 1984))
{
0: tgm4_b1975_sprites_right;
 1: tgm4_a1975_sprites_right;
 2: tgm4_a1977_sprites_right;
 3: tgm4_a1978_sprites_right;
 tgm4_a1984_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) || (position_in_consist == 0) ])
{
1: tgm4_sprites_left;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm4) + 1) % 2))
{
1: tgm4_sprites_2l;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_old;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_16;
 tgm4_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_14;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_12;
 tgm4_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_10;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_8;
 tgm4_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_6;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_sprites_4;
 tgm4_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm4_sprites_left;
 tgm4_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm4_sprites_start_sp, count_veh_id(tgm4))
{
1: tgm4_sprites_1RND;
 tgm4_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm4_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm4_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm4_sprites_parent, [ STORE_TEMP(count_veh_id(tgm4), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm4_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm4_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm4_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm4_b1978_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm4_b1978_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm4_a1978_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm4_a1978_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_left, build_year >= 1978)
{
0: tgm4_b1978_create_effect_sprites_left;
 tgm4_a1978_create_effect_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_right, build_year >= 1978)
{
0: tgm4_b1978_create_effect_sprites_right;
 tgm4_a1978_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) || (position_in_consist == 0) ])
{
1: tgm4_create_effect_sprites_left;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm4) + 1) % 2))
{
1: tgm4_create_effect_sprites_2l;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_old;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_16;
 tgm4_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_14;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_12;
 tgm4_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_10;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_8;
 tgm4_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_6;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4) ])
{
1: tgm4_create_effect_sprites_4;
 tgm4_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm4_create_effect_sprites_left;
 tgm4_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm4_create_effect, count_veh_id(tgm4))
{
1: tgm4_create_effect_1RND;
 tgm4_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm4_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 55 * (100 - speed_penalty_percent) / 100 : 55)
{ return; }
switch (FEAT_TRAINS, SELF, tgm4_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tgm4_running_cost_factor,
[ STORE_TEMP(41, 0), // Моторы
   STORE_TEMP(6, 1), // Бригада
   STORE_TEMP(14, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(10, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(55, 6), // Скорость
   STORE_TEMP(68, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 72
switch (FEAT_TRAINS, SELF, tgm4_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1973 << 16), 0x101), STORE_TEMP(1990 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm4_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm4_additional_text, current_year <= 1990)
{
1: tgm4_additional_text_hidden;
 tgm4_additional_text_shown;
}
item (FEAT_TRAINS, tgm4, 425)
{
property
{
name: string(STR_NAME_TGM4);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1973 - delta_age, 1, 1);
 model_life: 1990 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1973 -1990 -2 < retire_early_default ? 1990 -1973 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1973 -1990 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1973 -1990 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 9 > 255 ? 255 : 9;
 length: 6;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (500 * 0.9865);
 weight: (68) ton;
 tractive_effort_coefficient: (((220.0))/((68))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tgm4_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm4_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm4_create_effect;
                 default: tgm4_sprites;
                purchase: tgm4_purchase_sprites;
          purchase_speed: return 55;
     running_cost_factor: tgm4_running_cost_factor;
                   speed: tgm4_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm4)
{
property
{
name: string(STR_LONGNAME_TGM4);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm4)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm4)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm4)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm4)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm4)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm4b
spriteset (tgm4b_v1_purchase_graphics_ico, "src/diesel/tgm4b.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4b_v1_purchase_graphics_noico, "src/diesel/tgm4b.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4b_v1_purchase_sprites, enable_icons)
{
1: tgm4b_v1_purchase_graphics_ico;
 tgm4b_v1_purchase_graphics_noico;
}
spriteset (tgm4b_b1991_notpowered_sprites_left, "src/diesel/tgm4b.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4b_b1991_loading_sprites_left, "src/diesel/tgm4b.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4b_b1991_traveling_sprites_left, "src/diesel/tgm4b.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4b_b1991_normal_sprites_left
{
loading: tgm4b_b1991_loading_sprites_left;
 loaded: tgm4b_b1991_traveling_sprites_left;
}
spriteset (tgm4b_b1991_notpowered_sprites_right, "src/diesel/tgm4b.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4b_b1991_loading_sprites_right, "src/diesel/tgm4b.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4b_b1991_traveling_sprites_right, "src/diesel/tgm4b.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4b_b1991_normal_sprites_right
{
loading: tgm4b_b1991_loading_sprites_right;
 loaded: tgm4b_b1991_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_b1991_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4b_b1991_normal_sprites_left;
 tgm4b_b1991_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4b_b1991_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4b_b1991_normal_sprites_right;
 tgm4b_b1991_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_b1991_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4b_b1991_sprites_left2;
 1: tgm4b_b1991_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_b1991_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4b_b1991_sprites_left1;
 128: tgm4b_b1991_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_b1991_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4b_b1991_sprites_right2;
 1: tgm4b_b1991_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_b1991_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4b_b1991_sprites_right1;
 128: tgm4b_b1991_sprites_right1;
}
spriteset (tgm4b_v2_purchase_graphics_ico, "src/diesel/tgm4b-a1991.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4b_v2_purchase_graphics_noico, "src/diesel/tgm4b-a1991.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4b_v2_purchase_sprites, enable_icons)
{
1: tgm4b_v2_purchase_graphics_ico;
 tgm4b_v2_purchase_graphics_noico;
}
spriteset (tgm4b_a1991_notpowered_sprites_left, "src/diesel/tgm4b-a1991.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4b_a1991_loading_sprites_left, "src/diesel/tgm4b-a1991.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4b_a1991_traveling_sprites_left, "src/diesel/tgm4b-a1991.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4b_a1991_normal_sprites_left
{
loading: tgm4b_a1991_loading_sprites_left;
 loaded: tgm4b_a1991_traveling_sprites_left;
}
spriteset (tgm4b_a1991_notpowered_sprites_right, "src/diesel/tgm4b-a1991.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4b_a1991_loading_sprites_right, "src/diesel/tgm4b-a1991.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4b_a1991_traveling_sprites_right, "src/diesel/tgm4b-a1991.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4b_a1991_normal_sprites_right
{
loading: tgm4b_a1991_loading_sprites_right;
 loaded: tgm4b_a1991_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_a1991_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4b_a1991_normal_sprites_left;
 tgm4b_a1991_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4b_a1991_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4b_a1991_normal_sprites_right;
 tgm4b_a1991_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a1991_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4b_a1991_sprites_left2;
 1: tgm4b_a1991_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a1991_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4b_a1991_sprites_left1;
 128: tgm4b_a1991_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a1991_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4b_a1991_sprites_right2;
 1: tgm4b_a1991_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a1991_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4b_a1991_sprites_right1;
 128: tgm4b_a1991_sprites_right1;
}
spriteset (tgm4b_v3_purchase_graphics_ico, "src/diesel/tgm4b-a2005.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm4b_v3_purchase_graphics_noico, "src/diesel/tgm4b-a2005.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm4b_v3_purchase_sprites, enable_icons)
{
1: tgm4b_v3_purchase_graphics_ico;
 tgm4b_v3_purchase_graphics_noico;
}
spriteset (tgm4b_a2005_notpowered_sprites_left, "src/diesel/tgm4b-a2005.png")
{
s7_template(32, 40, 0)
}
spriteset (tgm4b_a2005_loading_sprites_left, "src/diesel/tgm4b-a2005.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (tgm4b_a2005_traveling_sprites_left, "src/diesel/tgm4b-a2005.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup tgm4b_a2005_normal_sprites_left
{
loading: tgm4b_a2005_loading_sprites_left;
 loaded: tgm4b_a2005_traveling_sprites_left;
}
spriteset (tgm4b_a2005_notpowered_sprites_right, "src/diesel/tgm4b-a2005.png")
{
s7_r_template(32, 40, 0)
}
spriteset (tgm4b_a2005_loading_sprites_right, "src/diesel/tgm4b-a2005.png")
{
s7_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm4b_a2005_traveling_sprites_right, "src/diesel/tgm4b-a2005.png")
{
s7_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm4b_a2005_normal_sprites_right
{
loading: tgm4b_a2005_loading_sprites_right;
 loaded: tgm4b_a2005_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_a2005_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4b_a2005_normal_sprites_left;
 tgm4b_a2005_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4b_a2005_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm4b_a2005_normal_sprites_right;
 tgm4b_a2005_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a2005_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4b_a2005_sprites_left2;
 1: tgm4b_a2005_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a2005_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4b_a2005_sprites_left1;
 128: tgm4b_a2005_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a2005_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm4b_a2005_sprites_right2;
 1: tgm4b_a2005_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm4b_a2005_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm4b_a2005_sprites_right1;
 128: tgm4b_a2005_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tgm4b_purchase_sprites, (current_year >= 1991) + (current_year >= 2005))
{
0: tgm4b_v1_purchase_sprites;
 1: tgm4b_v2_purchase_sprites;
 tgm4b_v3_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_left, (build_year >= 1991) + (build_year >= 2005))
{
0: tgm4b_b1991_sprites_left;
 1: tgm4b_a1991_sprites_left;
 tgm4b_a2005_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_right, (build_year >= 1991) + (build_year >= 2005))
{
0: tgm4b_b1991_sprites_right;
 1: tgm4b_a1991_sprites_right;
 tgm4b_a2005_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) || (position_in_consist == 0) ])
{
1: tgm4b_sprites_left;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm4b) + 1) % 2))
{
1: tgm4b_sprites_2l;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_old;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_16;
 tgm4b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_14;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_12;
 tgm4b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_10;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_8;
 tgm4b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_6;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_sprites_4;
 tgm4b_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm4b_sprites_left;
 tgm4b_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm4b_sprites_start_sp, count_veh_id(tgm4b))
{
1: tgm4b_sprites_1RND;
 tgm4b_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm4b_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm4b_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm4b_sprites_parent, [ STORE_TEMP(count_veh_id(tgm4b), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm4b_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm4b_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm4b_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) || (position_in_consist == 0) ])
{
1: tgm4b_create_effect_sprites_left;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm4b) + 1) % 2))
{
1: tgm4b_create_effect_sprites_2l;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_old;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_16;
 tgm4b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_14;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_12;
 tgm4b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_10;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_8;
 tgm4b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_6;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm4b) ])
{
1: tgm4b_create_effect_sprites_4;
 tgm4b_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm4b_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm4b_create_effect_sprites_left;
 tgm4b_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm4b_create_effect, count_veh_id(tgm4b))
{
1: tgm4b_create_effect_1RND;
 tgm4b_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm4b_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 65 * (100 - speed_penalty_percent) / 100 : 65)
{ return; }
switch (FEAT_TRAINS, SELF, tgm4b_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, SELF, tgm4b_running_cost_factor,
[ STORE_TEMP(54, 0), // Моторы
   STORE_TEMP(8, 1), // Бригада
   STORE_TEMP(19, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(13, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(65, 6), // Скорость
   STORE_TEMP(80, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 95
switch (FEAT_TRAINS, SELF, tgm4b_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1989 << 16), 0x101), STORE_TEMP(2010 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm4b_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm4b_additional_text, current_year <= 2010)
{
1: tgm4b_additional_text_hidden;
 tgm4b_additional_text_shown;
}
item (FEAT_TRAINS, tgm4b, 534)
{
property
{
name: string(STR_NAME_TGM4B);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1989 - delta_age, 1, 1);
 model_life: 2010 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1989 -2010 -2 < retire_early_default ? 2010 -1989 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1989 -2010 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1989 -2010 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 12 > 255 ? 255 : 12;
 length: 6;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (550 * 0.9865);
 weight: (80) ton;
 tractive_effort_coefficient: (((313.6))/((80))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm4;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm4b_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm4b_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm4b_create_effect;
                 default: tgm4b_sprites;
                purchase: tgm4b_purchase_sprites;
          purchase_speed: return 65;
     running_cost_factor: tgm4b_running_cost_factor;
                   speed: tgm4b_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm4b)
{
property
{
name: string(STR_LONGNAME_TGM4B);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm4b)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm4b)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm4b)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm4b)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm4b)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm6a
spriteset (tgm6a_v1_purchase_graphics_ico, "src/diesel/tgm6a.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm6a_v1_purchase_graphics_noico, "src/diesel/tgm6a.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm6a_v1_purchase_sprites, enable_icons)
{
1: tgm6a_v1_purchase_graphics_ico;
 tgm6a_v1_purchase_graphics_noico;
}
spriteset (tgm6a_b1973_notpowered_sprites_left, "src/diesel/tgm6a.png")
{
s8_template(32, 40, 0)
}
spriteset (tgm6a_b1973_loading_sprites_left, "src/diesel/tgm6a.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (tgm6a_b1973_traveling_sprites_left, "src/diesel/tgm6a.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup tgm6a_b1973_normal_sprites_left
{
loading: tgm6a_b1973_loading_sprites_left;
 loaded: tgm6a_b1973_traveling_sprites_left;
}
spriteset (tgm6a_b1973_notpowered_sprites_right, "src/diesel/tgm6a.png")
{
s8_r_template(32, 40, 0)
}
spriteset (tgm6a_b1973_loading_sprites_right, "src/diesel/tgm6a.png")
{
s8_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm6a_b1973_traveling_sprites_right, "src/diesel/tgm6a.png")
{
s8_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm6a_b1973_normal_sprites_right
{
loading: tgm6a_b1973_loading_sprites_right;
 loaded: tgm6a_b1973_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_b1973_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm6a_b1973_normal_sprites_left;
 tgm6a_b1973_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm6a_b1973_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm6a_b1973_normal_sprites_right;
 tgm6a_b1973_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_b1973_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm6a_b1973_sprites_left2;
 1: tgm6a_b1973_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_b1973_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm6a_b1973_sprites_left1;
 128: tgm6a_b1973_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_b1973_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm6a_b1973_sprites_right2;
 1: tgm6a_b1973_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_b1973_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm6a_b1973_sprites_right1;
 128: tgm6a_b1973_sprites_right1;
}
spriteset (tgm6a_v2_purchase_graphics_ico, "src/diesel/tgm6a-a1973.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm6a_v2_purchase_graphics_noico, "src/diesel/tgm6a-a1973.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm6a_v2_purchase_sprites, enable_icons)
{
1: tgm6a_v2_purchase_graphics_ico;
 tgm6a_v2_purchase_graphics_noico;
}
spriteset (tgm6a_a1973_notpowered_sprites_left, "src/diesel/tgm6a-a1973.png")
{
s8_template(32, 40, 0)
}
spriteset (tgm6a_a1973_loading_sprites_left, "src/diesel/tgm6a-a1973.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (tgm6a_a1973_traveling_sprites_left, "src/diesel/tgm6a-a1973.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup tgm6a_a1973_normal_sprites_left
{
loading: tgm6a_a1973_loading_sprites_left;
 loaded: tgm6a_a1973_traveling_sprites_left;
}
spriteset (tgm6a_a1973_notpowered_sprites_right, "src/diesel/tgm6a-a1973.png")
{
s8_r_template(32, 40, 0)
}
spriteset (tgm6a_a1973_loading_sprites_right, "src/diesel/tgm6a-a1973.png")
{
s8_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm6a_a1973_traveling_sprites_right, "src/diesel/tgm6a-a1973.png")
{
s8_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm6a_a1973_normal_sprites_right
{
loading: tgm6a_a1973_loading_sprites_right;
 loaded: tgm6a_a1973_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_a1973_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm6a_a1973_normal_sprites_left;
 tgm6a_a1973_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm6a_a1973_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm6a_a1973_normal_sprites_right;
 tgm6a_a1973_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_a1973_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm6a_a1973_sprites_left2;
 1: tgm6a_a1973_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_a1973_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm6a_a1973_sprites_left1;
 128: tgm6a_a1973_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_a1973_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm6a_a1973_sprites_right2;
 1: tgm6a_a1973_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm6a_a1973_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm6a_a1973_sprites_right1;
 128: tgm6a_a1973_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, tgm6a_purchase_sprites, current_year >= 1973)
{
0: tgm6a_v1_purchase_sprites;
 tgm6a_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_left, build_year >= 1973)
{
0: tgm6a_b1973_sprites_left;
 tgm6a_a1973_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_right, build_year >= 1973)
{
0: tgm6a_b1973_sprites_right;
 tgm6a_a1973_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) || (position_in_consist == 0) ])
{
1: tgm6a_sprites_left;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm6a) + 1) % 2))
{
1: tgm6a_sprites_2l;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_old;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_16;
 tgm6a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_14;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_12;
 tgm6a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_10;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_8;
 tgm6a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_6;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_sprites_4;
 tgm6a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm6a_sprites_left;
 tgm6a_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm6a_sprites_start_sp, count_veh_id(tgm6a))
{
1: tgm6a_sprites_1RND;
 tgm6a_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm6a_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm6a_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm6a_sprites_parent, [ STORE_TEMP(count_veh_id(tgm6a), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm6a_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm6a_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm6a_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) || (position_in_consist == 0) ])
{
1: tgm6a_create_effect_sprites_left;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm6a) + 1) % 2))
{
1: tgm6a_create_effect_sprites_2l;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_old;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_16;
 tgm6a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_14;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_12;
 tgm6a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_10;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_8;
 tgm6a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_6;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6a) ])
{
1: tgm6a_create_effect_sprites_4;
 tgm6a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6a_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm6a_create_effect_sprites_left;
 tgm6a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm6a_create_effect, count_veh_id(tgm6a))
{
1: tgm6a_create_effect_1RND;
 tgm6a_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm6a_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgm6a), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgm6a_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgm6a), 0), STORE_TEMP(vehicle_type_id == tgm6a, 1) ])
{ tgm6a_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgm6a_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgm6a_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgm6a_running_cost_factor,
[ STORE_TEMP(72, 0), // Моторы
   STORE_TEMP(10, 1), // Бригада
   STORE_TEMP(25, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(18, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(80, 6), // Скорость
   STORE_TEMP(80, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 126
switch (FEAT_TRAINS, SELF, tgm6a_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 80 * (100 - speed_penalty_percent) / 100 : 80)
{ return; }
switch (FEAT_TRAINS, SELF, tgm6a_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1970 << 16), 0x101), STORE_TEMP(1989 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm6a_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm6a_additional_text, current_year <= 1989)
{
1: tgm6a_additional_text_hidden;
 tgm6a_additional_text_shown;
}
item (FEAT_TRAINS, tgm6a, 727)
{
property
{
name: string(STR_NAME_TGM6A);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1970 - delta_age, 1, 1);
 model_life: 1989 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1970 -1989 -2 < retire_early_default ? 1989 -1970 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1970 -1989 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1970 -1989 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 17 > 255 ? 255 : 17;
 length: 7;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (790 * 0.9865);
 weight: (80) ton;
 tractive_effort_coefficient: (((291.0))/((80))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tgm6a_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm6a_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm6a_create_effect;
                 default: tgm6a_sprites;
                purchase: tgm6a_purchase_sprites;
          purchase_speed: return 80;
     running_cost_factor: tgm6a_running_cost_factor;
                   speed: tgm6a_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm6a)
{
property
{
name: string(STR_LONGNAME_TGM6A);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm6a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm6a)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm6a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm6a)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm6a)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgm6d
spriteset (tgm6d_purchase_graphics_ico, "src/diesel/tgm6d.png")
{
new_purchase_template(0, 0)
}
spriteset (tgm6d_purchase_graphics_noico, "src/diesel/tgm6d.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgm6d_purchase_sprites, enable_icons)
{
1: tgm6d_purchase_graphics_ico;
 tgm6d_purchase_graphics_noico;
}
spriteset (tgm6d_notpowered_sprites_left, "src/diesel/tgm6d.png")
{
s8_template(32, 40, 0)
}
spriteset (tgm6d_loading_sprites_left, "src/diesel/tgm6d.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (tgm6d_traveling_sprites_left, "src/diesel/tgm6d.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup tgm6d_normal_sprites_left
{
loading: tgm6d_loading_sprites_left;
 loaded: tgm6d_traveling_sprites_left;
}
spriteset (tgm6d_notpowered_sprites_right, "src/diesel/tgm6d.png")
{
s8_r_template(32, 40, 0)
}
spriteset (tgm6d_loading_sprites_right, "src/diesel/tgm6d.png")
{
s8_r_template(32 +415, 40 +67, 0)
}
spriteset (tgm6d_traveling_sprites_right, "src/diesel/tgm6d.png")
{
s8_r_template(32 +415, 40 +134, 0)
}
spritegroup tgm6d_normal_sprites_right
{
loading: tgm6d_loading_sprites_right;
 loaded: tgm6d_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm6d_normal_sprites_left;
 tgm6d_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgm6d_normal_sprites_right;
 tgm6d_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgm6d_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm6d_sprites_left2;
 1: tgm6d_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgm6d_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm6d_sprites_left1;
 128: tgm6d_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgm6d_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgm6d_sprites_right2;
 1: tgm6d_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgm6d_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgm6d_sprites_right1;
 128: tgm6d_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) || (position_in_consist == 0) ])
{
1: tgm6d_sprites_left;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm6d) + 1) % 2))
{
1: tgm6d_sprites_2l;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_old;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_16;
 tgm6d_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_14;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_12;
 tgm6d_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_10;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_8;
 tgm6d_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_6;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_sprites_4;
 tgm6d_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm6d_sprites_left;
 tgm6d_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm6d_sprites_start_sp, count_veh_id(tgm6d))
{
1: tgm6d_sprites_1RND;
 tgm6d_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm6d_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgm6d_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgm6d_sprites_parent, [ STORE_TEMP(count_veh_id(tgm6d), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgm6d_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgm6d_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgm6d_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) || (position_in_consist == 0) ])
{
1: tgm6d_create_effect_sprites_left;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgm6d) + 1) % 2))
{
1: tgm6d_create_effect_sprites_2l;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_old;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_16;
 tgm6d_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_14;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_12;
 tgm6d_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_10;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_8;
 tgm6d_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_6;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgm6d) ])
{
1: tgm6d_create_effect_sprites_4;
 tgm6d_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgm6d_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgm6d_create_effect_sprites_left;
 tgm6d_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgm6d_create_effect, count_veh_id(tgm6d))
{
1: tgm6d_create_effect_1RND;
 tgm6d_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgm6d_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgm6d), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgm6d_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgm6d), 0), STORE_TEMP(vehicle_type_id == tgm6d, 1) ])
{ tgm6d_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgm6d_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgm6d_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgm6d_running_cost_factor,
[ STORE_TEMP(90, 0), // Моторы
   STORE_TEMP(13, 1), // Бригада
   STORE_TEMP(32, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(22, 4), // ТО
   STORE_TEMP(2, 5), // Сертификация
   STORE_TEMP(74, 6), // Скорость
   STORE_TEMP(90, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 158
switch (FEAT_TRAINS, SELF, tgm6d_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 80 * (100 - speed_penalty_percent) / 100 : 80)
{ return; }
switch (FEAT_TRAINS, SELF, tgm6d_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1991 << 16), 0x101), STORE_TEMP(2015 | ((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgm6d_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1957 ? string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK) : string(STR_PURCHASE_HINT_FACTORY_LYUDINOVSK_A1957)), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgm6d_additional_text, current_year <= 2015)
{
1: tgm6d_additional_text_hidden;
 tgm6d_additional_text_shown;
}
item (FEAT_TRAINS, tgm6d, 732)
{
property
{
name: string(STR_NAME_TGM6D);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1991 - delta_age, 1, 1);
 model_life: 2015 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1991 -2015 -2 < retire_early_default ? 2015 -1991 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1991 -2015 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1991 -2015 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 21 > 255 ? 255 : 21;
 length: 7;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (790 * 0.9865);
 weight: (90) ton;
 tractive_effort_coefficient: (((352.8))/((90))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgm6a;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgm6d_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgm6d_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgm23_cargo_subtype_text;
          colour_mapping: tgm23_colour_mapping;
           create_effect: tgm6d_create_effect;
                 default: tgm6d_sprites;
                purchase: tgm6d_purchase_sprites;
          purchase_speed: return 74;
     running_cost_factor: tgm6d_running_cost_factor;
                   speed: tgm6d_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgm6d)
{
property
{
name: string(STR_LONGNAME_TGM6D);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgm6d)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgm6d)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgm6d)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgm6d)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgm6d)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgk
spriteset (tgk_purchase_graphics_ico, "src/diesel/tgk.png")
{
new_purchase_template(0, 0)
}
spriteset (tgk_purchase_graphics_noico, "src/diesel/tgk.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgk_purchase_sprites, enable_icons)
{
1: tgk_purchase_graphics_ico;
 tgk_purchase_graphics_noico;
}
spriteset (tgk_notpowered_sprites_left, "src/diesel/tgk.png")
{
s5_template(32, 40, 0)
}
spriteset (tgk_loading_sprites_left, "src/diesel/tgk.png")
{
s5_template(32, 40 +67, 0)
}
spriteset (tgk_traveling_sprites_left, "src/diesel/tgk.png")
{
s5_template(32, 40 +134, 0)
}
spritegroup tgk_normal_sprites_left
{
loading: tgk_loading_sprites_left;
 loaded: tgk_traveling_sprites_left;
}
spriteset (tgk_notpowered_sprites_right, "src/diesel/tgk.png")
{
s5_r_template(32, 40, 0)
}
spriteset (tgk_loading_sprites_right, "src/diesel/tgk.png")
{
s5_r_template(32 +415, 40 +67, 0)
}
spriteset (tgk_traveling_sprites_right, "src/diesel/tgk.png")
{
s5_r_template(32 +415, 40 +134, 0)
}
spritegroup tgk_normal_sprites_right
{
loading: tgk_loading_sprites_right;
 loaded: tgk_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgk_normal_sprites_left;
 tgk_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgk_normal_sprites_right;
 tgk_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgk_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgk_sprites_left2;
 1: tgk_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgk_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgk_sprites_left1;
 128: tgk_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgk_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgk_sprites_right2;
 1: tgk_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgk_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgk_sprites_right1;
 128: tgk_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) || (position_in_consist == 0) ])
{
1: tgk_sprites_left;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgk) + 1) % 2))
{
1: tgk_sprites_2l;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_old;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_16;
 tgk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_14;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_12;
 tgk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_10;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_8;
 tgk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_6;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_sprites_4;
 tgk_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgk_sprites_left;
 tgk_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgk_sprites_start_sp, count_veh_id(tgk))
{
1: tgk_sprites_1RND;
 tgk_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgk_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgk_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgk_sprites_parent, [ STORE_TEMP(count_veh_id(tgk), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgk_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgk_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgk_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgk_random,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x07])
{
0: return ttdall_cc + 0x54;
  1: return ttdall_cc + 0x52;
  2: return ttdall_cc + 0x1B;
  3: return ttdall_cc + 0x62;
  4: return ttdall_cc + 0x63;
  5: return ttdall_cc + 0x93;
  6: return ttdall_cc + 0x94;
  7: return ttdall_cc + 0x96;
}
switch (FEAT_TRAINS, SELF, tgk_colour_mapping,
  cargo_subtype)
{
0: tgk_random;
           1: return ttdall_cc + 0x54;
           2: return ttdall_cc + 0x1B;
           3: return ttdall_cc + 0x62;
           4: return ttdall_cc + 0x63;
           5: return ttdall_cc + 0x93;
           6: return ttdall_cc + 0x94;
           7: return ttdall_cc + 0x96;
  14: return ttdall_cc + 0x52;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tgk_alt_cargo_subtype_text, cargo_subtype)
{
14: general_cargo_subtype_text_LV_RAL6020;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tgk_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_54);
 2: return string(STR_REFIT_TTD_1B);
 3: return string(STR_REFIT_TTD_62);
 4: return string(STR_REFIT_TTD_63);
 5: return string(STR_REFIT_TTD_92);
 6: return string(STR_REFIT_TTD_93);
 7: return string(STR_REFIT_TTD_96);
 tgk_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) || (position_in_consist == 0) ])
{
1: tgk_create_effect_sprites_left;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgk) + 1) % 2))
{
1: tgk_create_effect_sprites_2l;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_old;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_16;
 tgk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_14;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_12;
 tgk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_10;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_8;
 tgk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_6;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk) ])
{
1: tgk_create_effect_sprites_4;
 tgk_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgk_create_effect_sprites_left;
 tgk_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgk_create_effect, count_veh_id(tgk))
{
1: tgk_create_effect_1RND;
 tgk_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgk_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 60 * (100 - speed_penalty_percent) / 100 : 60)
{ return; }
switch (FEAT_TRAINS, SELF, tgk_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgk), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgk_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgk), 0), STORE_TEMP(vehicle_type_id == tgk, 1) ])
{ tgk_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgk_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgk_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgk_running_cost_factor,
[ STORE_TEMP(9, 0), // Моторы
   STORE_TEMP(1, 1), // Бригада
   STORE_TEMP(3, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(60, 6), // Скорость
   STORE_TEMP(25, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 15
switch (FEAT_TRAINS, SELF, tgk_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1958 << 16), 0x101), STORE_TEMP(1962 | (string(STR_PURCHASE_HINT_FACTORY_KALUGA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgk_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KALUGA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgk_additional_text, current_year <= 1962)
{
1: tgk_additional_text_hidden;
 tgk_additional_text_shown;
}
item (FEAT_TRAINS, tgk, 718)
{
property
{
name: string(STR_NAME_TGK);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1958 - delta_age, 1, 1);
 model_life: 1962 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1958 -1962 -2 < retire_early_default ? 1962 -1958 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1958 -1962 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1958 -1962 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 2 > 255 ? 255 : 2;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (150 * 0.9865);
 weight: (25) ton;
 tractive_effort_coefficient: (((98.0))/((25))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: tgk_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgk_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgk_cargo_subtype_text;
          colour_mapping: tgk_colour_mapping;
           create_effect: tgk_create_effect;
                 default: tgk_sprites;
                purchase: tgk_purchase_sprites;
          purchase_speed: return 60;
     running_cost_factor: tgk_running_cost_factor;
                   speed: tgk_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgk)
{
property
{
name: string(STR_LONGNAME_TGK);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgk)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgk)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgk)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgk)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgk)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// tgk2
spriteset (tgk2_purchase_graphics_ico, "src/diesel/tgk2.png")
{
new_purchase_template(0, 0)
}
spriteset (tgk2_purchase_graphics_noico, "src/diesel/tgk2.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, tgk2_purchase_sprites, enable_icons)
{
1: tgk2_purchase_graphics_ico;
 tgk2_purchase_graphics_noico;
}
spriteset (tgk2_notpowered_sprites_left, "src/diesel/tgk2.png")
{
s5_template(32, 40, 0)
}
spriteset (tgk2_loading_sprites_left, "src/diesel/tgk2.png")
{
s5_template(32, 40 +67, 0)
}
spriteset (tgk2_traveling_sprites_left, "src/diesel/tgk2.png")
{
s5_template(32, 40 +134, 0)
}
spritegroup tgk2_normal_sprites_left
{
loading: tgk2_loading_sprites_left;
 loaded: tgk2_traveling_sprites_left;
}
spriteset (tgk2_notpowered_sprites_right, "src/diesel/tgk2.png")
{
s5_r_template(32, 40, 0)
}
spriteset (tgk2_loading_sprites_right, "src/diesel/tgk2.png")
{
s5_r_template(32 +415, 40 +67, 0)
}
spriteset (tgk2_traveling_sprites_right, "src/diesel/tgk2.png")
{
s5_r_template(32 +415, 40 +134, 0)
}
spritegroup tgk2_normal_sprites_right
{
loading: tgk2_loading_sprites_right;
 loaded: tgk2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgk2_normal_sprites_left;
 tgk2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: tgk2_normal_sprites_right;
 tgk2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, tgk2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgk2_sprites_left2;
 1: tgk2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, tgk2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgk2_sprites_left1;
 128: tgk2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, tgk2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: tgk2_sprites_right2;
 1: tgk2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, tgk2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: tgk2_sprites_right1;
 128: tgk2_sprites_right1;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) || (position_in_consist == 0) ])
{
1: tgk2_sprites_left;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgk2) + 1) % 2))
{
1: tgk2_sprites_2l;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_old;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_16;
 tgk2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_14;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_12;
 tgk2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_10;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_8;
 tgk2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_6;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_sprites_4;
 tgk2_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgk2_sprites_left;
 tgk2_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgk2_sprites_start_sp, count_veh_id(tgk2))
{
1: tgk2_sprites_1RND;
 tgk2_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgk2_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ tgk2_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, tgk2_sprites_parent, [ STORE_TEMP(count_veh_id(tgk2), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ tgk2_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, tgk2_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 tgk2_sprites_parent;
}
switch (FEAT_TRAINS, SELF, tgk2_random,
[ STORE_TEMP(1, 0x10F),
   var[0x61, 8, 0xFF, 0x5F] & 0x07])
{
0: return ttdall_cc + 0x54;
  1: return ttdall_cc + 0x52;
  2: return ttdall_cc + 0x1B;
  3: return ttdall_cc + 0x62;
  4: return ttdall_cc + 0x63;
  5: return ttdall_cc + 0x93;
  6: return ttdall_cc + 0x94;
  7: return ttdall_cc + 0x96;
}
switch (FEAT_TRAINS, SELF, tgk2_colour_mapping,
  cargo_subtype)
{
0: tgk2_random;
           1: return ttdall_cc + 0x54;
           2: return ttdall_cc + 0x1B;
           3: return ttdall_cc + 0x62;
           4: return ttdall_cc + 0x63;
           5: return ttdall_cc + 0x93;
           6: return ttdall_cc + 0x94;
           7: return ttdall_cc + 0x96;
  14: return ttdall_cc + 0x52;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, tgk2_alt_cargo_subtype_text, cargo_subtype)
{
14: general_cargo_subtype_text_LV_RAL6020;
 return string(STR_REFIT_FACTORY);
}
switch (FEAT_TRAINS, SELF, tgk2_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_54);
 2: return string(STR_REFIT_TTD_1B);
 3: return string(STR_REFIT_TTD_62);
 4: return string(STR_REFIT_TTD_63);
 5: return string(STR_REFIT_TTD_92);
 6: return string(STR_REFIT_TTD_93);
 7: return string(STR_REFIT_TTD_96);
 tgk2_alt_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 11), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) || (position_in_consist == 0) ])
{
1: tgk2_create_effect_sprites_left;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(tgk2) + 1) % 2))
{
1: tgk2_create_effect_sprites_2l;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_old;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_16;
 tgk2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_14;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_12;
 tgk2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_10;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_8;
 tgk2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_6;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == tgk2) ])
{
1: tgk2_create_effect_sprites_4;
 tgk2_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, tgk2_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: tgk2_create_effect_sprites_left;
 tgk2_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, tgk2_create_effect, count_veh_id(tgk2))
{
1: tgk2_create_effect_1RND;
 tgk2_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, tgk2_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 65 * (100 - speed_penalty_percent) / 100 : 65)
{ return; }
switch (FEAT_TRAINS, SELF, tgk2_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(tgk2), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, tgk2_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(tgk2), 0), STORE_TEMP(vehicle_type_id == tgk2, 1) ])
{ tgk2_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, tgk2_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 tgk2_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, tgk2_running_cost_factor,
[ STORE_TEMP(10, 0), // Моторы
   STORE_TEMP(1, 1), // Бригада
   STORE_TEMP(3, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(2, 4), // ТО
   STORE_TEMP(0, 5), // Сертификация
   STORE_TEMP(65, 6), // Скорость
   STORE_TEMP(28, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 17
switch (FEAT_TRAINS, SELF, tgk2_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1960 << 16), 0x101), STORE_TEMP(1996 | (string(STR_PURCHASE_HINT_FACTORY_KALUGA) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, tgk2_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KALUGA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, tgk2_additional_text, current_year <= 1996)
{
1: tgk2_additional_text_hidden;
 tgk2_additional_text_shown;
}
item (FEAT_TRAINS, tgk2, 511)
{
property
{
name: string(STR_NAME_TGK2);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1960 - delta_age, 1, 1);
 model_life: 1996 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1960 -1996 -2 < retire_early_default ? 1996 -1960 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1960 -1996 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1960 -1996 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 2 > 255 ? 255 : 2;
 length: 4;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (130 * 0.9865);
 weight: (28) ton;
 tractive_effort_coefficient: (((98.0))/((28))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
    variant_group: tgk;
 extra_flags: bitmask(VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
}
graphics
{
additional_text: tgk2_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: tgk2_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: tgk2_cargo_subtype_text;
          colour_mapping: tgk2_colour_mapping;
           create_effect: tgk2_create_effect;
                 default: tgk2_sprites;
                purchase: tgk2_purchase_sprites;
          purchase_speed: return 65;
     running_cost_factor: tgk2_running_cost_factor;
                   speed: tgk2_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, tgk2)
{
property
{
name: string(STR_LONGNAME_TGK2);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, tgk2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, tgk2)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, tgk2)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, tgk2)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, tgk2)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// te33a
spriteset (te33a_v1_purchase_graphics_ico, "src/diesel/te33a.png")
{
new_purchase_template(0, 0)
}
spriteset (te33a_v1_purchase_graphics_noico, "src/diesel/te33a.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te33a_v1_purchase_sprites, enable_icons)
{
1: te33a_v1_purchase_graphics_ico;
 te33a_v1_purchase_graphics_noico;
}
spriteset (te33a_b2010_notpowered_sprites_left, "src/diesel/te33a.png")
{
s12_template(32, 40, 0)
}
spriteset (te33a_b2010_loading_sprites_left, "src/diesel/te33a.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (te33a_b2010_traveling_sprites_left, "src/diesel/te33a.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup te33a_b2010_normal_sprites_left
{
loading: te33a_b2010_loading_sprites_left;
 loaded: te33a_b2010_traveling_sprites_left;
}
spriteset (te33a_b2010_notpowered_sprites_right, "src/diesel/te33a.png")
{
s12_r_template(32, 40, 0)
}
spriteset (te33a_b2010_loading_sprites_right, "src/diesel/te33a.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (te33a_b2010_traveling_sprites_right, "src/diesel/te33a.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup te33a_b2010_normal_sprites_right
{
loading: te33a_b2010_loading_sprites_right;
 loaded: te33a_b2010_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_b2010_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_b2010_normal_sprites_left;
 te33a_b2010_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33a_b2010_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_b2010_normal_sprites_right;
 te33a_b2010_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33a_b2010_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_b2010_sprites_left2;
 1: te33a_b2010_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33a_b2010_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_b2010_sprites_left1;
 128: te33a_b2010_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33a_b2010_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_b2010_sprites_right2;
 1: te33a_b2010_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33a_b2010_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_b2010_sprites_right1;
 128: te33a_b2010_sprites_right1;
}
spriteset (te33a_v2_purchase_graphics_ico, "src/diesel/te33a-a2010.png")
{
new_purchase_template(0, 0)
}
spriteset (te33a_v2_purchase_graphics_noico, "src/diesel/te33a-a2010.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, te33a_v2_purchase_sprites, enable_icons)
{
1: te33a_v2_purchase_graphics_ico;
 te33a_v2_purchase_graphics_noico;
}
spriteset (te33a_v2_notpowered_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 40, 0)
}
spriteset (te33a_v2_loading_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (te33a_v2_traveling_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup te33a_v2_normal_sprites_left
{
loading: te33a_v2_loading_sprites_left;
 loaded: te33a_v2_traveling_sprites_left;
}
spriteset (te33a_v2_notpowered_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32, 40, 0)
}
spriteset (te33a_v2_loading_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (te33a_v2_traveling_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup te33a_v2_normal_sprites_right
{
loading: te33a_v2_loading_sprites_right;
 loaded: te33a_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v2_normal_sprites_left;
 te33a_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33a_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v2_normal_sprites_right;
 te33a_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33a_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v2_sprites_left2;
 1: te33a_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v2_sprites_left1;
 128: te33a_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33a_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v2_sprites_right2;
 1: te33a_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v2_sprites_right1;
 128: te33a_v2_sprites_right1;
}
spriteset (te33a_v3_notpowered_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 241, 0)
}
spriteset (te33a_v3_loading_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (te33a_v3_traveling_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup te33a_v3_normal_sprites_left
{
loading: te33a_v3_loading_sprites_left;
 loaded: te33a_v3_traveling_sprites_left;
}
spriteset (te33a_v3_notpowered_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32, 241, 0)
}
spriteset (te33a_v3_loading_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 241 +67, 0)
}
spriteset (te33a_v3_traveling_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 241 +134, 0)
}
spritegroup te33a_v3_normal_sprites_right
{
loading: te33a_v3_loading_sprites_right;
 loaded: te33a_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v3_normal_sprites_left;
 te33a_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33a_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v3_normal_sprites_right;
 te33a_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33a_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v3_sprites_left2;
 1: te33a_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v3_sprites_left1;
 128: te33a_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33a_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v3_sprites_right2;
 1: te33a_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v3_sprites_right1;
 128: te33a_v3_sprites_right1;
}
spriteset (te33a_v4_notpowered_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 442, 0)
}
spriteset (te33a_v4_loading_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 442 +67, 0)
}
spriteset (te33a_v4_traveling_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 442 +134, 0)
}
spritegroup te33a_v4_normal_sprites_left
{
loading: te33a_v4_loading_sprites_left;
 loaded: te33a_v4_traveling_sprites_left;
}
spriteset (te33a_v4_notpowered_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32, 442, 0)
}
spriteset (te33a_v4_loading_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 442 +67, 0)
}
spriteset (te33a_v4_traveling_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 442 +134, 0)
}
spritegroup te33a_v4_normal_sprites_right
{
loading: te33a_v4_loading_sprites_right;
 loaded: te33a_v4_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_v4_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v4_normal_sprites_left;
 te33a_v4_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33a_v4_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v4_normal_sprites_right;
 te33a_v4_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33a_v4_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v4_sprites_left2;
 1: te33a_v4_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v4_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v4_sprites_left1;
 128: te33a_v4_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33a_v4_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v4_sprites_right2;
 1: te33a_v4_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v4_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v4_sprites_right1;
 128: te33a_v4_sprites_right1;
}
spriteset (te33a_v5_notpowered_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 643, 0)
}
spriteset (te33a_v5_loading_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 643 +67, 0)
}
spriteset (te33a_v5_traveling_sprites_left, "src/diesel/te33a-a2010.png")
{
s12_template(32, 643 +134, 0)
}
spritegroup te33a_v5_normal_sprites_left
{
loading: te33a_v5_loading_sprites_left;
 loaded: te33a_v5_traveling_sprites_left;
}
spriteset (te33a_v5_notpowered_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32, 643, 0)
}
spriteset (te33a_v5_loading_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 643 +67, 0)
}
spriteset (te33a_v5_traveling_sprites_right, "src/diesel/te33a-a2010.png")
{
s12_r_template(32 +415, 643 +134, 0)
}
spritegroup te33a_v5_normal_sprites_right
{
loading: te33a_v5_loading_sprites_right;
 loaded: te33a_v5_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_v5_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v5_normal_sprites_left;
 te33a_v5_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33a_v5_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33a_v5_normal_sprites_right;
 te33a_v5_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33a_v5_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v5_sprites_left2;
 1: te33a_v5_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v5_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v5_sprites_left1;
 128: te33a_v5_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33a_v5_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33a_v5_sprites_right2;
 1: te33a_v5_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33a_v5_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33a_v5_sprites_right1;
 128: te33a_v5_sprites_right1;
}
spriteset (te33ac_v1_notpowered_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 40, 0)
}
spriteset (te33ac_v1_loading_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 40 +67, 0)
}
spriteset (te33ac_v1_traveling_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 40 +134, 0)
}
spritegroup te33ac_v1_normal_sprites_left
{
loading: te33ac_v1_loading_sprites_left;
 loaded: te33ac_v1_traveling_sprites_left;
}
spriteset (te33ac_v1_notpowered_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32, 40, 0)
}
spriteset (te33ac_v1_loading_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32 +415, 40 +67, 0)
}
spriteset (te33ac_v1_traveling_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32 +415, 40 +134, 0)
}
spritegroup te33ac_v1_normal_sprites_right
{
loading: te33ac_v1_loading_sprites_right;
 loaded: te33ac_v1_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33ac_v1_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33ac_v1_normal_sprites_left;
 te33ac_v1_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33ac_v1_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33ac_v1_normal_sprites_right;
 te33ac_v1_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v1_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33ac_v1_sprites_left2;
 1: te33ac_v1_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v1_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33ac_v1_sprites_left1;
 128: te33ac_v1_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v1_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33ac_v1_sprites_right2;
 1: te33ac_v1_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v1_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33ac_v1_sprites_right1;
 128: te33ac_v1_sprites_right1;
}
spriteset (te33ac_v2_notpowered_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 241, 0)
}
spriteset (te33ac_v2_loading_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 241 +67, 0)
}
spriteset (te33ac_v2_traveling_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 241 +134, 0)
}
spritegroup te33ac_v2_normal_sprites_left
{
loading: te33ac_v2_loading_sprites_left;
 loaded: te33ac_v2_traveling_sprites_left;
}
spriteset (te33ac_v2_notpowered_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32, 241, 0)
}
spriteset (te33ac_v2_loading_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32 +415, 241 +67, 0)
}
spriteset (te33ac_v2_traveling_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32 +415, 241 +134, 0)
}
spritegroup te33ac_v2_normal_sprites_right
{
loading: te33ac_v2_loading_sprites_right;
 loaded: te33ac_v2_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33ac_v2_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33ac_v2_normal_sprites_left;
 te33ac_v2_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33ac_v2_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33ac_v2_normal_sprites_right;
 te33ac_v2_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v2_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33ac_v2_sprites_left2;
 1: te33ac_v2_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v2_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33ac_v2_sprites_left1;
 128: te33ac_v2_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v2_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33ac_v2_sprites_right2;
 1: te33ac_v2_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v2_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33ac_v2_sprites_right1;
 128: te33ac_v2_sprites_right1;
}
spriteset (te33ac_v3_notpowered_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 442, 0)
}
spriteset (te33ac_v3_loading_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 442 +67, 0)
}
spriteset (te33ac_v3_traveling_sprites_left, "src/diesel/te33ac.png")
{
s12_template(32, 442 +134, 0)
}
spritegroup te33ac_v3_normal_sprites_left
{
loading: te33ac_v3_loading_sprites_left;
 loaded: te33ac_v3_traveling_sprites_left;
}
spriteset (te33ac_v3_notpowered_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32, 442, 0)
}
spriteset (te33ac_v3_loading_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32 +415, 442 +67, 0)
}
spriteset (te33ac_v3_traveling_sprites_right, "src/diesel/te33ac.png")
{
s12_r_template(32 +415, 442 +134, 0)
}
spritegroup te33ac_v3_normal_sprites_right
{
loading: te33ac_v3_loading_sprites_right;
 loaded: te33ac_v3_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33ac_v3_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33ac_v3_normal_sprites_left;
 te33ac_v3_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33ac_v3_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: te33ac_v3_normal_sprites_right;
 te33ac_v3_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v3_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33ac_v3_sprites_left2;
 1: te33ac_v3_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v3_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33ac_v3_sprites_left1;
 128: te33ac_v3_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v3_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: te33ac_v3_sprites_right2;
 1: te33ac_v3_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, te33ac_v3_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: te33ac_v3_sprites_right1;
 128: te33ac_v3_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, te33a_purchase_sprites, current_year >= 2010)
{
0: te33a_v1_purchase_sprites;
 te33a_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, te33a_a2010_sprites_left,
  cargo_subtype)
{
0: te33a_v2_sprites_left;
                          1: te33a_v3_sprites_left;
                          2: te33a_v4_sprites_left;
                          3: te33a_v5_sprites_left;
  37: te33a_v2_sprites_left;
                       0xE0: te33ac_v1_sprites_left;
                       0xE1: te33ac_v2_sprites_left;
                       0xE2: te33ac_v3_sprites_left;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, te33a_a2010_sprites_right,
  cargo_subtype)
{
0: te33a_v2_sprites_right;
                          1: te33a_v3_sprites_right;
                          2: te33a_v4_sprites_right;
                          3: te33a_v5_sprites_right;
  37: te33a_v2_sprites_right;
                       0xE0: te33ac_v1_sprites_right;
                       0xE1: te33ac_v2_sprites_right;
                       0xE2: te33ac_v3_sprites_right;
     align_12_sprites;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_left, build_year >= 2010)
{
0: te33a_b2010_sprites_left;
 te33a_a2010_sprites_left;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_right, build_year >= 2010)
{
0: te33a_b2010_sprites_right;
 te33a_a2010_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) || (position_in_consist == 0) ])
{
1: te33a_sprites_left;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te33a) + 1) % 2))
{
1: te33a_sprites_2l;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_old;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_16;
 te33a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_14;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_12;
 te33a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_10;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_8;
 te33a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_6;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_sprites_4;
 te33a_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (3 + 1)) < 3])
{
1: te33a_sprites_left;
 te33a_sprites_right;
}
switch (FEAT_TRAINS, PARENT, te33a_sprites_start_sp, count_veh_id(te33a))
{
1: te33a_sprites_1RND;
 te33a_sprites_start;
}
switch (FEAT_TRAINS, SELF, te33a_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ te33a_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, te33a_sprites_parent, [ STORE_TEMP(count_veh_id(te33a), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ te33a_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, te33a_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 te33a_sprites_parent;
}
switch (FEAT_TRAINS, SELF, te33a_colour_mapping,
  cargo_subtype)
{
0: return ttd_cc2 + 0x41;
                          1: return ttd_cc2 + 0x43;
                          2: return ttd_cc2 + 0x42;
                          3: return ttd_cc2 + 0x44;
  37: return ttd_cc2 + 0x41;
                       0xE0: return ttd_cc2 + 0x41;
 // LV_KAZAKHSTAN_TEMIR_ZHOLY
                       0xE1: return ttd_cc2 + 0x45;
 // LV_UKRAINIAN_RAILWAY
                       0xE2: return ttdall_cc + 0x92;
 // LV_RAILWAY_MOLDOVA
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, te33a_a2010_b2013_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_LV_TAJIK_RAILWAYS);
 2: return string(STR_REFIT_LV_AZERBAIJAN_RAILWAYS);
 3: return string(STR_REFIT_UZ_IVANOFRANKIVSKCEMENT);
 return string(STR_REFIT_LV_KAZAKHSTAN_TEMIR_ZHOLY);
}
switch (FEAT_TRAINS, SELF, te33a_a2010_a2013_cargo_subtype_text, cargo_subtype)
{
0xE0: return string(STR_REFIT_FACTORY_GENERAL_TYPE, string(STR_NAME_TE33AC), string(STR_REFIT_LV_KAZAKHSTAN_TEMIR_ZHOLY));
 0xE1: return string(STR_REFIT_FACTORY_GENERAL_TYPE, string(STR_NAME_TE33AC), string(STR_REFIT_LV_UKRAINIAN_RAILWAY));
 0xE2: return string(STR_REFIT_FACTORY_GENERAL_TYPE, string(STR_NAME_TE33AC), string(STR_REFIT_LV_CALEA_FERATA_MOLDOVA));
 te33a_a2010_b2013_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te33a_a2010_cargo_subtype_text, ((build_year >= 2013) || (date_of_last_service >= date(2013,1,1))))
{
0: te33a_a2010_b2013_cargo_subtype_text;
 te33a_a2010_a2013_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te33a_cargo_subtype_text, build_year >= 2010)
{
0: return CB_RESULT_NO_TEXT;
 te33a_a2010_cargo_subtype_text;
}
switch (FEAT_TRAINS, SELF, te33a_refit_cost, ((extra_callback_info1 & 0xFF00) >= (0xE0 << 8)) + ((cargo_subtype >= 0xE0) * 2))
{
1: return 1;
 return 0 | CB_RESULT_AUTOREFIT;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 3, 0, 12), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) || (position_in_consist == 0) ])
{
1: te33a_create_effect_sprites_left;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(te33a) + 1) % 2))
{
1: te33a_create_effect_sprites_2l;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_old;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_16;
 te33a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_14;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_12;
 te33a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_10;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_8;
 te33a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_6;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == te33a) ])
{
1: te33a_create_effect_sprites_4;
 te33a_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, te33a_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (3 + 1)) < 3])
{
1: te33a_create_effect_sprites_left;
 te33a_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, te33a_create_effect, count_veh_id(te33a))
{
1: te33a_create_effect_1RND;
 te33a_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, te33a_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 120 * (100 - speed_penalty_percent) / 100 : 120)
{ return; }
switch (FEAT_TRAINS, SELF, te33a_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(te33a), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 3)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, te33a_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(te33a), 0), STORE_TEMP(vehicle_type_id == te33a, 1) ])
{ te33a_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, te33a_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 te33a_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, te33a_running_cost_factor,
[ STORE_TEMP(919, 0), // Моторы
   STORE_TEMP(129, 1), // Бригада
   STORE_TEMP(323, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(226, 4), // ТО
   STORE_TEMP(16, 5), // Сертификация
   STORE_TEMP(120, 6), // Скорость
   STORE_TEMP(138, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 1613
switch (FEAT_TRAINS, SELF, te33a_b2013_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_3) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2009 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ASTANA), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, te33a_b2013_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_3) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ASTANA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, te33a_b2013_additional_text, current_year <= 2023)
{
1: te33a_b2013_additional_text_hidden;
 te33a_b2013_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te33a_a2013_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_3) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROM) | (2013 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ASTANA) | (string(STR_PURCHASE_HINT_UPGRADE) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT);
}
switch (FEAT_TRAINS, SELF, te33a_a2013_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_3) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_ASTANA) | (string(STR_PURCHASE_HINT_UPGRADE) << 16), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_COMMENT_NODATES);
}
switch (FEAT_TRAINS, SELF, te33a_a2013_additional_text, current_year <= 2023)
{
1: te33a_a2013_additional_text_hidden;
 te33a_a2013_additional_text_shown;
}
switch (FEAT_TRAINS, SELF, te33a_additional_text, current_year >= 2013)
{
0: te33a_b2013_additional_text;
 te33a_a2013_additional_text;
}
item (FEAT_TRAINS, te33a, 623)
{
property
{
name: string(STR_NAME_TE33A);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(2009 - delta_age, 1, 1);
 model_life: 2050 >= 2050 ? VEHICLE_NEVER_EXPIRES : (2009 -2050 -2 < retire_early_default ? 2050 -2009 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 2009 -2050 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 2009 -2050 -1+retire_late_default;
 vehicle_life: 30;
 reliability_decay: 10;
 cost_factor: 165 > 255 ? 255 : 165;
 length: 8;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (3951 * 0.9865);
 weight: (138) ton;
 tractive_effort_coefficient: (((534.0))/((138))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R1;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: te33a_additional_text;
        articulated_part: articulated_part_dummy4;
    bitmask_vehicle_info: te33a_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: te33a_cargo_subtype_text;
          colour_mapping: te33a_colour_mapping;
           create_effect: te33a_create_effect;
                 default: te33a_sprites;
                purchase: te33a_purchase_sprites;
          purchase_speed: return 120;
              refit_cost: te33a_refit_cost;
     running_cost_factor: te33a_running_cost_factor;
                   speed: te33a_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, te33a)
{
property
{
name: string(STR_LONGNAME_TE33A);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, te33a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, te33a)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, te33a)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, te33a)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, te33a)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// vm20
spriteset (vm20_purchase_graphics_ico, "src/diesel/vm20.png")
{
new_purchase_template(0, 0)
}
spriteset (vm20_purchase_graphics_noico, "src/diesel/vm20.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, vm20_purchase_sprites, enable_icons)
{
1: vm20_purchase_graphics_ico;
 vm20_purchase_graphics_noico;
}
spriteset (vm20_notpowered_sprites_left, "src/diesel/vm20.png")
{
s7_template(32, 40, 0)
}
spriteset (vm20_loading_sprites_left, "src/diesel/vm20.png")
{
s7_template(32, 40 +67, 0)
}
spriteset (vm20_traveling_sprites_left, "src/diesel/vm20.png")
{
s7_template(32, 40 +134, 0)
}
spritegroup vm20_normal_sprites_left
{
loading: vm20_loading_sprites_left;
 loaded: vm20_traveling_sprites_left;
}
spriteset (vm20_sprites_right, "src/diesel/vm20.png")
{
s7_r_template(32, 40, 0)
}
switch (FEAT_TRAINS, SELF, vm20_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: vm20_normal_sprites_left;
 vm20_notpowered_sprites_left;
}
random_switch (FEAT_TRAINS, SELF, vm20_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: vm20_sprites_left2;
 1: vm20_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, vm20_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: vm20_sprites_left1;
 128: vm20_sprites_left1;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) || (position_in_consist == 0) ])
{
1: vm20_sprites_left;
 vm20_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_old, ((LOAD_TEMP(0) - count_veh_id(vm20) + 1) % 2))
{
1: vm20_sprites_2l;
 vm20_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_old;
 vm20_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_16;
 vm20_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_14;
 vm20_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_12;
 vm20_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_10;
 vm20_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_8;
 vm20_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_6;
 vm20_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_sprites_4;
 vm20_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ vm20_sprites_start; }
switch (FEAT_TRAINS, PARENT, vm20_sprites_parent, [ STORE_TEMP(count_veh_id(vm20), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ vm20_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, vm20_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 vm20_sprites_parent;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_left,
  [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 1, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 1, 1, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_right,
  [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -3, -1, 11), 0x100), STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, -1, 11), 0x101)])
{ return 2; }
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) || (position_in_consist == 0) ])
{
1: vm20_create_effect_sprites_left;
 vm20_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(vm20) + 1) % 2))
{
1: vm20_create_effect_sprites_2l;
 vm20_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_old;
 vm20_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_16;
 vm20_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_14;
 vm20_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_12;
 vm20_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_10;
 vm20_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_8;
 vm20_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_6;
 vm20_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vm20_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vm20) ])
{
1: vm20_create_effect_sprites_4;
 vm20_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vm20_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 72 * (100 - speed_penalty_percent) / 100 : 72)
{ return; }
switch (FEAT_TRAINS, SELF, vm20_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vm20), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, vm20_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(vm20), 0), STORE_TEMP(vehicle_type_id == vm20, 1) ])
{ vm20_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, vm20_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 vm20_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, vm20_running_cost_factor,
[ STORE_TEMP(84, 0), // Моторы
   STORE_TEMP(12, 1), // Бригада
   STORE_TEMP(29, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(21, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(72, 6), // Скорость
   STORE_TEMP(122, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 115
switch (FEAT_TRAINS, SELF, vm20_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_IN) | (1934 << 16), 0x101), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, vm20_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_PASSENGER_FREIGHT_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FACTORY_KOLOMNA), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, vm20_additional_text, current_year <= 1934)
{
1: vm20_additional_text_hidden;
 vm20_additional_text_shown;
}
item (FEAT_TRAINS, vm20, 723)
{
property
{
name: string(STR_NAME_VM20);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1934 - delta_age, 1, 1);
 model_life: 1934 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1934 -1934 -2 < retire_early_default ? 1934 -1934 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1934 -1934 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1934 -1934 -1+retire_late_default;
 vehicle_life: 15;
 reliability_decay: 10;
 cost_factor: 15 > 255 ? 255 : 15;
 length: 6;
    cargo_allow_refit: [MAIL];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_PASSENGER;
    power: int (815 * 0.9865);
 weight: (123) ton;
 tractive_effort_coefficient: (((98.0))/((123))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: vm20_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: vm20_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
          colour_mapping: any_cc_colour;
           create_effect: vm20_create_effect_sprites_start;
                 default: vm20_sprites;
                purchase: vm20_purchase_sprites;
          purchase_speed: return 72;
     running_cost_factor: vm20_running_cost_factor;
                   speed: vm20_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, vm20)
{
property
{
name: string(STR_LONGNAME_VM20);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, vm20)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, vm20)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, vm20)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, vm20)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, vm20)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// vme1
spriteset (vme1_v1_purchase_graphics_ico, "src/diesel/vme1.png")
{
new_purchase_template(0, 0)
}
spriteset (vme1_v1_purchase_graphics_noico, "src/diesel/vme1.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, vme1_v1_purchase_sprites, enable_icons)
{
1: vme1_v1_purchase_graphics_ico;
 vme1_v1_purchase_graphics_noico;
}
spriteset (vme1_b1959_notpowered_sprites_left, "src/diesel/vme1.png")
{
s8_template(32, 40, 0)
}
spriteset (vme1_b1959_loading_sprites_left, "src/diesel/vme1.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (vme1_b1959_traveling_sprites_left, "src/diesel/vme1.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup vme1_b1959_normal_sprites_left
{
loading: vme1_b1959_loading_sprites_left;
 loaded: vme1_b1959_traveling_sprites_left;
}
spriteset (vme1_b1959_notpowered_sprites_right, "src/diesel/vme1.png")
{
s8_r_template(32, 40, 0)
}
spriteset (vme1_b1959_loading_sprites_right, "src/diesel/vme1.png")
{
s8_r_template(32 +415, 40 +67, 0)
}
spriteset (vme1_b1959_traveling_sprites_right, "src/diesel/vme1.png")
{
s8_r_template(32 +415, 40 +134, 0)
}
spritegroup vme1_b1959_normal_sprites_right
{
loading: vme1_b1959_loading_sprites_right;
 loaded: vme1_b1959_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_b1959_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: vme1_b1959_normal_sprites_left;
 vme1_b1959_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, vme1_b1959_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: vme1_b1959_normal_sprites_right;
 vme1_b1959_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, vme1_b1959_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: vme1_b1959_sprites_left2;
 1: vme1_b1959_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, vme1_b1959_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: vme1_b1959_sprites_left1;
 128: vme1_b1959_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, vme1_b1959_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: vme1_b1959_sprites_right2;
 1: vme1_b1959_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, vme1_b1959_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: vme1_b1959_sprites_right1;
 128: vme1_b1959_sprites_right1;
}
spriteset (vme1_v2_purchase_graphics_ico, "src/diesel/vme1-a1959.png")
{
new_purchase_template(0, 0)
}
spriteset (vme1_v2_purchase_graphics_noico, "src/diesel/vme1-a1959.png")
{
new_purchase_template_noico(0, 0)
}
switch (FEAT_TRAINS, SELF, vme1_v2_purchase_sprites, enable_icons)
{
1: vme1_v2_purchase_graphics_ico;
 vme1_v2_purchase_graphics_noico;
}
spriteset (vme1_a1959_notpowered_sprites_left, "src/diesel/vme1-a1959.png")
{
s8_template(32, 40, 0)
}
spriteset (vme1_a1959_loading_sprites_left, "src/diesel/vme1-a1959.png")
{
s8_template(32, 40 +67, 0)
}
spriteset (vme1_a1959_traveling_sprites_left, "src/diesel/vme1-a1959.png")
{
s8_template(32, 40 +134, 0)
}
spritegroup vme1_a1959_normal_sprites_left
{
loading: vme1_a1959_loading_sprites_left;
 loaded: vme1_a1959_traveling_sprites_left;
}
spriteset (vme1_a1959_notpowered_sprites_right, "src/diesel/vme1-a1959.png")
{
s8_r_template(32, 40, 0)
}
spriteset (vme1_a1959_loading_sprites_right, "src/diesel/vme1-a1959.png")
{
s8_r_template(32 +415, 40 +67, 0)
}
spriteset (vme1_a1959_traveling_sprites_right, "src/diesel/vme1-a1959.png")
{
s8_r_template(32 +415, 40 +134, 0)
}
spritegroup vme1_a1959_normal_sprites_right
{
loading: vme1_a1959_loading_sprites_right;
 loaded: vme1_a1959_traveling_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_a1959_sprites_left2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: vme1_a1959_normal_sprites_left;
 vme1_a1959_notpowered_sprites_left;
}
switch (FEAT_TRAINS, SELF, vme1_a1959_sprites_right2, (position_in_consist == 0) && (!vehicle_is_in_depot))
{
1: vme1_a1959_normal_sprites_right;
 vme1_a1959_notpowered_sprites_right;
}
random_switch (FEAT_TRAINS, SELF, vme1_a1959_sprites_left1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: vme1_a1959_sprites_left2;
 1: vme1_a1959_sprites_left2;
}
random_switch (FEAT_TRAINS, SELF, vme1_a1959_sprites_left, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: vme1_a1959_sprites_left1;
 128: vme1_a1959_sprites_left1;
}
random_switch (FEAT_TRAINS, SELF, vme1_a1959_sprites_right1, bitmask(TRIGGER_VEHICLE_SERVICE))
{
1: vme1_a1959_sprites_right2;
 1: vme1_a1959_sprites_right2;
}
random_switch (FEAT_TRAINS, SELF, vme1_a1959_sprites_right, bitmask(TRIGGER_VEHICLE_UNLOAD_ALL, TRIGGER_VEHICLE_ANY_LOAD, TRIGGER_ALL_NEEDED))
{
independent: vme1_a1959_sprites_right1;
 128: vme1_a1959_sprites_right1;
}
switch (FEAT_TRAINS, PARENT, vme1_purchase_sprites, current_year >= 1959)
{
0: vme1_v1_purchase_sprites;
 vme1_v2_purchase_sprites;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_left, build_year >= 1959)
{
0: vme1_b1959_sprites_left;
 vme1_a1959_sprites_left;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_right, build_year >= 1959)
{
0: vme1_b1959_sprites_right;
 vme1_a1959_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) || (position_in_consist == 0) ])
{
1: vme1_sprites_left;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_old, ((LOAD_TEMP(0) - count_veh_id(vme1) + 1) % 2))
{
1: vme1_sprites_2l;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_old;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_16;
 vme1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_14;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_12;
 vme1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_10;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_8;
 vme1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_6;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_sprites_4;
 vme1_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: vme1_sprites_left;
 vme1_sprites_right;
}
switch (FEAT_TRAINS, PARENT, vme1_sprites_start_sp, count_veh_id(vme1))
{
1: vme1_sprites_1RND;
 vme1_sprites_start;
}
switch (FEAT_TRAINS, SELF, vme1_sprites_selfpos, [ STORE_TEMP( (var[0x9F, 0, 0x07] == 3) ? var[0x9C, 0, 0x0F] & 3 : (var[0x9F, 0, 0x07] == 7) ? (3 - var[0x9C, 0, 0x0F] & 3) : (var[0x9F, 0, 0x07] > 3) ? var[0x9A, 0, 0x0F] & 3 : (3 - var[0x9A, 0, 0x0F] & 3), 3) ])
{ vme1_sprites_start_sp; }
switch (FEAT_TRAINS, PARENT, vme1_sprites_parent, [ STORE_TEMP(count_veh_id(vme1), 0), STORE_TEMP(current_speed, 1), STORE_TEMP(vehicle_type_id, 4) ])
{ vme1_sprites_selfpos; }
switch (FEAT_TRAINS, SELF, vme1_sprites, ((extra_callback_info1 & 0xFF) >= 0x20) || (((extra_callback_info1 & 0xFF) == 0) && (var[0x62, 7, 1, 1] != 0)))
{
1: dummy_sprites;
 vme1_sprites_parent;
}
switch (FEAT_TRAINS, SELF, vme1_colour_mapping,
  cargo_subtype)
{
0: return ttdall_cc + 0x53;
  1: return ttdall_cc + 0x59;
  2: return ttdall_cc + 0xB3;
     return CB_FAILED;
}
switch (FEAT_TRAINS, SELF, vme1_cargo_subtype_text, cargo_subtype)
{
1: return string(STR_REFIT_TTD_59);
 2: return string(STR_REFIT_TTD_B3);
 return string(STR_REFIT_TTD_53);
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_left, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -1, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_right, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 10), 0x100))
{ return 1; }
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_2l, [ STORE_TEMP(2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) || (position_in_consist == 0) ])
{
1: vme1_create_effect_sprites_left;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_old, ((LOAD_TEMP(0) - count_veh_id(vme1) + 1) % 2))
{
1: vme1_create_effect_sprites_2l;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_16, [ STORE_TEMP(-16, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_old;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_14, [ STORE_TEMP(-14, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_16;
 vme1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_12, [ STORE_TEMP(-12, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_14;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_10, [ STORE_TEMP(-10, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_12;
 vme1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_8, [ STORE_TEMP(-8, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_10;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_6, [ STORE_TEMP(-6, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_8;
 vme1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_4, [ STORE_TEMP(-4, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_6;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_sprites_start, [ STORE_TEMP(-2, 0x10F), (var[0x61, 0, 0xFFFF, 0xC6] == vme1) ])
{
1: vme1_create_effect_sprites_4;
 vme1_create_effect_sprites_2l;
}
switch (FEAT_TRAINS, SELF, vme1_create_effect_1RND, [ STORE_TEMP(1, 0x10F), (var[0x61, 8, 0xFF, 0x5F] % (1 + 3)) < 1])
{
1: vme1_create_effect_sprites_left;
 vme1_create_effect_sprites_right;
}
switch (FEAT_TRAINS, PARENT, vme1_create_effect, count_veh_id(vme1))
{
1: vme1_create_effect_1RND;
 vme1_create_effect_sprites_start;
}
switch (FEAT_TRAINS, SELF, vme1_b1961_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vme1), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 3)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, vme1_b1961_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(vme1), 0), STORE_TEMP(vehicle_type_id == vme1, 1) ])
{ vme1_b1961_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, vme1_b1961_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 vme1_b1961_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, SELF, vme1_a1961_bitmask_vehicle_info3, [ STORE_TEMP(LOAD_TEMP(0) - count_veh_id(vme1), 0), (LOAD_TEMP(1) && (position_in_consist == 2 * LOAD_TEMP(0)) && LOAD_TEMP(0) < 2)])
{
1: return 0;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, vme1_a1961_bitmask_vehicle_info2, [ STORE_TEMP(count_veh_id(vme1), 0), STORE_TEMP(vehicle_type_id == vme1, 1) ])
{ vme1_a1961_bitmask_vehicle_info3; }
switch (FEAT_TRAINS, SELF, vme1_a1961_bitmask_vehicle_info, (position_in_consist == 0) || (vehicle_is_not_powered) || (position_in_articulated_veh > 0))
{
1: return 0;
 vme1_a1961_bitmask_vehicle_info2;
}
switch (FEAT_TRAINS, PARENT, vme1_bitmask_vehicle_info_change2, build_year >= 1961)
{
0: vme1_b1961_bitmask_vehicle_info;
 return bitmask(0);
}
switch (FEAT_TRAINS, PARENT, vme1_bitmask_vehicle_info_change1, build_year >= 1961)
{
0: return bitmask(0);
 vme1_a1961_bitmask_vehicle_info;
}
switch (FEAT_TRAINS, SELF, vme1_bitmask_vehicle_info, build_year >= 1961)
{
0: vme1_bitmask_vehicle_info_change2;
 vme1_bitmask_vehicle_info_change1;
}
switch (FEAT_TRAINS, SELF, vme1_running_cost_factor,
[ STORE_TEMP(39, 0), // Моторы
   STORE_TEMP(5, 1), // Бригада
   STORE_TEMP(14, 2), // Износ
   STORE_TEMP(0, 3), // Сопровождение
   STORE_TEMP(10, 4), // ТО
   STORE_TEMP(1, 5), // Сертификация
   STORE_TEMP(80, 6), // Скорость
   STORE_TEMP(74, 7), // Тара
   STORE_TEMP(LOAD_TEMP(7), 8)]) // Максимальная масса
{ all_running_cost_factor; }
// 68
switch (FEAT_TRAINS, SELF, vme1_speed, (hasbit(bitmask_consist_info, 0)) ? (vehicle_is_not_powered && (position_in_consist == 0)) ? 10 : 80 * (100 - speed_penalty_percent) / 100 : 80)
{ return; }
switch (FEAT_TRAINS, SELF, vme1_additional_text_shown, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP(string(STR_PURCHASE_HINT_FROMTO) | (1958 << 16), 0x101), STORE_TEMP(1962 | ((current_year < 1949 ? string(STR_PURCHASE_HINT_FACTORY_MAVAG) : (current_year < 1959 ? string(STR_PURCHASE_HINT_FACTORY_MAVAG_A1949) : string(STR_PURCHASE_HINT_FACTORY_MAVAG_A1959))) << 16), 0x102)])
{
return string(STR_PURCHASE_HINT_ENGINE);
}
switch (FEAT_TRAINS, SELF, vme1_additional_text_hidden, [ STORE_TEMP(string(STR_PURCHASE_HINT_ENGINE_TYPE_SHUNTING_DIESEL) | (string(STR_PURCHASE_HINT_SECTIONS_1_2) << 16), 0x100), STORE_TEMP((current_year < 1949 ? string(STR_PURCHASE_HINT_FACTORY_MAVAG) : (current_year < 1959 ? string(STR_PURCHASE_HINT_FACTORY_MAVAG_A1949) : string(STR_PURCHASE_HINT_FACTORY_MAVAG_A1959))), 0x101)])
{
return string(STR_PURCHASE_HINT_ENGINE_NODATES);
}
switch (FEAT_TRAINS, SELF, vme1_additional_text, current_year <= 1962)
{
1: vme1_additional_text_hidden;
 vme1_additional_text_shown;
}
item (FEAT_TRAINS, vme1, 731)
{
property
{
name: string(STR_NAME_VME1);
    climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
 introduction_date: date(1958 - delta_age, 1, 1);
 model_life: 1962 >= 2050 ? VEHICLE_NEVER_EXPIRES : (1958 -1962 -2 < retire_early_default ? 1962 -1958 +2+retire_late_default : -retire_early_default+retire_late_default);
 retire_early: 1958 -1962 -2 < retire_early_default ? retire_early_default+1+retire_late_default : 1958 -1962 -1+retire_late_default;
 vehicle_life: 20;
 reliability_decay: 10;
 cost_factor: 9 > 255 ? 255 : 9;
 length: 7;
    cargo_allow_refit: [GOOD];
 cargo_capacity: 1;
 ai_special_flag: AI_FLAG_CARGO;
    power: int (390 * 0.9865);
 weight: (80) ton;
 tractive_effort_coefficient: (((181.4))/((80))/9.8);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 misc_flags: bitmask(TRAIN_FLAG_TILT, TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_SPRITE_STACK);
 track_type: T_R0;
 running_cost_base: RUNNING_COST_DIESEL;
 engine_class: ENGINE_CLASS_DIESEL;
 effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
}
graphics
{
additional_text: vme1_additional_text;
        articulated_part: articulated_part_dummy1;
    bitmask_vehicle_info: vme1_bitmask_vehicle_info;
        can_attach_wagon: any_can_attach_wagon;
          cargo_capacity: return 0;
      cargo_subtype_text: vme1_cargo_subtype_text;
          colour_mapping: vme1_colour_mapping;
           create_effect: vme1_create_effect;
                 default: vme1_sprites;
                purchase: vme1_purchase_sprites;
          purchase_speed: return 80;
     running_cost_factor: vme1_running_cost_factor;
                   speed: vme1_speed;
              start_stop: any_start_stop;
}
}
if (enable_long_names)
{
item (FEAT_TRAINS, vme1)
{
property
{
name: string(STR_LONGNAME_VME1);
}
}
}
if ((cargotype_available("GOOD") == 0) || (cargotype_available("MAIL") == 0))
{
item (FEAT_TRAINS, vme1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
else
{
if (models_default_cargo == 1)
{
item (FEAT_TRAINS, vme1)
{
property
{
cargo_allow_refit: [GOOD];
 default_cargo_type: GOOD;
}
}
}
if (models_default_cargo == 2)
{
item (FEAT_TRAINS, vme1)
{
property
{
cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
}
}
}
if (models_default_cargo == 3)
{
item (FEAT_TRAINS, vme1)
{
property
{
cargo_allow_refit: [MAIL];
 default_cargo_type: MAIL;
}
}
}
}
if (disable_diesel)
{
item (FEAT_TRAINS, vme1)
{
property
{
climates_available: NO_CLIMATE;
}
}
}
// сортировка
  /// sort_vehicles
sort (FEAT_TRAINS,
[
//  модельки
    dummy1, dummy2, dummy3, dummy4, dummy5, dummy6, dummy7,
//  тепловозы
//    пассажирские
      te7, tep10l, tep10, tep60, _2tep60, tep70, tep70u, tep70bs, tep150,
//    грузопассажирские
      schel1, eel2, eel, vm20, diesel_da, diesel_db, te1, te2, tg100, tg102, m62, dm62, _2m62, _2m62u, _3m62u, _3m62u_m,
      _2te10ut, _2te10utk, te33a,
//    грузовые
      te3, te50, te10, _2te10, _2te40, _2te10l, _2te10v, _2te10m, _3te10m, _3te10m_m, _2te10u,
      _3te10u, _3te10u_m, _2te10mk, _2te10s, _4te10s, _4te10s_m, te109, _2te116, _2te116u,
      _2te121, _2te70, _2te25a, _2te25km, _3te25k2m, _3te25k2m_m, tera1, _2te3250,
//    маневровые
      vme1, chme3, chme3t, tem1, tem2, tem2u, tem2um, tem18, tem18dm, tem7, tem7a, tem14, tem9, tem10,
//    промышленные
      _mx, m32, tgk, tgk2, tgm23, tgm23b, tgm23v, tgm23d, tgm3, tgm3a, tgm3b, tgm4, tgm4b, tgm6a, tgm6d,
]);
// #include "diesel-xussr.pnml"
// end
